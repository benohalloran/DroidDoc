{"methods":["void abortConnection() Releases the connection without the option of keep-alive.","void flush() Writes out all pending buffered data over the open connection.","InetAddress getLocalAddress()","int getLocalPort()","HttpConnectionMetrics getMetrics() Returns a collection of connection metrcis","InetAddress getRemoteAddress()","int getRemotePort()","SSLSession getSSLSession() Obtains the SSL session of the underlying connection, if any.","int getSocketTimeout() Returns the socket timeout value.","boolean isMarkedReusable() Indicates whether this connection is in a reusable communication state.","boolean isOpen() Checks if this connection is open.","boolean isResponseAvailable(int timeout) Checks if response data is available from the connection.","boolean isSecure() Indicates whether this connection is secure.","boolean isStale() Checks whether this connection has gone down.","void markReusable() Marks this connection as being in a reusable communication state.","void receiveResponseEntity(HttpResponse response) Receives the next response entity available from this connection and attaches it to an existing HttpResponse object.","HttpResponse receiveResponseHeader() Receives the request line and headers of the next response available from this connection.","void releaseConnection() Releases the connection with the option of keep-alive.","void sendRequestEntity(HttpEntityEnclosingRequest request) Sends the request entity over the connection.","void sendRequestHeader(HttpRequest request) Sends the request line and all headers over the connection.","void setIdleDuration(long duration, TimeUnit unit) Sets the duration that this connection can remain idle before it is reused.","void setSocketTimeout(int timeout) Sets the socket timeout value.","void unmarkReusable() Marks this connection as not being in a reusable state.","final void assertNotAborted() Asserts that the connection has not been aborted.","final void assertValid(OperatedClientConnection wrappedConn) Asserts that there is a wrapped connection to delegate to.","void detach() Detaches this adapter from the wrapped connection.","ClientConnectionManager getManager()","OperatedClientConnection getWrappedConnection()","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface org.apache.http.HttpClientConnection abstract void flush() Writes out all pending buffered data over the open connection. abstract boolean isResponseAvailable(int timeout) Checks if response data is available from the connection. abstract void receiveResponseEntity(HttpResponse response) Receives the next response entity available from this connection and attaches it to an existing HttpResponse object. abstract HttpResponse receiveResponseHeader() Receives the request line and headers of the next response available from this connection. abstract void sendRequestEntity(HttpEntityEnclosingRequest request) Sends the request entity over the connection. abstract void sendRequestHeader(HttpRequest request) Sends the request line and all headers over the connection.","abstract void flush() Writes out all pending buffered data over the open connection.","abstract boolean isResponseAvailable(int timeout) Checks if response data is available from the connection.","abstract void receiveResponseEntity(HttpResponse response) Receives the next response entity available from this connection and attaches it to an existing HttpResponse object.","abstract HttpResponse receiveResponseHeader() Receives the request line and headers of the next response available from this connection.","abstract void sendRequestEntity(HttpEntityEnclosingRequest request) Sends the request entity over the connection.","abstract void sendRequestHeader(HttpRequest request) Sends the request line and all headers over the connection.","From interface org.apache.http.HttpConnection abstract void close() Closes this connection gracefully. abstract HttpConnectionMetrics getMetrics() Returns a collection of connection metrcis abstract int getSocketTimeout() Returns the socket timeout value. abstract boolean isOpen() Checks if this connection is open. abstract boolean isStale() Checks whether this connection has gone down. abstract void setSocketTimeout(int timeout) Sets the socket timeout value. abstract void shutdown() Force-closes this connection.","abstract void close() Closes this connection gracefully.","abstract HttpConnectionMetrics getMetrics() Returns a collection of connection metrcis","abstract int getSocketTimeout() Returns the socket timeout value.","abstract boolean isOpen() Checks if this connection is open.","abstract boolean isStale() Checks whether this connection has gone down.","abstract void setSocketTimeout(int timeout) Sets the socket timeout value.","abstract void shutdown() Force-closes this connection.","From interface org.apache.http.HttpInetConnection abstract InetAddress getLocalAddress() abstract int getLocalPort() abstract InetAddress getRemoteAddress() abstract int getRemotePort()","abstract InetAddress getLocalAddress()","abstract int getLocalPort()","abstract InetAddress getRemoteAddress()","abstract int getRemotePort()","From interface org.apache.http.conn.ConnectionReleaseTrigger abstract void abortConnection() Releases the connection without the option of keep-alive. abstract void releaseConnection() Releases the connection with the option of keep-alive.","abstract void abortConnection() Releases the connection without the option of keep-alive.","abstract void releaseConnection() Releases the connection with the option of keep-alive.","From interface org.apache.http.conn.ManagedClientConnection abstract HttpRoute getRoute() Obtains the current route of this connection. abstract SSLSession getSSLSession() Obtains the SSL session of the underlying connection, if any. abstract Object getState() Returns the state object associated with this connection. abstract boolean isMarkedReusable() Indicates whether this connection is in a reusable communication state. abstract boolean isSecure() Indicates whether this connection is secure. abstract void layerProtocol(HttpContext context, HttpParams params) Layers a new protocol on top of a tunnelled connection. abstract void markReusable() Marks this connection as being in a reusable communication state. abstract void open(HttpRoute route, HttpContext context, HttpParams params) Opens this connection according to the given route. abstract void setIdleDuration(long duration, TimeUnit unit) Sets the duration that this connection can remain idle before it is reused. abstract void setState(Object state) Assigns a state object to this connection. abstract void tunnelProxy(HttpHost next, boolean secure, HttpParams params) Indicates that a tunnel to an intermediate proxy has been established. abstract void tunnelTarget(boolean secure, HttpParams params) Indicates that a tunnel to the target has been established. abstract void unmarkReusable() Marks this connection as not being in a reusable state.","abstract HttpRoute getRoute() Obtains the current route of this connection.","abstract SSLSession getSSLSession() Obtains the SSL session of the underlying connection, if any.","abstract Object getState() Returns the state object associated with this connection.","abstract boolean isMarkedReusable() Indicates whether this connection is in a reusable communication state.","abstract boolean isSecure() Indicates whether this connection is secure.","abstract void layerProtocol(HttpContext context, HttpParams params) Layers a new protocol on top of a tunnelled connection.","abstract void markReusable() Marks this connection as being in a reusable communication state.","abstract void open(HttpRoute route, HttpContext context, HttpParams params) Opens this connection according to the given route.","abstract void setIdleDuration(long duration, TimeUnit unit) Sets the duration that this connection can remain idle before it is reused.","abstract void setState(Object state) Assigns a state object to this connection.","abstract void tunnelProxy(HttpHost next, boolean secure, HttpParams params) Indicates that a tunnel to an intermediate proxy has been established.","abstract void tunnelTarget(boolean secure, HttpParams params) Indicates that a tunnel to the target has been established.","abstract void unmarkReusable() Marks this connection as not being in a reusable state."],"package":"org.apache.http.impl.conn","constants":[],"class":"AbstractClientConnAdapter","constructors":[],"fields":[]}