{"methods":["String absolutePath() Gets the absolute path string of this preference node.","void addNodeChangeListener(NodeChangeListener ncl) Registers a NodeChangeListener instance for this node, which will handle NodeChangeEvents.","void addPreferenceChangeListener(PreferenceChangeListener pcl) Registers a PreferenceChangeListener instance for this node, which will handle PreferenceChangeEvents.","String[] childrenNames() Returns the names of all children of this node or an empty array if this node has no children.","void clear() Removes all preferences of this node.","void exportNode(OutputStream ostream) Exports all of the preferences of this node to a XML document using the given output stream.","void exportSubtree(OutputStream ostream) Exports all of the preferences of this node and all its descendants to a XML document using the given output stream.","void flush() Forces all pending updates to this node and its descendants to be persisted in the backing store.","String get(String key, String deflt) Gets the String value mapped to the given key or its default value if no value is mapped or no backing store is available.","boolean getBoolean(String key, boolean deflt) Gets the boolean value mapped to the given key or its default value if no value is mapped, if the backing store is unavailable, or if the value is invalid.","byte[] getByteArray(String key, byte[] deflt) Gets the byte array value mapped to the given key or its default value if no value is mapped, if the backing store is unavailable, or if the value is an invalid string.","double getDouble(String key, double deflt) Gets the double value mapped to the given key or its default value if no value is mapped, if the backing store is unavailable, or if the value is an invalid string.","float getFloat(String key, float deflt) Gets the float value mapped to the given key or its default value if no value is mapped, if the backing store is unavailable, or if the value is an invalid string.","int getInt(String key, int deflt) Gets the int value mapped to the given key or its default value if no value is mapped, if the backing store is unavailable, or if the value is an invalid string.","long getLong(String key, long deflt) Gets the long value mapped to the given key or its default value if no value is mapped, if the backing store is unavailable, or if the value is an invalid string.","boolean isUserNode() Returns whether this is a user preference node.","String[] keys() Returns all preference keys stored in this node or an empty array if no key was found.","String name() Returns the name of this node.","Preferences node(String name) Returns the preference node with the given path name.","boolean nodeExists(String name) Returns whether the preference node with the given path name exists.","Preferences parent() Returns the parent preference node of this node or null if this node is the root node.","void put(String key, String value) Adds a new preference to this node using the given key and value or updates the value if a preference with the given key already exists.","void putBoolean(String key, boolean value) Adds a new preference with a boolean value to this node using the given key and value or updates the value if a preference with the given key already exists.","void putByteArray(String key, byte[] value) Adds a new preference to this node using the given key and the string form of the given value or updates the value if a preference with the given key already exists.","void putDouble(String key, double value) Adds a new preference to this node using the given key and double value or updates the value if a preference with the given key already exists.","void putFloat(String key, float value) Adds a new preference to this node using the given key and float value or updates the value if a preference with the given key already exists.","void putInt(String key, int value) Adds a new preference to this node using the given key and int value or updates the value if a preference with the given key already exists.","void putLong(String key, long value) Adds a new preference to this node using the given key and long value or updates the value if a preference with the given key already exists.","void remove(String key) Removes the preference mapped to the given key from this node.","void removeNode() Removes this preference node with all its descendants.","void removeNodeChangeListener(NodeChangeListener ncl) Removes the given NodeChangeListener instance from this node.","void removePreferenceChangeListener(PreferenceChangeListener pcl) Removes the given PreferenceChangeListener instance from this node.","void sync() Synchronizes the data of this preference node and its descendants with the back-end preference store.","String toString() Returns a string representation of this node.","final AbstractPreferences[] cachedChildren() Returns an array of all cached child nodes.","abstract AbstractPreferences childSpi(String name) Returns the child preference node with the given name, creating it if it does not exist.","abstract String[] childrenNamesSpi() Returns the names of all of the child nodes of this node or an empty array if this node has no children.","abstract void flushSpi() Flushes changes of this node to the backing store.","AbstractPreferences getChild(String name) Returns the child node with the specified name or null if it doesn't exist.","abstract String getSpi(String key) Gets the preference value mapped to the given key.","boolean isRemoved() Returns whether this node has been removed by invoking the method removeNode().","abstract String[] keysSpi() Returns an array of all preference keys of this node or an empty array if no preferences have been found.","abstract void putSpi(String name, String value) Puts the given key-value pair into this node.","abstract void removeNodeSpi() Removes this node from the preference hierarchy tree.","abstract void removeSpi(String key) Removes the preference with the specified key.","abstract void syncSpi() Synchronizes this node with the backing store.","[Expand] Inherited Methods","From class java.util.prefs.Preferences abstract String absolutePath() Gets the absolute path string of this preference node. abstract void addNodeChangeListener(NodeChangeListener ncl) Registers a NodeChangeListener instance for this node, which will handle NodeChangeEvents. abstract void addPreferenceChangeListener(PreferenceChangeListener pcl) Registers a PreferenceChangeListener instance for this node, which will handle PreferenceChangeEvents. abstract String[] childrenNames() Returns the names of all children of this node or an empty array if this node has no children. abstract void clear() Removes all preferences of this node. abstract void exportNode(OutputStream ostream) Exports all of the preferences of this node to a XML document using the given output stream. abstract void exportSubtree(OutputStream ostream) Exports all of the preferences of this node and all its descendants to a XML document using the given output stream. abstract void flush() Forces all pending updates to this node and its descendants to be persisted in the backing store. abstract String get(String key, String deflt) Gets the String value mapped to the given key or its default value if no value is mapped or no backing store is available. abstract boolean getBoolean(String key, boolean deflt) Gets the boolean value mapped to the given key or its default value if no value is mapped, if the backing store is unavailable, or if the value is invalid. abstract byte[] getByteArray(String key, byte[] deflt) Gets the byte array value mapped to the given key or its default value if no value is mapped, if the backing store is unavailable, or if the value is an invalid string. abstract double getDouble(String key, double deflt) Gets the double value mapped to the given key or its default value if no value is mapped, if the backing store is unavailable, or if the value is an invalid string. abstract float getFloat(String key, float deflt) Gets the float value mapped to the given key or its default value if no value is mapped, if the backing store is unavailable, or if the value is an invalid string. abstract int getInt(String key, int deflt) Gets the int value mapped to the given key or its default value if no value is mapped, if the backing store is unavailable, or if the value is an invalid string. abstract long getLong(String key, long deflt) Gets the long value mapped to the given key or its default value if no value is mapped, if the backing store is unavailable, or if the value is an invalid string. static void importPreferences(InputStream istream) Imports all the preferences from an XML document using the given input stream. abstract boolean isUserNode() Returns whether this is a user preference node. abstract String[] keys() Returns all preference keys stored in this node or an empty array if no key was found. abstract String name() Returns the name of this node. abstract Preferences node(String path) Returns the preference node with the given path name. abstract boolean nodeExists(String path) Returns whether the preference node with the given path name exists. abstract Preferences parent() Returns the parent preference node of this node or null if this node is the root node. abstract void put(String key, String value) Adds a new preference to this node using the given key and value or updates the value if a preference with the given key already exists. abstract void putBoolean(String key, boolean value) Adds a new preference with a boolean value to this node using the given key and value or updates the value if a preference with the given key already exists. abstract void putByteArray(String key, byte[] value) Adds a new preference to this node using the given key and the string form of the given value or updates the value if a preference with the given key already exists. abstract void putDouble(String key, double value) Adds a new preference to this node using the given key and double value or updates the value if a preference with the given key already exists. abstract void putFloat(String key, float value) Adds a new preference to this node using the given key and float value or updates the value if a preference with the given key already exists. abstract void putInt(String key, int value) Adds a new preference to this node using the given key and int value or updates the value if a preference with the given key already exists. abstract void putLong(String key, long value) Adds a new preference to this node using the given key and long value or updates the value if a preference with the given key already exists. abstract void remove(String key) Removes the preference mapped to the given key from this node. abstract void removeNode() Removes this preference node with all its descendants. abstract void removeNodeChangeListener(NodeChangeListener ncl) Removes the given NodeChangeListener instance from this node. abstract void removePreferenceChangeListener(PreferenceChangeListener pcl) Removes the given PreferenceChangeListener instance from this node. abstract void sync() Synchronizes the data of this preference node and its descendants with the back-end preference store. static Preferences systemNodeForPackage(Class<?> c) Legacy code; do not use. static Preferences systemRoot() Legacy code; do not use. abstract String toString() Returns a string representation of this node. static Preferences userNodeForPackage(Class<?> c) Legacy code; do not use. static Preferences userRoot() Legacy code; do not use.","abstract String absolutePath() Gets the absolute path string of this preference node.","abstract void addNodeChangeListener(NodeChangeListener ncl) Registers a NodeChangeListener instance for this node, which will handle NodeChangeEvents.","abstract void addPreferenceChangeListener(PreferenceChangeListener pcl) Registers a PreferenceChangeListener instance for this node, which will handle PreferenceChangeEvents.","abstract String[] childrenNames() Returns the names of all children of this node or an empty array if this node has no children.","abstract void clear() Removes all preferences of this node.","abstract void exportNode(OutputStream ostream) Exports all of the preferences of this node to a XML document using the given output stream.","abstract void exportSubtree(OutputStream ostream) Exports all of the preferences of this node and all its descendants to a XML document using the given output stream.","abstract void flush() Forces all pending updates to this node and its descendants to be persisted in the backing store.","abstract String get(String key, String deflt) Gets the String value mapped to the given key or its default value if no value is mapped or no backing store is available.","abstract boolean getBoolean(String key, boolean deflt) Gets the boolean value mapped to the given key or its default value if no value is mapped, if the backing store is unavailable, or if the value is invalid.","abstract byte[] getByteArray(String key, byte[] deflt) Gets the byte array value mapped to the given key or its default value if no value is mapped, if the backing store is unavailable, or if the value is an invalid string.","abstract double getDouble(String key, double deflt) Gets the double value mapped to the given key or its default value if no value is mapped, if the backing store is unavailable, or if the value is an invalid string.","abstract float getFloat(String key, float deflt) Gets the float value mapped to the given key or its default value if no value is mapped, if the backing store is unavailable, or if the value is an invalid string.","abstract int getInt(String key, int deflt) Gets the int value mapped to the given key or its default value if no value is mapped, if the backing store is unavailable, or if the value is an invalid string.","abstract long getLong(String key, long deflt) Gets the long value mapped to the given key or its default value if no value is mapped, if the backing store is unavailable, or if the value is an invalid string.","static void importPreferences(InputStream istream) Imports all the preferences from an XML document using the given input stream.","abstract boolean isUserNode() Returns whether this is a user preference node.","abstract String[] keys() Returns all preference keys stored in this node or an empty array if no key was found.","abstract String name() Returns the name of this node.","abstract Preferences node(String path) Returns the preference node with the given path name.","abstract boolean nodeExists(String path) Returns whether the preference node with the given path name exists.","abstract Preferences parent() Returns the parent preference node of this node or null if this node is the root node.","abstract void put(String key, String value) Adds a new preference to this node using the given key and value or updates the value if a preference with the given key already exists.","abstract void putBoolean(String key, boolean value) Adds a new preference with a boolean value to this node using the given key and value or updates the value if a preference with the given key already exists.","abstract void putByteArray(String key, byte[] value) Adds a new preference to this node using the given key and the string form of the given value or updates the value if a preference with the given key already exists.","abstract void putDouble(String key, double value) Adds a new preference to this node using the given key and double value or updates the value if a preference with the given key already exists.","abstract void putFloat(String key, float value) Adds a new preference to this node using the given key and float value or updates the value if a preference with the given key already exists.","abstract void putInt(String key, int value) Adds a new preference to this node using the given key and int value or updates the value if a preference with the given key already exists.","abstract void putLong(String key, long value) Adds a new preference to this node using the given key and long value or updates the value if a preference with the given key already exists.","abstract void remove(String key) Removes the preference mapped to the given key from this node.","abstract void removeNode() Removes this preference node with all its descendants.","abstract void removeNodeChangeListener(NodeChangeListener ncl) Removes the given NodeChangeListener instance from this node.","abstract void removePreferenceChangeListener(PreferenceChangeListener pcl) Removes the given PreferenceChangeListener instance from this node.","abstract void sync() Synchronizes the data of this preference node and its descendants with the back-end preference store.","static Preferences systemNodeForPackage(Class<?> c) Legacy code; do not use.","static Preferences systemRoot() Legacy code; do not use.","abstract String toString() Returns a string representation of this node.","static Preferences userNodeForPackage(Class<?> c) Legacy code; do not use.","static Preferences userRoot() Legacy code; do not use.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"java.util.prefs","constants":["[Expand] Inherited Constants","From class java.util.prefs.Preferences int MAX_KEY_LENGTH Maximum size in characters allowed for a preferences key. int MAX_NAME_LENGTH Maximum size in characters allowed for a preferences name. int MAX_VALUE_LENGTH Maximum size in characters allowed for a preferences value.","int MAX_KEY_LENGTH Maximum size in characters allowed for a preferences key.","int MAX_NAME_LENGTH Maximum size in characters allowed for a preferences name.","int MAX_VALUE_LENGTH Maximum size in characters allowed for a preferences value."],"class":"AbstractPreferences","constructors":[],"fields":["protected final Object lock The object used to lock this node.","protected boolean newNode This field is true if this node is created while it doesn't exist in the backing store."]}