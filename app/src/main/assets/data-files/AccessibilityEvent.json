{"methods":["void appendRecord(AccessibilityRecord record) Appends an AccessibilityRecord to the end of event records.","int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation.","static String eventTypeToString(int eventType) Returns the string representation of an event type.","int getAction() Gets the performed action that triggered this event.","int getContentChangeTypes() Gets the bit mask of change types signaled by an TYPE_WINDOW_CONTENT_CHANGED event.","long getEventTime() Gets the time in which this event was sent.","int getEventType() Gets the event type.","int getMovementGranularity() Gets the movement granularity that was traversed.","CharSequence getPackageName() Gets the package name of the source.","AccessibilityRecord getRecord(int index) Gets the record at a given index.","int getRecordCount() Gets the number of records contained in the event.","void initFromParcel(Parcel parcel) Creates a new instance from a Parcel.","static AccessibilityEvent obtain(int eventType) Returns a cached instance if such is available or a new one is instantiated with its type property set.","static AccessibilityEvent obtain() Returns a cached instance if such is available or a new one is instantiated.","static AccessibilityEvent obtain(AccessibilityEvent event) Returns a cached instance if such is available or a new one is created.","void recycle() Recycles an instance back to be reused.","void setAction(int action) Sets the performed action that triggered this event.","void setContentChangeTypes(int changeTypes) Sets the bit mask of node tree changes signaled by an TYPE_WINDOW_CONTENT_CHANGED event.","void setEventTime(long eventTime) Sets the time in which this event was sent.","void setEventType(int eventType) Sets the event type.","void setMovementGranularity(int granularity) Sets the movement granularity that was traversed.","void setPackageName(CharSequence packageName) Sets the package name of the source.","String toString() Returns a string containing a concise, human-readable description of this object.","void writeToParcel(Parcel parcel, int flags) Flatten this object in to a Parcel.","[Expand] Inherited Methods","From class android.view.accessibility.AccessibilityRecord int getAddedCount() Gets the number of added characters. CharSequence getBeforeText() Sets the text before a change. CharSequence getClassName() Gets the class name of the source. CharSequence getContentDescription() Gets the description of the source. int getCurrentItemIndex() Gets the index of the source in the list of items the can be visited. int getFromIndex() Gets the index of the first character of the changed sequence, or the beginning of a text selection or the index of the first visible item when scrolling. int getItemCount() Gets the number of items that can be visited. int getMaxScrollX() Gets the max scroll offset of the source left edge in pixels. int getMaxScrollY() Gets the max scroll offset of the source top edge in pixels. Parcelable getParcelableData() Gets the Parcelable data. int getRemovedCount() Gets the number of removed characters. int getScrollX() Gets the scroll offset of the source left edge in pixels. int getScrollY() Gets the scroll offset of the source top edge in pixels. AccessibilityNodeInfo getSource() Gets the AccessibilityNodeInfo of the event source. List<CharSequence> getText() Gets the text of the event. int getToIndex() Gets the index of text selection end or the index of the last visible item when scrolling. int getWindowId() Gets the id of the window from which the event comes from. boolean isChecked() Gets if the source is checked. boolean isEnabled() Gets if the source is enabled. boolean isFullScreen() Gets if the source is taking the entire screen. boolean isPassword() Gets if the source is a password field. boolean isScrollable() Gets if the source is scrollable. static AccessibilityRecord obtain(AccessibilityRecord record) Returns a cached instance if such is available or a new one is instantiated. static AccessibilityRecord obtain() Returns a cached instance if such is available or a new one is instantiated. void recycle() Return an instance back to be reused. void setAddedCount(int addedCount) Sets the number of added characters. void setBeforeText(CharSequence beforeText) Sets the text before a change. void setChecked(boolean isChecked) Sets if the source is checked. void setClassName(CharSequence className) Sets the class name of the source. void setContentDescription(CharSequence contentDescription) Sets the description of the source. void setCurrentItemIndex(int currentItemIndex) Sets the index of the source in the list of items that can be visited. void setEnabled(boolean isEnabled) Sets if the source is enabled. void setFromIndex(int fromIndex) Sets the index of the first character of the changed sequence or the beginning of a text selection or the index of the first visible item when scrolling. void setFullScreen(boolean isFullScreen) Sets if the source is taking the entire screen. void setItemCount(int itemCount) Sets the number of items that can be visited. void setMaxScrollX(int maxScrollX) Sets the max scroll offset of the source left edge in pixels. void setMaxScrollY(int maxScrollY) Sets the max scroll offset of the source top edge in pixels. void setParcelableData(Parcelable parcelableData) Sets the Parcelable data of the event. void setPassword(boolean isPassword) Sets if the source is a password field. void setRemovedCount(int removedCount) Sets the number of removed characters. void setScrollX(int scrollX) Sets the scroll offset of the source left edge in pixels. void setScrollY(int scrollY) Sets the scroll offset of the source top edge in pixels. void setScrollable(boolean scrollable) Sets if the source is scrollable. void setSource(View root, int virtualDescendantId) Sets the source to be a virtual descendant of the given root. void setSource(View source) Sets the event source. void setToIndex(int toIndex) Sets the index of text selection end or the index of the last visible item when scrolling. String toString() Returns a string containing a concise, human-readable description of this object.","int getAddedCount() Gets the number of added characters.","CharSequence getBeforeText() Sets the text before a change.","CharSequence getClassName() Gets the class name of the source.","CharSequence getContentDescription() Gets the description of the source.","int getCurrentItemIndex() Gets the index of the source in the list of items the can be visited.","int getFromIndex() Gets the index of the first character of the changed sequence, or the beginning of a text selection or the index of the first visible item when scrolling.","int getItemCount() Gets the number of items that can be visited.","int getMaxScrollX() Gets the max scroll offset of the source left edge in pixels.","int getMaxScrollY() Gets the max scroll offset of the source top edge in pixels.","Parcelable getParcelableData() Gets the Parcelable data.","int getRemovedCount() Gets the number of removed characters.","int getScrollX() Gets the scroll offset of the source left edge in pixels.","int getScrollY() Gets the scroll offset of the source top edge in pixels.","AccessibilityNodeInfo getSource() Gets the AccessibilityNodeInfo of the event source.","List<CharSequence> getText() Gets the text of the event.","int getToIndex() Gets the index of text selection end or the index of the last visible item when scrolling.","int getWindowId() Gets the id of the window from which the event comes from.","boolean isChecked() Gets if the source is checked.","boolean isEnabled() Gets if the source is enabled.","boolean isFullScreen() Gets if the source is taking the entire screen.","boolean isPassword() Gets if the source is a password field.","boolean isScrollable() Gets if the source is scrollable.","static AccessibilityRecord obtain(AccessibilityRecord record) Returns a cached instance if such is available or a new one is instantiated.","static AccessibilityRecord obtain() Returns a cached instance if such is available or a new one is instantiated.","void recycle() Return an instance back to be reused.","void setAddedCount(int addedCount) Sets the number of added characters.","void setBeforeText(CharSequence beforeText) Sets the text before a change.","void setChecked(boolean isChecked) Sets if the source is checked.","void setClassName(CharSequence className) Sets the class name of the source.","void setContentDescription(CharSequence contentDescription) Sets the description of the source.","void setCurrentItemIndex(int currentItemIndex) Sets the index of the source in the list of items that can be visited.","void setEnabled(boolean isEnabled) Sets if the source is enabled.","void setFromIndex(int fromIndex) Sets the index of the first character of the changed sequence or the beginning of a text selection or the index of the first visible item when scrolling.","void setFullScreen(boolean isFullScreen) Sets if the source is taking the entire screen.","void setItemCount(int itemCount) Sets the number of items that can be visited.","void setMaxScrollX(int maxScrollX) Sets the max scroll offset of the source left edge in pixels.","void setMaxScrollY(int maxScrollY) Sets the max scroll offset of the source top edge in pixels.","void setParcelableData(Parcelable parcelableData) Sets the Parcelable data of the event.","void setPassword(boolean isPassword) Sets if the source is a password field.","void setRemovedCount(int removedCount) Sets the number of removed characters.","void setScrollX(int scrollX) Sets the scroll offset of the source left edge in pixels.","void setScrollY(int scrollY) Sets the scroll offset of the source top edge in pixels.","void setScrollable(boolean scrollable) Sets if the source is scrollable.","void setSource(View root, int virtualDescendantId) Sets the source to be a virtual descendant of the given root.","void setSource(View source) Sets the event source.","void setToIndex(int toIndex) Sets the index of text selection end or the index of the last visible item when scrolling.","String toString() Returns a string containing a concise, human-readable description of this object.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface android.os.Parcelable abstract int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation. abstract void writeToParcel(Parcel dest, int flags) Flatten this object in to a Parcel.","abstract int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation.","abstract void writeToParcel(Parcel dest, int flags) Flatten this object in to a Parcel."],"package":"android.view.accessibility","constants":["int CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTION Change type for TYPE_WINDOW_CONTENT_CHANGED event: The node's content description changed.","int CONTENT_CHANGE_TYPE_SUBTREE Change type for TYPE_WINDOW_CONTENT_CHANGED event: A node in the subtree rooted at the source node was added or removed.","int CONTENT_CHANGE_TYPE_TEXT Change type for TYPE_WINDOW_CONTENT_CHANGED event: The node's text changed.","int CONTENT_CHANGE_TYPE_UNDEFINED Change type for TYPE_WINDOW_CONTENT_CHANGED event: The type of change is not defined.","int INVALID_POSITION Invalid selection/focus position.","int MAX_TEXT_LENGTH Maximum length of the text fields.","int TYPES_ALL_MASK Mask for AccessibilityEvent all types.","int TYPE_ANNOUNCEMENT Represents the event of an application making an announcement.","int TYPE_GESTURE_DETECTION_END Represents the event of ending gesture detection.","int TYPE_GESTURE_DETECTION_START Represents the event of beginning gesture detection.","int TYPE_NOTIFICATION_STATE_CHANGED Represents the event showing a Notification.","int TYPE_TOUCH_EXPLORATION_GESTURE_END Represents the event of ending a touch exploration gesture.","int TYPE_TOUCH_EXPLORATION_GESTURE_START Represents the event of starting a touch exploration gesture.","int TYPE_TOUCH_INTERACTION_END Represents the event of the user ending to touch the screen.","int TYPE_TOUCH_INTERACTION_START Represents the event of the user starting to touch the screen.","int TYPE_VIEW_ACCESSIBILITY_FOCUSED Represents the event of gaining accessibility focus.","int TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED Represents the event of clearing accessibility focus.","int TYPE_VIEW_CLICKED Represents the event of clicking on a View like Button, CompoundButton, etc.","int TYPE_VIEW_FOCUSED Represents the event of setting input focus of a View.","int TYPE_VIEW_HOVER_ENTER Represents the event of a hover enter over a View.","int TYPE_VIEW_HOVER_EXIT Represents the event of a hover exit over a View.","int TYPE_VIEW_LONG_CLICKED Represents the event of long clicking on a View like Button, CompoundButton, etc.","int TYPE_VIEW_SCROLLED Represents the event of scrolling a view.","int TYPE_VIEW_SELECTED Represents the event of selecting an item usually in the context of an AdapterView.","int TYPE_VIEW_TEXT_CHANGED Represents the event of changing the text of an EditText.","int TYPE_VIEW_TEXT_SELECTION_CHANGED Represents the event of changing the selection in an EditText.","int TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY Represents the event of traversing the text of a view at a given movement granularity.","int TYPE_WINDOWS_CHANGED Represents the event change in the windows shown on the screen.","int TYPE_WINDOW_CONTENT_CHANGED Represents the event of changing the content of a window and more specifically the sub-tree rooted at the event's source.","int TYPE_WINDOW_STATE_CHANGED Represents the event of opening a PopupWindow, Menu, Dialog, etc.","[Expand] Inherited Constants","From interface android.os.Parcelable int CONTENTS_FILE_DESCRIPTOR Bit masks for use with describeContents(): each bit represents a kind of object considered to have potential special significance when marshalled. int PARCELABLE_WRITE_RETURN_VALUE Flag for use with writeToParcel(Parcel, int): the object being written is a return value, that is the result of a function such as \"Parcelable someFunction()\", \"void someFunction(out Parcelable)\", or \"void someFunction(inout Parcelable)\".","int CONTENTS_FILE_DESCRIPTOR Bit masks for use with describeContents(): each bit represents a kind of object considered to have potential special significance when marshalled.","int PARCELABLE_WRITE_RETURN_VALUE Flag for use with writeToParcel(Parcel, int): the object being written is a return value, that is the result of a function such as \"Parcelable someFunction()\", \"void someFunction(out Parcelable)\", or \"void someFunction(inout Parcelable)\"."],"class":"AccessibilityEvent","constructors":[],"fields":["public static final Creator<AccessibilityEvent> CREATOR"]}