{"methods":["void addAction(int action) Adds an action that can be performed on the node.","void addChild(View child) Adds a child.","void addChild(View root, int virtualDescendantId) Adds a virtual child which is a descendant of the given root.","boolean equals(Object obj) Compares this instance with the specified object and indicates if they are equal.","List<AccessibilityNodeInfoCompat> findAccessibilityNodeInfosByText(String text) Finds AccessibilityNodeInfos by text.","AccessibilityNodeInfoCompat findFocus(int focus) Find the view that has the specified focus type.","AccessibilityNodeInfoCompat focusSearch(int direction) Searches for the nearest view in the specified direction that can take input focus.","List<AccessibilityNodeInfoCompat.AccessibilityActionCompat> getActionList() Gets the actions that can be performed on the node.","int getActions() Gets the actions that can be performed on the node.","void getBoundsInParent(Rect outBounds) Gets the node bounds in parent coordinates.","void getBoundsInScreen(Rect outBounds) Gets the node bounds in screen coordinates.","AccessibilityNodeInfoCompat getChild(int index) Get the child at given index.","int getChildCount() Gets the number of children.","CharSequence getClassName() Gets the class this node comes from.","AccessibilityNodeInfoCompat.CollectionInfoCompat getCollectionInfo() Gets the collection info if the node is a collection.","AccessibilityNodeInfoCompat.CollectionItemInfoCompat getCollectionItemInfo() Gets the collection item info if the node is a collection item.","CharSequence getContentDescription() Gets the content description of this node.","Object getInfo()","int getLiveRegion() Gets the node's live region mode.","int getMovementGranularities() Gets the movement granularities for traversing the text of this node.","CharSequence getPackageName() Gets the package this node comes from.","AccessibilityNodeInfoCompat getParent() Gets the parent.","AccessibilityNodeInfoCompat.RangeInfoCompat getRangeInfo() Gets the range info if this node is a range.","CharSequence getText() Gets the text of this node.","String getViewIdResourceName() Gets the fully qualified resource name of the source view's id.","int getWindowId() Gets the id of the window from which the info comes from.","int hashCode() Returns an integer hash code for this object.","boolean isAccessibilityFocused() Gets whether this node is accessibility focused.","boolean isCheckable() Gets whether this node is checkable.","boolean isChecked() Gets whether this node is checked.","boolean isClickable() Gets whether this node is clickable.","boolean isEnabled() Gets whether this node is enabled.","boolean isFocusable() Gets whether this node is focusable.","boolean isFocused() Gets whether this node is focused.","boolean isLongClickable() Gets whether this node is long clickable.","boolean isPassword() Gets whether this node is a password.","boolean isScrollable() Gets if the node is scrollable.","boolean isSelected() Gets whether this node is selected.","boolean isVisibleToUser() Sets whether this node is visible to the user.","static AccessibilityNodeInfoCompat obtain(View root, int virtualDescendantId) Returns a cached instance if such is available otherwise a new one and sets the source.","static AccessibilityNodeInfoCompat obtain(AccessibilityNodeInfoCompat info) Returns a cached instance if such is available or a new one is create.","static AccessibilityNodeInfoCompat obtain() Returns a cached instance if such is available otherwise a new one.","static AccessibilityNodeInfoCompat obtain(View source) Returns a cached instance if such is available otherwise a new one and sets the source.","boolean performAction(int action) Performs an action on the node.","boolean performAction(int action, Bundle arguments) Performs an action on the node.","void recycle() Return an instance back to be reused.","void setAccessibilityFocused(boolean focused) Sets whether this node is accessibility focused.","void setBoundsInParent(Rect bounds) Sets the node bounds in parent coordinates.","void setBoundsInScreen(Rect bounds) Sets the node bounds in screen coordinates.","void setCheckable(boolean checkable) Sets whether this node is checkable.","void setChecked(boolean checked) Sets whether this node is checked.","void setClassName(CharSequence className) Sets the class this node comes from.","void setClickable(boolean clickable) Sets whether this node is clickable.","void setCollectionInfo(Object collectionInfo)","void setCollectionItemInfo(Object collectionItemInfo)","void setContentDescription(CharSequence contentDescription) Sets the content description of this node.","void setEnabled(boolean enabled) Sets whether this node is enabled.","void setFocusable(boolean focusable) Sets whether this node is focusable.","void setFocused(boolean focused) Sets whether this node is focused.","void setLiveRegion(int mode) Sets the node's live region mode.","void setLongClickable(boolean longClickable) Sets whether this node is long clickable.","void setMovementGranularities(int granularities) Sets the movement granularities for traversing the text of this node.","void setPackageName(CharSequence packageName) Sets the package this node comes from.","void setParent(View parent) Sets the parent.","void setParent(View root, int virtualDescendantId) Sets the parent to be a virtual descendant of the given root.","void setPassword(boolean password) Sets whether this node is a password.","void setScrollable(boolean scrollable) Sets if the node is scrollable.","void setSelected(boolean selected) Sets whether this node is selected.","void setSource(View root, int virtualDescendantId) Sets the source to be a virtual descendant of the given root.","void setSource(View source) Sets the source.","void setText(CharSequence text) Sets the text of this node.","void setViewIdResourceName(String viewId) Sets the fully qualified resource name of the source view's id.","void setVisibleToUser(boolean visibleToUser) Sets whether this node is visible to the user.","String toString() Returns a string containing a concise, human-readable description of this object.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.support.v4.view.accessibility","constants":["int ACTION_ACCESSIBILITY_FOCUS Action that gives accessibility focus to the node.","String ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN Argument for whether when moving at granularity to extend the selection or to move it otherwise.","String ACTION_ARGUMENT_HTML_ELEMENT_STRING Argument for which HTML element to get moving to the next/previous HTML element.","String ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT Argument for which movement granularity to be used when traversing the node text.","String ACTION_ARGUMENT_SELECTION_END_INT Argument for specifying the selection end.","String ACTION_ARGUMENT_SELECTION_START_INT Argument for specifying the selection start.","String ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE Argument for specifying the text content to set Type: CharSequence Actions: ACTION_SET_TEXT","int ACTION_CLEAR_ACCESSIBILITY_FOCUS Action that clears accessibility focus of the node.","int ACTION_CLEAR_FOCUS Action that unfocuses the node.","int ACTION_CLEAR_SELECTION Action that unselects the node.","int ACTION_CLICK Action that clicks on the node info.","int ACTION_COPY Action to copy the current selection to the clipboard.","int ACTION_CUT Action to cut the current selection and place it to the clipboard.","int ACTION_FOCUS Action that focuses the node.","int ACTION_LONG_CLICK Action that long clicks on the node.","int ACTION_NEXT_AT_MOVEMENT_GRANULARITY Action that requests to go to the next entity in this node's text at a given movement granularity.","int ACTION_NEXT_HTML_ELEMENT Action to move to the next HTML element of a given type.","int ACTION_PASTE Action to paste the current clipboard content.","int ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY Action that requests to go to the previous entity in this node's text at a given movement granularity.","int ACTION_PREVIOUS_HTML_ELEMENT Action to move to the previous HTML element of a given type.","int ACTION_SCROLL_BACKWARD Action to scroll the node content backward.","int ACTION_SCROLL_FORWARD Action to scroll the node content forward.","int ACTION_SELECT Action that selects the node.","int ACTION_SET_SELECTION Action to set the selection.","int ACTION_SET_TEXT Action that sets the text of the node.","int FOCUS_ACCESSIBILITY The accessibility focus.","int FOCUS_INPUT The input focus.","int MOVEMENT_GRANULARITY_CHARACTER Movement granularity bit for traversing the text of a node by character.","int MOVEMENT_GRANULARITY_LINE Movement granularity bit for traversing the text of a node by line.","int MOVEMENT_GRANULARITY_PAGE Movement granularity bit for traversing the text of a node by page.","int MOVEMENT_GRANULARITY_PARAGRAPH Movement granularity bit for traversing the text of a node by paragraph.","int MOVEMENT_GRANULARITY_WORD Movement granularity bit for traversing the text of a node by word."],"class":"AccessibilityNodeInfoCompat","constructors":[],"fields":[]}