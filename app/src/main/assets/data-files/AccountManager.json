{"methods":["AccountManagerFuture<Bundle> addAccount(String accountType, String authTokenType, String[] requiredFeatures, Bundle addAccountOptions, Activity activity, AccountManagerCallback<Bundle> callback, Handler handler) Asks the user to add an account of a specified type.","boolean addAccountExplicitly(Account account, String password, Bundle userdata) Adds an account directly to the AccountManager.","void addOnAccountsUpdatedListener(OnAccountsUpdateListener listener, Handler handler, boolean updateImmediately) Adds an OnAccountsUpdateListener to this instance of the AccountManager.","String blockingGetAuthToken(Account account, String authTokenType, boolean notifyAuthFailure) This convenience helper synchronously gets an auth token with getAuthToken(Account, String, boolean, AccountManagerCallback, Handler).","void clearPassword(Account account) Forgets a saved password.","AccountManagerFuture<Bundle> confirmCredentials(Account account, Bundle options, Activity activity, AccountManagerCallback<Bundle> callback, Handler handler) Confirms that the user knows the password for an account to make extra sure they are the owner of the account.","AccountManagerFuture<Bundle> editProperties(String accountType, Activity activity, AccountManagerCallback<Bundle> callback, Handler handler) Offers the user an opportunity to change an authenticator's settings.","static AccountManager get(Context context) Gets an AccountManager instance associated with a Context.","Account[] getAccounts() Lists all accounts of any type registered on the device.","Account[] getAccountsByType(String type) Lists all accounts of a particular type.","AccountManagerFuture<Account[]> getAccountsByTypeAndFeatures(String type, String[] features, AccountManagerCallback<Account[]> callback, Handler handler) Lists all accounts of a type which have certain features.","Account[] getAccountsByTypeForPackage(String type, String packageName) Returns the accounts visible to the specified package, in an environment where some apps are not authorized to view all accounts.","AccountManagerFuture<Bundle> getAuthToken(Account account, String authTokenType, Bundle options, Activity activity, AccountManagerCallback<Bundle> callback, Handler handler) Gets an auth token of the specified type for a particular account, prompting the user for credentials if necessary.","AccountManagerFuture<Bundle> getAuthToken(Account account, String authTokenType, boolean notifyAuthFailure, AccountManagerCallback<Bundle> callback, Handler handler) This method was deprecated in API level 14. use getAuthToken(Account, String, android.os.Bundle, boolean, AccountManagerCallback, android.os.Handler) instead","AccountManagerFuture<Bundle> getAuthToken(Account account, String authTokenType, Bundle options, boolean notifyAuthFailure, AccountManagerCallback<Bundle> callback, Handler handler) Gets an auth token of the specified type for a particular account, optionally raising a notification if the user must enter credentials.","AccountManagerFuture<Bundle> getAuthTokenByFeatures(String accountType, String authTokenType, String[] features, Activity activity, Bundle addAccountOptions, Bundle getAuthTokenOptions, AccountManagerCallback<Bundle> callback, Handler handler) This convenience helper combines the functionality of getAccountsByTypeAndFeatures(String, String[], AccountManagerCallback, Handler), getAuthToken(Account, String, Bundle, Activity, AccountManagerCallback, Handler), and addAccount(String, String, String[], Bundle, Activity, AccountManagerCallback, Handler).","AuthenticatorDescription[] getAuthenticatorTypes() Lists the currently registered authenticators.","String getPassword(Account account) Gets the saved password associated with the account.","String getPreviousName(Account account) Gets the previous name associated with the account or null, if none.","String getUserData(Account account, String key) Gets the user data named by \"key\" associated with the account.","AccountManagerFuture<Boolean> hasFeatures(Account account, String[] features, AccountManagerCallback<Boolean> callback, Handler handler) Finds out whether a particular account has all the specified features.","void invalidateAuthToken(String accountType, String authToken) Removes an auth token from the AccountManager's cache.","static Intent newChooseAccountIntent(Account selectedAccount, ArrayList<Account> allowableAccounts, String[] allowableAccountTypes, boolean alwaysPromptForAccount, String descriptionOverrideText, String addAccountAuthTokenType, String[] addAccountRequiredFeatures, Bundle addAccountOptions) Returns an intent to an Activity that prompts the user to choose from a list of accounts.","String peekAuthToken(Account account, String authTokenType) Gets an auth token from the AccountManager's cache.","AccountManagerFuture<Boolean> removeAccount(Account account, AccountManagerCallback<Boolean> callback, Handler handler) Removes an account from the AccountManager.","void removeOnAccountsUpdatedListener(OnAccountsUpdateListener listener) Removes an OnAccountsUpdateListener previously registered with addOnAccountsUpdatedListener(OnAccountsUpdateListener, Handler, boolean).","AccountManagerFuture<Account> renameAccount(Account account, String newName, AccountManagerCallback<Account> callback, Handler handler) Rename the specified Account.","void setAuthToken(Account account, String authTokenType, String authToken) Adds an auth token to the AccountManager cache for an account.","void setPassword(Account account, String password) Sets or forgets a saved password.","void setUserData(Account account, String key, String value) Sets one userdata key for an account.","AccountManagerFuture<Bundle> updateCredentials(Account account, String authTokenType, Bundle options, Activity activity, AccountManagerCallback<Bundle> callback, Handler handler) Asks the user to enter a new password for an account, updating the saved credentials for the account.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.accounts","constants":["String ACTION_AUTHENTICATOR_INTENT","String AUTHENTICATOR_ATTRIBUTES_NAME","String AUTHENTICATOR_META_DATA_NAME","int ERROR_CODE_BAD_ARGUMENTS","int ERROR_CODE_BAD_AUTHENTICATION","int ERROR_CODE_BAD_REQUEST","int ERROR_CODE_CANCELED","int ERROR_CODE_INVALID_RESPONSE","int ERROR_CODE_NETWORK_ERROR","int ERROR_CODE_REMOTE_EXCEPTION","int ERROR_CODE_UNSUPPORTED_OPERATION","String KEY_ACCOUNTS","String KEY_ACCOUNT_AUTHENTICATOR_RESPONSE","String KEY_ACCOUNT_MANAGER_RESPONSE","String KEY_ACCOUNT_NAME Bundle key used for the String account name in results from methods which return information about a particular account.","String KEY_ACCOUNT_TYPE Bundle key used for the String account type in results from methods which return information about a particular account.","String KEY_ANDROID_PACKAGE_NAME The Android package of the caller will be set in the options bundle by the AccountManager and will be passed to the AccountManagerService and to the AccountAuthenticators.","String KEY_AUTHENTICATOR_TYPES","String KEY_AUTHTOKEN Bundle key used for the auth token value in results from getAuthToken(Account, String, Bundle, Activity, AccountManagerCallback, Handler) and friends.","String KEY_AUTH_FAILED_MESSAGE","String KEY_AUTH_TOKEN_LABEL","String KEY_BOOLEAN_RESULT","String KEY_CALLER_PID","String KEY_CALLER_UID Authenticators using 'customTokens' option will also get the UID of the caller","String KEY_ERROR_CODE","String KEY_ERROR_MESSAGE","String KEY_INTENT Bundle key used for an Intent in results from methods that may require the caller to interact with the user.","String KEY_PASSWORD Bundle key used to supply the password directly in options to confirmCredentials(Account, Bundle, Activity, AccountManagerCallback, Handler), rather than prompting the user with the standard password prompt.","String KEY_USERDATA","String LOGIN_ACCOUNTS_CHANGED_ACTION Action sent as a broadcast Intent by the AccountsService when accounts are added, accounts are removed, or an account's credentials (saved password, etc) are changed."],"class":"AccountManager","constructors":[],"fields":[]}