{"methods":["int describeContents()","boolean equals(Object obj)","Achievement freeze() Freeze a volatile representation into an immutable representation.","String getAchievementId() Retrieves the ID of this achievement.","int getCurrentSteps() Retrieves the number of steps this user has gone toward unlocking this achievement; only applicable for TYPE_INCREMENTAL achievement types.","String getDescription() Retrieves the description for this achievement.","void getDescription(CharArrayBuffer dataOut) Loads the achievement description into the given CharArrayBuffer.","void getFormattedCurrentSteps(CharArrayBuffer dataOut) Retrieves the number of steps this user has gone toward unlocking this achievement (formatted for the user's locale) into the given CharArrayBuffer.","String getFormattedCurrentSteps() Retrieves the number of steps this user has gone toward unlocking this achievement (formatted for the user's locale); only applicable for TYPE_INCREMENTAL achievement types.","void getFormattedTotalSteps(CharArrayBuffer dataOut) Loads the total number of steps necessary to unlock this achievement (formatted for the user's locale) into the given CharArrayBuffer; only applicable for TYPE_INCREMENTAL achievement types.","String getFormattedTotalSteps() Retrieves the total number of steps necessary to unlock this achievement, formatted for the user's locale; only applicable for TYPE_INCREMENTAL achievement types.","long getLastUpdatedTimestamp() Retrieves the timestamp (in millseconds since epoch) at which this achievement was last updated.","String getName() Retrieves the name of this achievement.","void getName(CharArrayBuffer dataOut) Loads the achievement name into the given CharArrayBuffer.","Player getPlayer() Retrieves the player information associated with this achievement.","Uri getRevealedImageUri() Retrieves a URI that can be used to load the achievement's revealed image icon.","String getRevealedImageUrl()","int getState() Retrieves the state of the achievement - one of STATE_UNLOCKED, STATE_REVEALED, or STATE_HIDDEN.","int getTotalSteps() Retrieves the total number of steps necessary to unlock this achievement; only applicable for TYPE_INCREMENTAL achievement types.","int getType() Retrieves the type of this achievement - one of TYPE_STANDARD or TYPE_INCREMENTAL.","Uri getUnlockedImageUri() Retrieves a URI that can be used to load the achievement's unlocked image icon.","String getUnlockedImageUrl()","long getXpValue() Retrieves the XP value of this achievement.","int hashCode()","boolean isDataValid() Check to see if this object is valid for use.","String toString()","void writeToParcel(Parcel dest, int flags)","[Expand] Inherited Methods","From class java.lang.Object Object clone() boolean equals(Object arg0) void finalize() final Class<?> getClass() int hashCode() final void notify() final void notifyAll() String toString() final void wait() final void wait(long arg0, int arg1) final void wait(long arg0)","Object clone()","boolean equals(Object arg0)","void finalize()","final Class<?> getClass()","int hashCode()","final void notify()","final void notifyAll()","String toString()","final void wait()","final void wait(long arg0, int arg1)","final void wait(long arg0)","From interface android.os.Parcelable abstract int describeContents() abstract void writeToParcel(Parcel arg0, int arg1)","abstract int describeContents()","abstract void writeToParcel(Parcel arg0, int arg1)","From interface com.google.android.gms.common.data.Freezable abstract T freeze() Freeze a volatile representation into an immutable representation. abstract boolean isDataValid() Check to see if this object is valid for use.","abstract T freeze() Freeze a volatile representation into an immutable representation.","abstract boolean isDataValid() Check to see if this object is valid for use.","From interface com.google.android.gms.games.achievement.Achievement abstract String getAchievementId() Retrieves the ID of this achievement. abstract int getCurrentSteps() Retrieves the number of steps this user has gone toward unlocking this achievement; only applicable for TYPE_INCREMENTAL achievement types. abstract String getDescription() Retrieves the description for this achievement. abstract void getDescription(CharArrayBuffer dataOut) Loads the achievement description into the given CharArrayBuffer. abstract void getFormattedCurrentSteps(CharArrayBuffer dataOut) Retrieves the number of steps this user has gone toward unlocking this achievement (formatted for the user's locale) into the given CharArrayBuffer. abstract String getFormattedCurrentSteps() Retrieves the number of steps this user has gone toward unlocking this achievement (formatted for the user's locale); only applicable for TYPE_INCREMENTAL achievement types. abstract void getFormattedTotalSteps(CharArrayBuffer dataOut) Loads the total number of steps necessary to unlock this achievement (formatted for the user's locale) into the given CharArrayBuffer; only applicable for TYPE_INCREMENTAL achievement types. abstract String getFormattedTotalSteps() Retrieves the total number of steps necessary to unlock this achievement, formatted for the user's locale; only applicable for TYPE_INCREMENTAL achievement types. abstract long getLastUpdatedTimestamp() Retrieves the timestamp (in millseconds since epoch) at which this achievement was last updated. abstract void getName(CharArrayBuffer dataOut) Loads the achievement name into the given CharArrayBuffer. abstract String getName() Retrieves the name of this achievement. abstract Player getPlayer() Retrieves the player information associated with this achievement. abstract Uri getRevealedImageUri() Retrieves a URI that can be used to load the achievement's revealed image icon. abstract int getState() Retrieves the state of the achievement - one of STATE_UNLOCKED, STATE_REVEALED, or STATE_HIDDEN. abstract int getTotalSteps() Retrieves the total number of steps necessary to unlock this achievement; only applicable for TYPE_INCREMENTAL achievement types. abstract int getType() Retrieves the type of this achievement - one of TYPE_STANDARD or TYPE_INCREMENTAL. abstract Uri getUnlockedImageUri() Retrieves a URI that can be used to load the achievement's unlocked image icon. abstract long getXpValue() Retrieves the XP value of this achievement.","abstract String getAchievementId() Retrieves the ID of this achievement.","abstract int getCurrentSteps() Retrieves the number of steps this user has gone toward unlocking this achievement; only applicable for TYPE_INCREMENTAL achievement types.","abstract String getDescription() Retrieves the description for this achievement.","abstract void getDescription(CharArrayBuffer dataOut) Loads the achievement description into the given CharArrayBuffer.","abstract void getFormattedCurrentSteps(CharArrayBuffer dataOut) Retrieves the number of steps this user has gone toward unlocking this achievement (formatted for the user's locale) into the given CharArrayBuffer.","abstract String getFormattedCurrentSteps() Retrieves the number of steps this user has gone toward unlocking this achievement (formatted for the user's locale); only applicable for TYPE_INCREMENTAL achievement types.","abstract void getFormattedTotalSteps(CharArrayBuffer dataOut) Loads the total number of steps necessary to unlock this achievement (formatted for the user's locale) into the given CharArrayBuffer; only applicable for TYPE_INCREMENTAL achievement types.","abstract String getFormattedTotalSteps() Retrieves the total number of steps necessary to unlock this achievement, formatted for the user's locale; only applicable for TYPE_INCREMENTAL achievement types.","abstract long getLastUpdatedTimestamp() Retrieves the timestamp (in millseconds since epoch) at which this achievement was last updated.","abstract void getName(CharArrayBuffer dataOut) Loads the achievement name into the given CharArrayBuffer.","abstract String getName() Retrieves the name of this achievement.","abstract Player getPlayer() Retrieves the player information associated with this achievement.","abstract Uri getRevealedImageUri() Retrieves a URI that can be used to load the achievement's revealed image icon.","abstract int getState() Retrieves the state of the achievement - one of STATE_UNLOCKED, STATE_REVEALED, or STATE_HIDDEN.","abstract int getTotalSteps() Retrieves the total number of steps necessary to unlock this achievement; only applicable for TYPE_INCREMENTAL achievement types.","abstract int getType() Retrieves the type of this achievement - one of TYPE_STANDARD or TYPE_INCREMENTAL.","abstract Uri getUnlockedImageUri() Retrieves a URI that can be used to load the achievement's unlocked image icon.","abstract long getXpValue() Retrieves the XP value of this achievement."],"package":"com.google.android.gms.games.achievement","constants":["[Expand] Inherited Constants","From interface android.os.Parcelable int CONTENTS_FILE_DESCRIPTOR int PARCELABLE_WRITE_RETURN_VALUE","int CONTENTS_FILE_DESCRIPTOR","int PARCELABLE_WRITE_RETURN_VALUE","From interface com.google.android.gms.common.internal.safeparcel.SafeParcelable String NULL","String NULL","From interface com.google.android.gms.games.achievement.Achievement int STATE_HIDDEN Constant returned by getState() indicating a hidden achievement. int STATE_REVEALED Constant returned by getState() indicating a revealed achievement. int STATE_UNLOCKED Constant returned by getState() indicating an unlocked achievement. int TYPE_INCREMENTAL Constant returned by getType() indicating an incremental achievement. int TYPE_STANDARD Constant returned by getType() indicating a standard achievement.","int STATE_HIDDEN Constant returned by getState() indicating a hidden achievement.","int STATE_REVEALED Constant returned by getState() indicating a revealed achievement.","int STATE_UNLOCKED Constant returned by getState() indicating an unlocked achievement.","int TYPE_INCREMENTAL Constant returned by getType() indicating an incremental achievement.","int TYPE_STANDARD Constant returned by getType() indicating a standard achievement."],"class":"AchievementEntity","constructors":[],"fields":["public static final AchievementEntityCreator CREATOR"]}