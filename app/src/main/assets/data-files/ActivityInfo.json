{"methods":["int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation.","void dump(Printer pw, String prefix)","final int getThemeResource() Return the theme resource identifier to use for this activity.","String toString() Returns a string containing a concise, human-readable description of this object.","void writeToParcel(Parcel dest, int parcelableFlags)","[Expand] Inherited Methods","From class android.content.pm.ComponentInfo void dumpBack(Printer pw, String prefix) void dumpFront(Printer pw, String prefix) final int getBannerResource() Return the banner resource identifier to use for this component. final int getIconResource() Return the icon resource identifier to use for this component. final int getLogoResource() Return the logo resource identifier to use for this component. boolean isEnabled() Return whether this component and its enclosing application are enabled. CharSequence loadLabel(PackageManager pm) Retrieve the current textual label associated with this item. void writeToParcel(Parcel dest, int parcelableFlags)","void dumpBack(Printer pw, String prefix)","void dumpFront(Printer pw, String prefix)","final int getBannerResource() Return the banner resource identifier to use for this component.","final int getIconResource() Return the icon resource identifier to use for this component.","final int getLogoResource() Return the logo resource identifier to use for this component.","boolean isEnabled() Return whether this component and its enclosing application are enabled.","CharSequence loadLabel(PackageManager pm) Retrieve the current textual label associated with this item.","void writeToParcel(Parcel dest, int parcelableFlags)","From class android.content.pm.PackageItemInfo void dumpBack(Printer pw, String prefix) void dumpFront(Printer pw, String prefix) Drawable loadBanner(PackageManager pm) Retrieve the current graphical banner associated with this item. Drawable loadIcon(PackageManager pm) Retrieve the current graphical icon associated with this item. CharSequence loadLabel(PackageManager pm) Retrieve the current textual label associated with this item. Drawable loadLogo(PackageManager pm) Retrieve the current graphical logo associated with this item. XmlResourceParser loadXmlMetaData(PackageManager pm, String name) Load an XML resource attached to the meta-data of this item. void writeToParcel(Parcel dest, int parcelableFlags)","void dumpBack(Printer pw, String prefix)","void dumpFront(Printer pw, String prefix)","Drawable loadBanner(PackageManager pm) Retrieve the current graphical banner associated with this item.","Drawable loadIcon(PackageManager pm) Retrieve the current graphical icon associated with this item.","CharSequence loadLabel(PackageManager pm) Retrieve the current textual label associated with this item.","Drawable loadLogo(PackageManager pm) Retrieve the current graphical logo associated with this item.","XmlResourceParser loadXmlMetaData(PackageManager pm, String name) Load an XML resource attached to the meta-data of this item.","void writeToParcel(Parcel dest, int parcelableFlags)","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface android.os.Parcelable abstract int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation. abstract void writeToParcel(Parcel dest, int flags) Flatten this object in to a Parcel.","abstract int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation.","abstract void writeToParcel(Parcel dest, int flags) Flatten this object in to a Parcel."],"package":"android.content.pm","constants":["int CONFIG_DENSITY Bit in configChanges that indicates that the activity can itself handle density changes.","int CONFIG_FONT_SCALE Bit in configChanges that indicates that the activity can itself handle changes to the font scaling factor.","int CONFIG_KEYBOARD Bit in configChanges that indicates that the activity can itself handle changes to the keyboard type.","int CONFIG_KEYBOARD_HIDDEN Bit in configChanges that indicates that the activity can itself handle changes to the keyboard or navigation being hidden/exposed.","int CONFIG_LAYOUT_DIRECTION Bit in configChanges that indicates that the activity can itself handle the change to layout direction.","int CONFIG_LOCALE Bit in configChanges that indicates that the activity can itself handle changes to the locale.","int CONFIG_MCC Bit in configChanges that indicates that the activity can itself handle changes to the IMSI MCC.","int CONFIG_MNC Bit in configChanges that indicates that the activity can itself handle changes to the IMSI MNC.","int CONFIG_NAVIGATION Bit in configChanges that indicates that the activity can itself handle changes to the navigation type.","int CONFIG_ORIENTATION Bit in configChanges that indicates that the activity can itself handle changes to the screen orientation.","int CONFIG_SCREEN_LAYOUT Bit in configChanges that indicates that the activity can itself handle changes to the screen layout.","int CONFIG_SCREEN_SIZE Bit in configChanges that indicates that the activity can itself handle the screen size.","int CONFIG_SMALLEST_SCREEN_SIZE Bit in configChanges that indicates that the activity can itself handle the smallest screen size.","int CONFIG_TOUCHSCREEN Bit in configChanges that indicates that the activity can itself handle changes to the touchscreen type.","int CONFIG_UI_MODE Bit in configChanges that indicates that the activity can itself handle the ui mode.","int DOCUMENT_LAUNCH_ALWAYS Constant corresponding to always in the documentLaunchMode attribute.","int DOCUMENT_LAUNCH_INTO_EXISTING Constant corresponding to intoExisting in the documentLaunchMode attribute.","int DOCUMENT_LAUNCH_NEVER Constant corresponding to never in the documentLaunchMode attribute.","int DOCUMENT_LAUNCH_NONE Constant corresponding to none in the documentLaunchMode attribute.","int FLAG_ALLOW_TASK_REPARENTING Bit in flags that indicates that the activity can be moved between tasks based on its task affinity.","int FLAG_ALWAYS_RETAIN_TASK_STATE Bit in flags indicating that, when the activity is the root of a task, that task's stack should never be cleared when it is relaunched from home.","int FLAG_AUTO_REMOVE_FROM_RECENTS Bit in flags indicating that tasks started with this activity are to be removed from the recent list of tasks when the last activity in the task is finished.","int FLAG_CLEAR_TASK_ON_LAUNCH Bit in flags indicating that, when the activity is the root of a task, that task's stack should be cleared each time the user re-launches it from home.","int FLAG_EXCLUDE_FROM_RECENTS Bit in flags that indicates that the activity should not appear in the list of recently launched activities.","int FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS Bit in flags indicating that, when a request to close system windows happens, this activity is finished.","int FLAG_FINISH_ON_TASK_LAUNCH Bit in flags indicating that, when the activity's task is relaunched from home, this activity should be finished.","int FLAG_HARDWARE_ACCELERATED Value for flags: true when the application's rendering should be hardware accelerated.","int FLAG_IMMERSIVE Bit in flags corresponding to an immersive activity that wishes not to be interrupted by notifications.","int FLAG_MULTIPROCESS Bit in flags indicating whether this activity is able to run in multiple processes.","int FLAG_NO_HISTORY Bit in flags indicating that, when the user navigates away from an activity, it should be finished.","int FLAG_RELINQUISH_TASK_IDENTITY Bit in flags: If set, a task rooted at this activity will have its baseIntent replaced by the activity immediately above this.","int FLAG_RESUME_WHILE_PAUSING Bit in flags indicating that this activity can start is creation/resume while the previous activity is still pausing.","int FLAG_SINGLE_USER Bit in flags: If set, a single instance of the receiver will run for all users on the device.","int FLAG_STATE_NOT_NEEDED Bit in flags indicating that the activity's state is not required to be saved, so that if there is a failure the activity will not be removed from the activity stack.","int LAUNCH_MULTIPLE Constant corresponding to standard in the launchMode attribute.","int LAUNCH_SINGLE_INSTANCE Constant corresponding to singleInstance in the launchMode attribute.","int LAUNCH_SINGLE_TASK Constant corresponding to singleTask in the launchMode attribute.","int LAUNCH_SINGLE_TOP Constant corresponding to singleTop in the launchMode attribute.","int PERSIST_ACROSS_REBOOTS Constant corresponding to persistAcrossReboots in the persistableMode attribute.","int PERSIST_NEVER Constant corresponding to doNotPersist in the persistableMode attribute.","int PERSIST_ROOT_ONLY Constant corresponding to persistRootOnly in the persistableMode attribute.","int SCREEN_ORIENTATION_BEHIND Constant corresponding to behind in the screenOrientation attribute.","int SCREEN_ORIENTATION_FULL_SENSOR Constant corresponding to fullSensor in the screenOrientation attribute.","int SCREEN_ORIENTATION_FULL_USER Constant corresponding to fullUser in the screenOrientation attribute.","int SCREEN_ORIENTATION_LANDSCAPE Constant corresponding to landscape in the screenOrientation attribute.","int SCREEN_ORIENTATION_LOCKED Constant corresponding to locked in the screenOrientation attribute.","int SCREEN_ORIENTATION_NOSENSOR Constant corresponding to nosensor in the screenOrientation attribute.","int SCREEN_ORIENTATION_PORTRAIT Constant corresponding to portrait in the screenOrientation attribute.","int SCREEN_ORIENTATION_REVERSE_LANDSCAPE Constant corresponding to reverseLandscape in the screenOrientation attribute.","int SCREEN_ORIENTATION_REVERSE_PORTRAIT Constant corresponding to reversePortrait in the screenOrientation attribute.","int SCREEN_ORIENTATION_SENSOR Constant corresponding to sensor in the screenOrientation attribute.","int SCREEN_ORIENTATION_SENSOR_LANDSCAPE Constant corresponding to sensorLandscape in the screenOrientation attribute.","int SCREEN_ORIENTATION_SENSOR_PORTRAIT Constant corresponding to sensorPortrait in the screenOrientation attribute.","int SCREEN_ORIENTATION_UNSPECIFIED Constant corresponding to unspecified in the screenOrientation attribute.","int SCREEN_ORIENTATION_USER Constant corresponding to user in the screenOrientation attribute.","int SCREEN_ORIENTATION_USER_LANDSCAPE Constant corresponding to userLandscape in the screenOrientation attribute.","int SCREEN_ORIENTATION_USER_PORTRAIT Constant corresponding to userPortrait in the screenOrientation attribute.","int UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW Flag for use with uiOptions.","[Expand] Inherited Constants","From interface android.os.Parcelable int CONTENTS_FILE_DESCRIPTOR Bit masks for use with describeContents(): each bit represents a kind of object considered to have potential special significance when marshalled. int PARCELABLE_WRITE_RETURN_VALUE Flag for use with writeToParcel(Parcel, int): the object being written is a return value, that is the result of a function such as \"Parcelable someFunction()\", \"void someFunction(out Parcelable)\", or \"void someFunction(inout Parcelable)\".","int CONTENTS_FILE_DESCRIPTOR Bit masks for use with describeContents(): each bit represents a kind of object considered to have potential special significance when marshalled.","int PARCELABLE_WRITE_RETURN_VALUE Flag for use with writeToParcel(Parcel, int): the object being written is a return value, that is the result of a function such as \"Parcelable someFunction()\", \"void someFunction(out Parcelable)\", or \"void someFunction(inout Parcelable)\"."],"class":"ActivityInfo","constructors":[],"fields":["public static final Creator<ActivityInfo> CREATOR","public int configChanges Bit mask of kinds of configuration changes that this activity can handle itself (without being restarted by the system).","public int documentLaunchMode The document launch mode style requested by the activity.","public int flags Options that have been set in the activity declaration in the manifest.","public int launchMode The launch mode style requested by the activity.","public int maxRecents The maximum number of tasks rooted at this activity that can be in the recent task list.","public String parentActivityName If defined, the activity named here is the logical parent of this activity.","public String permission Optional name of a permission required to be able to access this Activity.","public int persistableMode Value indicating how this activity is to be persisted across reboots for restoring in the Recents list.","public int screenOrientation The preferred screen orientation this activity would like to run in.","public int softInputMode The desired soft input mode for this activity's main window.","public String targetActivity If this is an activity alias, this is the real activity class to run for it.","public String taskAffinity The affinity this activity has for another task in the system.","public int theme A style resource identifier (in the package's resources) of this activity's theme.","public int uiOptions The desired extra UI options for this activity and its main window."]}