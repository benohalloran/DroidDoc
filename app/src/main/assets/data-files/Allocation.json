{"methods":["void copy1DRangeFrom(int off, int count, float[] d) Copy an array into part of this Allocation.","void copy1DRangeFrom(int off, int count, short[] d) Copy an array into part of this Allocation.","void copy1DRangeFrom(int off, int count, int[] d) Copy an array into part of this Allocation.","void copy1DRangeFrom(int off, int count, Allocation data, int dataOff) Copy part of an Allocation into this Allocation.","void copy1DRangeFrom(int off, int count, byte[] d) Copy an array into part of this Allocation.","void copy1DRangeFromUnchecked(int off, int count, short[] d) Copy an array into part of this Allocation.","void copy1DRangeFromUnchecked(int off, int count, byte[] d) Copy an array into part of this Allocation.","void copy1DRangeFromUnchecked(int off, int count, float[] d) Copy an array into part of this Allocation.","void copy1DRangeFromUnchecked(int off, int count, int[] d) Copy an array into part of this Allocation.","void copy2DRangeFrom(int xoff, int yoff, int w, int h, float[] data) Copy from an array into a rectangular region in this Allocation.","void copy2DRangeFrom(int xoff, int yoff, int w, int h, byte[] data) Copy from an array into a rectangular region in this Allocation.","void copy2DRangeFrom(int xoff, int yoff, int w, int h, int[] data) Copy from an array into a rectangular region in this Allocation.","void copy2DRangeFrom(int xoff, int yoff, int w, int h, short[] data) Copy from an array into a rectangular region in this Allocation.","void copy2DRangeFrom(int xoff, int yoff, Bitmap data) Copy a Bitmap into an Allocation.","void copy2DRangeFrom(int xoff, int yoff, int w, int h, Allocation data, int dataXoff, int dataYoff) Copy a rectangular region from an Allocation into a rectangular region in this Allocation.","void copyFrom(byte[] d) Copy into this Allocation from an array.","void copyFrom(int[] d) Copy into this Allocation from an array.","void copyFrom(float[] d) Copy into this Allocation from an array.","void copyFrom(BaseObj[] d) Copy an array of RS objects to the Allocation.","void copyFrom(Allocation a) Copy an Allocation from an Allocation.","void copyFrom(Bitmap b) Copy into an Allocation from a Bitmap.","void copyFrom(short[] d) Copy into this Allocation from an array.","void copyFromUnchecked(int[] d) Copy into this Allocation from an array.","void copyFromUnchecked(short[] d) Copy into this Allocation from an array.","void copyFromUnchecked(byte[] d) Copy into this Allocation from an array.","void copyFromUnchecked(float[] d) Copy into this Allocation from an array.","void copyTo(byte[] d) Copy from the Allocation into a byte array.","void copyTo(int[] d) Copy from the Allocation into a int array.","void copyTo(float[] d) Copy from the Allocation into a float array.","void copyTo(short[] d) Copy from the Allocation into a short array.","void copyTo(Bitmap b) Copy from the Allocation into a Bitmap.","static Allocation createCubemapFromBitmap(RenderScript rs, Bitmap b) Creates a non-mipmapped cubemap Allocation for use as a graphics texture from a Bitmap containing the horizontal list of cube faces.","static Allocation createCubemapFromBitmap(RenderScript rs, Bitmap b, Allocation.MipmapControl mips, int usage) Creates a cubemap Allocation from a Bitmap containing the horizontal list of cube faces.","static Allocation createCubemapFromCubeFaces(RenderScript rs, Bitmap xpos, Bitmap xneg, Bitmap ypos, Bitmap yneg, Bitmap zpos, Bitmap zneg, Allocation.MipmapControl mips, int usage) Creates a cubemap Allocation from 6 Bitmap objects containing the cube faces.","static Allocation createCubemapFromCubeFaces(RenderScript rs, Bitmap xpos, Bitmap xneg, Bitmap ypos, Bitmap yneg, Bitmap zpos, Bitmap zneg) Creates a non-mipmapped cubemap Allocation for use as a sampler input from 6 Bitmap objects containing the cube faces.","static Allocation createFromBitmap(RenderScript rs, Bitmap b, Allocation.MipmapControl mips, int usage) Creates an Allocation from a Bitmap.","static Allocation createFromBitmap(RenderScript rs, Bitmap b) Creates an Allocation from a Bitmap.","static Allocation createFromBitmapResource(RenderScript rs, Resources res, int id) Creates a non-mipmapped Allocation to use as a graphics texture from the Bitmap referenced by resource ID.","static Allocation createFromBitmapResource(RenderScript rs, Resources res, int id, Allocation.MipmapControl mips, int usage) Creates an Allocation from the Bitmap referenced by resource ID.","static Allocation createFromString(RenderScript rs, String str, int usage) Creates an Allocation containing string data encoded in UTF-8 format.","static Allocation createSized(RenderScript rs, Element e, int count, int usage) Creates an Allocation with a specified number of given elements","static Allocation createSized(RenderScript rs, Element e, int count) Creates an Allocation with a specified number of given elements","static Allocation createTyped(RenderScript rs, Type type, int usage) Creates an Allocation with the size specified by the type and no mipmaps generated by default","static Allocation createTyped(RenderScript rs, Type type) Creates an Allocation for use by scripts with a given Type and no mipmaps","static Allocation createTyped(RenderScript rs, Type type, Allocation.MipmapControl mips, int usage) Creates a new Allocation with the given Type, mipmap flag, and usage flags.","void generateMipmaps() Generate a mipmap chain.","int getBytesSize() Get the size of the Allocation in bytes.","Element getElement() Get the Element of the Type of the Allocation.","Type getType() Get the Type of the Allocation.","int getUsage() Get the usage flags of the Allocation.","void ioReceive() Receive the latest input into the Allocation.","void ioSend() Send a buffer to the output stream.","void setFromFieldPacker(int xoff, FieldPacker fp) This is only intended to be used by auto-generated code reflected from the RenderScript script files and should not be used by developers.","void setFromFieldPacker(int xoff, int component_number, FieldPacker fp) This is only intended to be used by auto-generated code reflected from the RenderScript script files.","void syncAll(int srcLocation) Propagate changes from one usage of the Allocation to the other usages of the Allocation.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","[Expand] Inherited Methods","From class android.support.v8.renderscript.BaseObj void destroy() Frees any native resources associated with this object. boolean equals(Object obj) Compare the current BaseObj with another BaseObj for equality. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. int hashCode() Calculates the hash code value for a BaseObj.","void destroy() Frees any native resources associated with this object.","boolean equals(Object obj) Compare the current BaseObj with another BaseObj for equality.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","int hashCode() Calculates the hash code value for a BaseObj.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.support.v8.renderscript","constants":["int USAGE_GRAPHICS_TEXTURE The Allocation will be used as a texture source by one or more graphics programs.","int USAGE_IO_INPUT The Allocation will be used as a SurfaceTexture consumer.","int USAGE_IO_OUTPUT The Allocation will be used as a SurfaceTexture producer.","int USAGE_SCRIPT The Allocation will be bound to and accessed by scripts.","int USAGE_SHARED The Allocation's backing store will be inherited from another object (usually a Bitmap); copying to or from the original source Bitmap will cause a synchronization rather than a full copy."],"class":"Allocation","constructors":[],"fields":[]}