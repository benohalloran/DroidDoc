{"methods":["boolean willChangeBounds() Indicates whether or not this animation will affect the bounds of the animated view.","boolean willChangeTransformationMatrix() Indicates whether or not this animation will affect the transformation matrix.","void applyTransformation(float interpolatedTime, Transformation t) Changes the alpha property of the supplied Transformation","[Expand] Inherited Methods","From class android.view.animation.Animation void applyTransformation(float interpolatedTime, Transformation t) Helper for getTransformation. void cancel() Cancel the animation. Animation clone() Creates and returns a copy of this Object. long computeDurationHint() Compute a hint at how long the entire animation may last, in milliseconds. void ensureInterpolator() Gurantees that this animation has an interpolator. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. int getBackgroundColor() Returns the background color behind the animation. boolean getDetachWallpaper() Return value of setDetachWallpaper(boolean). long getDuration() How long this animation should last boolean getFillAfter() If fillAfter is true, this animation will apply its transformation after the end time of the animation. boolean getFillBefore() If fillBefore is true, this animation will apply its transformation before the start time of the animation. Interpolator getInterpolator() Gets the acceleration curve type for this animation. int getRepeatCount() Defines how many times the animation should repeat. int getRepeatMode() Defines what this animation should do when it reaches the end. float getScaleFactor() The scale factor is set by the call to getTransformation. long getStartOffset() When this animation should start, relative to StartTime long getStartTime() When this animation should start. boolean getTransformation(long currentTime, Transformation outTransformation, float scale) Gets the transformation to apply at a specified point in time. boolean getTransformation(long currentTime, Transformation outTransformation) Gets the transformation to apply at a specified point in time. int getZAdjustment() Returns the Z ordering mode to use while running the animation as previously set by setZAdjustment(int). boolean hasEnded() Indicates whether this animation has ended or not. boolean hasStarted() Indicates whether this animation has started or not. void initialize(int width, int height, int parentWidth, int parentHeight) Initialize this animation with the dimensions of the object being animated as well as the objects parents. boolean isFillEnabled() If fillEnabled is true, this animation will apply the value of fillBefore. boolean isInitialized() Whether or not the animation has been initialized. void reset() Reset the initialization state of this animation. float resolveSize(int type, float value, int size, int parentSize) Convert the information in the description of a size to an actual dimension void restrictDuration(long durationMillis) Ensure that the duration that this animation will run is not longer than durationMillis. void scaleCurrentDuration(float scale) How much to scale the duration by. void setAnimationListener(Animation.AnimationListener listener) Binds an animation listener to this animation. void setBackgroundColor(int bg) Set background behind animation. void setDetachWallpaper(boolean detachWallpaper) If detachWallpaper is true, and this is a window animation of a window that has a wallpaper background, then the window will be detached from the wallpaper while it runs. void setDuration(long durationMillis) How long this animation should last. void setFillAfter(boolean fillAfter) If fillAfter is true, the transformation that this animation performed will persist when it is finished. void setFillBefore(boolean fillBefore) If fillBefore is true, this animation will apply its transformation before the start time of the animation. void setFillEnabled(boolean fillEnabled) If fillEnabled is true, the animation will apply the value of fillBefore. void setInterpolator(Context context, int resID) Sets the acceleration curve for this animation. void setInterpolator(Interpolator i) Sets the acceleration curve for this animation. void setRepeatCount(int repeatCount) Sets how many times the animation should be repeated. void setRepeatMode(int repeatMode) Defines what this animation should do when it reaches the end. void setStartOffset(long startOffset) When this animation should start relative to the start time. void setStartTime(long startTimeMillis) When this animation should start. void setZAdjustment(int zAdjustment) Set the Z ordering mode to use while running the animation. void start() Convenience method to start the animation the first time getTransformation(long, Transformation) is invoked. void startNow() Convenience method to start the animation at the current time in milliseconds. boolean willChangeBounds() Indicates whether or not this animation will affect the bounds of the animated view. boolean willChangeTransformationMatrix() Indicates whether or not this animation will affect the transformation matrix.","void applyTransformation(float interpolatedTime, Transformation t) Helper for getTransformation.","void cancel() Cancel the animation.","Animation clone() Creates and returns a copy of this Object.","long computeDurationHint() Compute a hint at how long the entire animation may last, in milliseconds.","void ensureInterpolator() Gurantees that this animation has an interpolator.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","int getBackgroundColor() Returns the background color behind the animation.","boolean getDetachWallpaper() Return value of setDetachWallpaper(boolean).","long getDuration() How long this animation should last","boolean getFillAfter() If fillAfter is true, this animation will apply its transformation after the end time of the animation.","boolean getFillBefore() If fillBefore is true, this animation will apply its transformation before the start time of the animation.","Interpolator getInterpolator() Gets the acceleration curve type for this animation.","int getRepeatCount() Defines how many times the animation should repeat.","int getRepeatMode() Defines what this animation should do when it reaches the end.","float getScaleFactor() The scale factor is set by the call to getTransformation.","long getStartOffset() When this animation should start, relative to StartTime","long getStartTime() When this animation should start.","boolean getTransformation(long currentTime, Transformation outTransformation, float scale) Gets the transformation to apply at a specified point in time.","boolean getTransformation(long currentTime, Transformation outTransformation) Gets the transformation to apply at a specified point in time.","int getZAdjustment() Returns the Z ordering mode to use while running the animation as previously set by setZAdjustment(int).","boolean hasEnded() Indicates whether this animation has ended or not.","boolean hasStarted() Indicates whether this animation has started or not.","void initialize(int width, int height, int parentWidth, int parentHeight) Initialize this animation with the dimensions of the object being animated as well as the objects parents.","boolean isFillEnabled() If fillEnabled is true, this animation will apply the value of fillBefore.","boolean isInitialized() Whether or not the animation has been initialized.","void reset() Reset the initialization state of this animation.","float resolveSize(int type, float value, int size, int parentSize) Convert the information in the description of a size to an actual dimension","void restrictDuration(long durationMillis) Ensure that the duration that this animation will run is not longer than durationMillis.","void scaleCurrentDuration(float scale) How much to scale the duration by.","void setAnimationListener(Animation.AnimationListener listener) Binds an animation listener to this animation.","void setBackgroundColor(int bg) Set background behind animation.","void setDetachWallpaper(boolean detachWallpaper) If detachWallpaper is true, and this is a window animation of a window that has a wallpaper background, then the window will be detached from the wallpaper while it runs.","void setDuration(long durationMillis) How long this animation should last.","void setFillAfter(boolean fillAfter) If fillAfter is true, the transformation that this animation performed will persist when it is finished.","void setFillBefore(boolean fillBefore) If fillBefore is true, this animation will apply its transformation before the start time of the animation.","void setFillEnabled(boolean fillEnabled) If fillEnabled is true, the animation will apply the value of fillBefore.","void setInterpolator(Context context, int resID) Sets the acceleration curve for this animation.","void setInterpolator(Interpolator i) Sets the acceleration curve for this animation.","void setRepeatCount(int repeatCount) Sets how many times the animation should be repeated.","void setRepeatMode(int repeatMode) Defines what this animation should do when it reaches the end.","void setStartOffset(long startOffset) When this animation should start relative to the start time.","void setStartTime(long startTimeMillis) When this animation should start.","void setZAdjustment(int zAdjustment) Set the Z ordering mode to use while running the animation.","void start() Convenience method to start the animation the first time getTransformation(long, Transformation) is invoked.","void startNow() Convenience method to start the animation at the current time in milliseconds.","boolean willChangeBounds() Indicates whether or not this animation will affect the bounds of the animated view.","boolean willChangeTransformationMatrix() Indicates whether or not this animation will affect the transformation matrix.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.view.animation","constants":["[Expand] Inherited Constants","From class android.view.animation.Animation int ABSOLUTE The specified dimension is an absolute number of pixels. int INFINITE Repeat the animation indefinitely. int RELATIVE_TO_PARENT The specified dimension holds a float and should be multiplied by the height or width of the parent of the object being animated. int RELATIVE_TO_SELF The specified dimension holds a float and should be multiplied by the height or width of the object being animated. int RESTART When the animation reaches the end and the repeat count is INFINTE_REPEAT or a positive value, the animation restarts from the beginning. int REVERSE When the animation reaches the end and the repeat count is INFINTE_REPEAT or a positive value, the animation plays backward (and then forward again). int START_ON_FIRST_FRAME Can be used as the start time to indicate the start time should be the current time when getTransformation(long, Transformation) is invoked for the first animation frame. int ZORDER_BOTTOM Requests that the content being animated be forced under all other content for the duration of the animation. int ZORDER_NORMAL Requests that the content being animated be kept in its current Z order. int ZORDER_TOP Requests that the content being animated be forced on top of all other content for the duration of the animation.","int ABSOLUTE The specified dimension is an absolute number of pixels.","int INFINITE Repeat the animation indefinitely.","int RELATIVE_TO_PARENT The specified dimension holds a float and should be multiplied by the height or width of the parent of the object being animated.","int RELATIVE_TO_SELF The specified dimension holds a float and should be multiplied by the height or width of the object being animated.","int RESTART When the animation reaches the end and the repeat count is INFINTE_REPEAT or a positive value, the animation restarts from the beginning.","int REVERSE When the animation reaches the end and the repeat count is INFINTE_REPEAT or a positive value, the animation plays backward (and then forward again).","int START_ON_FIRST_FRAME Can be used as the start time to indicate the start time should be the current time when getTransformation(long, Transformation) is invoked for the first animation frame.","int ZORDER_BOTTOM Requests that the content being animated be forced under all other content for the duration of the animation.","int ZORDER_NORMAL Requests that the content being animated be kept in its current Z order.","int ZORDER_TOP Requests that the content being animated be forced on top of all other content for the duration of the animation."],"class":"AlphaAnimation","constructors":[],"fields":[]}