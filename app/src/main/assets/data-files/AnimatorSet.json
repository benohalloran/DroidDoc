{"methods":["void cancel() Cancels the animation. Note that canceling a AnimatorSet also cancels all of the animations that it is responsible for.","AnimatorSet clone() Creates and returns a copy of this Object.","void end() Ends the animation. Note that ending a AnimatorSet also ends all of the animations that it is responsible for.","ArrayList<Animator> getChildAnimations() Returns the current list of child Animator objects controlled by this AnimatorSet.","long getDuration() Gets the length of each of the child animations of this AnimatorSet.","TimeInterpolator getInterpolator() Returns the timing interpolator that this animation uses.","long getStartDelay() The amount of time, in milliseconds, to delay starting the animation after start() is called.","boolean isRunning() Returns true if any of the child animations of this AnimatorSet have been started and have not yet ended.","boolean isStarted() Returns whether this Animator has been started and not yet ended.","void pause() Pauses a running animation.","AnimatorSet.Builder play(Animator anim) This method creates a Builder object, which is used to set up playing constraints.","void playSequentially(Animator... items) Sets up this AnimatorSet to play each of the supplied animations when the previous animation ends.","void playSequentially(List<Animator> items) Sets up this AnimatorSet to play each of the supplied animations when the previous animation ends.","void playTogether(Collection<Animator> items) Sets up this AnimatorSet to play all of the supplied animations at the same time.","void playTogether(Animator... items) Sets up this AnimatorSet to play all of the supplied animations at the same time.","void resume() Resumes a paused animation, causing the animator to pick up where it left off when it was paused.","AnimatorSet setDuration(long duration) Sets the length of each of the current child animations of this AnimatorSet.","void setInterpolator(TimeInterpolator interpolator) Sets the TimeInterpolator for all current child animations of this AnimatorSet.","void setStartDelay(long startDelay) The amount of time, in milliseconds, to delay starting the animation after start() is called.","void setTarget(Object target) Sets the target object for all current child animations of this AnimatorSet that take targets (ObjectAnimator and AnimatorSet).","void setupEndValues() This method tells the object to use appropriate information to extract ending values for the animation.","void setupStartValues() This method tells the object to use appropriate information to extract starting values for the animation.","void start() Starts this animation. Starting this AnimatorSet will, in turn, start the animations for which it is responsible.","[Expand] Inherited Methods","From class android.animation.Animator void addListener(Animator.AnimatorListener listener) Adds a listener to the set of listeners that are sent events through the life of an animation, such as start, repeat, and end. void addPauseListener(Animator.AnimatorPauseListener listener) Adds a pause listener to this animator. void cancel() Cancels the animation. Animator clone() Creates and returns a copy of this Object. void end() Ends the animation. abstract long getDuration() Gets the duration of the animation. TimeInterpolator getInterpolator() Returns the timing interpolator that this animation uses. ArrayList<Animator.AnimatorListener> getListeners() Gets the set of Animator.AnimatorListener objects that are currently listening for events on this Animator object. abstract long getStartDelay() The amount of time, in milliseconds, to delay processing the animation after start() is called. boolean isPaused() Returns whether this animator is currently in a paused state. abstract boolean isRunning() Returns whether this Animator is currently running (having been started and gone past any initial startDelay period and not yet ended). boolean isStarted() Returns whether this Animator has been started and not yet ended. void pause() Pauses a running animation. void removeAllListeners() Removes all listeners and pauseListeners from this object. void removeListener(Animator.AnimatorListener listener) Removes a listener from the set listening to this animation. void removePauseListener(Animator.AnimatorPauseListener listener) Removes a pause listener from the set listening to this animation. void resume() Resumes a paused animation, causing the animator to pick up where it left off when it was paused. abstract Animator setDuration(long duration) Sets the duration of the animation. abstract void setInterpolator(TimeInterpolator value) The time interpolator used in calculating the elapsed fraction of the animation. abstract void setStartDelay(long startDelay) The amount of time, in milliseconds, to delay processing the animation after start() is called. void setTarget(Object target) Sets the target object whose property will be animated by this animation. void setupEndValues() This method tells the object to use appropriate information to extract ending values for the animation. void setupStartValues() This method tells the object to use appropriate information to extract starting values for the animation. void start() Starts this animation.","void addListener(Animator.AnimatorListener listener) Adds a listener to the set of listeners that are sent events through the life of an animation, such as start, repeat, and end.","void addPauseListener(Animator.AnimatorPauseListener listener) Adds a pause listener to this animator.","void cancel() Cancels the animation.","Animator clone() Creates and returns a copy of this Object.","void end() Ends the animation.","abstract long getDuration() Gets the duration of the animation.","TimeInterpolator getInterpolator() Returns the timing interpolator that this animation uses.","ArrayList<Animator.AnimatorListener> getListeners() Gets the set of Animator.AnimatorListener objects that are currently listening for events on this Animator object.","abstract long getStartDelay() The amount of time, in milliseconds, to delay processing the animation after start() is called.","boolean isPaused() Returns whether this animator is currently in a paused state.","abstract boolean isRunning() Returns whether this Animator is currently running (having been started and gone past any initial startDelay period and not yet ended).","boolean isStarted() Returns whether this Animator has been started and not yet ended.","void pause() Pauses a running animation.","void removeAllListeners() Removes all listeners and pauseListeners from this object.","void removeListener(Animator.AnimatorListener listener) Removes a listener from the set listening to this animation.","void removePauseListener(Animator.AnimatorPauseListener listener) Removes a pause listener from the set listening to this animation.","void resume() Resumes a paused animation, causing the animator to pick up where it left off when it was paused.","abstract Animator setDuration(long duration) Sets the duration of the animation.","abstract void setInterpolator(TimeInterpolator value) The time interpolator used in calculating the elapsed fraction of the animation.","abstract void setStartDelay(long startDelay) The amount of time, in milliseconds, to delay processing the animation after start() is called.","void setTarget(Object target) Sets the target object whose property will be animated by this animation.","void setupEndValues() This method tells the object to use appropriate information to extract ending values for the animation.","void setupStartValues() This method tells the object to use appropriate information to extract starting values for the animation.","void start() Starts this animation.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.animation","constants":[],"class":"AnimatorSet","constructors":[],"fields":[]}