{"methods":["void onAppWidgetOptionsChanged(Context context, AppWidgetManager appWidgetManager, int appWidgetId, Bundle newOptions) Called in response to the ACTION_APPWIDGET_OPTIONS_CHANGED broadcast when this widget has been layed out at a new size.","void onDeleted(Context context, int[] appWidgetIds) Called in response to the ACTION_APPWIDGET_DELETED broadcast when one or more AppWidget instances have been deleted. Override this method to implement your own AppWidget functionality.","void onDisabled(Context context) Called in response to the ACTION_APPWIDGET_DISABLED broadcast, which is sent when the last AppWidget instance for this provider is deleted. Override this method to implement your own AppWidget functionality.","void onEnabled(Context context) Called in response to the ACTION_APPWIDGET_ENABLED broadcast when the a AppWidget for this provider is instantiated. Override this method to implement your own AppWidget functionality.","void onReceive(Context context, Intent intent) Implements onReceive(Context, Intent) to dispatch calls to the various other methods on AppWidgetProvider.","void onRestored(Context context, int[] oldWidgetIds, int[] newWidgetIds) Called in response to the ACTION_APPWIDGET_RESTORED broadcast when instances of this AppWidget provider have been restored from backup. If your provider maintains any persistent data about its widget instances, override this method to remap the old AppWidgetIds to the new values and update any other app state that may be relevant. This callback will be followed immediately by a call to onUpdate(Context, AppWidgetManager, int[]) so your provider can immediately generate new RemoteViews suitable for its newly-restored set of instances.","void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) Called in response to the ACTION_APPWIDGET_UPDATE and ACTION_APPWIDGET_RESTORED broadcasts when this AppWidget provider is being asked to provide RemoteViews for a set of AppWidgets. Override this method to implement your own AppWidget functionality.","[Expand] Inherited Methods","From class android.content.BroadcastReceiver final void abortBroadcast() Sets the flag indicating that this receiver should abort the current broadcast; only works with broadcasts sent through Context.sendOrderedBroadcast. final void clearAbortBroadcast() Clears the flag indicating that this receiver should abort the current broadcast. final boolean getAbortBroadcast() Returns the flag indicating whether or not this receiver should abort the current broadcast. final boolean getDebugUnregister() Return the last value given to setDebugUnregister(boolean). final int getResultCode() Retrieve the current result code, as set by the previous receiver. final String getResultData() Retrieve the current result data, as set by the previous receiver. final Bundle getResultExtras(boolean makeMap) Retrieve the current result extra data, as set by the previous receiver. final BroadcastReceiver.PendingResult goAsync() This can be called by an application in onReceive(Context, Intent) to allow it to keep the broadcast active after returning from that function. final boolean isInitialStickyBroadcast() Returns true if the receiver is currently processing the initial value of a sticky broadcast -- that is, the value that was last broadcast and is currently held in the sticky cache, so this is not directly the result of a broadcast right now. final boolean isOrderedBroadcast() Returns true if the receiver is currently processing an ordered broadcast. abstract void onReceive(Context context, Intent intent) This method is called when the BroadcastReceiver is receiving an Intent broadcast. IBinder peekService(Context myContext, Intent service) Provide a binder to an already-running service. final void setDebugUnregister(boolean debug) Control inclusion of debugging help for mismatched calls to Context.registerReceiver(). final void setOrderedHint(boolean isOrdered) For internal use, sets the hint about whether this BroadcastReceiver is running in ordered mode. final void setResult(int code, String data, Bundle extras) Change all of the result data returned from this broadcasts; only works with broadcasts sent through Context.sendOrderedBroadcast. final void setResultCode(int code) Change the current result code of this broadcast; only works with broadcasts sent through Context.sendOrderedBroadcast. final void setResultData(String data) Change the current result data of this broadcast; only works with broadcasts sent through Context.sendOrderedBroadcast. final void setResultExtras(Bundle extras) Change the current result extras of this broadcast; only works with broadcasts sent through Context.sendOrderedBroadcast.","final void abortBroadcast() Sets the flag indicating that this receiver should abort the current broadcast; only works with broadcasts sent through Context.sendOrderedBroadcast.","final void clearAbortBroadcast() Clears the flag indicating that this receiver should abort the current broadcast.","final boolean getAbortBroadcast() Returns the flag indicating whether or not this receiver should abort the current broadcast.","final boolean getDebugUnregister() Return the last value given to setDebugUnregister(boolean).","final int getResultCode() Retrieve the current result code, as set by the previous receiver.","final String getResultData() Retrieve the current result data, as set by the previous receiver.","final Bundle getResultExtras(boolean makeMap) Retrieve the current result extra data, as set by the previous receiver.","final BroadcastReceiver.PendingResult goAsync() This can be called by an application in onReceive(Context, Intent) to allow it to keep the broadcast active after returning from that function.","final boolean isInitialStickyBroadcast() Returns true if the receiver is currently processing the initial value of a sticky broadcast -- that is, the value that was last broadcast and is currently held in the sticky cache, so this is not directly the result of a broadcast right now.","final boolean isOrderedBroadcast() Returns true if the receiver is currently processing an ordered broadcast.","abstract void onReceive(Context context, Intent intent) This method is called when the BroadcastReceiver is receiving an Intent broadcast.","IBinder peekService(Context myContext, Intent service) Provide a binder to an already-running service.","final void setDebugUnregister(boolean debug) Control inclusion of debugging help for mismatched calls to Context.registerReceiver().","final void setOrderedHint(boolean isOrdered) For internal use, sets the hint about whether this BroadcastReceiver is running in ordered mode.","final void setResult(int code, String data, Bundle extras) Change all of the result data returned from this broadcasts; only works with broadcasts sent through Context.sendOrderedBroadcast.","final void setResultCode(int code) Change the current result code of this broadcast; only works with broadcasts sent through Context.sendOrderedBroadcast.","final void setResultData(String data) Change the current result data of this broadcast; only works with broadcasts sent through Context.sendOrderedBroadcast.","final void setResultExtras(Bundle extras) Change the current result extras of this broadcast; only works with broadcasts sent through Context.sendOrderedBroadcast.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.appwidget","constants":[],"class":"AppWidgetProvider","constructors":[],"fields":[]}