{"methods":["AppWidgetProviderInfo clone() Creates and returns a copy of this Object.","int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation.","final UserHandle getProfile() Gets the user profile in which the provider resides.","final Drawable loadIcon(Context context, int density) Loads the icon to display for this AppWidget in the AppWidget picker.","final String loadLabel(PackageManager packageManager) Loads the localized label to display to the user in the AppWidget picker.","final Drawable loadPreviewImage(Context context, int density) Loads a preview of what the AppWidget will look like after it's configured.","String toString() Returns a string containing a concise, human-readable description of this object.","void writeToParcel(Parcel out, int flags) Flatten this object in to a Parcel.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface android.os.Parcelable abstract int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation. abstract void writeToParcel(Parcel dest, int flags) Flatten this object in to a Parcel.","abstract int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation.","abstract void writeToParcel(Parcel dest, int flags) Flatten this object in to a Parcel."],"package":"android.appwidget","constants":["int RESIZE_BOTH Widget is resizable in both the horizontal and vertical axes.","int RESIZE_HORIZONTAL Widget is resizable in the horizontal axis only.","int RESIZE_NONE Widget is not resizable.","int RESIZE_VERTICAL Widget is resizable in the vertical axis only.","int WIDGET_CATEGORY_HOME_SCREEN Indicates that the widget can be displayed on the home screen.","int WIDGET_CATEGORY_KEYGUARD Indicates that the widget can be displayed on the keyguard.","int WIDGET_CATEGORY_SEARCHBOX Indicates that the widget can be displayed within a space reserved for the search box.","[Expand] Inherited Constants","From interface android.os.Parcelable int CONTENTS_FILE_DESCRIPTOR Bit masks for use with describeContents(): each bit represents a kind of object considered to have potential special significance when marshalled. int PARCELABLE_WRITE_RETURN_VALUE Flag for use with writeToParcel(Parcel, int): the object being written is a return value, that is the result of a function such as \"Parcelable someFunction()\", \"void someFunction(out Parcelable)\", or \"void someFunction(inout Parcelable)\".","int CONTENTS_FILE_DESCRIPTOR Bit masks for use with describeContents(): each bit represents a kind of object considered to have potential special significance when marshalled.","int PARCELABLE_WRITE_RETURN_VALUE Flag for use with writeToParcel(Parcel, int): the object being written is a return value, that is the result of a function such as \"Parcelable someFunction()\", \"void someFunction(out Parcelable)\", or \"void someFunction(inout Parcelable)\"."],"class":"AppWidgetProviderInfo","constructors":[],"fields":["public static final Creator<AppWidgetProviderInfo> CREATOR Parcelable.Creator that instantiates AppWidgetProviderInfo objects","public int autoAdvanceViewId The view id of the AppWidget subview which should be auto-advanced by the widget's host.","public ComponentName configure The activity to launch that will configure the AppWidget.","public int icon The icon to display for this AppWidget in the AppWidget picker.","public int initialKeyguardLayout The resource id of the initial layout for this AppWidget when it is displayed on keyguard.","public int initialLayout The resource id of the initial layout for this AppWidget.","public String label This field was deprecated in API level 21. Use loadLabel(android.content.pm.PackageManager).","public int minHeight The default height of the widget when added to a host, in dp.","public int minResizeHeight Minimum height (in dp) which the widget can be resized to.","public int minResizeWidth Minimum width (in dp) which the widget can be resized to.","public int minWidth The default height of the widget when added to a host, in dp.","public int previewImage A preview of what the AppWidget will look like after it's configured.","public ComponentName provider Identity of this AppWidget component.","public int resizeMode The rules by which a widget can be resized.","public int updatePeriodMillis How often, in milliseconds, that this AppWidget wants to be updated.","public int widgetCategory Determines whether this widget can be displayed on the home screen, the keyguard, or both."]}