{"methods":["int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation.","void dump(Printer pw, String prefix)","CharSequence loadDescription(PackageManager pm) Retrieve the textual description of the application.","String toString() Returns a string containing a concise, human-readable description of this object.","void writeToParcel(Parcel dest, int parcelableFlags)","[Expand] Inherited Methods","From class android.content.pm.PackageItemInfo void dumpBack(Printer pw, String prefix) void dumpFront(Printer pw, String prefix) Drawable loadBanner(PackageManager pm) Retrieve the current graphical banner associated with this item. Drawable loadIcon(PackageManager pm) Retrieve the current graphical icon associated with this item. CharSequence loadLabel(PackageManager pm) Retrieve the current textual label associated with this item. Drawable loadLogo(PackageManager pm) Retrieve the current graphical logo associated with this item. XmlResourceParser loadXmlMetaData(PackageManager pm, String name) Load an XML resource attached to the meta-data of this item. void writeToParcel(Parcel dest, int parcelableFlags)","void dumpBack(Printer pw, String prefix)","void dumpFront(Printer pw, String prefix)","Drawable loadBanner(PackageManager pm) Retrieve the current graphical banner associated with this item.","Drawable loadIcon(PackageManager pm) Retrieve the current graphical icon associated with this item.","CharSequence loadLabel(PackageManager pm) Retrieve the current textual label associated with this item.","Drawable loadLogo(PackageManager pm) Retrieve the current graphical logo associated with this item.","XmlResourceParser loadXmlMetaData(PackageManager pm, String name) Load an XML resource attached to the meta-data of this item.","void writeToParcel(Parcel dest, int parcelableFlags)","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface android.os.Parcelable abstract int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation. abstract void writeToParcel(Parcel dest, int flags) Flatten this object in to a Parcel.","abstract int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation.","abstract void writeToParcel(Parcel dest, int flags) Flatten this object in to a Parcel."],"package":"android.content.pm","constants":["int FLAG_ALLOW_BACKUP Value for flags: set to false if the application does not wish to permit any OS-driven backups of its data; true otherwise.","int FLAG_ALLOW_CLEAR_USER_DATA Value for flags: default value for the corresponding ActivityInfo flag.","int FLAG_ALLOW_TASK_REPARENTING Value for flags: default value for the corresponding ActivityInfo flag.","int FLAG_DEBUGGABLE Value for flags: set to true if this application would like to allow debugging of its code, even when installed on a non-development system.","int FLAG_EXTERNAL_STORAGE Value for flags: Set to true if the application is currently installed on external/removable/unprotected storage.","int FLAG_FACTORY_TEST Value for flags: set to true if this application holds the FACTORY_TEST permission and the device is running in factory test mode.","int FLAG_FULL_BACKUP_ONLY Value for flags: true if the application asks that only full-data streaming backups of its data be performed even though it defines a BackupAgent, which normally indicates that the app will manage its backed-up data via incremental key/value updates.","int FLAG_HAS_CODE Value for flags: set to true if this application has code associated with it.","int FLAG_INSTALLED Value for flags: true if the application is currently installed for the calling user.","int FLAG_IS_DATA_ONLY Value for flags: true if the application only has its data installed; the application package itself does not currently exist on the device.","int FLAG_IS_GAME Value for flags: true if the application was declared to be a game, or false if it is a non-game application.","int FLAG_KILL_AFTER_RESTORE Value for flags: set to false if the application must be kept in memory following a full-system restore operation; true otherwise.","int FLAG_LARGE_HEAP Value for flags: true when the application has requested a large heap for its processes.","int FLAG_MULTIARCH Value for flags: true if code from this application will need to be loaded into other applications' processes.","int FLAG_PERSISTENT Value for flags: set to true if this application is persistent.","int FLAG_RESIZEABLE_FOR_SCREENS Value for flags: true when the application knows how to adjust its UI for different screen sizes.","int FLAG_RESTORE_ANY_VERSION Value for flags: Set to true if the application's backup agent claims to be able to handle restore data even \"from the future,\" i.e.","int FLAG_STOPPED Value for flags: true if this application's package is in the stopped state.","int FLAG_SUPPORTS_LARGE_SCREENS Value for flags: true when the application's window can be increased in size for larger screens.","int FLAG_SUPPORTS_NORMAL_SCREENS Value for flags: true when the application's window can be displayed on normal screens.","int FLAG_SUPPORTS_RTL Value for flags: true when the application is willing to support RTL (right to left).","int FLAG_SUPPORTS_SCREEN_DENSITIES Value for flags: true when the application knows how to accomodate different screen densities.","int FLAG_SUPPORTS_SMALL_SCREENS Value for flags: true when the application's window can be reduced in size for smaller screens.","int FLAG_SUPPORTS_XLARGE_SCREENS Value for flags: true when the application's window can be increased in size for extra large screens.","int FLAG_SYSTEM Value for flags: if set, this application is installed in the device's system image.","int FLAG_TEST_ONLY Value for flags: this is set of the application has specified android:testOnly to be true.","int FLAG_UPDATED_SYSTEM_APP Value for flags: this is set if this application has been install as an update to a built-in system application.","int FLAG_VM_SAFE_MODE Value for flags: set to true if this application would like to request the VM to operate under the safe mode.","[Expand] Inherited Constants","From interface android.os.Parcelable int CONTENTS_FILE_DESCRIPTOR Bit masks for use with describeContents(): each bit represents a kind of object considered to have potential special significance when marshalled. int PARCELABLE_WRITE_RETURN_VALUE Flag for use with writeToParcel(Parcel, int): the object being written is a return value, that is the result of a function such as \"Parcelable someFunction()\", \"void someFunction(out Parcelable)\", or \"void someFunction(inout Parcelable)\".","int CONTENTS_FILE_DESCRIPTOR Bit masks for use with describeContents(): each bit represents a kind of object considered to have potential special significance when marshalled.","int PARCELABLE_WRITE_RETURN_VALUE Flag for use with writeToParcel(Parcel, int): the object being written is a return value, that is the result of a function such as \"Parcelable someFunction()\", \"void someFunction(out Parcelable)\", or \"void someFunction(inout Parcelable)\"."],"class":"ApplicationInfo","constructors":[],"fields":["public static final Creator<ApplicationInfo> CREATOR","public String backupAgentName Class implementing the Application's backup functionality.","public String className Class implementing the Application object.","public int compatibleWidthLimitDp The maximum smallest screen width the application is designed for.","public String dataDir Full path to a directory assigned to the package for its persistent data.","public int descriptionRes A style resource identifier (in the package's resources) of the description of an application.","public boolean enabled When false, indicates that all components within this application are considered disabled, regardless of their individually set enabled status.","public int flags Flags associated with the application.","public int largestWidthLimitDp The maximum smallest screen width the application will work on.","public String manageSpaceActivityName Class implementing the Application's manage space functionality.","public String nativeLibraryDir Full path to the directory where native JNI libraries are stored.","public String permission Optional name of a permission required to be able to access this application's components.","public String processName The name of the process this application should run in.","public String publicSourceDir Full path to the publicly available parts of sourceDir, including resources and manifest.","public int requiresSmallestWidthDp The required smallest screen width the application can run on.","public String[] sharedLibraryFiles Paths to all shared libraries this application is linked against.","public String sourceDir Full path to the base APK for this application.","public String[] splitPublicSourceDirs Full path to the publicly available parts of splitSourceDirs, including resources and manifest.","public String[] splitSourceDirs Full paths to zero or more split APKs that, when combined with the base APK defined in sourceDir, form a complete application.","public int targetSdkVersion The minimum SDK version this application targets.","public String taskAffinity Default task affinity of all activities in this application.","public int theme A style resource identifier (in the package's resources) of the default visual theme of the application.","public int uiOptions The default extra UI options for activities in this application.","public int uid The kernel user-ID that has been assigned to this application; currently this is not a unique ID (multiple applications can have the same uid)."]}