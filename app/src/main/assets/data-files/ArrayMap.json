{"methods":["void clear() Make the array map empty.","boolean containsAll(Collection<?> collection) Determine if the array map contains all of the keys in the given collection.","boolean containsKey(Object key) Check whether a key exists in the array.","boolean containsValue(Object value) Check whether a value exists in the array.","void ensureCapacity(int minimumCapacity) Ensure the array map can hold at least minimumCapacity items.","Set<Entry<K, V>> entrySet() Return a Set for iterating over and interacting with all mappings in the array map.","boolean equals(Object object) Compares this instance with the specified object and indicates if they are equal. This implementation returns false if the object is not a map, or if the maps have different sizes.","V get(Object key) Retrieve a value from the array.","int hashCode() Returns an integer hash code for this object.","int indexOfKey(Object key) Returns the index of a key in the set.","boolean isEmpty() Return true if the array map contains no items.","K keyAt(int index) Return the key at the given index in the array.","Set<K> keySet() Return a Set for iterating over and interacting with all keys in the array map.","V put(K key, V value) Add a new value to the array map.","void putAll(ArrayMap<? extends K, ? extends V> array) Perform a put(Object, Object) of all key/value pairs in array","void putAll(Map<? extends K, ? extends V> map) Perform a put(Object, Object) of all key/value pairs in map","V remove(Object key) Remove an existing key from the array map.","boolean removeAll(Collection<?> collection) Remove all keys in the array map that exist in the given collection.","V removeAt(int index) Remove the key/value mapping at the given index.","boolean retainAll(Collection<?> collection) Remove all keys in the array map that do not exist in the given collection.","V setValueAt(int index, V value) Set the value at a given index in the array.","int size() Return the number of items in this array map.","String toString() Returns a string containing a concise, human-readable description of this object. This implementation composes a string by iterating over its mappings.","V valueAt(int index) Return the value at the given index in the array.","Collection<V> values() Return a Collection for iterating over and interacting with all values in the array map.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface java.util.Map abstract void clear() Removes all elements from this Map, leaving it empty. abstract boolean containsKey(Object key) Returns whether this Map contains the specified key. abstract boolean containsValue(Object value) Returns whether this Map contains the specified value. abstract Set<Entry<K, V>> entrySet() Returns a Set containing all of the mappings in this Map. abstract boolean equals(Object object) Compares the argument to the receiver, and returns true if the specified object is a Map and both Maps contain the same mappings. abstract V get(Object key) Returns the value of the mapping with the specified key. abstract int hashCode() Returns an integer hash code for the receiver. abstract boolean isEmpty() Returns whether this map is empty. abstract Set<K> keySet() Returns a set of the keys contained in this Map. abstract V put(K key, V value) Maps the specified key to the specified value. abstract void putAll(Map<? extends K, ? extends V> map) Copies every mapping in the specified Map to this Map. abstract V remove(Object key) Removes a mapping with the specified key from this Map. abstract int size() Returns the number of mappings in this Map. abstract Collection<V> values() Returns a Collection of the values contained in this Map.","abstract void clear() Removes all elements from this Map, leaving it empty.","abstract boolean containsKey(Object key) Returns whether this Map contains the specified key.","abstract boolean containsValue(Object value) Returns whether this Map contains the specified value.","abstract Set<Entry<K, V>> entrySet() Returns a Set containing all of the mappings in this Map.","abstract boolean equals(Object object) Compares the argument to the receiver, and returns true if the specified object is a Map and both Maps contain the same mappings.","abstract V get(Object key) Returns the value of the mapping with the specified key.","abstract int hashCode() Returns an integer hash code for the receiver.","abstract boolean isEmpty() Returns whether this map is empty.","abstract Set<K> keySet() Returns a set of the keys contained in this Map.","abstract V put(K key, V value) Maps the specified key to the specified value.","abstract void putAll(Map<? extends K, ? extends V> map) Copies every mapping in the specified Map to this Map.","abstract V remove(Object key) Removes a mapping with the specified key from this Map.","abstract int size() Returns the number of mappings in this Map.","abstract Collection<V> values() Returns a Collection of the values contained in this Map."],"package":"android.util","constants":[],"class":"ArrayMap","constructors":[],"fields":[]}