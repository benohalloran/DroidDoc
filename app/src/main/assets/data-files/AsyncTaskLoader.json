{"methods":["boolean cancelLoad() Attempt to cancel the current load task.","void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args) Print the Loader's state into the given stream.","abstract D loadInBackground()","void onCanceled(D data) Called if the task was canceled before it was completed.","void setUpdateThrottle(long delayMS) Set amount to throttle updates by.","void onForceLoad() Subclasses must implement this to take care of requests to forceLoad().","D onLoadInBackground() Called on a worker thread to perform the actual load.","[Expand] Inherited Methods","From class android.support.v4.content.Loader void abandon() Tell the Loader that it is being abandoned. void commitContentChanged() Commit that you have actually fully processed a content change that was returned by takeContentChanged(). String dataToString(D data) For debugging, converts an instance of the Loader's data class to a string that can be printed. void deliverResult(D data) Sends the result of the load to the registered listener. void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args) Print the Loader's state into the given stream. void forceLoad() Force an asynchronous load. Context getContext() int getId() boolean isAbandoned() Return whether this loader has been abandoned. boolean isReset() Return whether this load has been reset. boolean isStarted() Return whether this load has been started. void onAbandon() Subclasses implement this to take care of being abandoned. void onContentChanged() Called when Loader.ForceLoadContentObserver detects a change. void onForceLoad() Subclasses must implement this to take care of requests to forceLoad(). void onReset() Subclasses must implement this to take care of resetting their loader, as per reset(). void onStartLoading() Subclasses must implement this to take care of loading their data, as per startLoading(). void onStopLoading() Subclasses must implement this to take care of stopping their loader, as per stopLoading(). void registerListener(int id, OnLoadCompleteListener<D> listener) Registers a class that will receive callbacks when a load is complete. void reset() Resets the state of the Loader. void rollbackContentChanged() Report that you have abandoned the processing of a content change that was returned by takeContentChanged() and would like to rollback to the state where there is again a pending content change. final void startLoading() Starts an asynchronous load of the Loader's data. void stopLoading() Stops delivery of updates until the next time startLoading() is called. boolean takeContentChanged() Take the current flag indicating whether the loader's content had changed while it was stopped. String toString() Returns a string containing a concise, human-readable description of this object. void unregisterListener(OnLoadCompleteListener<D> listener) Remove a listener that was previously added with registerListener(int, Loader.OnLoadCompleteListener).","void abandon() Tell the Loader that it is being abandoned.","void commitContentChanged() Commit that you have actually fully processed a content change that was returned by takeContentChanged().","String dataToString(D data) For debugging, converts an instance of the Loader's data class to a string that can be printed.","void deliverResult(D data) Sends the result of the load to the registered listener.","void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args) Print the Loader's state into the given stream.","void forceLoad() Force an asynchronous load.","Context getContext()","int getId()","boolean isAbandoned() Return whether this loader has been abandoned.","boolean isReset() Return whether this load has been reset.","boolean isStarted() Return whether this load has been started.","void onAbandon() Subclasses implement this to take care of being abandoned.","void onContentChanged() Called when Loader.ForceLoadContentObserver detects a change.","void onForceLoad() Subclasses must implement this to take care of requests to forceLoad().","void onReset() Subclasses must implement this to take care of resetting their loader, as per reset().","void onStartLoading() Subclasses must implement this to take care of loading their data, as per startLoading().","void onStopLoading() Subclasses must implement this to take care of stopping their loader, as per stopLoading().","void registerListener(int id, OnLoadCompleteListener<D> listener) Registers a class that will receive callbacks when a load is complete.","void reset() Resets the state of the Loader.","void rollbackContentChanged() Report that you have abandoned the processing of a content change that was returned by takeContentChanged() and would like to rollback to the state where there is again a pending content change.","final void startLoading() Starts an asynchronous load of the Loader's data.","void stopLoading() Stops delivery of updates until the next time startLoading() is called.","boolean takeContentChanged() Take the current flag indicating whether the loader's content had changed while it was stopped.","String toString() Returns a string containing a concise, human-readable description of this object.","void unregisterListener(OnLoadCompleteListener<D> listener) Remove a listener that was previously added with registerListener(int, Loader.OnLoadCompleteListener).","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.support.v4.content","constants":[],"class":"AsyncTaskLoader","constructors":[],"fields":[]}