{"methods":["int abandonAudioFocus(AudioManager.OnAudioFocusChangeListener l) Abandon audio focus.","void adjustStreamVolume(int streamType, int direction, int flags) Adjusts the volume of a particular stream by one step in a direction.","void adjustSuggestedStreamVolume(int direction, int suggestedStreamType, int flags) Adjusts the volume of the most relevant stream, or the given fallback stream.","void adjustVolume(int direction, int flags) Adjusts the volume of the most relevant stream.","void dispatchMediaKeyEvent(KeyEvent keyEvent) Sends a simulated key event for a media button.","int generateAudioSessionId() Return a new audio session identifier not associated with any player or effect.","int getMode() Returns the current audio mode.","String getParameters(String keys) Gets a variable number of parameter values from audio hardware.","String getProperty(String key) Returns the value of the property with the specified key.","int getRingerMode() Returns the current ringtone mode.","int getRouting(int mode) This method was deprecated in API level 4. Do not query audio routing directly, use isSpeakerphoneOn(), isBluetoothScoOn(), isBluetoothA2dpOn() and isWiredHeadsetOn() methods instead.","int getStreamMaxVolume(int streamType) Returns the maximum volume index for a particular stream.","int getStreamVolume(int streamType) Returns the current volume index for a particular stream.","int getVibrateSetting(int vibrateType) This method was deprecated in API level 16. Applications should maintain their own vibrate policy based on current ringer mode that can be queried via getRingerMode().","boolean isBluetoothA2dpOn() Checks whether A2DP audio routing to the Bluetooth headset is on or off.","boolean isBluetoothScoAvailableOffCall() Indicates if current platform supports use of SCO for off call use cases.","boolean isBluetoothScoOn() Checks whether communications use Bluetooth SCO.","boolean isMicrophoneMute() Checks whether the microphone mute is on or off.","boolean isMusicActive() Checks whether any music is active.","boolean isSpeakerphoneOn() Checks whether the speakerphone is on or off.","boolean isVolumeFixed() Indicates if the device implements a fixed volume policy.","boolean isWiredHeadsetOn() This method was deprecated in API level 14. Use only to check is a headset is connected or not.","void loadSoundEffects() Load Sound effects.","void playSoundEffect(int effectType, float volume) Plays a sound effect (Key clicks, lid open/close...)","void playSoundEffect(int effectType) Plays a sound effect (Key clicks, lid open/close...)","void registerMediaButtonEventReceiver(PendingIntent eventReceiver) This method was deprecated in API level 21. Use setMediaButtonReceiver(PendingIntent) instead.","void registerMediaButtonEventReceiver(ComponentName eventReceiver) This method was deprecated in API level 21. Use setMediaButtonReceiver(PendingIntent) instead.","void registerRemoteControlClient(RemoteControlClient rcClient) This method was deprecated in API level 21. Use MediaSession instead.","boolean registerRemoteController(RemoteController rctlr) This method was deprecated in API level 21. Use addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener, ComponentName) and MediaController instead.","int requestAudioFocus(AudioManager.OnAudioFocusChangeListener l, int streamType, int durationHint) Request audio focus.","void setBluetoothA2dpOn(boolean on) This method was deprecated in API level 5. Do not use.","void setBluetoothScoOn(boolean on) Request use of Bluetooth SCO headset for communications.","void setMicrophoneMute(boolean on) Sets the microphone mute on or off.","void setMode(int mode) Sets the audio mode.","void setParameters(String keyValuePairs) Sets a variable number of parameter values to audio hardware.","void setRingerMode(int ringerMode) Sets the ringer mode.","void setRouting(int mode, int routes, int mask) This method was deprecated in API level 4. Do not set audio routing directly, use setSpeakerphoneOn(), setBluetoothScoOn() methods instead.","void setSpeakerphoneOn(boolean on) Sets the speakerphone on or off.","void setStreamMute(int streamType, boolean state) Mute or unmute an audio stream.","void setStreamSolo(int streamType, boolean state) Solo or unsolo a particular stream.","void setStreamVolume(int streamType, int index, int flags) Sets the volume index for a particular stream.","void setVibrateSetting(int vibrateType, int vibrateSetting) This method was deprecated in API level 16. Applications should maintain their own vibrate policy based on current ringer mode that can be queried via getRingerMode().","void setWiredHeadsetOn(boolean on) This method was deprecated in API level 5. Do not use.","boolean shouldVibrate(int vibrateType) This method was deprecated in API level 16. Applications should maintain their own vibrate policy based on current ringer mode that can be queried via getRingerMode().","void startBluetoothSco() Start bluetooth SCO audio connection.","void stopBluetoothSco() Stop bluetooth SCO audio connection.","void unloadSoundEffects() Unload Sound effects.","void unregisterMediaButtonEventReceiver(ComponentName eventReceiver) This method was deprecated in API level 21. Use MediaSession instead.","void unregisterMediaButtonEventReceiver(PendingIntent eventReceiver) This method was deprecated in API level 21. Use MediaSession instead.","void unregisterRemoteControlClient(RemoteControlClient rcClient) This method was deprecated in API level 21. Use MediaSession instead.","void unregisterRemoteController(RemoteController rctlr) This method was deprecated in API level 21. Use removeOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener) instead.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.media","constants":["String ACTION_AUDIO_BECOMING_NOISY Broadcast intent, a hint for applications that audio is about to become 'noisy' due to a change in audio outputs.","String ACTION_HDMI_AUDIO_PLUG Broadcast Action: A sticky broadcast indicating an HMDI cable was plugged or unplugged The intent will have the following extra values: EXTRA_AUDIO_PLUG_STATE, EXTRA_MAX_CHANNEL_COUNT, EXTRA_ENCODINGS.","String ACTION_HEADSET_PLUG Broadcast Action: Wired Headset plugged in or unplugged.","String ACTION_SCO_AUDIO_STATE_CHANGED This constant was deprecated in API level 14. Use ACTION_SCO_AUDIO_STATE_UPDATED instead","String ACTION_SCO_AUDIO_STATE_UPDATED Sticky broadcast intent action indicating that the bluetoooth SCO audio connection state has been updated.","int ADJUST_LOWER Decrease the ringer volume.","int ADJUST_RAISE Increase the ringer volume.","int ADJUST_SAME Maintain the previous ringer volume.","int AUDIOFOCUS_GAIN Used to indicate a gain of audio focus, or a request of audio focus, of unknown duration.","int AUDIOFOCUS_GAIN_TRANSIENT Used to indicate a temporary gain or request of audio focus, anticipated to last a short amount of time.","int AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE Used to indicate a temporary request of audio focus, anticipated to last a short amount of time, during which no other applications, or system components, should play anything.","int AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK Used to indicate a temporary request of audio focus, anticipated to last a short amount of time, and where it is acceptable for other audio applications to keep playing after having lowered their output level (also referred to as \"ducking\").","int AUDIOFOCUS_LOSS Used to indicate a loss of audio focus of unknown duration.","int AUDIOFOCUS_LOSS_TRANSIENT Used to indicate a transient loss of audio focus.","int AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK Used to indicate a transient loss of audio focus where the loser of the audio focus can lower its output volume if it wants to continue playing (also referred to as \"ducking\"), as the new focus owner doesn't require others to be silent.","int AUDIOFOCUS_REQUEST_FAILED A failed focus change request.","int AUDIOFOCUS_REQUEST_GRANTED A successful focus change request.","int AUDIO_SESSION_ID_GENERATE A special audio session ID to indicate that the audio session ID isn't known and the framework should generate a new value.","int ERROR A default error code.","int ERROR_DEAD_OBJECT An error code indicating that the object reporting it is no longer valid and needs to be recreated.","String EXTRA_AUDIO_PLUG_STATE Extra used in ACTION_HDMI_AUDIO_PLUG to communicate whether HDMI is plugged in or unplugged.","String EXTRA_ENCODINGS Extra used in ACTION_HDMI_AUDIO_PLUG to define the audio encodings supported by the connected HDMI device.","String EXTRA_MAX_CHANNEL_COUNT Extra used in ACTION_HDMI_AUDIO_PLUG to define the maximum number of channels supported by the HDMI device.","String EXTRA_RINGER_MODE The new ringer mode.","String EXTRA_SCO_AUDIO_PREVIOUS_STATE Extra for intent ACTION_SCO_AUDIO_STATE_UPDATED containing the previous bluetooth SCO connection state.","String EXTRA_SCO_AUDIO_STATE Extra for intent ACTION_SCO_AUDIO_STATE_CHANGED or ACTION_SCO_AUDIO_STATE_UPDATED containing the new bluetooth SCO connection state.","String EXTRA_VIBRATE_SETTING This constant was deprecated in API level 16. Applications should maintain their own vibrate policy based on current ringer mode and listen to RINGER_MODE_CHANGED_ACTION instead.","String EXTRA_VIBRATE_TYPE This constant was deprecated in API level 16. Applications should maintain their own vibrate policy based on current ringer mode and listen to RINGER_MODE_CHANGED_ACTION instead.","int FLAG_ALLOW_RINGER_MODES Whether to include ringer modes as possible options when changing volume.","int FLAG_PLAY_SOUND Whether to play a sound when changing the volume.","int FLAG_REMOVE_SOUND_AND_VIBRATE Removes any sounds/vibrate that may be in the queue, or are playing (related to changing volume).","int FLAG_SHOW_UI Show a toast containing the current volume.","int FLAG_VIBRATE Whether to vibrate if going into the vibrate ringer mode.","int FX_FOCUS_NAVIGATION_DOWN Focus has moved down","int FX_FOCUS_NAVIGATION_LEFT Focus has moved left","int FX_FOCUS_NAVIGATION_RIGHT Focus has moved right","int FX_FOCUS_NAVIGATION_UP Focus has moved up","int FX_KEYPRESS_DELETE IME delete keypress sound","int FX_KEYPRESS_INVALID Invalid keypress sound","int FX_KEYPRESS_RETURN IME return_keypress sound","int FX_KEYPRESS_SPACEBAR IME spacebar keypress sound","int FX_KEYPRESS_STANDARD IME standard keypress sound","int FX_KEY_CLICK Keyboard and direction pad click sound","int MODE_CURRENT Current audio mode.","int MODE_INVALID Invalid audio mode.","int MODE_IN_CALL In call audio mode.","int MODE_IN_COMMUNICATION In communication audio mode.","int MODE_NORMAL Normal audio mode: not ringing and no call established.","int MODE_RINGTONE Ringing audio mode.","int NUM_STREAMS This constant was deprecated in API level 3. Use AudioSystem.getNumStreamTypes() instead","String PROPERTY_OUTPUT_FRAMES_PER_BUFFER Used as a key for getProperty(String) to request the native or optimal output buffer size for this device's primary output stream, in decimal PCM frames.","String PROPERTY_OUTPUT_SAMPLE_RATE Used as a key for getProperty(String) to request the native or optimal output sample rate for this device's primary output stream, in decimal Hz.","String RINGER_MODE_CHANGED_ACTION Sticky broadcast intent action indicating that the ringer mode has changed.","int RINGER_MODE_NORMAL Ringer mode that may be audible and may vibrate.","int RINGER_MODE_SILENT Ringer mode that will be silent and will not vibrate.","int RINGER_MODE_VIBRATE Ringer mode that will be silent and will vibrate.","int ROUTE_ALL This constant was deprecated in API level 5. Do not set audio routing directly, use setSpeakerphoneOn(), setBluetoothScoOn() methods instead.","int ROUTE_BLUETOOTH This constant was deprecated in API level 3. use ROUTE_BLUETOOTH_SCODo not set audio routing directly, use setSpeakerphoneOn(), setBluetoothScoOn() methods instead.","int ROUTE_BLUETOOTH_A2DP This constant was deprecated in API level 5. Do not set audio routing directly, use setSpeakerphoneOn(), setBluetoothScoOn() methods instead.","int ROUTE_BLUETOOTH_SCO This constant was deprecated in API level 5. Do not set audio routing directly, use setSpeakerphoneOn(), setBluetoothScoOn() methods instead.","int ROUTE_EARPIECE This constant was deprecated in API level 5. Do not set audio routing directly, use setSpeakerphoneOn(), setBluetoothScoOn() methods instead.","int ROUTE_HEADSET This constant was deprecated in API level 5. Do not set audio routing directly, use setSpeakerphoneOn(), setBluetoothScoOn() methods instead.","int ROUTE_SPEAKER This constant was deprecated in API level 5. Do not set audio routing directly, use setSpeakerphoneOn(), setBluetoothScoOn() methods instead.","int SCO_AUDIO_STATE_CONNECTED Value for extra EXTRA_SCO_AUDIO_STATE or EXTRA_SCO_AUDIO_PREVIOUS_STATE indicating that the SCO audio channel is established","int SCO_AUDIO_STATE_CONNECTING Value for extra EXTRA_SCO_AUDIO_STATE or EXTRA_SCO_AUDIO_PREVIOUS_STATE indicating that the SCO audio channel is being established","int SCO_AUDIO_STATE_DISCONNECTED Value for extra EXTRA_SCO_AUDIO_STATE or EXTRA_SCO_AUDIO_PREVIOUS_STATE indicating that the SCO audio channel is not established","int SCO_AUDIO_STATE_ERROR Value for extra EXTRA_SCO_AUDIO_STATE indicating that there was an error trying to obtain the state","int STREAM_ALARM The audio stream for alarms","int STREAM_DTMF The audio stream for DTMF Tones","int STREAM_MUSIC The audio stream for music playback","int STREAM_NOTIFICATION The audio stream for notifications","int STREAM_RING The audio stream for the phone ring","int STREAM_SYSTEM The audio stream for system sounds","int STREAM_VOICE_CALL The audio stream for phone calls","int USE_DEFAULT_STREAM_TYPE Suggests using the default stream type.","String VIBRATE_SETTING_CHANGED_ACTION This constant was deprecated in API level 16. Applications should maintain their own vibrate policy based on current ringer mode and listen to RINGER_MODE_CHANGED_ACTION instead.","int VIBRATE_SETTING_OFF This constant was deprecated in API level 16. Applications should maintain their own vibrate policy based on current ringer mode that can be queried via getRingerMode().","int VIBRATE_SETTING_ON This constant was deprecated in API level 16. Applications should maintain their own vibrate policy based on current ringer mode that can be queried via getRingerMode().","int VIBRATE_SETTING_ONLY_SILENT This constant was deprecated in API level 16. Applications should maintain their own vibrate policy based on current ringer mode that can be queried via getRingerMode().","int VIBRATE_TYPE_NOTIFICATION This constant was deprecated in API level 16. Applications should maintain their own vibrate policy based on current ringer mode that can be queried via getRingerMode().","int VIBRATE_TYPE_RINGER This constant was deprecated in API level 16. Applications should maintain their own vibrate policy based on current ringer mode that can be queried via getRingerMode()."],"class":"AudioManager","constructors":[],"fields":[]}