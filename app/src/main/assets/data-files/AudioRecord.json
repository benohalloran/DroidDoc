{"methods":["int getAudioFormat() Returns the configured audio data format.","int getAudioSessionId() Returns the audio session ID.","int getAudioSource() Returns the audio recording source.","int getChannelConfiguration() Returns the configured channel configuration.","int getChannelCount() Returns the configured number of channels.","static int getMinBufferSize(int sampleRateInHz, int channelConfig, int audioFormat) Returns the minimum buffer size required for the successful creation of an AudioRecord object, in byte units.","int getNotificationMarkerPosition() Returns the notification marker position expressed in frames.","int getPositionNotificationPeriod() Returns the notification update period expressed in frames.","int getRecordingState() Returns the recording state of the AudioRecord instance.","int getSampleRate() Returns the configured audio data sample rate in Hz","int getState() Returns the state of the AudioRecord instance.","int read(short[] audioData, int offsetInShorts, int sizeInShorts) Reads audio data from the audio hardware for recording into a buffer.","int read(byte[] audioData, int offsetInBytes, int sizeInBytes) Reads audio data from the audio hardware for recording into a buffer.","int read(ByteBuffer audioBuffer, int sizeInBytes) Reads audio data from the audio hardware for recording into a direct buffer.","void release() Releases the native AudioRecord resources.","int setNotificationMarkerPosition(int markerInFrames) Sets the marker position at which the listener is called, if set with setRecordPositionUpdateListener(OnRecordPositionUpdateListener) or setRecordPositionUpdateListener(OnRecordPositionUpdateListener, Handler).","int setPositionNotificationPeriod(int periodInFrames) Sets the period at which the listener is called, if set with setRecordPositionUpdateListener(OnRecordPositionUpdateListener) or setRecordPositionUpdateListener(OnRecordPositionUpdateListener, Handler).","void setRecordPositionUpdateListener(AudioRecord.OnRecordPositionUpdateListener listener, Handler handler) Sets the listener the AudioRecord notifies when a previously set marker is reached or for each periodic record head position update.","void setRecordPositionUpdateListener(AudioRecord.OnRecordPositionUpdateListener listener) Sets the listener the AudioRecord notifies when a previously set marker is reached or for each periodic record head position update.","void startRecording() Starts recording from the AudioRecord instance.","void startRecording(MediaSyncEvent syncEvent) Starts recording from the AudioRecord instance when the specified synchronization event occurs on the specified audio session.","void stop() Stops recording.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.media","constants":["int ERROR Denotes a generic operation failure.","int ERROR_BAD_VALUE Denotes a failure due to the use of an invalid value.","int ERROR_INVALID_OPERATION Denotes a failure due to the improper use of a method.","int RECORDSTATE_RECORDING indicates AudioRecord recording state is recording","int RECORDSTATE_STOPPED indicates AudioRecord recording state is not recording","int STATE_INITIALIZED indicates AudioRecord state is ready to be used","int STATE_UNINITIALIZED indicates AudioRecord state is not successfully initialized.","int SUCCESS Denotes a successful operation."],"class":"AudioRecord","constructors":[],"fields":[]}