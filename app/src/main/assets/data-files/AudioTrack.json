{"methods":["int attachAuxEffect(int effectId) Attaches an auxiliary effect to the audio track.","void flush() Flushes the audio data currently queued for playback.","int getAudioFormat() Returns the configured audio data format.","int getAudioSessionId() Returns the audio session ID.","int getChannelConfiguration() Returns the configured channel configuration.","int getChannelCount() Returns the configured number of channels.","static float getMaxVolume() Returns the maximum gain value, which is greater than or equal to 1.0.","static int getMinBufferSize(int sampleRateInHz, int channelConfig, int audioFormat) Returns the minimum buffer size required for the successful creation of an AudioTrack object to be created in the MODE_STREAM mode.","static float getMinVolume() Returns the minimum gain value, which is the constant 0.0.","static int getNativeOutputSampleRate(int streamType) Returns the output sample rate in Hz for the specified stream type.","int getNotificationMarkerPosition() Returns marker position expressed in frames.","int getPlayState() Returns the playback state of the AudioTrack instance.","int getPlaybackHeadPosition() Returns the playback head position expressed in frames.","int getPlaybackRate() Returns the current playback rate in Hz.","int getPositionNotificationPeriod() Returns the notification update period expressed in frames.","int getSampleRate() Returns the configured audio data sample rate in Hz","int getState() Returns the state of the AudioTrack instance.","int getStreamType() Returns the type of audio stream this AudioTrack is configured for.","boolean getTimestamp(AudioTimestamp timestamp) Poll for a timestamp on demand.","void pause() Pauses the playback of the audio data.","void play() Starts playing an AudioTrack.","void release() Releases the native AudioTrack resources.","int reloadStaticData() Notifies the native resource to reuse the audio data already loaded in the native layer, that is to rewind to start of buffer.","int setAuxEffectSendLevel(float level) Sets the send level of the audio track to the attached auxiliary effect attachAuxEffect(int).","int setLoopPoints(int startInFrames, int endInFrames, int loopCount) Sets the loop points and the loop count.","int setNotificationMarkerPosition(int markerInFrames) Sets the position of the notification marker.","int setPlaybackHeadPosition(int positionInFrames) Sets the playback head position.","void setPlaybackPositionUpdateListener(AudioTrack.OnPlaybackPositionUpdateListener listener) Sets the listener the AudioTrack notifies when a previously set marker is reached or for each periodic playback head position update.","void setPlaybackPositionUpdateListener(AudioTrack.OnPlaybackPositionUpdateListener listener, Handler handler) Sets the listener the AudioTrack notifies when a previously set marker is reached or for each periodic playback head position update.","int setPlaybackRate(int sampleRateInHz) Sets the playback sample rate for this track.","int setPositionNotificationPeriod(int periodInFrames) Sets the period for the periodic notification event.","int setStereoVolume(float leftGain, float rightGain) This method was deprecated in API level 21. Applications should use setVolume(float) instead, as it more gracefully scales down to mono, and up to multi-channel content beyond stereo.","int setVolume(float gain) Sets the specified output gain value on all channels of this track.","void stop() Stops playing the audio data.","int write(float[] audioData, int offsetInFloats, int sizeInFloats, int writeMode) Writes the audio data to the audio sink for playback (streaming mode), or copies audio data for later playback (static buffer mode).","int write(ByteBuffer audioData, int sizeInBytes, int writeMode) Writes the audio data to the audio sink for playback (streaming mode), or copies audio data for later playback (static buffer mode).","int write(short[] audioData, int offsetInShorts, int sizeInShorts) Writes the audio data to the audio sink for playback (streaming mode), or copies audio data for later playback (static buffer mode).","int write(byte[] audioData, int offsetInBytes, int sizeInBytes) Writes the audio data to the audio sink for playback (streaming mode), or copies audio data for later playback (static buffer mode).","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","int getNativeFrameCount() This method was deprecated in API level 19. Only accessible by subclasses, which are not recommended for AudioTrack. See getProperty(String) for key PROPERTY_OUTPUT_FRAMES_PER_BUFFER.","void setState(int state) This method was deprecated in API level 19. Only accessible by subclasses, which are not recommended for AudioTrack.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.media","constants":["int ERROR Denotes a generic operation failure.","int ERROR_BAD_VALUE Denotes a failure due to the use of an invalid value.","int ERROR_INVALID_OPERATION Denotes a failure due to the improper use of a method.","int MODE_STATIC Creation mode where audio data is transferred from Java to the native layer only once before the audio starts playing.","int MODE_STREAM Creation mode where audio data is streamed from Java to the native layer as the audio is playing.","int PLAYSTATE_PAUSED indicates AudioTrack state is paused","int PLAYSTATE_PLAYING indicates AudioTrack state is playing","int PLAYSTATE_STOPPED indicates AudioTrack state is stopped","int STATE_INITIALIZED State of an AudioTrack that is ready to be used.","int STATE_NO_STATIC_DATA State of a successfully initialized AudioTrack that uses static data, but that hasn't received that data yet.","int STATE_UNINITIALIZED State of an AudioTrack that was not successfully initialized upon creation.","int SUCCESS Denotes a successful operation.","int WRITE_BLOCKING The write mode indicating the write operation will block until all data has been written, to be used in write(ByteBuffer, int, int)","int WRITE_NON_BLOCKING The write mode indicating the write operation will return immediately after queuing as much audio data for playback as possible without blocking, to be used in write(ByteBuffer, int, int)."],"class":"AudioTrack","constructors":[],"fields":[]}