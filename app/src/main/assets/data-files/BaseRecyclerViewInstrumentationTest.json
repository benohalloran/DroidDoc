{"methods":["Rect getDecoratedRecyclerViewBounds()","void removeRecyclerView()","void requestLayoutOnUIThread(View view)","void runTestOnUiThread(Runnable r) Helper for running portions of a test on the UI thread.","void scrollBy(int dt)","void setRecyclerView(RecyclerView recyclerView)","void setRecyclerView(RecyclerView recyclerView, boolean assignDummyPool)","FrameLayout getRecyclerViewContainer()","void tearDown() Make sure all resources are cleaned up and garbage collected before moving on to the next test.","[Expand] Inherited Methods","From class android.test.ActivityInstrumentationTestCase2 T getActivity() Get the Activity under test, starting it if necessary. void runTest() Runs the current unit test. void setActivityInitialTouchMode(boolean initialTouchMode) Call this method before the first call to getActivity() to set the initial touch mode for the Activity under test. void setActivityIntent(Intent i) Call this method before the first call to getActivity() to inject a customized Intent into the Activity under test. void setUp() Sets up the fixture, for example, open a network connection. void tearDown() Make sure all resources are cleaned up and garbage collected before moving on to the next test.","T getActivity() Get the Activity under test, starting it if necessary.","void runTest() Runs the current unit test.","void setActivityInitialTouchMode(boolean initialTouchMode) Call this method before the first call to getActivity() to set the initial touch mode for the Activity under test.","void setActivityIntent(Intent i) Call this method before the first call to getActivity() to inject a customized Intent into the Activity under test.","void setUp() Sets up the fixture, for example, open a network connection.","void tearDown() Make sure all resources are cleaned up and garbage collected before moving on to the next test.","From class android.test.ActivityTestCase Activity getActivity() void scrubClass(Class<?> testCaseClass) This function is called by various TestCase implementations, at tearDown() time, in order to scrub out any class variables. void setActivity(Activity testActivity) Set the activity under test.","Activity getActivity()","void scrubClass(Class<?> testCaseClass) This function is called by various TestCase implementations, at tearDown() time, in order to scrub out any class variables.","void setActivity(Activity testActivity) Set the activity under test.","From class android.test.InstrumentationTestCase Instrumentation getInstrumentation() Inheritors can access the instrumentation using this. void injectInsrumentation(Instrumentation instrumentation) This method was deprecated in API level 5. Incorrect spelling, use injectInstrumentation(android.app.Instrumentation) instead. void injectInstrumentation(Instrumentation instrumentation) Injects instrumentation into this test case. final <T만xtendsㅁctivity> T launchActivity(String pkg, Class<T> activityCls, Bundle extras) Utility method for launching an activity. final <T만xtendsㅁctivity> T launchActivityWithIntent(String pkg, Class<T> activityCls, Intent intent) Utility method for launching an activity with a specific Intent. void runTest() Runs the current unit test. void runTestOnUiThread(Runnable r) Helper for running portions of a test on the UI thread. void sendKeys(String keysSequence) Sends a series of key events through instrumentation and waits for idle. void sendKeys(int... keys) Sends a series of key events through instrumentation and waits for idle. void sendRepeatedKeys(int... keys) Sends a series of key events through instrumentation and waits for idle. void tearDown() Make sure all resources are cleaned up and garbage collected before moving on to the next test.","Instrumentation getInstrumentation() Inheritors can access the instrumentation using this.","void injectInsrumentation(Instrumentation instrumentation) This method was deprecated in API level 5. Incorrect spelling, use injectInstrumentation(android.app.Instrumentation) instead.","void injectInstrumentation(Instrumentation instrumentation) Injects instrumentation into this test case.","final <T만xtendsㅁctivity> T launchActivity(String pkg, Class<T> activityCls, Bundle extras) Utility method for launching an activity.","final <T만xtendsㅁctivity> T launchActivityWithIntent(String pkg, Class<T> activityCls, Intent intent) Utility method for launching an activity with a specific Intent.","void runTest() Runs the current unit test.","void runTestOnUiThread(Runnable r) Helper for running portions of a test on the UI thread.","void sendKeys(String keysSequence) Sends a series of key events through instrumentation and waits for idle.","void sendKeys(int... keys) Sends a series of key events through instrumentation and waits for idle.","void sendRepeatedKeys(int... keys) Sends a series of key events through instrumentation and waits for idle.","void tearDown() Make sure all resources are cleaned up and garbage collected before moving on to the next test.","From class junit.framework.TestCase int countTestCases() Counts the number of test cases executed by run(TestResult result). TestResult createResult() Creates a default TestResult object String getName() Gets the name of a TestCase TestResult run() A convenience method to run this test, collecting the results with a default TestResult object. void run(TestResult result) Runs the test case and collects the results in TestResult. void runBare() Runs the bare test sequence. void runTest() Override to run the test and assert its state. void setName(String name) Sets the name of a TestCase void setUp() Sets up the fixture, for example, open a network connection. void tearDown() Tears down the fixture, for example, close a network connection. String toString() Returns a string representation of the test case","int countTestCases() Counts the number of test cases executed by run(TestResult result).","TestResult createResult() Creates a default TestResult object","String getName() Gets the name of a TestCase","TestResult run() A convenience method to run this test, collecting the results with a default TestResult object.","void run(TestResult result) Runs the test case and collects the results in TestResult.","void runBare() Runs the bare test sequence.","void runTest() Override to run the test and assert its state.","void setName(String name) Sets the name of a TestCase","void setUp() Sets up the fixture, for example, open a network connection.","void tearDown() Tears down the fixture, for example, close a network connection.","String toString() Returns a string representation of the test case","From class junit.framework.Assert static void assertEquals(short expected, short actual) Asserts that two shorts are equal. static void assertEquals(String message, int expected, int actual) Asserts that two ints are equal. static void assertEquals(String message, short expected, short actual) Asserts that two shorts are equal. static void assertEquals(char expected, char actual) Asserts that two chars are equal. static void assertEquals(String message, String expected, String actual) Asserts that two Strings are equal. static void assertEquals(int expected, int actual) Asserts that two ints are equal. static void assertEquals(String message, double expected, double actual, double delta) Asserts that two doubles are equal concerning a delta. static void assertEquals(String message, long expected, long actual) Asserts that two longs are equal. static void assertEquals(byte expected, byte actual) Asserts that two bytes are equal. static void assertEquals(Object expected, Object actual) Asserts that two objects are equal. static void assertEquals(boolean expected, boolean actual) Asserts that two booleans are equal. static void assertEquals(String message, float expected, float actual, float delta) Asserts that two floats are equal concerning a positive delta. static void assertEquals(String message, boolean expected, boolean actual) Asserts that two booleans are equal. static void assertEquals(String expected, String actual) Asserts that two Strings are equal. static void assertEquals(float expected, float actual, float delta) Asserts that two floats are equal concerning a delta. static void assertEquals(String message, byte expected, byte actual) Asserts that two bytes are equal. static void assertEquals(double expected, double actual, double delta) Asserts that two doubles are equal concerning a delta. static void assertEquals(String message, char expected, char actual) Asserts that two chars are equal. static void assertEquals(String message, Object expected, Object actual) Asserts that two objects are equal. static void assertEquals(long expected, long actual) Asserts that two longs are equal. static void assertFalse(String message, boolean condition) Asserts that a condition is false. static void assertFalse(boolean condition) Asserts that a condition is false. static void assertNotNull(String message, Object object) Asserts that an object isn't null. static void assertNotNull(Object object) Asserts that an object isn't null. static void assertNotSame(Object expected, Object actual) Asserts that two objects do not refer to the same object. static void assertNotSame(String message, Object expected, Object actual) Asserts that two objects do not refer to the same object. static void assertNull(Object object) Asserts that an object is null. static void assertNull(String message, Object object) Asserts that an object is null. static void assertSame(Object expected, Object actual) Asserts that two objects refer to the same object. static void assertSame(String message, Object expected, Object actual) Asserts that two objects refer to the same object. static void assertTrue(String message, boolean condition) Asserts that a condition is true. static void assertTrue(boolean condition) Asserts that a condition is true. static void fail(String message) Fails a test with the given message. static void fail() Fails a test with no message. static void failNotEquals(String message, Object expected, Object actual) static void failNotSame(String message, Object expected, Object actual) static void failSame(String message) static String format(String message, Object expected, Object actual)","static void assertEquals(short expected, short actual) Asserts that two shorts are equal.","static void assertEquals(String message, int expected, int actual) Asserts that two ints are equal.","static void assertEquals(String message, short expected, short actual) Asserts that two shorts are equal.","static void assertEquals(char expected, char actual) Asserts that two chars are equal.","static void assertEquals(String message, String expected, String actual) Asserts that two Strings are equal.","static void assertEquals(int expected, int actual) Asserts that two ints are equal.","static void assertEquals(String message, double expected, double actual, double delta) Asserts that two doubles are equal concerning a delta.","static void assertEquals(String message, long expected, long actual) Asserts that two longs are equal.","static void assertEquals(byte expected, byte actual) Asserts that two bytes are equal.","static void assertEquals(Object expected, Object actual) Asserts that two objects are equal.","static void assertEquals(boolean expected, boolean actual) Asserts that two booleans are equal.","static void assertEquals(String message, float expected, float actual, float delta) Asserts that two floats are equal concerning a positive delta.","static void assertEquals(String message, boolean expected, boolean actual) Asserts that two booleans are equal.","static void assertEquals(String expected, String actual) Asserts that two Strings are equal.","static void assertEquals(float expected, float actual, float delta) Asserts that two floats are equal concerning a delta.","static void assertEquals(String message, byte expected, byte actual) Asserts that two bytes are equal.","static void assertEquals(double expected, double actual, double delta) Asserts that two doubles are equal concerning a delta.","static void assertEquals(String message, char expected, char actual) Asserts that two chars are equal.","static void assertEquals(String message, Object expected, Object actual) Asserts that two objects are equal.","static void assertEquals(long expected, long actual) Asserts that two longs are equal.","static void assertFalse(String message, boolean condition) Asserts that a condition is false.","static void assertFalse(boolean condition) Asserts that a condition is false.","static void assertNotNull(String message, Object object) Asserts that an object isn't null.","static void assertNotNull(Object object) Asserts that an object isn't null.","static void assertNotSame(Object expected, Object actual) Asserts that two objects do not refer to the same object.","static void assertNotSame(String message, Object expected, Object actual) Asserts that two objects do not refer to the same object.","static void assertNull(Object object) Asserts that an object is null.","static void assertNull(String message, Object object) Asserts that an object is null.","static void assertSame(Object expected, Object actual) Asserts that two objects refer to the same object.","static void assertSame(String message, Object expected, Object actual) Asserts that two objects refer to the same object.","static void assertTrue(String message, boolean condition) Asserts that a condition is true.","static void assertTrue(boolean condition) Asserts that a condition is true.","static void fail(String message) Fails a test with the given message.","static void fail() Fails a test with no message.","static void failNotEquals(String message, Object expected, Object actual)","static void failNotSame(String message, Object expected, Object actual)","static void failSame(String message)","static String format(String message, Object expected, Object actual)","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface junit.framework.Test abstract int countTestCases() Counts the number of test cases that will be run by this test. abstract void run(TestResult result) Runs a test and collects its result in a TestResult instance.","abstract int countTestCases() Counts the number of test cases that will be run by this test.","abstract void run(TestResult result) Runs a test and collects its result in a TestResult instance."],"package":"android.support.v7.widget","constants":[],"class":"BaseRecyclerViewInstrumentationTest","constructors":[],"fields":["protected AdapterHelper mAdapterHelper","protected RecyclerView mRecyclerView"]}