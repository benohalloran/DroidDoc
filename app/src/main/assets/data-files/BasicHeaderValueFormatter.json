{"methods":["final static String formatElements(HeaderElement[] elems, boolean quote, HeaderValueFormatter formatter) Formats an array of header elements.","CharArrayBuffer formatElements(CharArrayBuffer buffer, HeaderElement[] elems, boolean quote) Formats an array of header elements.","final static String formatHeaderElement(HeaderElement elem, boolean quote, HeaderValueFormatter formatter) Formats a header element.","CharArrayBuffer formatHeaderElement(CharArrayBuffer buffer, HeaderElement elem, boolean quote) Formats one header element.","CharArrayBuffer formatNameValuePair(CharArrayBuffer buffer, NameValuePair nvp, boolean quote) Formats one name-value pair, where the value is optional.","final static String formatNameValuePair(NameValuePair nvp, boolean quote, HeaderValueFormatter formatter) Formats a name-value pair.","final static String formatParameters(NameValuePair[] nvps, boolean quote, HeaderValueFormatter formatter) Formats a set of parameters.","CharArrayBuffer formatParameters(CharArrayBuffer buffer, NameValuePair[] nvps, boolean quote) Formats the parameters of a header element.","void doFormatValue(CharArrayBuffer buffer, String value, boolean quote) Actually formats the value of a name-value pair.","int estimateElementsLen(HeaderElement[] elems) Estimates the length of formatted header elements.","int estimateHeaderElementLen(HeaderElement elem) Estimates the length of a formatted header element.","int estimateNameValuePairLen(NameValuePair nvp) Estimates the length of a formatted name-value pair.","int estimateParametersLen(NameValuePair[] nvps) Estimates the length of formatted parameters.","boolean isSeparator(char ch) Checks whether a character is a separator.","boolean isUnsafe(char ch) Checks whether a character is unsafe.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface org.apache.http.message.HeaderValueFormatter abstract CharArrayBuffer formatElements(CharArrayBuffer buffer, HeaderElement[] elems, boolean quote) Formats an array of header elements. abstract CharArrayBuffer formatHeaderElement(CharArrayBuffer buffer, HeaderElement elem, boolean quote) Formats one header element. abstract CharArrayBuffer formatNameValuePair(CharArrayBuffer buffer, NameValuePair nvp, boolean quote) Formats one name-value pair, where the value is optional. abstract CharArrayBuffer formatParameters(CharArrayBuffer buffer, NameValuePair[] nvps, boolean quote) Formats the parameters of a header element.","abstract CharArrayBuffer formatElements(CharArrayBuffer buffer, HeaderElement[] elems, boolean quote) Formats an array of header elements.","abstract CharArrayBuffer formatHeaderElement(CharArrayBuffer buffer, HeaderElement elem, boolean quote) Formats one header element.","abstract CharArrayBuffer formatNameValuePair(CharArrayBuffer buffer, NameValuePair nvp, boolean quote) Formats one name-value pair, where the value is optional.","abstract CharArrayBuffer formatParameters(CharArrayBuffer buffer, NameValuePair[] nvps, boolean quote) Formats the parameters of a header element."],"package":"org.apache.http.message","constants":["String SEPARATORS Special characters that can be used as separators in HTTP parameters.","String UNSAFE_CHARS Unsafe special characters that must be escaped using the backslash character"],"class":"BasicHeaderValueFormatter","constructors":[],"fields":["public static final BasicHeaderValueFormatter DEFAULT A default instance of this class, for use as default or fallback."]}