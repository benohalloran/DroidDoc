{"methods":["void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","List<BluetoothDevice> getConnectedDevices() Get connected devices for this specific profile.","int getConnectionState(BluetoothDevice device) Get the current connection state of the profile Requires BLUETOOTH permission.","List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) Get a list of devices that match any of the given connection states.","boolean isA2dpPlaying(BluetoothDevice device) Check if A2DP profile is streaming music.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface android.bluetooth.BluetoothProfile abstract List<BluetoothDevice> getConnectedDevices() Get connected devices for this specific profile. abstract int getConnectionState(BluetoothDevice device) Get the current connection state of the profile Requires BLUETOOTH permission. abstract List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) Get a list of devices that match any of the given connection states.","abstract List<BluetoothDevice> getConnectedDevices() Get connected devices for this specific profile.","abstract int getConnectionState(BluetoothDevice device) Get the current connection state of the profile Requires BLUETOOTH permission.","abstract List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) Get a list of devices that match any of the given connection states."],"package":"android.bluetooth","constants":["String ACTION_CONNECTION_STATE_CHANGED Intent used to broadcast the change in connection state of the A2DP profile.","String ACTION_PLAYING_STATE_CHANGED Intent used to broadcast the change in the Playing state of the A2DP profile.","int STATE_NOT_PLAYING A2DP sink device is NOT streaming music.","int STATE_PLAYING A2DP sink device is streaming music.","[Expand] Inherited Constants","From interface android.bluetooth.BluetoothProfile int A2DP A2DP profile. String EXTRA_PREVIOUS_STATE Extra for the connection state intents of the individual profiles. String EXTRA_STATE Extra for the connection state intents of the individual profiles. int GATT GATT int GATT_SERVER GATT_SERVER int HEADSET Headset and Handsfree profile int HEALTH Health Profile int STATE_CONNECTED The profile is in connected state int STATE_CONNECTING The profile is in connecting state int STATE_DISCONNECTED The profile is in disconnected state int STATE_DISCONNECTING The profile is in disconnecting state","int A2DP A2DP profile.","String EXTRA_PREVIOUS_STATE Extra for the connection state intents of the individual profiles.","String EXTRA_STATE Extra for the connection state intents of the individual profiles.","int GATT GATT","int GATT_SERVER GATT_SERVER","int HEADSET Headset and Handsfree profile","int HEALTH Health Profile","int STATE_CONNECTED The profile is in connected state","int STATE_CONNECTING The profile is in connecting state","int STATE_DISCONNECTED The profile is in disconnected state","int STATE_DISCONNECTING The profile is in disconnecting state"],"class":"BluetoothA2dp","constructors":[],"fields":[]}