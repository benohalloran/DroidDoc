{"methods":["boolean cancelDiscovery() Cancel the current device discovery process.","static boolean checkBluetoothAddress(String address) Validate a String Bluetooth address, such as \"00:43:A8:23:10:F0\" Alphabetic characters must be uppercase to be valid.","void closeProfileProxy(int profile, BluetoothProfile proxy) Close the connection of the profile proxy to the Service.","boolean disable() Turn off the local Bluetooth adapter\u2014do not use without explicit user action to turn off Bluetooth.","boolean enable() Turn on the local Bluetooth adapter\u2014do not use without explicit user action to turn on Bluetooth.","String getAddress() Returns the hardware address of the local Bluetooth adapter.","BluetoothLeAdvertiser getBluetoothLeAdvertiser() Returns a BluetoothLeAdvertiser object for Bluetooth LE Advertising operations, or null if Bluetooth LE Advertising is not support on this device.","BluetoothLeScanner getBluetoothLeScanner() Returns a BluetoothLeScanner object for Bluetooth LE scan operations.","Set<BluetoothDevice> getBondedDevices() Return the set of BluetoothDevice objects that are bonded (paired) to the local adapter.","synchronized static BluetoothAdapter getDefaultAdapter() Get a handle to the default local Bluetooth adapter.","String getName() Get the friendly Bluetooth name of the local Bluetooth adapter.","int getProfileConnectionState(int profile) Get the current connection state of a profile.","boolean getProfileProxy(Context context, BluetoothProfile.ServiceListener listener, int profile) Get the profile proxy object associated with the profile.","BluetoothDevice getRemoteDevice(byte[] address) Get a BluetoothDevice object for the given Bluetooth hardware address.","BluetoothDevice getRemoteDevice(String address) Get a BluetoothDevice object for the given Bluetooth hardware address.","int getScanMode() Get the current Bluetooth scan mode of the local Bluetooth adapter.","int getState() Get the current state of the local Bluetooth adapter.","boolean isDiscovering() Return true if the local Bluetooth adapter is currently in the device discovery process.","boolean isEnabled() Return true if Bluetooth is currently enabled and ready for use.","boolean isMultipleAdvertisementSupported() Return true if the multi advertisement is supported by the chipset","boolean isOffloadedFilteringSupported() Return true if offloaded filters are supported","boolean isOffloadedScanBatchingSupported() Return true if offloaded scan batching is supported","BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(String name, UUID uuid) Create a listening, insecure RFCOMM Bluetooth socket with Service Record.","BluetoothServerSocket listenUsingRfcommWithServiceRecord(String name, UUID uuid) Create a listening, secure RFCOMM Bluetooth socket with Service Record.","boolean setName(String name) Set the friendly Bluetooth name of the local Bluetooth adapter.","boolean startDiscovery() Start the remote device discovery process.","boolean startLeScan(BluetoothAdapter.LeScanCallback callback) This method was deprecated in API level 21. use startScan(List, ScanSettings, ScanCallback) instead.","boolean startLeScan(UUID[] serviceUuids, BluetoothAdapter.LeScanCallback callback) This method was deprecated in API level 21. use startScan(List, ScanSettings, ScanCallback) instead.","void stopLeScan(BluetoothAdapter.LeScanCallback callback) This method was deprecated in API level 21. Use stopScan(ScanCallback) instead.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.bluetooth","constants":["String ACTION_CONNECTION_STATE_CHANGED Intent used to broadcast the change in connection state of the local Bluetooth adapter to a profile of the remote device.","String ACTION_DISCOVERY_FINISHED Broadcast Action: The local Bluetooth adapter has finished the device discovery process.","String ACTION_DISCOVERY_STARTED Broadcast Action: The local Bluetooth adapter has started the remote device discovery process.","String ACTION_LOCAL_NAME_CHANGED Broadcast Action: The local Bluetooth adapter has changed its friendly Bluetooth name.","String ACTION_REQUEST_DISCOVERABLE Activity Action: Show a system activity that requests discoverable mode.","String ACTION_REQUEST_ENABLE Activity Action: Show a system activity that allows the user to turn on Bluetooth.","String ACTION_SCAN_MODE_CHANGED Broadcast Action: Indicates the Bluetooth scan mode of the local Adapter has changed.","String ACTION_STATE_CHANGED Broadcast Action: The state of the local Bluetooth adapter has been changed.","int ERROR Sentinel error value for this class.","String EXTRA_CONNECTION_STATE Extra used by ACTION_CONNECTION_STATE_CHANGED This extra represents the current connection state.","String EXTRA_DISCOVERABLE_DURATION Used as an optional int extra field in ACTION_REQUEST_DISCOVERABLE intents to request a specific duration for discoverability in seconds.","String EXTRA_LOCAL_NAME Used as a String extra field in ACTION_LOCAL_NAME_CHANGED intents to request the local Bluetooth name.","String EXTRA_PREVIOUS_CONNECTION_STATE Extra used by ACTION_CONNECTION_STATE_CHANGED This extra represents the previous connection state.","String EXTRA_PREVIOUS_SCAN_MODE Used as an int extra field in ACTION_SCAN_MODE_CHANGED intents to request the previous scan mode.","String EXTRA_PREVIOUS_STATE Used as an int extra field in ACTION_STATE_CHANGED intents to request the previous power state.","String EXTRA_SCAN_MODE Used as an int extra field in ACTION_SCAN_MODE_CHANGED intents to request the current scan mode.","String EXTRA_STATE Used as an int extra field in ACTION_STATE_CHANGED intents to request the current power state.","int SCAN_MODE_CONNECTABLE Indicates that inquiry scan is disabled, but page scan is enabled on the local Bluetooth adapter.","int SCAN_MODE_CONNECTABLE_DISCOVERABLE Indicates that both inquiry scan and page scan are enabled on the local Bluetooth adapter.","int SCAN_MODE_NONE Indicates that both inquiry scan and page scan are disabled on the local Bluetooth adapter.","int STATE_CONNECTED The profile is in connected state","int STATE_CONNECTING The profile is in connecting state","int STATE_DISCONNECTED The profile is in disconnected state","int STATE_DISCONNECTING The profile is in disconnecting state","int STATE_OFF Indicates the local Bluetooth adapter is off.","int STATE_ON Indicates the local Bluetooth adapter is on, and ready for use.","int STATE_TURNING_OFF Indicates the local Bluetooth adapter is turning off.","int STATE_TURNING_ON Indicates the local Bluetooth adapter is turning on."],"class":"BluetoothAdapter","constructors":[],"fields":[]}