{"methods":["void abortReliableWrite() Cancels a reliable write transaction for a given device.","void abortReliableWrite(BluetoothDevice mDevice) This method was deprecated in API level 19. Use abortReliableWrite()","boolean beginReliableWrite() Initiates a reliable write transaction for a given remote device.","void close() Close this Bluetooth GATT client.","boolean connect() Connect back to remote device.","void disconnect() Disconnects an established connection, or cancels a connection attempt currently in progress.","boolean discoverServices() Discovers services offered by a remote device as well as their characteristics and descriptors.","boolean executeReliableWrite() Executes a reliable write transaction for a given remote device.","List<BluetoothDevice> getConnectedDevices() Not supported - please use getConnectedDevices(int) with GATT as argument","int getConnectionState(BluetoothDevice device) Not supported - please use getConnectedDevices(int) with GATT as argument","BluetoothDevice getDevice() Return the remote bluetooth device this GATT client targets to","List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) Not supported - please use getDevicesMatchingConnectionStates(int, int[]) with GATT as first argument","BluetoothGattService getService(UUID uuid) Returns a BluetoothGattService, if the requested UUID is supported by the remote device.","List<BluetoothGattService> getServices() Returns a list of GATT services offered by the remote device.","boolean readCharacteristic(BluetoothGattCharacteristic characteristic) Reads the requested characteristic from the associated remote device.","boolean readDescriptor(BluetoothGattDescriptor descriptor) Reads the value for a given descriptor from the associated remote device.","boolean readRemoteRssi() Read the RSSI for a connected remote device.","boolean requestConnectionPriority(int connectionPriority) Request a connection parameter update.","boolean requestMtu(int mtu) Request an MTU size used for a given connection.","boolean setCharacteristicNotification(BluetoothGattCharacteristic characteristic, boolean enable) Enable or disable notifications/indications for a given characteristic.","boolean writeCharacteristic(BluetoothGattCharacteristic characteristic) Writes a given characteristic and its values to the associated remote device.","boolean writeDescriptor(BluetoothGattDescriptor descriptor) Write the value of a given descriptor to the associated remote device.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface android.bluetooth.BluetoothProfile abstract List<BluetoothDevice> getConnectedDevices() Get connected devices for this specific profile. abstract int getConnectionState(BluetoothDevice device) Get the current connection state of the profile Requires BLUETOOTH permission. abstract List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) Get a list of devices that match any of the given connection states.","abstract List<BluetoothDevice> getConnectedDevices() Get connected devices for this specific profile.","abstract int getConnectionState(BluetoothDevice device) Get the current connection state of the profile Requires BLUETOOTH permission.","abstract List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) Get a list of devices that match any of the given connection states."],"package":"android.bluetooth","constants":["int CONNECTION_PRIORITY_BALANCED Connection paramter update - Use the connection paramters recommended by the Bluetooth SIG.","int CONNECTION_PRIORITY_HIGH Connection paramter update - Request a high priority, low latency connection.","int CONNECTION_PRIORITY_LOW_POWER Connection paramter update - Request low power, reduced data rate connection parameters.","int GATT_CONNECTION_CONGESTED A remote device connection is congested.","int GATT_FAILURE A GATT operation failed, errors other than the above","int GATT_INSUFFICIENT_AUTHENTICATION Insufficient authentication for a given operation","int GATT_INSUFFICIENT_ENCRYPTION Insufficient encryption for a given operation","int GATT_INVALID_ATTRIBUTE_LENGTH A write operation exceeds the maximum length of the attribute","int GATT_INVALID_OFFSET A read or write operation was requested with an invalid offset","int GATT_READ_NOT_PERMITTED GATT read operation is not permitted","int GATT_REQUEST_NOT_SUPPORTED The given request is not supported","int GATT_SUCCESS A GATT operation completed successfully","int GATT_WRITE_NOT_PERMITTED GATT write operation is not permitted","[Expand] Inherited Constants","From interface android.bluetooth.BluetoothProfile int A2DP A2DP profile. String EXTRA_PREVIOUS_STATE Extra for the connection state intents of the individual profiles. String EXTRA_STATE Extra for the connection state intents of the individual profiles. int GATT GATT int GATT_SERVER GATT_SERVER int HEADSET Headset and Handsfree profile int HEALTH Health Profile int STATE_CONNECTED The profile is in connected state int STATE_CONNECTING The profile is in connecting state int STATE_DISCONNECTED The profile is in disconnected state int STATE_DISCONNECTING The profile is in disconnecting state","int A2DP A2DP profile.","String EXTRA_PREVIOUS_STATE Extra for the connection state intents of the individual profiles.","String EXTRA_STATE Extra for the connection state intents of the individual profiles.","int GATT GATT","int GATT_SERVER GATT_SERVER","int HEADSET Headset and Handsfree profile","int HEALTH Health Profile","int STATE_CONNECTED The profile is in connected state","int STATE_CONNECTING The profile is in connecting state","int STATE_DISCONNECTED The profile is in disconnected state","int STATE_DISCONNECTING The profile is in disconnecting state"],"class":"BluetoothGatt","constructors":[],"fields":[]}