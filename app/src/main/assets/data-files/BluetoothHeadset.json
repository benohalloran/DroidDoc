{"methods":["List<BluetoothDevice> getConnectedDevices() Get connected devices for this specific profile.","int getConnectionState(BluetoothDevice device) Get the current connection state of the profile Requires BLUETOOTH permission.","List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) Get a list of devices that match any of the given connection states.","boolean isAudioConnected(BluetoothDevice device) Check if Bluetooth SCO audio is connected.","boolean sendVendorSpecificResultCode(BluetoothDevice device, String command, String arg) Sends a vendor-specific unsolicited result code to the headset.","boolean startVoiceRecognition(BluetoothDevice device) Start Bluetooth voice recognition.","boolean stopVoiceRecognition(BluetoothDevice device) Stop Bluetooth Voice Recognition mode, and shut down the Bluetooth audio path.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface android.bluetooth.BluetoothProfile abstract List<BluetoothDevice> getConnectedDevices() Get connected devices for this specific profile. abstract int getConnectionState(BluetoothDevice device) Get the current connection state of the profile Requires BLUETOOTH permission. abstract List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) Get a list of devices that match any of the given connection states.","abstract List<BluetoothDevice> getConnectedDevices() Get connected devices for this specific profile.","abstract int getConnectionState(BluetoothDevice device) Get the current connection state of the profile Requires BLUETOOTH permission.","abstract List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) Get a list of devices that match any of the given connection states."],"package":"android.bluetooth","constants":["String ACTION_AUDIO_STATE_CHANGED Intent used to broadcast the change in the Audio Connection state of the A2DP profile.","String ACTION_CONNECTION_STATE_CHANGED Intent used to broadcast the change in connection state of the Headset profile.","String ACTION_VENDOR_SPECIFIC_HEADSET_EVENT Intent used to broadcast that the headset has posted a vendor-specific event.","int AT_CMD_TYPE_ACTION AT command type ACTION used with EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE For example, AT+CHUP.","int AT_CMD_TYPE_BASIC AT command type BASIC used with EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE For example, ATD.","int AT_CMD_TYPE_READ AT command type READ used with EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE For example, AT+VGM?.","int AT_CMD_TYPE_SET AT command type SET used with EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE For example, AT+VGM=.","int AT_CMD_TYPE_TEST AT command type TEST used with EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE For example, AT+VGM=?.","String EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_ARGS A Parcelable String array extra field in ACTION_VENDOR_SPECIFIC_HEADSET_EVENT intents that contains the arguments to the vendor-specific command.","String EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD A String extra field in ACTION_VENDOR_SPECIFIC_HEADSET_EVENT intents that contains the name of the vendor-specific command.","String EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE An int extra field in ACTION_VENDOR_SPECIFIC_HEADSET_EVENT intents that contains the AT command type of the vendor-specific command.","int STATE_AUDIO_CONNECTED Headset state when SCO audio is connected.","int STATE_AUDIO_CONNECTING Headset state when SCO audio is connecting.","int STATE_AUDIO_DISCONNECTED Headset state when SCO audio is not connected.","String VENDOR_RESULT_CODE_COMMAND_ANDROID A vendor-specific command for unsolicited result code.","String VENDOR_SPECIFIC_HEADSET_EVENT_COMPANY_ID_CATEGORY The intent category to be used with ACTION_VENDOR_SPECIFIC_HEADSET_EVENT for the companyId","[Expand] Inherited Constants","From interface android.bluetooth.BluetoothProfile int A2DP A2DP profile. String EXTRA_PREVIOUS_STATE Extra for the connection state intents of the individual profiles. String EXTRA_STATE Extra for the connection state intents of the individual profiles. int GATT GATT int GATT_SERVER GATT_SERVER int HEADSET Headset and Handsfree profile int HEALTH Health Profile int STATE_CONNECTED The profile is in connected state int STATE_CONNECTING The profile is in connecting state int STATE_DISCONNECTED The profile is in disconnected state int STATE_DISCONNECTING The profile is in disconnecting state","int A2DP A2DP profile.","String EXTRA_PREVIOUS_STATE Extra for the connection state intents of the individual profiles.","String EXTRA_STATE Extra for the connection state intents of the individual profiles.","int GATT GATT","int GATT_SERVER GATT_SERVER","int HEADSET Headset and Handsfree profile","int HEALTH Health Profile","int STATE_CONNECTED The profile is in connected state","int STATE_CONNECTING The profile is in connecting state","int STATE_DISCONNECTED The profile is in disconnected state","int STATE_DISCONNECTING The profile is in disconnecting state"],"class":"BluetoothHeadset","constructors":[],"fields":[]}