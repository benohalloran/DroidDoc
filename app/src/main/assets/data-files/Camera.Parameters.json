{"methods":["String flatten() Creates a single string with all the parameters set in this Parameters object.","String get(String key) Returns the value of a String parameter.","String getAntibanding() Gets the current antibanding setting.","boolean getAutoExposureLock() Gets the state of the auto-exposure lock.","boolean getAutoWhiteBalanceLock() Gets the state of the auto-white balance lock.","String getColorEffect() Gets the current color effect setting.","int getExposureCompensation() Gets the current exposure compensation index.","float getExposureCompensationStep() Gets the exposure compensation step.","String getFlashMode() Gets the current flash mode setting.","float getFocalLength() Gets the focal length (in millimeter) of the camera.","List<Camera.Area> getFocusAreas() Gets the current focus areas.","void getFocusDistances(float[] output) Gets the distances from the camera to where an object appears to be in focus.","String getFocusMode() Gets the current focus mode setting.","float getHorizontalViewAngle() Gets the horizontal angle of view in degrees.","int getInt(String key) Returns the value of an integer parameter.","int getJpegQuality() Returns the quality setting for the JPEG picture.","int getJpegThumbnailQuality() Returns the quality setting for the EXIF thumbnail in Jpeg picture.","Camera.Size getJpegThumbnailSize() Returns the dimensions for EXIF thumbnail in Jpeg picture.","int getMaxExposureCompensation() Gets the maximum exposure compensation index.","int getMaxNumDetectedFaces() Gets the maximum number of detected faces supported.","int getMaxNumFocusAreas() Gets the maximum number of focus areas supported.","int getMaxNumMeteringAreas() Gets the maximum number of metering areas supported.","int getMaxZoom() Gets the maximum zoom value allowed for snapshot.","List<Camera.Area> getMeteringAreas() Gets the current metering areas.","int getMinExposureCompensation() Gets the minimum exposure compensation index.","int getPictureFormat() Returns the image format for pictures.","Camera.Size getPictureSize() Returns the dimension setting for pictures.","Camera.Size getPreferredPreviewSizeForVideo() Returns the preferred or recommended preview size (width and height) in pixels for video recording.","int getPreviewFormat() Returns the image format for preview frames got from Camera.PreviewCallback.","void getPreviewFpsRange(int[] range) Returns the current minimum and maximum preview fps.","int getPreviewFrameRate() This method was deprecated in API level 9. replaced by getPreviewFpsRange(int[])","Camera.Size getPreviewSize() Returns the dimensions setting for preview pictures.","String getSceneMode() Gets the current scene mode setting.","List<String> getSupportedAntibanding() Gets the supported antibanding values.","List<String> getSupportedColorEffects() Gets the supported color effects.","List<String> getSupportedFlashModes() Gets the supported flash modes.","List<String> getSupportedFocusModes() Gets the supported focus modes.","List<Camera.Size> getSupportedJpegThumbnailSizes() Gets the supported jpeg thumbnail sizes.","List<Integer> getSupportedPictureFormats() Gets the supported picture formats.","List<Camera.Size> getSupportedPictureSizes() Gets the supported picture sizes.","List<Integer> getSupportedPreviewFormats() Gets the supported preview formats.","List<int[]> getSupportedPreviewFpsRange() Gets the supported preview fps (frame-per-second) ranges.","List<Integer> getSupportedPreviewFrameRates() This method was deprecated in API level 9. replaced by getSupportedPreviewFpsRange()","List<Camera.Size> getSupportedPreviewSizes() Gets the supported preview sizes.","List<String> getSupportedSceneModes() Gets the supported scene modes.","List<Camera.Size> getSupportedVideoSizes() Gets the supported video frame sizes that can be used by MediaRecorder.","List<String> getSupportedWhiteBalance() Gets the supported white balance.","float getVerticalViewAngle() Gets the vertical angle of view in degrees.","boolean getVideoStabilization() Get the current state of video stabilization.","String getWhiteBalance() Gets the current white balance setting.","int getZoom() Gets current zoom value.","List<Integer> getZoomRatios() Gets the zoom ratios of all zoom values.","boolean isAutoExposureLockSupported() Returns true if auto-exposure locking is supported.","boolean isAutoWhiteBalanceLockSupported() Returns true if auto-white balance locking is supported.","boolean isSmoothZoomSupported() Returns true if smooth zoom is supported.","boolean isVideoSnapshotSupported() Returns true if video snapshot is supported.","boolean isVideoStabilizationSupported() Returns true if video stabilization is supported.","boolean isZoomSupported() Returns true if zoom is supported.","void remove(String key)","void removeGpsData() Removes GPS latitude, longitude, altitude, and timestamp from the parameters.","void set(String key, String value) Sets a String parameter.","void set(String key, int value) Sets an integer parameter.","void setAntibanding(String antibanding) Sets the antibanding.","void setAutoExposureLock(boolean toggle) Sets the auto-exposure lock state.","void setAutoWhiteBalanceLock(boolean toggle) Sets the auto-white balance lock state.","void setColorEffect(String value) Sets the current color effect setting.","void setExposureCompensation(int value) Sets the exposure compensation index.","void setFlashMode(String value) Sets the flash mode.","void setFocusAreas(List<Camera.Area> focusAreas) Sets focus areas.","void setFocusMode(String value) Sets the focus mode.","void setGpsAltitude(double altitude) Sets GPS altitude.","void setGpsLatitude(double latitude) Sets GPS latitude coordinate.","void setGpsLongitude(double longitude) Sets GPS longitude coordinate.","void setGpsProcessingMethod(String processing_method) Sets GPS processing method.","void setGpsTimestamp(long timestamp) Sets GPS timestamp.","void setJpegQuality(int quality) Sets Jpeg quality of captured picture.","void setJpegThumbnailQuality(int quality) Sets the quality of the EXIF thumbnail in Jpeg picture.","void setJpegThumbnailSize(int width, int height) Sets the dimensions for EXIF thumbnail in Jpeg picture.","void setMeteringAreas(List<Camera.Area> meteringAreas) Sets metering areas.","void setPictureFormat(int pixel_format) Sets the image format for pictures.","void setPictureSize(int width, int height) Sets the dimensions for pictures.","void setPreviewFormat(int pixel_format) Sets the image format for preview pictures.","void setPreviewFpsRange(int min, int max) Sets the minimum and maximum preview fps.","void setPreviewFrameRate(int fps) This method was deprecated in API level 9. replaced by setPreviewFpsRange(int, int)","void setPreviewSize(int width, int height) Sets the dimensions for preview pictures.","void setRecordingHint(boolean hint) Sets recording mode hint.","void setRotation(int rotation) Sets the clockwise rotation angle in degrees relative to the orientation of the camera.","void setSceneMode(String value) Sets the scene mode.","void setVideoStabilization(boolean toggle) Enables and disables video stabilization.","void setWhiteBalance(String value) Sets the white balance.","void setZoom(int value) Sets current zoom value.","void unflatten(String flattened) Takes a flattened string of parameters and adds each one to this Parameters object.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.hardware","constants":["String ANTIBANDING_50HZ","String ANTIBANDING_60HZ","String ANTIBANDING_AUTO","String ANTIBANDING_OFF","String EFFECT_AQUA","String EFFECT_BLACKBOARD","String EFFECT_MONO","String EFFECT_NEGATIVE","String EFFECT_NONE","String EFFECT_POSTERIZE","String EFFECT_SEPIA","String EFFECT_SOLARIZE","String EFFECT_WHITEBOARD","String FLASH_MODE_AUTO Flash will be fired automatically when required.","String FLASH_MODE_OFF Flash will not be fired.","String FLASH_MODE_ON Flash will always be fired during snapshot.","String FLASH_MODE_RED_EYE Flash will be fired in red-eye reduction mode.","String FLASH_MODE_TORCH Constant emission of light during preview, auto-focus and snapshot.","int FOCUS_DISTANCE_FAR_INDEX The array index of far focus distance for use with getFocusDistances(float[]).","int FOCUS_DISTANCE_NEAR_INDEX The array index of near focus distance for use with getFocusDistances(float[]).","int FOCUS_DISTANCE_OPTIMAL_INDEX The array index of optimal focus distance for use with getFocusDistances(float[]).","String FOCUS_MODE_AUTO Auto-focus mode.","String FOCUS_MODE_CONTINUOUS_PICTURE Continuous auto focus mode intended for taking pictures.","String FOCUS_MODE_CONTINUOUS_VIDEO Continuous auto focus mode intended for video recording.","String FOCUS_MODE_EDOF Extended depth of field (EDOF).","String FOCUS_MODE_FIXED Focus is fixed.","String FOCUS_MODE_INFINITY Focus is set at infinity.","String FOCUS_MODE_MACRO Macro (close-up) focus mode.","int PREVIEW_FPS_MAX_INDEX The array index of maximum preview fps for use with getPreviewFpsRange(int[]) or getSupportedPreviewFpsRange().","int PREVIEW_FPS_MIN_INDEX The array index of minimum preview fps for use with getPreviewFpsRange(int[]) or getSupportedPreviewFpsRange().","String SCENE_MODE_ACTION Take photos of fast moving objects.","String SCENE_MODE_AUTO Scene mode is off.","String SCENE_MODE_BARCODE Applications are looking for a barcode.","String SCENE_MODE_BEACH Take pictures on the beach.","String SCENE_MODE_CANDLELIGHT Capture the naturally warm color of scenes lit by candles.","String SCENE_MODE_FIREWORKS For shooting firework displays.","String SCENE_MODE_HDR Capture a scene using high dynamic range imaging techniques.","String SCENE_MODE_LANDSCAPE Take pictures on distant objects.","String SCENE_MODE_NIGHT Take photos at night.","String SCENE_MODE_NIGHT_PORTRAIT Take people pictures at night.","String SCENE_MODE_PARTY Take indoor low-light shot.","String SCENE_MODE_PORTRAIT Take people pictures.","String SCENE_MODE_SNOW Take pictures on the snow.","String SCENE_MODE_SPORTS Take photos of fast moving objects.","String SCENE_MODE_STEADYPHOTO Avoid blurry pictures (for example, due to hand shake).","String SCENE_MODE_SUNSET Take sunset photos.","String SCENE_MODE_THEATRE Take photos in a theater.","String WHITE_BALANCE_AUTO","String WHITE_BALANCE_CLOUDY_DAYLIGHT","String WHITE_BALANCE_DAYLIGHT","String WHITE_BALANCE_FLUORESCENT","String WHITE_BALANCE_INCANDESCENT","String WHITE_BALANCE_SHADE","String WHITE_BALANCE_TWILIGHT","String WHITE_BALANCE_WARM_FLUORESCENT"],"class":"Camera.Parameters","constructors":[],"fields":[]}