{"methods":["boolean clipPath(Path path) Intersect the current clip with the specified path.","boolean clipPath(Path path, Region.Op op) Modify the current clip with the specified path.","boolean clipRect(Rect rect, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates.","boolean clipRect(RectF rect, Region.Op op) Modify the current clip with the specified rectangle.","boolean clipRect(int left, int top, int right, int bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates.","boolean clipRect(float left, float top, float right, float bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates.","boolean clipRect(RectF rect) Intersect the current clip with the specified rectangle, which is expressed in local coordinates.","boolean clipRect(float left, float top, float right, float bottom, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates.","boolean clipRect(Rect rect) Intersect the current clip with the specified rectangle, which is expressed in local coordinates.","boolean clipRegion(Region region) This method was deprecated in API level 21. Unlike all other clip calls this API does not respect the current matrix. Use clipRect(Rect) as an alternative.","boolean clipRegion(Region region, Region.Op op) This method was deprecated in API level 21. Unlike all other clip calls this API does not respect the current matrix. Use clipRect(Rect) as an alternative.","void concat(Matrix matrix) Preconcat the current matrix with the specified matrix.","void drawARGB(int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode.","void drawArc(RectF oval, float startAngle, float sweepAngle, boolean useCenter, Paint paint) Draw the specified arc, which will be scaled to fit inside the specified oval.","void drawArc(float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean useCenter, Paint paint) Draw the specified arc, which will be scaled to fit inside the specified oval.","void drawBitmap(int[] colors, int offset, int stride, float x, float y, int width, int height, boolean hasAlpha, Paint paint) This method was deprecated in API level 21. Usage with a hardware accelerated canvas requires an internal copy of color buffer contents every time this method is called. Using a Bitmap avoids this copy, and allows the application to more explicitly control the lifetime and copies of pixel data.","void drawBitmap(Bitmap bitmap, Matrix matrix, Paint paint) Draw the bitmap using the specified matrix.","void drawBitmap(int[] colors, int offset, int stride, int x, int y, int width, int height, boolean hasAlpha, Paint paint) This method was deprecated in API level 21. Usage with a hardware accelerated canvas requires an internal copy of color buffer contents every time this method is called. Using a Bitmap avoids this copy, and allows the application to more explicitly control the lifetime and copies of pixel data.","void drawBitmap(Bitmap bitmap, Rect src, RectF dst, Paint paint) Draw the specified bitmap, scaling/translating automatically to fill the destination rectangle.","void drawBitmap(Bitmap bitmap, float left, float top, Paint paint) Draw the specified bitmap, with its top/left corner at (x,y), using the specified paint, transformed by the current matrix.","void drawBitmap(Bitmap bitmap, Rect src, Rect dst, Paint paint) Draw the specified bitmap, scaling/translating automatically to fill the destination rectangle.","void drawBitmapMesh(Bitmap bitmap, int meshWidth, int meshHeight, float[] verts, int vertOffset, int[] colors, int colorOffset, Paint paint) Draw the bitmap through the mesh, where mesh vertices are evenly distributed across the bitmap.","void drawCircle(float cx, float cy, float radius, Paint paint) Draw the specified circle using the specified paint.","void drawColor(int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode.","void drawColor(int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode.","void drawLine(float startX, float startY, float stopX, float stopY, Paint paint) Draw a line segment with the specified start and stop x,y coordinates, using the specified paint.","void drawLines(float[] pts, Paint paint)","void drawLines(float[] pts, int offset, int count, Paint paint) Draw a series of lines.","void drawOval(float left, float top, float right, float bottom, Paint paint) Draw the specified oval using the specified paint.","void drawOval(RectF oval, Paint paint) Draw the specified oval using the specified paint.","void drawPaint(Paint paint) Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint.","void drawPath(Path path, Paint paint) Draw the specified path using the specified paint.","void drawPicture(Picture picture, RectF dst) Draw the picture, stretched to fit into the dst rectangle.","void drawPicture(Picture picture) Save the canvas state, draw the picture, and restore the canvas state.","void drawPicture(Picture picture, Rect dst) Draw the picture, stretched to fit into the dst rectangle.","void drawPoint(float x, float y, Paint paint) Helper for drawPoints() for drawing a single point.","void drawPoints(float[] pts, int offset, int count, Paint paint) Draw a series of points.","void drawPoints(float[] pts, Paint paint) Helper for drawPoints() that assumes you want to draw the entire array","void drawPosText(char[] text, int index, int count, float[] pos, Paint paint) Draw the text in the array, with each character's origin specified by the pos array.","void drawPosText(String text, float[] pos, Paint paint) Draw the text in the array, with each character's origin specified by the pos array.","void drawRGB(int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode.","void drawRect(float left, float top, float right, float bottom, Paint paint) Draw the specified Rect using the specified paint.","void drawRect(RectF rect, Paint paint) Draw the specified Rect using the specified paint.","void drawRect(Rect r, Paint paint) Draw the specified Rect using the specified Paint.","void drawRoundRect(float left, float top, float right, float bottom, float rx, float ry, Paint paint) Draw the specified round-rect using the specified paint.","void drawRoundRect(RectF rect, float rx, float ry, Paint paint) Draw the specified round-rect using the specified paint.","void drawText(String text, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint.","void drawText(CharSequence text, int start, int end, float x, float y, Paint paint) Draw the specified range of text, specified by start/end, with its origin at (x,y), in the specified Paint.","void drawText(char[] text, int index, int count, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint.","void drawText(String text, int start, int end, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint.","void drawTextOnPath(String text, Path path, float hOffset, float vOffset, Paint paint) Draw the text, with origin at (x,y), using the specified paint, along the specified path.","void drawTextOnPath(char[] text, int index, int count, Path path, float hOffset, float vOffset, Paint paint) Draw the text, with origin at (x,y), using the specified paint, along the specified path.","void drawVertices(Canvas.VertexMode mode, int vertexCount, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, Paint paint) Draw the array of vertices, interpreted as triangles (based on mode).","final Rect getClipBounds() Retrieve the bounds of the current clip (in local coordinates).","boolean getClipBounds(Rect bounds) Return the bounds of the current clip (in local coordinates) in the bounds parameter, and return true if it is non-empty.","int getDensity() Returns the target density of the canvas.","DrawFilter getDrawFilter()","int getHeight() Returns the height of the current drawing layer","void getMatrix(Matrix ctm) Return, in ctm, the current transformation matrix.","final Matrix getMatrix() Return a new matrix with a copy of the canvas' current transformation matrix.","int getMaximumBitmapHeight() Returns the maximum allowed height for bitmaps drawn with this canvas.","int getMaximumBitmapWidth() Returns the maximum allowed width for bitmaps drawn with this canvas.","int getSaveCount() Returns the number of matrix/clip states on the Canvas' private stack.","int getWidth() Returns the width of the current drawing layer","boolean isHardwareAccelerated() Indicates whether this Canvas uses hardware acceleration.","boolean isOpaque() Return true if the device that the current layer draws into is opaque (i.e.","boolean quickReject(Path path, Canvas.EdgeType type) Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip.","boolean quickReject(float left, float top, float right, float bottom, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip.","boolean quickReject(RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip.","void restore() This call balances a previous call to save(), and is used to remove all modifications to the matrix/clip state since the last save call.","void restoreToCount(int saveCount) Efficient way to pop any calls to save() that happened after the save count reached saveCount.","void rotate(float degrees) Preconcat the current matrix with the specified rotation.","final void rotate(float degrees, float px, float py) Preconcat the current matrix with the specified rotation.","int save() Saves the current matrix and clip onto a private stack.","int save(int saveFlags) Based on saveFlags, can save the current matrix and clip onto a private stack.","int saveLayer(RectF bounds, Paint paint, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap.","int saveLayer(RectF bounds, Paint paint) Convenience for saveLayer(bounds, paint, ALL_SAVE_FLAG)","int saveLayer(float left, float top, float right, float bottom, Paint paint) Convenience for saveLayer(left, top, right, bottom, paint, ALL_SAVE_FLAG)","int saveLayer(float left, float top, float right, float bottom, Paint paint, int saveFlags) Helper version of saveLayer() that takes 4 values rather than a RectF.","int saveLayerAlpha(RectF bounds, int alpha, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap.","int saveLayerAlpha(RectF bounds, int alpha) Convenience for saveLayerAlpha(bounds, alpha, ALL_SAVE_FLAG)","int saveLayerAlpha(float left, float top, float right, float bottom, int alpha, int saveFlags) Helper for saveLayerAlpha() that takes 4 values instead of a RectF.","int saveLayerAlpha(float left, float top, float right, float bottom, int alpha) Helper for saveLayerAlpha(left, top, right, bottom, alpha, ALL_SAVE_FLAG)","void scale(float sx, float sy) Preconcat the current matrix with the specified scale.","final void scale(float sx, float sy, float px, float py) Preconcat the current matrix with the specified scale.","void setBitmap(Bitmap bitmap) Specify a bitmap for the canvas to draw into.","void setDensity(int density) Specifies the density for this Canvas' backing bitmap.","void setDrawFilter(DrawFilter filter)","void setMatrix(Matrix matrix) Completely replace the current matrix with the specified matrix.","void skew(float sx, float sy) Preconcat the current matrix with the specified skew.","void translate(float dx, float dy) Preconcat the current matrix with the specified translation","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.graphics","constants":["int ALL_SAVE_FLAG restore everything when restore() is called","int CLIP_SAVE_FLAG restore the current clip when restore() is called","int CLIP_TO_LAYER_SAVE_FLAG clip against the layer's bounds","int FULL_COLOR_LAYER_SAVE_FLAG the layer needs to 8-bits per color component","int HAS_ALPHA_LAYER_SAVE_FLAG the layer needs to per-pixel alpha","int MATRIX_SAVE_FLAG restore the current matrix when restore() is called"],"class":"Canvas","constructors":[],"fields":[]}