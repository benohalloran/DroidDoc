{"methods":["static int charCount(int codePoint) Calculates the number of char values required to represent the specified Unicode code point.","char charValue() Gets the primitive value of this character.","static int codePointAt(char[] seq, int index) Returns the code point at index in the specified array of character units.","static int codePointAt(char[] seq, int index, int limit) Returns the code point at index in the specified array of character units, where index has to be less than limit.","static int codePointAt(CharSequence seq, int index) Returns the code point at index in the specified sequence of character units.","static int codePointBefore(CharSequence seq, int index) Returns the code point that precedes index in the specified sequence of character units.","static int codePointBefore(char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start.","static int codePointBefore(char[] seq, int index) Returns the code point that precedes index in the specified array of character units.","static int codePointCount(CharSequence seq, int beginIndex, int endIndex) Counts the number of Unicode code points in the subsequence of the specified character sequence, as delineated by beginIndex and endIndex.","static int codePointCount(char[] seq, int offset, int count) Counts the number of Unicode code points in the subsequence of the specified char array, as delineated by offset and count.","static int compare(char lhs, char rhs) Compares two char values.","int compareTo(Character c) Compares this object to the specified character object to determine their relative order.","static int digit(char c, int radix) Convenience method to determine the value of the specified character c in the supplied radix.","static int digit(int codePoint, int radix) Convenience method to determine the value of the character codePoint in the supplied radix.","boolean equals(Object object) Compares this object with the specified object and indicates if they are equal.","static char forDigit(int digit, int radix) Returns the character which represents the specified digit in the specified radix.","static byte getDirectionality(int codePoint) Returns the Unicode directionality of the given code point.","static byte getDirectionality(char c) Gets the Unicode directionality of the specified character.","static String getName(int codePoint) Returns a human-readable name for the given code point, or null if the code point is unassigned.","static int getNumericValue(int codePoint) Gets the numeric value of the specified Unicode code point.","static int getNumericValue(char c) Returns the numeric value of the specified Unicode character.","static int getType(char c) Gets the general Unicode category of the specified character.","static int getType(int codePoint) Gets the general Unicode category of the specified code point.","int hashCode() Returns an integer hash code for this object.","static char highSurrogate(int codePoint) Returns the high surrogate for the given code point.","static boolean isAlphabetic(int codePoint) Returns true if the given code point is alphabetic.","static boolean isBmpCodePoint(int codePoint) Returns true if the given code point is in the Basic Multilingual Plane (BMP).","static boolean isDefined(int codePoint) Indicates whether the specified code point is defined in the Unicode specification.","static boolean isDefined(char c) Indicates whether the specified character is defined in the Unicode specification.","static boolean isDigit(char c) Indicates whether the specified character is a digit.","static boolean isDigit(int codePoint) Indicates whether the specified code point is a digit.","static boolean isHighSurrogate(char ch) Indicates whether ch is a high- (or leading-) surrogate code unit that is used for representing supplementary characters in UTF-16 encoding.","static boolean isISOControl(char c) Indicates whether the specified character is an ISO control character.","static boolean isISOControl(int c) Indicates whether the specified code point is an ISO control character.","static boolean isIdentifierIgnorable(char c) Indicates whether the specified character is ignorable in a Java or Unicode identifier.","static boolean isIdentifierIgnorable(int codePoint) Indicates whether the specified code point is ignorable in a Java or Unicode identifier.","static boolean isIdeographic(int codePoint) Returns true if the given code point is a CJKV ideographic character.","static boolean isJavaIdentifierPart(int codePoint) Indicates whether the specified code point is a valid part of a Java identifier other than the first character.","static boolean isJavaIdentifierPart(char c) Indicates whether the specified character is a valid part of a Java identifier other than the first character.","static boolean isJavaIdentifierStart(char c) Indicates whether the specified character is a valid first character for a Java identifier.","static boolean isJavaIdentifierStart(int codePoint) Indicates whether the specified code point is a valid first character for a Java identifier.","static boolean isJavaLetter(char c) This method was deprecated in API level 1. Use isJavaIdentifierStart(char) instead.","static boolean isJavaLetterOrDigit(char c) This method was deprecated in API level 1. Use isJavaIdentifierPart(char) instead.","static boolean isLetter(char c) Indicates whether the specified character is a letter.","static boolean isLetter(int codePoint) Indicates whether the specified code point is a letter.","static boolean isLetterOrDigit(char c) Indicates whether the specified character is a letter or a digit.","static boolean isLetterOrDigit(int codePoint) Indicates whether the specified code point is a letter or a digit.","static boolean isLowSurrogate(char ch) Indicates whether ch is a low- (or trailing-) surrogate code unit that is used for representing supplementary characters in UTF-16 encoding.","static boolean isLowerCase(int codePoint) Indicates whether the specified code point is a lower case letter.","static boolean isLowerCase(char c) Indicates whether the specified character is a lower case letter.","static boolean isMirrored(char c) Indicates whether the specified character is mirrored.","static boolean isMirrored(int codePoint) Indicates whether the specified code point is mirrored.","static boolean isSpace(char c) This method was deprecated in API level 1. Use isWhitespace(char) instead.","static boolean isSpaceChar(char c) See isSpaceChar(int).","static boolean isSpaceChar(int codePoint) Returns true if the given code point is a Unicode space character.","static boolean isSupplementaryCodePoint(int codePoint) Indicates whether codePoint is within the supplementary code point range.","static boolean isSurrogate(char ch) Returns true if the given character is a high or low surrogate.","static boolean isSurrogatePair(char high, char low) Indicates whether the specified character pair is a valid surrogate pair.","static boolean isTitleCase(int codePoint) Indicates whether the specified code point is a titlecase character.","static boolean isTitleCase(char c) Indicates whether the specified character is a titlecase character.","static boolean isUnicodeIdentifierPart(int codePoint) Indicates whether the specified code point is valid as part of a Unicode identifier other than the first character.","static boolean isUnicodeIdentifierPart(char c) Indicates whether the specified character is valid as part of a Unicode identifier other than the first character.","static boolean isUnicodeIdentifierStart(char c) Indicates whether the specified character is a valid initial character for a Unicode identifier.","static boolean isUnicodeIdentifierStart(int codePoint) Indicates whether the specified code point is a valid initial character for a Unicode identifier.","static boolean isUpperCase(int codePoint) Indicates whether the specified code point is an upper case letter.","static boolean isUpperCase(char c) Indicates whether the specified character is an upper case letter.","static boolean isValidCodePoint(int codePoint) Indicates whether codePoint is a valid Unicode code point.","static boolean isWhitespace(char c) See isWhitespace(int).","static boolean isWhitespace(int codePoint) Returns true if the given code point is a Unicode whitespace character.","static char lowSurrogate(int codePoint) Returns the low surrogate for the given code point.","static int offsetByCodePoints(CharSequence seq, int index, int codePointOffset) Determines the index in the specified character sequence that is offset codePointOffset code points from index.","static int offsetByCodePoints(char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index.","static char reverseBytes(char c) Reverses the order of the first and second byte in the specified character.","static char[] toChars(int codePoint) Converts the specified Unicode code point into a UTF-16 encoded sequence and returns it as a char array.","static int toChars(int codePoint, char[] dst, int dstIndex) Converts the specified Unicode code point into a UTF-16 encoded sequence and copies the value(s) into the char array dst, starting at index dstIndex.","static int toCodePoint(char high, char low) Converts a surrogate pair into a Unicode code point.","static char toLowerCase(char c) Returns the lower case equivalent for the specified character if the character is an upper case letter.","static int toLowerCase(int codePoint) Returns the lower case equivalent for the specified code point if it is an upper case letter.","static String toString(char value) Converts the specified character to its string representation.","String toString() Returns a string containing a concise, human-readable description of this object.","static char toTitleCase(char c) Returns the title case equivalent for the specified character if it exists.","static int toTitleCase(int codePoint) Returns the title case equivalent for the specified code point if it exists.","static char toUpperCase(char c) Returns the upper case equivalent for the specified character if the character is a lower case letter.","static int toUpperCase(int codePoint) Returns the upper case equivalent for the specified code point if the code point is a lower case letter.","static Character valueOf(char c) Returns a Character instance for the char value passed.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface java.lang.Comparable abstract int compareTo(T another) Compares this object to the specified object to determine their relative order.","abstract int compareTo(T another) Compares this object to the specified object to determine their relative order."],"package":"java.lang","constants":["byte COMBINING_SPACING_MARK Unicode category constant Mc.","byte CONNECTOR_PUNCTUATION Unicode category constant Pc.","byte CONTROL Unicode category constant Cc.","byte CURRENCY_SYMBOL Unicode category constant Sc.","byte DASH_PUNCTUATION Unicode category constant Pd.","byte DECIMAL_DIGIT_NUMBER Unicode category constant Nd.","byte DIRECTIONALITY_ARABIC_NUMBER Unicode bidirectional constant AN.","byte DIRECTIONALITY_BOUNDARY_NEUTRAL Unicode bidirectional constant BN.","byte DIRECTIONALITY_COMMON_NUMBER_SEPARATOR Unicode bidirectional constant CS.","byte DIRECTIONALITY_EUROPEAN_NUMBER Unicode bidirectional constant EN.","byte DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR Unicode bidirectional constant ES.","byte DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR Unicode bidirectional constant ET.","byte DIRECTIONALITY_LEFT_TO_RIGHT Unicode bidirectional constant L.","byte DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING Unicode bidirectional constant LRE.","byte DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE Unicode bidirectional constant LRO.","byte DIRECTIONALITY_NONSPACING_MARK Unicode bidirectional constant NSM.","byte DIRECTIONALITY_OTHER_NEUTRALS Unicode bidirectional constant ON.","byte DIRECTIONALITY_PARAGRAPH_SEPARATOR Unicode bidirectional constant B.","byte DIRECTIONALITY_POP_DIRECTIONAL_FORMAT Unicode bidirectional constant PDF.","byte DIRECTIONALITY_RIGHT_TO_LEFT Unicode bidirectional constant R.","byte DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC Unicode bidirectional constant AL.","byte DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING Unicode bidirectional constant RLE.","byte DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE Unicode bidirectional constant RLO.","byte DIRECTIONALITY_SEGMENT_SEPARATOR Unicode bidirectional constant S.","byte DIRECTIONALITY_UNDEFINED Unicode bidirectional constant.","byte DIRECTIONALITY_WHITESPACE Unicode bidirectional constant WS.","byte ENCLOSING_MARK Unicode category constant Me.","byte END_PUNCTUATION Unicode category constant Pe.","byte FINAL_QUOTE_PUNCTUATION Unicode category constant Pf.","byte FORMAT Unicode category constant Cf.","byte INITIAL_QUOTE_PUNCTUATION Unicode category constant Pi.","byte LETTER_NUMBER Unicode category constant Nl.","byte LINE_SEPARATOR Unicode category constant Zl.","byte LOWERCASE_LETTER Unicode category constant Ll.","byte MATH_SYMBOL Unicode category constant Sm.","int MAX_CODE_POINT The maximum code point value, U+10FFFF.","char MAX_HIGH_SURROGATE The maximum value of a high surrogate or leading surrogate unit in UTF-16 encoding, '?'.","char MAX_LOW_SURROGATE The maximum value of a low surrogate or trailing surrogate unit in UTF-16 encoding, '?'.","int MAX_RADIX The maximum radix used for conversions between characters and integers.","char MAX_SURROGATE The maximum value of a surrogate unit in UTF-16 encoding, '?'.","char MAX_VALUE The maximum Character value.","int MIN_CODE_POINT The minimum code point value, U+0000.","char MIN_HIGH_SURROGATE The minimum value of a high surrogate or leading surrogate unit in UTF-16 encoding, '?'.","char MIN_LOW_SURROGATE The minimum value of a low surrogate or trailing surrogate unit in UTF-16 encoding, '?'.","int MIN_RADIX The minimum radix used for conversions between characters and integers.","int MIN_SUPPLEMENTARY_CODE_POINT The minimum value of a supplementary code point, U+010000.","char MIN_SURROGATE The minimum value of a surrogate unit in UTF-16 encoding, '?'.","char MIN_VALUE The minimum Character value.","byte MODIFIER_LETTER Unicode category constant Lm.","byte MODIFIER_SYMBOL Unicode category constant Sk.","byte NON_SPACING_MARK Unicode category constant Mn.","byte OTHER_LETTER Unicode category constant Lo.","byte OTHER_NUMBER Unicode category constant No.","byte OTHER_PUNCTUATION Unicode category constant Po.","byte OTHER_SYMBOL Unicode category constant So.","byte PARAGRAPH_SEPARATOR Unicode category constant Zp.","byte PRIVATE_USE Unicode category constant Co.","int SIZE The number of bits required to represent a Character value unsigned form.","byte SPACE_SEPARATOR Unicode category constant Zs.","byte START_PUNCTUATION Unicode category constant Ps.","byte SURROGATE Unicode category constant Cs.","byte TITLECASE_LETTER Unicode category constant Lt.","byte UNASSIGNED Unicode category constant Cn.","byte UPPERCASE_LETTER Unicode category constant Lu."],"class":"Character","constructors":[],"fields":["public static final Class<Character> TYPE The Class object that represents the primitive type char."]}