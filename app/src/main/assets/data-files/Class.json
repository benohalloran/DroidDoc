{"methods":["<U> Class<? extends U> asSubclass(Class<U> c) Casts this Class to represent a subclass of the given class.","T cast(Object obj) Casts the given object to the type represented by this Class.","boolean desiredAssertionStatus() Returns the assertion status for the class represented by this Class.","static Class<?> forName(String className, boolean shouldInitialize, ClassLoader classLoader) Returns a Class object which represents the class with the given name.","static Class<?> forName(String className) Returns a Class object which represents the class with the given name.","<A extends Annotation> A getAnnotation(Class<A> annotationType)","Annotation[] getAnnotations() Returns an array containing all the annotations of this class.","String getCanonicalName() Returns the canonical name of this class.","ClassLoader getClassLoader() Returns the class loader which was used to load the class represented by this Class.","Class[]<?> getClasses() Returns an array containing Class objects for all public classes, interfaces, enums and annotations that are members of this class and its superclasses.","Class<?> getComponentType() Returns a Class object which represents the component type if this class represents an array type.","Constructor<T> getConstructor(Class...<?> parameterTypes) Returns a Constructor object which represents the public constructor matching the given parameter types.","Constructor[]<?> getConstructors() Returns an array containing Constructor objects for all public constructors for this Class.","Annotation[] getDeclaredAnnotations() Returns the annotations that are directly defined on the class represented by this Class.","Class[]<?> getDeclaredClasses() Returns an array containing Class objects for all classes, interfaces, enums and annotations that are members of this class.","Constructor<T> getDeclaredConstructor(Class...<?> parameterTypes) Returns a Constructor object which represents the constructor matching the specified parameter types that is declared by the class represented by this Class.","Constructor[]<?> getDeclaredConstructors() Returns an array containing Constructor objects for all constructors declared in the class represented by this Class.","Field getDeclaredField(String name) Returns a Field object for the field with the given name which is declared in the class represented by this Class.","Field[] getDeclaredFields() Returns an array containing Field objects for all fields declared in the class represented by this Class.","Method getDeclaredMethod(String name, Class...<?> parameterTypes) Returns a Method object which represents the method matching the specified name and parameter types that is declared by the class represented by this Class.","Method[] getDeclaredMethods() Returns an array containing Method objects for all methods declared in the class represented by this Class.","Class<?> getDeclaringClass() Returns the class that this class is a member of, or null if this class is a top-level class, a primitive, an array, or defined within a method or constructor.","Class<?> getEnclosingClass() Returns the class enclosing this class.","Constructor<?> getEnclosingConstructor() Returns the enclosing Constructor of this Class, if it is an anonymous or local/automatic class; otherwise null.","Method getEnclosingMethod() Returns the enclosing Method of this Class, if it is an anonymous or local/automatic class; otherwise null.","T[] getEnumConstants() Returns the enum constants associated with this Class.","Field getField(String name) Returns a Field object which represents the public field with the given name.","Field[] getFields() Returns an array containing Field objects for all public fields for the class C represented by this Class.","Type[] getGenericInterfaces() Returns the Types of the interfaces that this Class directly implements.","Type getGenericSuperclass() Returns the Type that represents the superclass of this class.","Class[]<?> getInterfaces() Returns an array of Class objects that match the interfaces in the implements declaration of the class represented by this Class.","Method getMethod(String name, Class...<?> parameterTypes) Returns a Method object which represents the public method with the specified name and parameter types.","Method[] getMethods() Returns an array containing Method objects for all public methods for the class C represented by this Class.","int getModifiers() Returns an integer that represents the modifiers of the class represented by this Class.","String getName() Returns the name of the class represented by this Class.","Package getPackage() Returns the Package of which the class represented by this Class is a member.","ProtectionDomain getProtectionDomain() Returns null.","URL getResource(String resourceName) Returns the URL of the given resource, or null if the resource is not found.","InputStream getResourceAsStream(String resourceName) Returns a read-only stream for the contents of the given resource, or null if the resource is not found.","Object[] getSigners() Returns null.","String getSimpleName() Returns the simple name of the class represented by this Class as defined in the source code.","Class<? super T> getSuperclass() Returns the Class object which represents the superclass of the class represented by this Class.","synchronized TypeVariable[]<Class<T>> getTypeParameters() Returns an array containing TypeVariable objects for type variables declared by the generic class represented by this Class.","boolean isAnnotation() Tests whether this Class represents an annotation class.","boolean isAnnotationPresent(Class<? extends Annotation> annotationType) Indicates whether or not this element has an annotation with the specified annotation type (including inherited annotations).","boolean isAnonymousClass() Tests whether the class represented by this Class is anonymous.","boolean isArray() Tests whether the class represented by this Class is an array class.","boolean isAssignableFrom(Class<?> c) Can c be assigned to this class? For example, String can be assigned to Object (by an upcast), however, an Object cannot be assigned to a String as a potentially exception throwing downcast would be necessary.","boolean isEnum() Tests whether the class represented by this Class is an enum.","boolean isInstance(Object object) Tests whether the given object can be cast to the class represented by this Class.","boolean isInterface() Tests whether this Class represents an interface.","boolean isLocalClass() Tests whether the class represented by this Class is defined locally.","boolean isMemberClass() Tests whether the class represented by this Class is a member class.","boolean isPrimitive() Tests whether this Class represents a primitive type.","boolean isSynthetic() Tests whether this Class represents a synthetic type.","T newInstance() Returns a new instance of the class represented by this Class, created by invoking the default (that is, zero-argument) constructor.","String toString() Returns a string containing a concise, human-readable description of this object.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface java.lang.reflect.AnnotatedElement abstract <T extends Annotation> T getAnnotation(Class<T> annotationType) Returns, for this element, the annotation with the specified type, or null if no annotation with the specified type is present (including inherited annotations). abstract Annotation[] getAnnotations() Returns, for this element, an array containing all annotations (including inherited annotations). abstract Annotation[] getDeclaredAnnotations() Returns, for this element, all annotations that are explicitly declared (not inherited). abstract boolean isAnnotationPresent(Class<? extends Annotation> annotationType) Indicates whether or not this element has an annotation with the specified annotation type (including inherited annotations).","abstract <T extends Annotation> T getAnnotation(Class<T> annotationType) Returns, for this element, the annotation with the specified type, or null if no annotation with the specified type is present (including inherited annotations).","abstract Annotation[] getAnnotations() Returns, for this element, an array containing all annotations (including inherited annotations).","abstract Annotation[] getDeclaredAnnotations() Returns, for this element, all annotations that are explicitly declared (not inherited).","abstract boolean isAnnotationPresent(Class<? extends Annotation> annotationType) Indicates whether or not this element has an annotation with the specified annotation type (including inherited annotations).","From interface java.lang.reflect.GenericDeclaration abstract TypeVariable[]<?> getTypeParameters() Returns the declared type parameters in declaration order.","abstract TypeVariable[]<?> getTypeParameters() Returns the declared type parameters in declaration order."],"package":"java.lang","constants":[],"class":"Class","constructors":[],"fields":[]}