{"methods":["void clear() Removes all of the mappings from this map.","boolean contains(Object value) Legacy method testing if some key maps into the specified value in this table.","boolean containsKey(Object key) Tests if the specified object is a key in this table.","boolean containsValue(Object value) Returns true if this map maps one or more keys to the specified value.","Enumeration<V> elements() Returns an enumeration of the values in this table.","Set<Entry<K, V>> entrySet() Returns a Set view of the mappings contained in this map.","boolean equals(Object o) Compares the specified object with this map for equality.","V get(Object key) Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.","int hashCode() Returns the hash code value for this Map, i.e., the sum of, for each key-value pair in the map, key.hashCode() ^ value.hashCode().","boolean isEmpty() Returns whether this map is empty. This implementation compares size() to 0.","Set<K> keySet() Returns a Set view of the keys contained in this map.","Enumeration<K> keys() Returns an enumeration of the keys in this table.","V put(K key, V value) Maps the specified key to the specified value in this table.","void putAll(Map<? extends K, ? extends V> m) Copies all of the mappings from the specified map to this one.","V putIfAbsent(K key, V value) If the specified key is not already associated with a value, associate it with the given value.","boolean remove(Object key, Object value) Removes the entry for a key only if currently mapped to a given value.","V remove(Object key) Removes the key (and its corresponding value) from this map.","V replace(K key, V value) Replaces the entry for a key only if currently mapped to some value.","boolean replace(K key, V oldValue, V newValue) Replaces the entry for a key only if currently mapped to a given value.","int size() Returns the number of mappings in this Map. This implementation returns its entry set's size.","String toString() Returns a string representation of this map.","Collection<V> values() Returns a Collection view of the values contained in this map.","[Expand] Inherited Methods","From class java.util.AbstractMap void clear() Removes all elements from this Map, leaving it empty. This implementation calls entrySet().clear(). Object clone() Creates and returns a copy of this Object. boolean containsKey(Object key) Returns whether this Map contains the specified key. This implementation iterates its key set, looking for a key that key equals. boolean containsValue(Object value) Returns whether this Map contains the specified value. This implementation iterates its entry set, looking for an entry with a value that value equals. abstract Set<Entry<K, V>> entrySet() Returns a Set containing all of the mappings in this Map. boolean equals(Object object) Compares this instance with the specified object and indicates if they are equal. This implementation first checks the structure of object. V get(Object key) Returns the value of the mapping with the specified key. This implementation iterates its entry set, looking for an entry with a key that key equals. int hashCode() Returns an integer hash code for this object. This implementation iterates its entry set, summing the hashcodes of its entries. boolean isEmpty() Returns whether this map is empty. This implementation compares size() to 0. Set<K> keySet() Returns a set of the keys contained in this Map. This implementation returns a view that calls through this to map. V put(K key, V value) Maps the specified key to the specified value. This base implementation throws UnsupportedOperationException. void putAll(Map<? extends K, ? extends V> map) Copies every mapping in the specified Map to this Map. This implementation iterates through map's entry set, calling put() for each. V remove(Object key) Removes a mapping with the specified key from this Map. This implementation iterates its entry set, removing the entry with a key that key equals. int size() Returns the number of mappings in this Map. This implementation returns its entry set's size. String toString() Returns a string containing a concise, human-readable description of this object. This implementation composes a string by iterating its entry set. Collection<V> values() Returns a Collection of the values contained in this Map. This implementation returns a view that calls through this to map.","void clear() Removes all elements from this Map, leaving it empty. This implementation calls entrySet().clear().","Object clone() Creates and returns a copy of this Object.","boolean containsKey(Object key) Returns whether this Map contains the specified key. This implementation iterates its key set, looking for a key that key equals.","boolean containsValue(Object value) Returns whether this Map contains the specified value. This implementation iterates its entry set, looking for an entry with a value that value equals.","abstract Set<Entry<K, V>> entrySet() Returns a Set containing all of the mappings in this Map.","boolean equals(Object object) Compares this instance with the specified object and indicates if they are equal. This implementation first checks the structure of object.","V get(Object key) Returns the value of the mapping with the specified key. This implementation iterates its entry set, looking for an entry with a key that key equals.","int hashCode() Returns an integer hash code for this object. This implementation iterates its entry set, summing the hashcodes of its entries.","boolean isEmpty() Returns whether this map is empty. This implementation compares size() to 0.","Set<K> keySet() Returns a set of the keys contained in this Map. This implementation returns a view that calls through this to map.","V put(K key, V value) Maps the specified key to the specified value. This base implementation throws UnsupportedOperationException.","void putAll(Map<? extends K, ? extends V> map) Copies every mapping in the specified Map to this Map. This implementation iterates through map's entry set, calling put() for each.","V remove(Object key) Removes a mapping with the specified key from this Map. This implementation iterates its entry set, removing the entry with a key that key equals.","int size() Returns the number of mappings in this Map. This implementation returns its entry set's size.","String toString() Returns a string containing a concise, human-readable description of this object. This implementation composes a string by iterating its entry set.","Collection<V> values() Returns a Collection of the values contained in this Map. This implementation returns a view that calls through this to map.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface java.util.Map abstract void clear() Removes all elements from this Map, leaving it empty. abstract boolean containsKey(Object key) Returns whether this Map contains the specified key. abstract boolean containsValue(Object value) Returns whether this Map contains the specified value. abstract Set<Entry<K, V>> entrySet() Returns a Set containing all of the mappings in this Map. abstract boolean equals(Object object) Compares the argument to the receiver, and returns true if the specified object is a Map and both Maps contain the same mappings. abstract V get(Object key) Returns the value of the mapping with the specified key. abstract int hashCode() Returns an integer hash code for the receiver. abstract boolean isEmpty() Returns whether this map is empty. abstract Set<K> keySet() Returns a set of the keys contained in this Map. abstract V put(K key, V value) Maps the specified key to the specified value. abstract void putAll(Map<? extends K, ? extends V> map) Copies every mapping in the specified Map to this Map. abstract V remove(Object key) Removes a mapping with the specified key from this Map. abstract int size() Returns the number of mappings in this Map. abstract Collection<V> values() Returns a Collection of the values contained in this Map.","abstract void clear() Removes all elements from this Map, leaving it empty.","abstract boolean containsKey(Object key) Returns whether this Map contains the specified key.","abstract boolean containsValue(Object value) Returns whether this Map contains the specified value.","abstract Set<Entry<K, V>> entrySet() Returns a Set containing all of the mappings in this Map.","abstract boolean equals(Object object) Compares the argument to the receiver, and returns true if the specified object is a Map and both Maps contain the same mappings.","abstract V get(Object key) Returns the value of the mapping with the specified key.","abstract int hashCode() Returns an integer hash code for the receiver.","abstract boolean isEmpty() Returns whether this map is empty.","abstract Set<K> keySet() Returns a set of the keys contained in this Map.","abstract V put(K key, V value) Maps the specified key to the specified value.","abstract void putAll(Map<? extends K, ? extends V> map) Copies every mapping in the specified Map to this Map.","abstract V remove(Object key) Removes a mapping with the specified key from this Map.","abstract int size() Returns the number of mappings in this Map.","abstract Collection<V> values() Returns a Collection of the values contained in this Map.","From interface java.util.concurrent.ConcurrentMap abstract V putIfAbsent(K key, V value) If the specified key is not already associated with a value, associate it with the given value. abstract boolean remove(Object key, Object value) Removes the entry for a key only if currently mapped to a given value. abstract boolean replace(K key, V oldValue, V newValue) Replaces the entry for a key only if currently mapped to a given value. abstract V replace(K key, V value) Replaces the entry for a key only if currently mapped to some value.","abstract V putIfAbsent(K key, V value) If the specified key is not already associated with a value, associate it with the given value.","abstract boolean remove(Object key, Object value) Removes the entry for a key only if currently mapped to a given value.","abstract boolean replace(K key, V oldValue, V newValue) Replaces the entry for a key only if currently mapped to a given value.","abstract V replace(K key, V value) Replaces the entry for a key only if currently mapped to some value."],"package":"java.util.concurrent","constants":[],"class":"ConcurrentHashMap","constructors":[],"fields":[]}