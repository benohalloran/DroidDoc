{"methods":["abstract void clearWarnings() Discards all warnings that may have arisen for this connection.","abstract void close() Causes the instant release of all database and driver connection resources associated with this object.","abstract void commit() Commits all of the changes made since the last commit or rollback of the associated transaction.","abstract Array createArrayOf(String typeName, Object[] elements) Returns a new Array containing the given elements.","abstract Blob createBlob() Returns a new empty Blob.","abstract Clob createClob() Returns a new empty Clob.","abstract NClob createNClob() Returns a new empty NClob.","abstract SQLXML createSQLXML() Returns a new empty SQLXML.","abstract Statement createStatement(int resultSetType, int resultSetConcurrency) Returns a new instance of Statement whose associated ResultSets have the characteristics specified in the type and concurrency arguments.","abstract Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) Returns a new instance of Statement whose associated ResultSets will have the characteristics specified in the type, concurrency and holdability arguments.","abstract Statement createStatement() Returns a new instance of Statement for issuing SQL commands to the remote database.","abstract Struct createStruct(String typeName, Object[] attributes) Returns a new Struct containing the given attributes.","abstract boolean getAutoCommit() Returns a boolean indicating whether or not this connection is in the auto-commit operating mode.","abstract String getCatalog() Gets this Connection object's current catalog name.","abstract String getClientInfo(String name) Returns the value corresponding to the given client info property, or null if unset.","abstract Properties getClientInfo() Returns a Properties object containing all client info properties.","abstract int getHoldability() Returns the holdability property that any ResultSet produced by this instance will have.","abstract DatabaseMetaData getMetaData() Gets the metadata about the database referenced by this connection.","abstract int getTransactionIsolation() Returns the transaction isolation level for this connection.","abstract Map<String, Class<?>> getTypeMap() Returns the type mapping associated with this Connection object.","abstract SQLWarning getWarnings() Gets the first instance of any SQLWarning objects that may have been created in the use of this connection.","abstract boolean isClosed() Returns a boolean indicating whether or not this connection is in the closed state.","abstract boolean isReadOnly() Returns a boolean indicating whether or not this connection is currently in the read-only state.","abstract boolean isValid(int timeout) Returns true if this connection is still open and valid, false otherwise.","abstract String nativeSQL(String sql) Returns a string representation of the input SQL statement sql expressed in the underlying system's native SQL syntax.","abstract CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) Returns a new instance of CallableStatement that may be used for making stored procedure calls to the database.","abstract CallableStatement prepareCall(String sql) Returns a new instance of CallableStatement that may be used for making stored procedure calls to the database.","abstract CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) Returns a new instance of CallableStatement that may be used for making stored procedure calls to the database.","abstract PreparedStatement prepareStatement(String sql, String[] columnNames) Creates a default PreparedStatement that can retrieve the auto-generated keys designated by a supplied array.","abstract PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) Creates a PreparedStatement that generates ResultSets with the specified values of resultSetType and resultSetConcurrency.","abstract PreparedStatement prepareStatement(String sql) Returns a new instance of PreparedStatement that may be used any number of times to execute parameterized requests on the database server.","abstract PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) Creates a default PreparedStatement that can retrieve automatically generated keys.","abstract PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) Creates a PreparedStatement that generates ResultSets with the specified type, concurrency and holdability","abstract PreparedStatement prepareStatement(String sql, int[] columnIndexes) Creates a default PreparedStatement that can retrieve the auto-generated keys designated by a supplied array.","abstract void releaseSavepoint(Savepoint savepoint) Releases the specified savepoint from the present transaction.","abstract void rollback() Rolls back all updates made so far in this transaction and relinquishes all acquired database locks.","abstract void rollback(Savepoint savepoint) Undoes all changes made after the supplied Savepoint object was set.","abstract void setAutoCommit(boolean autoCommit) Sets this connection's auto-commit mode on or off.","abstract void setCatalog(String catalog) Sets the catalog name for this connection.","abstract void setClientInfo(String name, String value) Sets the client info property name to value.","abstract void setClientInfo(Properties properties) Replaces all client info properties with the name/value pairs from properties.","abstract void setHoldability(int holdability) Sets the holdability of the ResultSets created by this Connection.","abstract void setReadOnly(boolean readOnly) Sets this connection to read-only mode.","abstract Savepoint setSavepoint(String name) Creates a named Savepoint in the current transaction.","abstract Savepoint setSavepoint() Creates an unnamed Savepoint in the current transaction.","abstract void setTransactionIsolation(int level) Sets the transaction isolation level for this Connection.","abstract void setTypeMap(Map<String, Class<?>> map) Sets the TypeMap for this connection.","[Expand] Inherited Methods","From interface java.lang.AutoCloseable abstract void close() Closes the object and release any system resources it holds.","abstract void close() Closes the object and release any system resources it holds.","From interface java.sql.Wrapper abstract boolean isWrapperFor(Class<?> iface) If the caller is a wrapper of the class or implements the given interface, the methods return false and vice versa. abstract <T> T unwrap(Class<T> iface) Returns an object that implements the given interface.","abstract boolean isWrapperFor(Class<?> iface) If the caller is a wrapper of the class or implements the given interface, the methods return false and vice versa.","abstract <T> T unwrap(Class<T> iface) Returns an object that implements the given interface."],"package":"java.sql","constants":["int TRANSACTION_NONE A constant indicating that transactions are not supported.","int TRANSACTION_READ_COMMITTED No dirty reads are permitted, therefore transactions may not read a row containing uncommitted values - but does not prevent an application from non-repeatable reads and phantom reads.","int TRANSACTION_READ_UNCOMMITTED In the case that reading uncommitted values is allowed, the following incidents may happen which may lead to an invalid results: dirty reads non-repeatable reads phantom reads","int TRANSACTION_REPEATABLE_READ A constant indicating that dirty reads and non-repeatable reads are prevented but phantom reads can occur.","int TRANSACTION_SERIALIZABLE The constant that indicates that the following incidents are all prevented (the opposite of TRANSACTION_READ_UNCOMMITTED): dirty reads non-repeatable reads phantom reads"],"class":"Connection","constructors":[],"fields":[]}