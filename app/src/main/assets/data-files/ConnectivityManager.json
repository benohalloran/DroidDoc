{"methods":["void addDefaultNetworkActiveListener(ConnectivityManager.OnNetworkActiveListener l) Start listening to reports when the system's default data network is active, meaning it is a good time to perform network traffic.","NetworkInfo getActiveNetworkInfo() Returns details about the currently active default data network.","NetworkInfo[] getAllNetworkInfo() Returns connection status information about all network types supported by the device.","Network[] getAllNetworks() Returns an array of all Network currently tracked by the framework.","boolean getBackgroundDataSetting() This method was deprecated in API level 14. As of ICE_CREAM_SANDWICH, availability of background data depends on several combined factors, and this method will always return true. Instead, when background data is unavailable, getActiveNetworkInfo() will now appear disconnected.","LinkProperties getLinkProperties(Network network) Get the LinkProperties for the given Network.","NetworkCapabilities getNetworkCapabilities(Network network) Get the NetworkCapabilities for the given Network.","NetworkInfo getNetworkInfo(Network network) Returns connection status information about a particular Network.","NetworkInfo getNetworkInfo(int networkType) Returns connection status information about a particular network type.","int getNetworkPreference() This method was deprecated in API level 21. Functionality has been removed as it no longer makes sense, with many more than two networks - we'd need an array to express preference. Instead we use dynamic network properties of the networks to describe their precedence.","static Network getProcessDefaultNetwork() Returns the Network currently bound to this process via setProcessDefaultNetwork(Network), or null if no Network is explicitly bound.","boolean isActiveNetworkMetered() Returns if the currently active data network is metered.","boolean isDefaultNetworkActive() Return whether the data network is currently active.","static boolean isNetworkTypeValid(int networkType) Tests if a given integer represents a valid network type.","void registerNetworkCallback(NetworkRequest request, ConnectivityManager.NetworkCallback networkCallback) Registers to receive notifications about all networks which satisfy the given NetworkRequest.","void removeDefaultNetworkActiveListener(ConnectivityManager.OnNetworkActiveListener l) Remove network active listener previously registered with addDefaultNetworkActiveListener(ConnectivityManager.OnNetworkActiveListener).","void reportBadNetwork(Network network) Report a problem network to the framework.","void requestNetwork(NetworkRequest request, ConnectivityManager.NetworkCallback networkCallback) Request a network to satisfy a set of NetworkCapabilities.","boolean requestRouteToHost(int networkType, int hostAddress) This method was deprecated in API level 21. Deprecated in favor of the requestNetwork(NetworkRequest, ConnectivityManager.NetworkCallback), setProcessDefaultNetwork(Network) and getSocketFactory() api.","void setNetworkPreference(int preference) This method was deprecated in API level 21. Functionality has been removed as it no longer makes sense, with many more than two networks - we'd need an array to express preference. Instead we use dynamic network properties of the networks to describe their precedence.","static boolean setProcessDefaultNetwork(Network network) Binds the current process to network.","int startUsingNetworkFeature(int networkType, String feature) This method was deprecated in API level 21. Deprecated in favor of the cleaner requestNetwork(NetworkRequest, ConnectivityManager.NetworkCallback) api.","int stopUsingNetworkFeature(int networkType, String feature) This method was deprecated in API level 21. Deprecated in favor of the cleaner requestNetwork(NetworkRequest, ConnectivityManager.NetworkCallback) api.","void unregisterNetworkCallback(ConnectivityManager.NetworkCallback networkCallback) Unregisters callbacks about and possibly releases networks originating from requestNetwork(NetworkRequest, ConnectivityManager.NetworkCallback) and registerNetworkCallback(NetworkRequest, ConnectivityManager.NetworkCallback) calls.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.net","constants":["String ACTION_BACKGROUND_DATA_SETTING_CHANGED This constant was deprecated in API level 16. As of ICE_CREAM_SANDWICH, availability of background data depends on several combined factors, and this broadcast is no longer sent. Instead, when background data is unavailable, getActiveNetworkInfo() will now appear disconnected. During first boot after a platform upgrade, this broadcast will be sent once if getBackgroundDataSetting() was false before the upgrade.","String CONNECTIVITY_ACTION A change in network connectivity has occurred.","int DEFAULT_NETWORK_PREFERENCE This constant was deprecated in API level 18. Since we support so many more networks now, the single network default network preference can't really express the hierarchy. Instead, the default is defined by the networkAttributes in config.xml. You can determine the current value by calling getNetworkPreference() from an App.","String EXTRA_EXTRA_INFO The lookup key for a string that provides optionally supplied extra information about the network state.","String EXTRA_IS_FAILOVER The lookup key for a boolean that indicates whether a connect event is for a network to which the connectivity manager was failing over following a disconnect on another network.","String EXTRA_NETWORK_INFO This constant was deprecated in API level 14. Since NetworkInfo can vary based on UID, applications should always obtain network information through getActiveNetworkInfo() or getAllNetworkInfo().","String EXTRA_NETWORK_TYPE Network type which triggered a CONNECTIVITY_ACTION broadcast.","String EXTRA_NO_CONNECTIVITY The lookup key for a boolean that indicates whether there is a complete lack of connectivity, i.e., no network is available.","String EXTRA_OTHER_NETWORK_INFO The lookup key for a NetworkInfo object.","String EXTRA_REASON The lookup key for a string that indicates why an attempt to connect to a network failed.","int TYPE_BLUETOOTH The Bluetooth data connection.","int TYPE_DUMMY Dummy data connection.","int TYPE_ETHERNET The Ethernet data connection.","int TYPE_MOBILE The Mobile data connection.","int TYPE_MOBILE_DUN A DUN-specific Mobile data connection.","int TYPE_MOBILE_HIPRI A High Priority Mobile data connection.","int TYPE_MOBILE_MMS An MMS-specific Mobile data connection.","int TYPE_MOBILE_SUPL A SUPL-specific Mobile data connection.","int TYPE_VPN A virtual network using one or more native bearers.","int TYPE_WIFI The WIFI data connection.","int TYPE_WIMAX The WiMAX data connection."],"class":"ConnectivityManager","constructors":[],"fields":[]}