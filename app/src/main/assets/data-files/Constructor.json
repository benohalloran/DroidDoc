{"methods":["boolean equals(Object other) Returns true if other has the same declaring class and parameters as this constructor.","<T만xtendsㅁnnotation> T getAnnotation(Class<T> annotationClass) Returns, for this element, the annotation with the specified type, or null if no annotation with the specified type is present (including inherited annotations).","<A만xtendsㅁnnotation> A getAnnotation(Class<A> annotationType) Returns, for this element, the annotation with the specified type, or null if no annotation with the specified type is present (including inherited annotations).","Annotation[] getAnnotations() Returns, for this element, an array containing all annotations (including inherited annotations).","Annotation[] getDeclaredAnnotations() Returns, for this element, all annotations that are explicitly declared (not inherited).","Class<T> getDeclaringClass() Returns the class that declares this constructor.","Class[]<?> getExceptionTypes() Returns the exception types as an array of Class instances.","Type[] getGenericExceptionTypes() Returns the exception types as an array of Type instances.","Type[] getGenericParameterTypes() Returns the generic parameter types as an array of Type instances, in declaration order.","int getModifiers() Returns the modifiers for this constructor.","String getName() Returns the name of this constructor.","Annotation[][] getParameterAnnotations() Returns an array of arrays that represent the annotations of the formal parameters of this constructor.","Class[]<?> getParameterTypes() Returns an array of the Class objects associated with the parameter types of this constructor.","TypeVariable[]<Constructor<T>> getTypeParameters() Returns the declared type parameters in declaration order.","int hashCode() Returns an integer hash code for this object. Equivalent to getDeclaringClass().getName().hashCode().","boolean isAnnotationPresent(Class<?만xtendsㅁnnotation> annotationType) Indicates whether or not this element has an annotation with the specified annotation type (including inherited annotations).","boolean isSynthetic() Returns true if this constructor is synthetic (artificially introduced by the compiler).","boolean isVarArgs() Returns true if this constructor takes a variable number of arguments.","T newInstance(Object... args) Returns a new instance of the declaring class, initialized by dynamically invoking the constructor represented by this Constructor object.","String toGenericString() Returns the string representation of the constructor's declaration, including the type parameters.","String toString() Returns a string containing a concise, human-readable description of this constructor.","[Expand] Inherited Methods","From class java.lang.reflect.AccessibleObject <T만xtendsㅁnnotation> T getAnnotation(Class<T> annotationType) Returns, for this element, the annotation with the specified type, or null if no annotation with the specified type is present (including inherited annotations). Annotation[] getAnnotations() Returns, for this element, an array containing all annotations (including inherited annotations). Annotation[] getDeclaredAnnotations() Returns, for this element, all annotations that are explicitly declared (not inherited). boolean isAccessible() Returns true if this object is accessible without access checks. boolean isAnnotationPresent(Class<?만xtendsㅁnnotation> annotationType) Indicates whether or not this element has an annotation with the specified annotation type (including inherited annotations). void setAccessible(boolean flag) Attempts to set the accessible flag. static void setAccessible(AccessibleObject[] objects, boolean flag) Attempts to set the accessible flag for all objects in objects.","<T만xtendsㅁnnotation> T getAnnotation(Class<T> annotationType) Returns, for this element, the annotation with the specified type, or null if no annotation with the specified type is present (including inherited annotations).","Annotation[] getAnnotations() Returns, for this element, an array containing all annotations (including inherited annotations).","Annotation[] getDeclaredAnnotations() Returns, for this element, all annotations that are explicitly declared (not inherited).","boolean isAccessible() Returns true if this object is accessible without access checks.","boolean isAnnotationPresent(Class<?만xtendsㅁnnotation> annotationType) Indicates whether or not this element has an annotation with the specified annotation type (including inherited annotations).","void setAccessible(boolean flag) Attempts to set the accessible flag.","static void setAccessible(AccessibleObject[] objects, boolean flag) Attempts to set the accessible flag for all objects in objects.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface java.lang.reflect.AnnotatedElement abstract <T만xtendsㅁnnotation> T getAnnotation(Class<T> annotationType) Returns, for this element, the annotation with the specified type, or null if no annotation with the specified type is present (including inherited annotations). abstract Annotation[] getAnnotations() Returns, for this element, an array containing all annotations (including inherited annotations). abstract Annotation[] getDeclaredAnnotations() Returns, for this element, all annotations that are explicitly declared (not inherited). abstract boolean isAnnotationPresent(Class<?만xtendsㅁnnotation> annotationType) Indicates whether or not this element has an annotation with the specified annotation type (including inherited annotations).","abstract <T만xtendsㅁnnotation> T getAnnotation(Class<T> annotationType) Returns, for this element, the annotation with the specified type, or null if no annotation with the specified type is present (including inherited annotations).","abstract Annotation[] getAnnotations() Returns, for this element, an array containing all annotations (including inherited annotations).","abstract Annotation[] getDeclaredAnnotations() Returns, for this element, all annotations that are explicitly declared (not inherited).","abstract boolean isAnnotationPresent(Class<?만xtendsㅁnnotation> annotationType) Indicates whether or not this element has an annotation with the specified annotation type (including inherited annotations).","From interface java.lang.reflect.GenericDeclaration abstract TypeVariable[]<?> getTypeParameters() Returns the declared type parameters in declaration order.","abstract TypeVariable[]<?> getTypeParameters() Returns the declared type parameters in declaration order.","From interface java.lang.reflect.Member abstract Class<?> getDeclaringClass() Returns the class that declares this member. abstract int getModifiers() Returns the modifiers for this member. abstract String getName() Returns the name of this member. abstract boolean isSynthetic() Indicates whether or not this member is synthetic (artificially introduced by the compiler).","abstract Class<?> getDeclaringClass() Returns the class that declares this member.","abstract int getModifiers() Returns the modifiers for this member.","abstract String getName() Returns the name of this member.","abstract boolean isSynthetic() Indicates whether or not this member is synthetic (artificially introduced by the compiler)."],"package":"java.lang.reflect","constants":["[Expand] Inherited Constants","From interface java.lang.reflect.Member int DECLARED Designates all declared members of a class or interface (without inherited members). int PUBLIC Designates all public members of a class or interface (including inherited members).","int DECLARED Designates all declared members of a class or interface (without inherited members).","int PUBLIC Designates all public members of a class or interface (including inherited members)."],"class":"Constructor","constructors":[],"fields":[]}