{"methods":["final ContentProviderClient acquireContentProviderClient(Uri uri) Returns a ContentProviderClient that is associated with the ContentProvider that services the content at uri, starting the provider if necessary.","final ContentProviderClient acquireContentProviderClient(String name) Returns a ContentProviderClient that is associated with the ContentProvider with the authority of name, starting the provider if necessary.","final ContentProviderClient acquireUnstableContentProviderClient(Uri uri) Like acquireContentProviderClient(Uri), but for use when you do not trust the stability of the target content provider.","final ContentProviderClient acquireUnstableContentProviderClient(String name) Like acquireContentProviderClient(String), but for use when you do not trust the stability of the target content provider.","static void addPeriodicSync(Account account, String authority, Bundle extras, long pollFrequency) Specifies that a sync should be requested with the specified the account, authority, and extras at the given frequency.","static Object addStatusChangeListener(int mask, SyncStatusObserver callback) Request notifications when the different aspects of the SyncManager change.","ContentProviderResult[] applyBatch(String authority, ArrayList<ContentProviderOperation> operations) Applies each of the ContentProviderOperation objects and returns an array of their results.","final int bulkInsert(Uri url, ContentValues[] values) Inserts multiple rows into a table at the given URL.","final Bundle call(Uri uri, String method, String arg, Bundle extras) Call a provider-defined method.","static void cancelSync(SyncRequest request) Remove the specified sync.","static void cancelSync(Account account, String authority) Cancel any active or pending syncs that match account and authority.","void cancelSync(Uri uri) This method was deprecated in API level 5. instead use cancelSync(android.accounts.Account, String)","final Uri canonicalize(Uri url) Transform the given url to a canonical representation of its referenced resource, which can be used across devices, persisted, backed up and restored, etc.","final int delete(Uri url, String where, String[] selectionArgs) Deletes row(s) specified by a content URI.","static SyncInfo getCurrentSync() This method was deprecated in API level 11. Since multiple concurrent syncs are now supported you should use getCurrentSyncs() to get the accurate list of current syncs. This method returns the first item from the list of current syncs or null if there are none.","static List<SyncInfo> getCurrentSyncs() Returns a list with information about all the active syncs.","static int getIsSyncable(Account account, String authority) Check if this account/provider is syncable.","static boolean getMasterSyncAutomatically() Gets the master auto-sync setting that applies to all the providers and accounts.","List<UriPermission> getOutgoingPersistedUriPermissions() Return list of all persisted URI permission grants that are hosted by the calling app.","static List<PeriodicSync> getPeriodicSyncs(Account account, String authority) Get the list of information about the periodic syncs for the given account and authority.","List<UriPermission> getPersistedUriPermissions() Return list of all URI permission grants that have been persisted by the calling app.","String[] getStreamTypes(Uri url, String mimeTypeFilter) Query for the possible MIME types for the representations the given content URL can be returned when opened as as stream with openTypedAssetFileDescriptor(Uri, String, Bundle).","static SyncAdapterType[] getSyncAdapterTypes() Get information about the SyncAdapters that are known to the system.","static boolean getSyncAutomatically(Account account, String authority) Check if the provider should be synced when a network tickle is received This method requires the caller to hold the permission READ_SYNC_SETTINGS.","final String getType(Uri url) Return the MIME type of the given content URL.","final Uri insert(Uri url, ContentValues values) Inserts a row into a table at the given URL.","static boolean isSyncActive(Account account, String authority) Returns true if there is currently a sync operation for the given account or authority actively being processed.","static boolean isSyncPending(Account account, String authority) Return true if the pending status is true of any matching authorities.","void notifyChange(Uri uri, ContentObserver observer, boolean syncToNetwork) Notify registered observers that a row was updated.","void notifyChange(Uri uri, ContentObserver observer) Notify registered observers that a row was updated and attempt to sync changes to the network.","final AssetFileDescriptor openAssetFileDescriptor(Uri uri, String mode) Open a raw file descriptor to access data under a URI.","final AssetFileDescriptor openAssetFileDescriptor(Uri uri, String mode, CancellationSignal cancellationSignal) Open a raw file descriptor to access data under a URI.","final ParcelFileDescriptor openFileDescriptor(Uri uri, String mode, CancellationSignal cancellationSignal) Open a raw file descriptor to access data under a URI.","final ParcelFileDescriptor openFileDescriptor(Uri uri, String mode) Open a raw file descriptor to access data under a URI.","final InputStream openInputStream(Uri uri) Open a stream on to the content associated with a content URI.","final OutputStream openOutputStream(Uri uri) Synonym for openOutputStream(uri, \"w\").","final OutputStream openOutputStream(Uri uri, String mode) Open a stream on to the content associated with a content URI.","final AssetFileDescriptor openTypedAssetFileDescriptor(Uri uri, String mimeType, Bundle opts, CancellationSignal cancellationSignal) Open a raw file descriptor to access (potentially type transformed) data from a \"content:\" URI.","final AssetFileDescriptor openTypedAssetFileDescriptor(Uri uri, String mimeType, Bundle opts) Open a raw file descriptor to access (potentially type transformed) data from a \"content:\" URI.","final Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) Query the given URI, returning a Cursor over the result set.","final Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder, CancellationSignal cancellationSignal) Query the given URI, returning a Cursor over the result set with optional support for cancellation.","final void registerContentObserver(Uri uri, boolean notifyForDescendents, ContentObserver observer) Register an observer class that gets callbacks when data identified by a given content URI changes.","void releasePersistableUriPermission(Uri uri, int modeFlags) Relinquish a persisted URI permission grant.","static void removePeriodicSync(Account account, String authority, Bundle extras) Remove a periodic sync.","static void removeStatusChangeListener(Object handle) Remove a previously registered status change listener.","static void requestSync(Account account, String authority, Bundle extras) Start an asynchronous sync operation.","static void requestSync(SyncRequest request) Register a sync with the SyncManager.","static void setIsSyncable(Account account, String authority, int syncable) Set whether this account/provider is syncable.","static void setMasterSyncAutomatically(boolean sync) Sets the master auto-sync setting that applies to all the providers and accounts.","static void setSyncAutomatically(Account account, String authority, boolean sync) Set whether or not the provider is synced when it receives a network tickle.","void startSync(Uri uri, Bundle extras) This method was deprecated in API level 5. instead use requestSync(android.accounts.Account, String, android.os.Bundle)","void takePersistableUriPermission(Uri uri, int modeFlags) Take a persistable URI permission grant that has been offered.","final Uri uncanonicalize(Uri url) Given a canonical Uri previously generated by canonicalize(Uri), convert it to its local non-canonical form.","final void unregisterContentObserver(ContentObserver observer) Unregisters a change observer.","final int update(Uri uri, ContentValues values, String where, String[] selectionArgs) Update row(s) in a content URI.","static void validateSyncExtrasBundle(Bundle extras) Check that only values of the following types are in the Bundle: Integer Long Boolean Float Double String Account null","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.content","constants":["String ANY_CURSOR_ITEM_TYPE This is the Android platform's generic MIME type to match any MIME type of the form \"CURSOR_ITEM_BASE_TYPE/SUB_TYPE\".","String CURSOR_DIR_BASE_TYPE This is the Android platform's base MIME type for a content: URI containing a Cursor of zero or more items.","String CURSOR_ITEM_BASE_TYPE This is the Android platform's base MIME type for a content: URI containing a Cursor of a single item.","String EXTRA_SIZE An extra Point describing the optimal size for a requested image resource, in pixels.","String SCHEME_ANDROID_RESOURCE","String SCHEME_CONTENT","String SCHEME_FILE","String SYNC_EXTRAS_ACCOUNT This constant was deprecated in API level 5. instead use requestSync(android.accounts.Account, String, android.os.Bundle)","String SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS Indicates that the sync adapter should not proceed with the delete operations, if it determines that there are too many.","String SYNC_EXTRAS_DO_NOT_RETRY If this extra is set to true then the request will not be retried if it fails.","String SYNC_EXTRAS_EXPEDITED If this extra is set to true, the sync request will be scheduled at the front of the sync request queue and without any delay","String SYNC_EXTRAS_FORCE This constant was deprecated in API level 5. instead use SYNC_EXTRAS_MANUAL","String SYNC_EXTRAS_IGNORE_BACKOFF If this extra is set to true then any backoffs for the initial attempt (e.g.","String SYNC_EXTRAS_IGNORE_SETTINGS If this extra is set to true then the sync settings (like getSyncAutomatically()) are ignored by the sync scheduler.","String SYNC_EXTRAS_INITIALIZE Set by the SyncManager to request that the SyncAdapter initialize itself for the given account/authority pair.","String SYNC_EXTRAS_MANUAL Setting this extra is the equivalent of setting both SYNC_EXTRAS_IGNORE_SETTINGS and SYNC_EXTRAS_IGNORE_BACKOFF","String SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS Indicates that the sync adapter should proceed with the delete operations, even if it determines that there are too many.","String SYNC_EXTRAS_UPLOAD Indicates that this sync is intended to only upload local changes to the server.","int SYNC_OBSERVER_TYPE_ACTIVE","int SYNC_OBSERVER_TYPE_PENDING","int SYNC_OBSERVER_TYPE_SETTINGS"],"class":"ContentResolver","constructors":[],"fields":[]}