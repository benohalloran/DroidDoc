{"methods":["[Expand] Inherited Methods","From class java.lang.Throwable final void addSuppressed(Throwable throwable) Adds throwable to the list of throwables suppressed by this. Throwable fillInStackTrace() Records the stack trace from the point where this method has been called to this Throwable. Throwable getCause() Returns the cause of this Throwable, or null if there is no cause. String getLocalizedMessage() Returns the detail message which was provided when this Throwable was created. String getMessage() Returns the detail message which was provided when this Throwable was created. StackTraceElement[] getStackTrace() Returns a clone of the array of stack trace elements of this Throwable. final Throwable[] getSuppressed() Returns the throwables suppressed by this. Throwable initCause(Throwable throwable) Initializes the cause of this Throwable. void printStackTrace(PrintStream err) Writes a printable representation of this Throwable's stack trace to the given print stream. void printStackTrace(PrintWriter err) Writes a printable representation of this Throwable's stack trace to the specified print writer. void printStackTrace() Writes a printable representation of this Throwable's stack trace to the System.err stream. void setStackTrace(StackTraceElement[] trace) Sets the array of stack trace elements. String toString() Returns a string containing a concise, human-readable description of this object.","final void addSuppressed(Throwable throwable) Adds throwable to the list of throwables suppressed by this.","Throwable fillInStackTrace() Records the stack trace from the point where this method has been called to this Throwable.","Throwable getCause() Returns the cause of this Throwable, or null if there is no cause.","String getLocalizedMessage() Returns the detail message which was provided when this Throwable was created.","String getMessage() Returns the detail message which was provided when this Throwable was created.","StackTraceElement[] getStackTrace() Returns a clone of the array of stack trace elements of this Throwable.","final Throwable[] getSuppressed() Returns the throwables suppressed by this.","Throwable initCause(Throwable throwable) Initializes the cause of this Throwable.","void printStackTrace(PrintStream err) Writes a printable representation of this Throwable's stack trace to the given print stream.","void printStackTrace(PrintWriter err) Writes a printable representation of this Throwable's stack trace to the specified print writer.","void printStackTrace() Writes a printable representation of this Throwable's stack trace to the System.err stream.","void setStackTrace(StackTraceElement[] trace) Sets the array of stack trace elements.","String toString() Returns a string containing a concise, human-readable description of this object.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"org.w3c.dom","constants":["short DOMSTRING_SIZE_ERR If the specified range of text does not fit into a DOMString.","short HIERARCHY_REQUEST_ERR If any Node is inserted somewhere it doesn't belong.","short INDEX_SIZE_ERR If index or size is negative, or greater than the allowed value.","short INUSE_ATTRIBUTE_ERR If an attempt is made to add an attribute that is already in use elsewhere.","short INVALID_ACCESS_ERR If a parameter or an operation is not supported by the underlying object.","short INVALID_CHARACTER_ERR If an invalid or illegal character is specified, such as in an XML name.","short INVALID_MODIFICATION_ERR If an attempt is made to modify the type of the underlying object.","short INVALID_STATE_ERR If an attempt is made to use an object that is not, or is no longer, usable.","short NAMESPACE_ERR If an attempt is made to create or change an object in a way which is incorrect with regard to namespaces.","short NOT_FOUND_ERR If an attempt is made to reference a Node in a context where it does not exist.","short NOT_SUPPORTED_ERR If the implementation does not support the requested type of object or operation.","short NO_DATA_ALLOWED_ERR If data is specified for a Node which does not support data.","short NO_MODIFICATION_ALLOWED_ERR If an attempt is made to modify an object where modifications are not allowed.","short SYNTAX_ERR If an invalid or illegal string is specified.","short TYPE_MISMATCH_ERR If the type of an object is incompatible with the expected type of the parameter associated to the object.","short VALIDATION_ERR If a call to a method such as insertBefore or removeChild would make the Node invalid with respect to \"partial validity\", this exception would be raised and the operation would not be done.","short WRONG_DOCUMENT_ERR If a Node is used in a different document than the one that created it (that doesn't support it)."],"class":"DOMException","constructors":[],"fields":["public short code"]}