{"methods":["abstract boolean allProceduresAreCallable() Returns whether all procedures returned by getProcedures(String, String, String) can be called by the current user.","abstract boolean allTablesAreSelectable() Returns whether all the tables returned by getTables can be used by the current user in a SELECT statement.","abstract boolean autoCommitFailureClosesAllResultSets() Determine if a SQLException while autoCommit is true indicates that all open ResultSets are closed, even ones that are holdable","abstract boolean dataDefinitionCausesTransactionCommit() Returns whether a data definition statement in a transaction forces a commit of the transaction.","abstract boolean dataDefinitionIgnoredInTransactions() Returns whether the database ignores data definition statements within a transaction.","abstract boolean deletesAreDetected(int type) Returns whether a visible row delete can be detected by calling rowDeleted().","abstract boolean doesMaxRowSizeIncludeBlobs() Returns whether the return value of getMaxRowSize includes the SQL data types LONGVARCHAR and LONGVARBINARY.","abstract ResultSet getAttributes(String catalog, String schemaPattern, String typeNamePattern, String attributeNamePattern) Returns a ResultSet describing a subset of the attributes of a specified SQL User Defined Type (UDT) for a specified schema and catalog.","abstract ResultSet getBestRowIdentifier(String catalog, String schema, String table, int scope, boolean nullable) Returns a list of a table's optimal set of columns that uniquely identify the rows.","abstract String getCatalogSeparator() Returns the separator that this database uses between a catalog name and table name.","abstract String getCatalogTerm() Returns the term that the database vendor prefers term for \"catalog\".","abstract ResultSet getCatalogs() Returns the set of catalog names available in this database.","abstract ResultSet getClientInfoProperties() Returns a list of the client info properties of the driver.","abstract ResultSet getColumnPrivileges(String catalog, String schema, String table, String columnNamePattern) Returns a description of access rights for a table's columns.","abstract ResultSet getColumns(String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern) Returns a description of table columns available in a specified catalog.","abstract Connection getConnection() Returns the database connection that created this metadata.","abstract ResultSet getCrossReference(String primaryCatalog, String primarySchema, String primaryTable, String foreignCatalog, String foreignSchema, String foreignTable) Returns a list of foreign key columns in a given foreign key table that reference the primary key columns of a supplied primary key table.","abstract int getDatabaseMajorVersion() Returns the major version number of the database software.","abstract int getDatabaseMinorVersion() Returns the minor version number of the database software.","abstract String getDatabaseProductName() Returns the name of the database software.","abstract String getDatabaseProductVersion() Returns the version number of this database software.","abstract int getDefaultTransactionIsolation() Returns the default transaction isolation level for this database.","abstract int getDriverMajorVersion() Returns the JDBC driver's major version number.","abstract int getDriverMinorVersion() Returns the JDBC driver's minor version number.","abstract String getDriverName() Returns the name of this JDBC driver.","abstract String getDriverVersion() Returns the version number of this JDBC driver.","abstract ResultSet getExportedKeys(String catalog, String schema, String table) Returns a list of the foreign key columns that reference the primary key columns of a specified table (the foreign keys exported by a table).","abstract String getExtraNameCharacters() Returns a string of characters that may be used in unquoted identifier names.","abstract ResultSet getFunctionColumns(String catalog, String schemaPattern, String functionNamePattern, String columnNamePattern) Returns a description according to the given catalog's system or user function parameters and return type.","abstract ResultSet getFunctions(String catalog, String schemaPattern, String functionNamePattern) Returns a description of the system and user functions available according to the given catalog.","abstract String getIdentifierQuoteString() Returns the string used to quote SQL identifiers.","abstract ResultSet getImportedKeys(String catalog, String schema, String table) Returns a list columns in a table that are both primary keys and referenced by the table's foreign key columns (that is, the primary keys imported by a table).","abstract ResultSet getIndexInfo(String catalog, String schema, String table, boolean unique, boolean approximate) Returns a list of indices and statistics for a specified table.","abstract int getJDBCMajorVersion() Returns this driver's major JDBC version number.","abstract int getJDBCMinorVersion() Returns the minor JDBC version number for this driver.","abstract int getMaxBinaryLiteralLength() Get the maximum number of hex characters in an in-line binary literal for this database.","abstract int getMaxCatalogNameLength() Returns the maximum size of a catalog name in this database.","abstract int getMaxCharLiteralLength() Returns the maximum size for a character literal in this database.","abstract int getMaxColumnNameLength() Returns the maximum size for a Column name for this database.","abstract int getMaxColumnsInGroupBy() Get the maximum number of columns in a GROUP BY clause for this database.","abstract int getMaxColumnsInIndex() Returns the maximum number of columns in an Index for this database.","abstract int getMaxColumnsInOrderBy() Returns the maximum number of columns in an ORDER BY clause for this database.","abstract int getMaxColumnsInSelect() Returns the maximum number of columns in a SELECT list for this database.","abstract int getMaxColumnsInTable() Returns the maximum number of columns in a table for this database.","abstract int getMaxConnections() Returns the database's maximum number of concurrent connections.","abstract int getMaxCursorNameLength() Returns the maximum length of a cursor name for this database.","abstract int getMaxIndexLength() Returns the maximum length in bytes for an Index for this database.","abstract int getMaxProcedureNameLength() Returns the maximum number of characters for a procedure name in this database.","abstract int getMaxRowSize() Returns the maximum number of bytes within a single row for this database.","abstract int getMaxSchemaNameLength() Returns the maximum number of characters in a schema name for this database.","abstract int getMaxStatementLength() Returns the maximum number of characters in an SQL statement for this database.","abstract int getMaxStatements() Get the maximum number of simultaneously open active statements for this database.","abstract int getMaxTableNameLength() Returns the maximum size for a table name in the database.","abstract int getMaxTablesInSelect() Returns the maximum number of tables permitted in a SELECT statement for the database.","abstract int getMaxUserNameLength() Returns the maximum number of characters in a user name for the database.","abstract String getNumericFunctions() Returns a list of the math functions available with this database.","abstract ResultSet getPrimaryKeys(String catalog, String schema, String table) Returns a list of the primary key columns of a specified table.","abstract ResultSet getProcedureColumns(String catalog, String schemaPattern, String procedureNamePattern, String columnNamePattern) Returns a list of parameter and result columns for the stored procedures belonging to a specified catalog.","abstract String getProcedureTerm() Returns the database vendor's preferred name for \"procedure\".","abstract ResultSet getProcedures(String catalog, String schemaPattern, String procedureNamePattern) Returns a list of the stored procedures available in a specified catalog.","abstract int getResultSetHoldability() Returns the result set's default holdability.","abstract RowIdLifetime getRowIdLifetime() Returns the lifetime for which a RowId object remains valid if this data source supports the SQL ROWID type","abstract String getSQLKeywords() Returns a list of all the SQL keywords that are NOT also SQL92 keywords for the database.","abstract int getSQLStateType() States the type of SQLState value returned by SQLException.getSQLState.","abstract String getSchemaTerm() Returns the database vendor's preferred term for \"schema\".","abstract ResultSet getSchemas(String catalog, String schemaPattern) Returns the schema names ordered by TABLE_CATALOG and TABLE_SCHEMA.","abstract ResultSet getSchemas() Returns a list of the schema names in the database.","abstract String getSearchStringEscape() Returns the string that is used to escape wildcard characters.","abstract String getStringFunctions() Returns a list of string functions available with the database.","abstract ResultSet getSuperTables(String catalog, String schemaPattern, String tableNamePattern) Returns a listing of the hierarchies of tables in a specified schema in the database.","abstract ResultSet getSuperTypes(String catalog, String schemaPattern, String typeNamePattern) Returns the User Defined Type (UDT) hierarchies for a given schema.","abstract String getSystemFunctions() Returns a list of system functions available with the database.","abstract ResultSet getTablePrivileges(String catalog, String schemaPattern, String tableNamePattern) Returns a description of access rights for each table present in a catalog.","abstract ResultSet getTableTypes() Returns a list of table types supported by the database.","abstract ResultSet getTables(String catalog, String schemaPattern, String tableNamePattern, String[] types) Returns a description of the tables in a specified catalog.","abstract String getTimeDateFunctions() Returns a list of time and date functions available for the database.","abstract ResultSet getTypeInfo() Get a list of the standard SQL types supported by this database.","abstract ResultSet getUDTs(String catalog, String schemaPattern, String typeNamePattern, int[] types) Returns a description of the User Defined Types (UDTs) defined in a given schema, which includes the types DISTINCT, STRUCT and JAVA_OBJECT.","abstract String getURL() Returns the URL for this database.","abstract String getUserName() Determine the user name as known by the database.","abstract ResultSet getVersionColumns(String catalog, String schema, String table) Returns which of a table's columns are automatically updated when any value in a row is updated.","abstract boolean insertsAreDetected(int type) Determines whether a visible row insert can be detected by calling ResultSet.rowInserted.","abstract boolean isCatalogAtStart() Determine whether a fully qualified table name is prefixed or suffixed to a fully qualified table name.","abstract boolean isReadOnly() Determines whether the database is in read-only mode.","abstract boolean locatorsUpdateCopy() Determines whether updates are made to a copy of, or directly on, Large Objects (LOBs).","abstract boolean nullPlusNonNullIsNull() Determines whether the database handles concatenations between NULL and non-NULL values by producing a NULL output.","abstract boolean nullsAreSortedAtEnd() Determines whether NULL values are always sorted to the end of sorted results regardless of requested sort order.","abstract boolean nullsAreSortedAtStart() Determines whether NULL values are always sorted at the start of the sorted list, irrespective of the sort order.","abstract boolean nullsAreSortedHigh() Determines whether NULL values are sorted high - i.e.","abstract boolean nullsAreSortedLow() Determines whether NULL values are sorted low - i.e.","abstract boolean othersDeletesAreVisible(int type) Determines whether deletes made by others are visible, for a specified ResultSet type.","abstract boolean othersInsertsAreVisible(int type) Determines whether inserts made by others are visible, for a specified ResultSet type.","abstract boolean othersUpdatesAreVisible(int type) Determines whether updates made by others are visible, for a specified ResultSet type.","abstract boolean ownDeletesAreVisible(int type) Determines whether a ResultSet can see its own deletes, for a specified ResultSet type.","abstract boolean ownInsertsAreVisible(int type) Determines whether a ResultSet can see its own inserts, for a specified ResultSet type.","abstract boolean ownUpdatesAreVisible(int type) Determines whether a ResultSet can see its own updates, for a specified ResultSet type.","abstract boolean storesLowerCaseIdentifiers() Determines whether the database treats SQL identifiers that are in mixed case (and unquoted) as case insensitive.","abstract boolean storesLowerCaseQuotedIdentifiers() Determines whether the database considers mixed case quoted SQL identifiers as case insensitive and stores them in lower case.","abstract boolean storesMixedCaseIdentifiers() Determines whether the database considers mixed case unquoted SQL identifiers as case insensitive and stores them in mixed case.","abstract boolean storesMixedCaseQuotedIdentifiers() Determines whether the database considers identifiers as case insensitive if they are mixed case quoted SQL.","abstract boolean storesUpperCaseIdentifiers() Determines whether the database considers mixed case unquoted SQL identifiers as case insensitive and stores them in upper case.","abstract boolean storesUpperCaseQuotedIdentifiers() Determines whether the database considers mixed case quoted SQL identifiers as case insensitive and stores them in upper case.","abstract boolean supportsANSI92EntryLevelSQL() Determines whether the database supports the ANSI92 entry level SQL grammar.","abstract boolean supportsANSI92FullSQL() Determines whether the database supports the ANSI92 full SQL grammar.","abstract boolean supportsANSI92IntermediateSQL() Determines whether the database supports the ANSI92 intermediate SQL Grammar.","abstract boolean supportsAlterTableWithAddColumn() Determines whether the database supports ALTER TABLE operation with ADD COLUMN.","abstract boolean supportsAlterTableWithDropColumn() Determines whether the database supports ALTER TABLE operation with DROP COLUMN.","abstract boolean supportsBatchUpdates() Determines whether the database supports batch updates.","abstract boolean supportsCatalogsInDataManipulation() Determines whether catalog names may be used in data manipulation statements.","abstract boolean supportsCatalogsInIndexDefinitions() Determines whether catalog names can be used in index definition statements.","abstract boolean supportsCatalogsInPrivilegeDefinitions() Determines whether catalog names can be used in privilege definition statements.","abstract boolean supportsCatalogsInProcedureCalls() Determines whether catalog names can be used in procedure call statements.","abstract boolean supportsCatalogsInTableDefinitions() Determines whether catalog names may be used in table definition statements.","abstract boolean supportsColumnAliasing() Determines whether the database supports column aliasing.","abstract boolean supportsConvert(int fromType, int toType) Determines whether the database supports CONVERT operation for two supplied SQL types.","abstract boolean supportsConvert() Determines whether the database supports the CONVERT operation between SQL types.","abstract boolean supportsCoreSQLGrammar() Determines whether the database supports the Core SQL Grammar for ODBC.","abstract boolean supportsCorrelatedSubqueries() Determines whether the database supports correlated sub-queries.","abstract boolean supportsDataDefinitionAndDataManipulationTransactions() Determines whether the database allows both data definition and data manipulation statements inside a transaction.","abstract boolean supportsDataManipulationTransactionsOnly() Determines whether the database only allows data manipulation statements inside a transaction.","abstract boolean supportsDifferentTableCorrelationNames() Determines whether table correlation names are required to be different from the names of the tables, when they are supported.","abstract boolean supportsExpressionsInOrderBy() Determines whether expressions in ORDER BY lists are supported.","abstract boolean supportsExtendedSQLGrammar() Determines whether the Extended SQL Grammar for ODBC is supported.","abstract boolean supportsFullOuterJoins() Determines whether the database supports full nested outer joins.","abstract boolean supportsGetGeneratedKeys() Determines whether auto generated keys can be returned when a statement executes.","abstract boolean supportsGroupBy() Determines whether the database supports GROUP BY clauses.","abstract boolean supportsGroupByBeyondSelect() Determines whether the database supports using a column name in a GROUP BY clause not included in the SELECT statement as long as all of the columns in the SELECT statement are used in the GROUP BY clause.","abstract boolean supportsGroupByUnrelated() Determines whether the database supports using a column name in a GROUP BY clause that is not in the SELECT statement.","abstract boolean supportsIntegrityEnhancementFacility() Determines whether the database supports SQL Integrity Enhancement Facility.","abstract boolean supportsLikeEscapeClause() Determines whether the database supports a LIKE escape clause.","abstract boolean supportsLimitedOuterJoins() Determines whether the database provides limited support for outer join operations.","abstract boolean supportsMinimumSQLGrammar() Determines whether the database supports Minimum SQL Grammar for ODBC.","abstract boolean supportsMixedCaseIdentifiers() Determines whether the database treats mixed case unquoted SQL identifiers as case sensitive storing them in mixed case.","abstract boolean supportsMixedCaseQuotedIdentifiers() Determines whether the database considers mixed case quoted SQL identifiers as case sensitive, storing them in mixed case.","abstract boolean supportsMultipleOpenResults() Determines whether it is possible for a single CallableStatement to return multiple ResultSets simultaneously.","abstract boolean supportsMultipleResultSets() Determines whether retrieving multiple ResultSets from a single call to the execute method is supported.","abstract boolean supportsMultipleTransactions() Determines whether multiple simultaneous transactions on different connections are supported.","abstract boolean supportsNamedParameters() Determines whether callable statements with named parameters is supported.","abstract boolean supportsNonNullableColumns() Determines whether columns in the database can be defined as non-nullable.","abstract boolean supportsOpenCursorsAcrossCommit() Determines whether keeping cursors open across commit operations is supported.","abstract boolean supportsOpenCursorsAcrossRollback() Determines whether the database can keep cursors open across rollback operations.","abstract boolean supportsOpenStatementsAcrossCommit() Determines whether keeping statements open across commit operations is supported.","abstract boolean supportsOpenStatementsAcrossRollback() Determines whether keeping statements open across rollback operations is supported.","abstract boolean supportsOrderByUnrelated() Determines whether using a column in an ORDER BY clause that is not in the SELECT statement is supported.","abstract boolean supportsOuterJoins() Determines whether outer join operations are supported.","abstract boolean supportsPositionedDelete() Determines whether positioned DELETE statements are supported.","abstract boolean supportsPositionedUpdate() Determines whether positioned UPDATE statements are supported.","abstract boolean supportsResultSetConcurrency(int type, int concurrency) Determines whether there is support for a given concurrency style for the given ResultSet.","abstract boolean supportsResultSetHoldability(int holdability) Determines whether the supplied ResultSet holdability mode is supported.","abstract boolean supportsResultSetType(int type) Determines whether the supplied ResultSet type is supported.","abstract boolean supportsSavepoints() Determines whether savepoints for transactions are supported.","abstract boolean supportsSchemasInDataManipulation() Determines whether a schema name may be used in a data manipulation statement.","abstract boolean supportsSchemasInIndexDefinitions() Determines whether a schema name may be used in an index definition statement.","abstract boolean supportsSchemasInPrivilegeDefinitions() Determines whether a database schema name can be used in a privilege definition statement.","abstract boolean supportsSchemasInProcedureCalls() Determines whether a procedure call statement may be contain in a schema name.","abstract boolean supportsSchemasInTableDefinitions() Determines whether a schema name can be used in a table definition statement.","abstract boolean supportsSelectForUpdate() Determines whether the SELECT FOR UPDATE statement is supported.","abstract boolean supportsStatementPooling() Determines whether statement pooling is supported.","abstract boolean supportsStoredFunctionsUsingCallSyntax() Determine if this database supports invoking user-defined or vendor functions using the stored procedure escape syntax.","abstract boolean supportsStoredProcedures() Determines whether stored procedure calls using the stored procedure escape syntax is supported.","abstract boolean supportsSubqueriesInComparisons() Determines whether subqueries in comparison expressions are supported.","abstract boolean supportsSubqueriesInExists() Determines whether subqueries in EXISTS expressions are supported.","abstract boolean supportsSubqueriesInIns() Determines whether subqueries in IN statements are supported.","abstract boolean supportsSubqueriesInQuantifieds() Determines whether subqueries in quantified expressions are supported.","abstract boolean supportsTableCorrelationNames() Determines whether the database has table correlation names support.","abstract boolean supportsTransactionIsolationLevel(int level) Determines whether a specified transaction isolation level is supported.","abstract boolean supportsTransactions() Determines whether transactions are supported.","abstract boolean supportsUnion() Determines whether the SQL UNION operation is supported.","abstract boolean supportsUnionAll() Determines whether the SQL UNION ALL operation is supported.","abstract boolean updatesAreDetected(int type) Determines whether the method ResultSet.rowUpdated can detect a visible row update for the specified ResultSet type.","abstract boolean usesLocalFilePerTable() Determines whether this database uses a file for each table.","abstract boolean usesLocalFiles() Determines whether this database uses a local file to store tables.","[Expand] Inherited Methods","From interface java.sql.Wrapper abstract boolean isWrapperFor(Class<?> iface) If the caller is a wrapper of the class or implements the given interface, the methods return false and vice versa. abstract <T> T unwrap(Class<T> iface) Returns an object that implements the given interface.","abstract boolean isWrapperFor(Class<?> iface) If the caller is a wrapper of the class or implements the given interface, the methods return false and vice versa.","abstract <T> T unwrap(Class<T> iface) Returns an object that implements the given interface."],"package":"java.sql","constants":["short attributeNoNulls States that it may not be permitted to store NULL values.","short attributeNullable States that NULL values are definitely permitted.","short attributeNullableUnknown States that whether NULL values are permitted is unknown.","int bestRowNotPseudo States the best row identifier is NOT a pseudo column.","int bestRowPseudo States that the best row identifier is a pseudo column.","int bestRowSession States that the remainder of the current session is used as the scope for the best row identifier.","int bestRowTemporary States that best row identifier scope lasts only while the row is being used.","int bestRowTransaction States that the remainder of the current transaction is used as the scope for the best row identifier.","int bestRowUnknown States that the best row identifier may or may not be a pseudo column.","int columnNoNulls States that the column must not allow NULL values.","int columnNullable States that the column definitely allows NULL values.","int columnNullableUnknown States that it is unknown whether the columns may be nulled.","int functionColumnIn States that the parameter or column is an IN parameter","int functionColumnInOut States that the parameter or column is an INOUT parameter","int functionColumnOut States that the parameter or column is an OUT parameter","int functionColumnResult States that the parameter or column is a column in a result set","int functionColumnUnknown States that the parameter of function is unknown","int functionNoNulls States that NULL values are not allowed","int functionNoTable States that the function does not return a table","int functionNullable States that NULL values are allowed","int functionNullableUnknown States that whether NULL values are allowed is unknown","int functionResultUnknown States that it is not known whether the function returns a result or a table","int functionReturn States that the parameter or column is a return value","int functionReturnsTable States that the function returns a table.","int importedKeyCascade For the column UPDATE_RULE, states that when the primary key is updated, the foreign key (imported key) is changed accordingly.","int importedKeyInitiallyDeferred States that the evaluation of foreign key constraints is deferred (delayed until commit).","int importedKeyInitiallyImmediate States that the evaluation of foreign key constraint is IMMEDIATE .","int importedKeyNoAction For the columns UPDATE_RULE and DELETE_RULE, states that if the primary key has been imported, it cannot be updated or deleted.","int importedKeyNotDeferrable States that the evaluation of foreign key constraint must not be DEFERRED.","int importedKeyRestrict States that a primary key must not be updated when imported as a foreign key by some other table.","int importedKeySetDefault States that when the primary key is modified (updated or deleted) the foreign (imported) key is changed to its default value.","int importedKeySetNull States that when the primary key is modified (updated or deleted) the foreign (imported) key is changed to NULL.","int procedureColumnIn States that the column stores IN type parameters.","int procedureColumnInOut States that this column stores INOUT type parameters.","int procedureColumnOut States that this column stores OUT type parameters.","int procedureColumnResult States that the column stores results.","int procedureColumnReturn States that the column stores return values.","int procedureColumnUnknown States that type of the column is unknown.","int procedureNoNulls States that NULL values are not permitted.","int procedureNoResult States that the procedure does not return a result.","int procedureNullable States that NULL values are permitted.","int procedureNullableUnknown States that it is unknown whether NULL values are permitted.","int procedureResultUnknown States that it is unknown whether or not the procedure returns a result.","int procedureReturnsResult States that the procedure returns a result.","int sqlStateSQL States that the method DatabaseMetaData.getSQLStateType may returns an SQLSTATE value or not.","int sqlStateSQL99 States that the value is an SQL99 SQLSTATE value.","int sqlStateXOpen States that the value is an SQL CLI SQLSTATE value as defined by the X/Open standard.","short tableIndexClustered States that this table index is a clustered index.","short tableIndexHashed States that this table index is a hashed index.","short tableIndexOther States this table's index is neither a clustered index, not a hashed index, and not a table statistics index; i.e.","short tableIndexStatistic States this column has the table's statistics, and that it is returned in conjunction with the table's index description.","int typeNoNulls States that a NULL value is NOT permitted for this data type.","int typeNullable States that a NULL value is permitted for this data type.","int typeNullableUnknown States that it is unknown if a NULL value is permitted for this data type.","int typePredBasic States that this column shall not be used for WHERE statements with a LIKE clause.","int typePredChar States that this column can only be used in a WHERE...LIKE statement.","int typePredNone States that this column does not support searches.","int typeSearchable States that the column is searchable.","int versionColumnNotPseudo States that the version column is known to be not a pseudo column.","int versionColumnPseudo States that this version column is known to be a pseudo column.","int versionColumnUnknown States that the version column may be a pseudo column or not."],"class":"DatabaseMetaData","constructors":[],"fields":[]}