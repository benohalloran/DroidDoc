{"methods":["static void appendEscapedSQLString(StringBuilder sb, String sqlString) Appends an SQL string to the given StringBuilder, including the opening and closing single quotes.","static String[] appendSelectionArgs(String[] originalValues, String[] newValues) Appends one set of selection args to another.","final static void appendValueToSql(StringBuilder sql, Object value) Appends an Object to an SQL string with the proper escaping, etc.","static void bindObjectToProgram(SQLiteProgram prog, int index, Object value) Binds the given Object to the given SQLiteProgram using the proper typing.","static ParcelFileDescriptor blobFileDescriptorForQuery(SQLiteStatement prog, String[] selectionArgs) Utility method to run the pre-compiled query and return the blob value in the first column of the first row.","static ParcelFileDescriptor blobFileDescriptorForQuery(SQLiteDatabase db, String query, String[] selectionArgs) Utility method to run the query on the db and return the blob value in the first column of the first row.","static String concatenateWhere(String a, String b) Concatenates two SQL WHERE clauses, handling empty or null values.","static void createDbFromSqlStatements(Context context, String dbName, int dbVersion, String sqlStatements) Creates a db and populates it with the sql statements in sqlStatements.","static void cursorDoubleToContentValues(Cursor cursor, String field, ContentValues values, String key) Reads a Double out of a field in a Cursor and writes it to a Map.","static void cursorDoubleToContentValuesIfPresent(Cursor cursor, ContentValues values, String column) Reads a Double out of a column in a Cursor and writes it to a ContentValues.","static void cursorDoubleToCursorValues(Cursor cursor, String field, ContentValues values) Reads a Double out of a field in a Cursor and writes it to a Map.","static void cursorFloatToContentValuesIfPresent(Cursor cursor, ContentValues values, String column) Reads a Float out of a column in a Cursor and writes it to a ContentValues.","static void cursorIntToContentValues(Cursor cursor, String field, ContentValues values, String key) Reads a Integer out of a field in a Cursor and writes it to a Map.","static void cursorIntToContentValues(Cursor cursor, String field, ContentValues values) Reads an Integer out of a field in a Cursor and writes it to a Map.","static void cursorIntToContentValuesIfPresent(Cursor cursor, ContentValues values, String column) Reads a Integer out of a column in a Cursor and writes it to a ContentValues.","static void cursorLongToContentValues(Cursor cursor, String field, ContentValues values, String key) Reads a Long out of a field in a Cursor and writes it to a Map.","static void cursorLongToContentValues(Cursor cursor, String field, ContentValues values) Reads a Long out of a field in a Cursor and writes it to a Map.","static void cursorLongToContentValuesIfPresent(Cursor cursor, ContentValues values, String column) Reads a Long out of a column in a Cursor and writes it to a ContentValues.","static void cursorRowToContentValues(Cursor cursor, ContentValues values) Read the entire contents of a cursor row and store them in a ContentValues.","static void cursorShortToContentValuesIfPresent(Cursor cursor, ContentValues values, String column) Reads a Short out of a column in a Cursor and writes it to a ContentValues.","static void cursorStringToContentValues(Cursor cursor, String field, ContentValues values, String key) Reads a String out of a field in a Cursor and writes it to a Map.","static void cursorStringToContentValues(Cursor cursor, String field, ContentValues values) Reads a String out of a field in a Cursor and writes it to a Map.","static void cursorStringToContentValuesIfPresent(Cursor cursor, ContentValues values, String column) Reads a String out of a column in a Cursor and writes it to a ContentValues.","static void cursorStringToInsertHelper(Cursor cursor, String field, DatabaseUtils.InsertHelper inserter, int index) Reads a String out of a field in a Cursor and writes it to an InsertHelper.","static void dumpCurrentRow(Cursor cursor, PrintStream stream) Prints the contents of a Cursor's current row to a PrintSteam.","static void dumpCurrentRow(Cursor cursor, StringBuilder sb) Prints the contents of a Cursor's current row to a StringBuilder.","static void dumpCurrentRow(Cursor cursor) Prints the contents of a Cursor's current row to System.out.","static String dumpCurrentRowToString(Cursor cursor) Dump the contents of a Cursor's current row to a String.","static void dumpCursor(Cursor cursor, PrintStream stream) Prints the contents of a Cursor to a PrintSteam.","static void dumpCursor(Cursor cursor, StringBuilder sb) Prints the contents of a Cursor to a StringBuilder.","static void dumpCursor(Cursor cursor) Prints the contents of a Cursor to System.out.","static String dumpCursorToString(Cursor cursor) Prints the contents of a Cursor to a String.","static String getCollationKey(String name) return the collation key","static String getHexCollationKey(String name) return the collation key in hex format","static int getSqlStatementType(String sql) Returns one of the following which represent the type of the given SQL statement.","static long longForQuery(SQLiteDatabase db, String query, String[] selectionArgs) Utility method to run the query on the db and return the value in the first column of the first row.","static long longForQuery(SQLiteStatement prog, String[] selectionArgs) Utility method to run the pre-compiled query and return the value in the first column of the first row.","static long queryNumEntries(SQLiteDatabase db, String table) Query the table for the number of rows in the table.","static long queryNumEntries(SQLiteDatabase db, String table, String selection) Query the table for the number of rows in the table.","static long queryNumEntries(SQLiteDatabase db, String table, String selection, String[] selectionArgs) Query the table for the number of rows in the table.","final static void readExceptionFromParcel(Parcel reply) Special function for reading an exception result from the header of a parcel, to be used after receiving the result of a transaction.","static void readExceptionWithFileNotFoundExceptionFromParcel(Parcel reply)","static void readExceptionWithOperationApplicationExceptionFromParcel(Parcel reply)","static String sqlEscapeString(String value) SQL-escape a string.","static String stringForQuery(SQLiteDatabase db, String query, String[] selectionArgs) Utility method to run the query on the db and return the value in the first column of the first row.","static String stringForQuery(SQLiteStatement prog, String[] selectionArgs) Utility method to run the pre-compiled query and return the value in the first column of the first row.","final static void writeExceptionToParcel(Parcel reply, Exception e) Special function for writing an exception result at the header of a parcel, to be used when returning an exception from a transaction.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.database","constants":["int STATEMENT_ABORT One of the values returned by getSqlStatementType(String).","int STATEMENT_ATTACH One of the values returned by getSqlStatementType(String).","int STATEMENT_BEGIN One of the values returned by getSqlStatementType(String).","int STATEMENT_COMMIT One of the values returned by getSqlStatementType(String).","int STATEMENT_DDL One of the values returned by getSqlStatementType(String).","int STATEMENT_OTHER One of the values returned by getSqlStatementType(String).","int STATEMENT_PRAGMA One of the values returned by getSqlStatementType(String).","int STATEMENT_SELECT One of the values returned by getSqlStatementType(String).","int STATEMENT_UNPREPARED One of the values returned by getSqlStatementType(String).","int STATEMENT_UPDATE One of the values returned by getSqlStatementType(String)."],"class":"DatabaseUtils","constructors":[],"fields":[]}