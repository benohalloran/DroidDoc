{"methods":["void bind(SocketAddress localAddr) Binds this socket to the local address and port specified by localAddr.","void close() Closes this UDP datagram socket and all possibly associated channels.","void connect(SocketAddress peer) Connects this datagram socket to the address and port specified by peer.","void connect(InetAddress address, int port) Connects this datagram socket to the specific address and port.","void disconnect() Disconnects this UDP datagram socket from the remote host.","boolean getBroadcast() Gets the state of the socket option SocketOptions.SO_BROADCAST.","DatagramChannel getChannel() Returns this socket's DatagramChannel, if one exists.","InetAddress getInetAddress() Gets the InetAddress instance representing the remote address to which this UDP datagram socket is connected.","InetAddress getLocalAddress() Returns the local address to which this socket is bound, a wildcard address if this socket is not yet bound, or null if this socket is closed.","int getLocalPort() Gets the local port which this socket is bound to.","SocketAddress getLocalSocketAddress() Returns the SocketAddress this socket is bound to, or null for an unbound or closed socket.","int getPort() Gets the remote port which this socket is connected to.","synchronized int getReceiveBufferSize() Returns this socket's receive buffer size.","SocketAddress getRemoteSocketAddress() Returns the SocketAddress this socket is connected to, or null for an unconnected socket.","boolean getReuseAddress() Gets the state of the socket option SocketOptions.SO_REUSEADDR.","synchronized int getSendBufferSize() Returns this socket's send buffer size.","synchronized int getSoTimeout() Gets the socket receive timeout.","int getTrafficClass() Returns this socket's setting.","boolean isBound() Returns true if this socket is bound to a local address.","boolean isClosed() Gets the state of this socket.","boolean isConnected() Returns true if this datagram socket is connected to a remote address.","synchronized void receive(DatagramPacket pack) Receives a packet from this socket and stores it in the argument pack.","void send(DatagramPacket pack) Sends a packet over this socket.","void setBroadcast(boolean broadcast) Sets the socket option SocketOptions.SO_BROADCAST.","synchronized static void setDatagramSocketImplFactory(DatagramSocketImplFactory fac) Sets the socket implementation factory.","synchronized void setReceiveBufferSize(int size) Sets this socket's receive buffer size.","void setReuseAddress(boolean reuse) Sets the socket option SocketOptions.SO_REUSEADDR.","synchronized void setSendBufferSize(int size) Sets this socket's send buffer size.","synchronized void setSoTimeout(int timeout) Sets the read timeout in milliseconds for this socket.","void setTrafficClass(int value) Sets the value for every packet sent by this socket.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface java.io.Closeable abstract void close() Closes the object and release any system resources it holds.","abstract void close() Closes the object and release any system resources it holds.","From interface java.lang.AutoCloseable abstract void close() Closes the object and release any system resources it holds.","abstract void close() Closes the object and release any system resources it holds."],"package":"java.net","constants":[],"class":"DatagramSocket","constructors":[],"fields":[]}