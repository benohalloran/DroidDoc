{"methods":["abstract void bind(int port, InetAddress addr) Binds the datagram socket to the given localhost/port.","abstract void close() Closes this socket.","void connect(InetAddress inetAddr, int port) Connects this socket to the specified remote address and port.","abstract void create() This method allocates the socket descriptor in the underlying operating system.","void disconnect() Disconnects this socket from the remote host.","FileDescriptor getFileDescriptor() Gets the FileDescriptor of this datagram socket, which is invalid if the socket is closed or not bound.","int getLocalPort() Returns the local port to which this socket is bound.","abstract byte getTTL() This method was deprecated in API level 1. Use getTimeToLive() instead.","abstract int getTimeToLive() Gets the time-to-live (TTL) for multicast packets sent on this socket.","abstract void join(InetAddress addr) Adds this socket to the multicast group addr.","abstract void joinGroup(SocketAddress addr, NetworkInterface netInterface) Adds this socket to the multicast group addr.","abstract void leave(InetAddress addr) Removes this socket from the multicast group addr.","abstract void leaveGroup(SocketAddress addr, NetworkInterface netInterface) Removes this socket from the multicast group addr.","abstract int peek(InetAddress sender) Peeks at the incoming packet to this socket and returns the address of the sender.","abstract int peekData(DatagramPacket pack) Receives data into the supplied datagram packet by peeking.","abstract void receive(DatagramPacket pack) Receives data and stores it in the supplied datagram packet pack.","abstract void send(DatagramPacket pack) Sends the given datagram packet pack.","abstract void setTTL(byte ttl) This method was deprecated in API level 1. Use setTimeToLive(int) instead.","abstract void setTimeToLive(int ttl) Sets the time-to-live (TTL) option for multicast packets sent on this socket.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface java.net.SocketOptions abstract Object getOption(int optID) Gets the value for the specified socket option. abstract void setOption(int optID, Object val) Sets the value of the specified socket option.","abstract Object getOption(int optID) Gets the value for the specified socket option.","abstract void setOption(int optID, Object val) Sets the value of the specified socket option."],"package":"java.net","constants":["[Expand] Inherited Constants","From interface java.net.SocketOptions int IP_MULTICAST_IF This is an IPv4-only socket option whose functionality is subsumed by IP_MULTICAST_IF2 and not implemented on Android. int IP_MULTICAST_IF2 This integer option sets the outgoing interface for multicast packets using an interface index. int IP_MULTICAST_LOOP This boolean option specifies whether the local loopback of multicast packets is enabled or disabled. int IP_TOS This integer option specifies the value for the type-of-service field of the IPv4 header, or the traffic class field of the IPv6 header. int SO_BINDADDR This option does not correspond to any Unix socket option and is not implemented on Android. int SO_BROADCAST This boolean option can be used to enable or disable broadcasting on datagram sockets. int SO_KEEPALIVE This boolean option specifies whether the kernel sends keepalive messages on connection-oriented sockets. int SO_LINGER Number of seconds to wait when closing a socket if there is still some buffered data to be sent. int SO_OOBINLINE This boolean option specifies whether sending TCP urgent data is supported on this socket or not. int SO_RCVBUF The size in bytes of a socket's receive buffer. int SO_REUSEADDR This boolean option specifies whether a reuse of a local address is allowed when another socket has not yet been removed by the operating system. int SO_SNDBUF The size in bytes of a socket's send buffer. int SO_TIMEOUT Integer timeout in milliseconds for blocking accept or read/receive operations (but not write/send operations). int TCP_NODELAY This boolean option specifies whether data is sent immediately on this socket or buffered.","int IP_MULTICAST_IF This is an IPv4-only socket option whose functionality is subsumed by IP_MULTICAST_IF2 and not implemented on Android.","int IP_MULTICAST_IF2 This integer option sets the outgoing interface for multicast packets using an interface index.","int IP_MULTICAST_LOOP This boolean option specifies whether the local loopback of multicast packets is enabled or disabled.","int IP_TOS This integer option specifies the value for the type-of-service field of the IPv4 header, or the traffic class field of the IPv6 header.","int SO_BINDADDR This option does not correspond to any Unix socket option and is not implemented on Android.","int SO_BROADCAST This boolean option can be used to enable or disable broadcasting on datagram sockets.","int SO_KEEPALIVE This boolean option specifies whether the kernel sends keepalive messages on connection-oriented sockets.","int SO_LINGER Number of seconds to wait when closing a socket if there is still some buffered data to be sent.","int SO_OOBINLINE This boolean option specifies whether sending TCP urgent data is supported on this socket or not.","int SO_RCVBUF The size in bytes of a socket's receive buffer.","int SO_REUSEADDR This boolean option specifies whether a reuse of a local address is allowed when another socket has not yet been removed by the operating system.","int SO_SNDBUF The size in bytes of a socket's send buffer.","int SO_TIMEOUT Integer timeout in milliseconds for blocking accept or read/receive operations (but not write/send operations).","int TCP_NODELAY This boolean option specifies whether data is sent immediately on this socket or buffered."],"class":"DatagramSocketImpl","constructors":[],"fields":["protected FileDescriptor fd File descriptor that is used to address this socket.","protected int localPort The number of the local port to which this socket is bound."]}