{"methods":["void applyLocalizedPattern(String pattern) Changes the pattern of this decimal format to the specified pattern which uses localized pattern characters.","void applyPattern(String pattern) Changes the pattern of this decimal format to the specified pattern which uses non-localized pattern characters.","Object clone() Returns a new instance of DecimalFormat with the same pattern and properties.","boolean equals(Object object) Compares the specified object to this decimal format and indicates if they are equal.","StringBuffer format(long value, StringBuffer buffer, FieldPosition position) Formats the specified long value as a string using the pattern of this number format and appends the string to the specified string buffer.","StringBuffer format(double value, StringBuffer buffer, FieldPosition position) Formats the specified double value as a string using the pattern of this number format and appends the string to the specified string buffer.","final StringBuffer format(Object number, StringBuffer buffer, FieldPosition position) Formats a number into a supplied buffer.","AttributedCharacterIterator formatToCharacterIterator(Object object) Formats the specified object using the rules of this decimal format and returns an AttributedCharacterIterator with the formatted number and attributes.","Currency getCurrency() Returns the currency used by this decimal format.","DecimalFormatSymbols getDecimalFormatSymbols() Returns the DecimalFormatSymbols used by this decimal format.","int getGroupingSize() Returns the number of digits grouped together by the grouping separator.","int getMultiplier() Returns the multiplier which is applied to the number before formatting or after parsing.","String getNegativePrefix() Returns the prefix which is formatted or parsed before a negative number.","String getNegativeSuffix() Returns the suffix which is formatted or parsed after a negative number.","String getPositivePrefix() Returns the prefix which is formatted or parsed before a positive number.","String getPositiveSuffix() Returns the suffix which is formatted or parsed after a positive number.","RoundingMode getRoundingMode() Returns the RoundingMode used by this NumberFormat.","int hashCode() Returns an integer hash code for this object.","boolean isDecimalSeparatorAlwaysShown() Indicates whether the decimal separator is shown when there are no fractional digits.","boolean isGroupingUsed() Returns true if digit grouping is used in this format.","boolean isParseBigDecimal() This value indicates whether the return object of the parse operation is of type BigDecimal.","boolean isParseIntegerOnly() Returns true if this number format only parses integer numbers.","Number parse(String string, ParsePosition position) Parses a Long or Double from the specified string starting at the index specified by position.","void setCurrency(Currency currency) Sets the currency used by this decimal format.","void setDecimalFormatSymbols(DecimalFormatSymbols value) Sets the DecimalFormatSymbols used by this decimal format.","void setDecimalSeparatorAlwaysShown(boolean value) Sets whether the decimal separator is shown even when there are no fractional digits.","void setGroupingSize(int value) Sets the number of digits grouped together by the grouping separator.","void setGroupingUsed(boolean value) Sets whether or not digit grouping will be used in this format.","void setMaximumFractionDigits(int value) Sets the maximum number of digits after the decimal point.","void setMaximumIntegerDigits(int value) Sets the maximum number of digits before the decimal point.","void setMinimumFractionDigits(int value) Sets the minimum number of digits after the decimal point.","void setMinimumIntegerDigits(int value) Sets the minimum number of digits before the decimal point.","void setMultiplier(int value) Sets the multiplier which is applied to the number before formatting or after parsing.","void setNegativePrefix(String value) Sets the prefix which is formatted or parsed before a negative number.","void setNegativeSuffix(String value) Sets the suffix which is formatted or parsed after a negative number.","void setParseBigDecimal(boolean newValue) Sets the behavior of the parse method.","void setParseIntegerOnly(boolean value) Sets the flag that indicates whether numbers will be parsed as integers.","void setPositivePrefix(String value) Sets the prefix which is formatted or parsed before a positive number.","void setPositiveSuffix(String value) Sets the suffix which is formatted or parsed after a positive number.","void setRoundingMode(RoundingMode roundingMode) Sets the RoundingMode used by this NumberFormat.","String toLocalizedPattern() Returns the pattern of this decimal format using localized pattern characters.","String toPattern() Returns the pattern of this decimal format using non-localized pattern characters.","String toString() Returns a string containing a concise, human-readable description of this object.","[Expand] Inherited Methods","From class java.text.NumberFormat Object clone() Returns a new NumberFormat with the same properties. boolean equals(Object object) Compares the specified object to this number format and indicates if they are equal. abstract StringBuffer format(long value, StringBuffer buffer, FieldPosition field) Formats the specified long value as a string using the pattern of this number format and appends the string to the specified string buffer. final String format(long value) Formats the specified long using the rules of this number format. abstract StringBuffer format(double value, StringBuffer buffer, FieldPosition field) Formats the specified double value as a string using the pattern of this number format and appends the string to the specified string buffer. StringBuffer format(Object object, StringBuffer buffer, FieldPosition field) Formats a number into a supplied buffer. final String format(double value) Formats the specified double using the rules of this number format. static Locale[] getAvailableLocales() Returns an array of locales for which custom NumberFormat instances are available. Currency getCurrency() Returns the currency used by this number format. final static NumberFormat getCurrencyInstance() Returns a NumberFormat for formatting and parsing currency values for the user's default locale. static NumberFormat getCurrencyInstance(Locale locale) Returns a NumberFormat for formatting and parsing currency values for the specified locale. static NumberFormat getInstance(Locale locale) Returns a NumberFormat for formatting and parsing numbers for the specified locale. final static NumberFormat getInstance() Returns a NumberFormat for formatting and parsing numbers for the default locale. static NumberFormat getIntegerInstance(Locale locale) Returns a NumberFormat for formatting and parsing integers for the specified locale. final static NumberFormat getIntegerInstance() Returns a NumberFormat for formatting and parsing integers for the user's default locale. int getMaximumFractionDigits() Returns the maximum number of fraction digits that are printed when formatting. int getMaximumIntegerDigits() Returns the maximum number of integer digits that are printed when formatting. int getMinimumFractionDigits() Returns the minimum number of fraction digits that are printed when formatting. int getMinimumIntegerDigits() Returns the minimum number of integer digits that are printed when formatting. final static NumberFormat getNumberInstance() Returns a NumberFormat for formatting and parsing numbers for the user's default locale. static NumberFormat getNumberInstance(Locale locale) Returns a NumberFormat for formatting and parsing numbers for the specified locale. final static NumberFormat getPercentInstance() Returns a NumberFormat for formatting and parsing percentage values for the user's default locale. static NumberFormat getPercentInstance(Locale locale) Returns a NumberFormat for formatting and parsing percentage values for the given locale. RoundingMode getRoundingMode() Returns the RoundingMode used by this NumberFormat. int hashCode() Returns an integer hash code for this object. boolean isGroupingUsed() Indicates whether this number format formats and parses numbers using a grouping separator. boolean isParseIntegerOnly() Returns true if this number format only parses integer numbers. Number parse(String string) Parses a Number from the specified string using the rules of this number format. abstract Number parse(String string, ParsePosition position) Parses a Number from the specified string starting at the index specified by position. final Object parseObject(String string, ParsePosition position) Parses the specified string starting at the index specified by position. void setCurrency(Currency currency) Sets the currency used by this number format when formatting currency values. void setGroupingUsed(boolean value) Sets whether this number format formats and parses numbers using a grouping separator. void setMaximumFractionDigits(int value) Sets the maximum number of fraction digits that are printed when formatting. void setMaximumIntegerDigits(int value) Sets the new maximum count of integer digits that are printed when formatting. void setMinimumFractionDigits(int value) Sets the minimum number of fraction digits that are printed when formatting. void setMinimumIntegerDigits(int value) Sets the minimum number of integer digits that are printed when formatting. void setParseIntegerOnly(boolean value) Specifies if this number format should parse numbers only as integers or else as any kind of number. void setRoundingMode(RoundingMode roundingMode) Sets the RoundingMode used by this NumberFormat.","Object clone() Returns a new NumberFormat with the same properties.","boolean equals(Object object) Compares the specified object to this number format and indicates if they are equal.","abstract StringBuffer format(long value, StringBuffer buffer, FieldPosition field) Formats the specified long value as a string using the pattern of this number format and appends the string to the specified string buffer.","final String format(long value) Formats the specified long using the rules of this number format.","abstract StringBuffer format(double value, StringBuffer buffer, FieldPosition field) Formats the specified double value as a string using the pattern of this number format and appends the string to the specified string buffer.","StringBuffer format(Object object, StringBuffer buffer, FieldPosition field) Formats a number into a supplied buffer.","final String format(double value) Formats the specified double using the rules of this number format.","static Locale[] getAvailableLocales() Returns an array of locales for which custom NumberFormat instances are available.","Currency getCurrency() Returns the currency used by this number format.","final static NumberFormat getCurrencyInstance() Returns a NumberFormat for formatting and parsing currency values for the user's default locale.","static NumberFormat getCurrencyInstance(Locale locale) Returns a NumberFormat for formatting and parsing currency values for the specified locale.","static NumberFormat getInstance(Locale locale) Returns a NumberFormat for formatting and parsing numbers for the specified locale.","final static NumberFormat getInstance() Returns a NumberFormat for formatting and parsing numbers for the default locale.","static NumberFormat getIntegerInstance(Locale locale) Returns a NumberFormat for formatting and parsing integers for the specified locale.","final static NumberFormat getIntegerInstance() Returns a NumberFormat for formatting and parsing integers for the user's default locale.","int getMaximumFractionDigits() Returns the maximum number of fraction digits that are printed when formatting.","int getMaximumIntegerDigits() Returns the maximum number of integer digits that are printed when formatting.","int getMinimumFractionDigits() Returns the minimum number of fraction digits that are printed when formatting.","int getMinimumIntegerDigits() Returns the minimum number of integer digits that are printed when formatting.","final static NumberFormat getNumberInstance() Returns a NumberFormat for formatting and parsing numbers for the user's default locale.","static NumberFormat getNumberInstance(Locale locale) Returns a NumberFormat for formatting and parsing numbers for the specified locale.","final static NumberFormat getPercentInstance() Returns a NumberFormat for formatting and parsing percentage values for the user's default locale.","static NumberFormat getPercentInstance(Locale locale) Returns a NumberFormat for formatting and parsing percentage values for the given locale.","RoundingMode getRoundingMode() Returns the RoundingMode used by this NumberFormat.","int hashCode() Returns an integer hash code for this object.","boolean isGroupingUsed() Indicates whether this number format formats and parses numbers using a grouping separator.","boolean isParseIntegerOnly() Returns true if this number format only parses integer numbers.","Number parse(String string) Parses a Number from the specified string using the rules of this number format.","abstract Number parse(String string, ParsePosition position) Parses a Number from the specified string starting at the index specified by position.","final Object parseObject(String string, ParsePosition position) Parses the specified string starting at the index specified by position.","void setCurrency(Currency currency) Sets the currency used by this number format when formatting currency values.","void setGroupingUsed(boolean value) Sets whether this number format formats and parses numbers using a grouping separator.","void setMaximumFractionDigits(int value) Sets the maximum number of fraction digits that are printed when formatting.","void setMaximumIntegerDigits(int value) Sets the new maximum count of integer digits that are printed when formatting.","void setMinimumFractionDigits(int value) Sets the minimum number of fraction digits that are printed when formatting.","void setMinimumIntegerDigits(int value) Sets the minimum number of integer digits that are printed when formatting.","void setParseIntegerOnly(boolean value) Specifies if this number format should parse numbers only as integers or else as any kind of number.","void setRoundingMode(RoundingMode roundingMode) Sets the RoundingMode used by this NumberFormat.","From class java.text.Format Object clone() Returns a copy of this Format instance. final String format(Object object) Formats the specified object using the rules of this format. abstract StringBuffer format(Object object, StringBuffer buffer, FieldPosition field) Appends the specified object to the specified string buffer using the rules of this format. AttributedCharacterIterator formatToCharacterIterator(Object object) Formats the specified object using the rules of this format and returns an AttributedCharacterIterator with the formatted string and no attributes. Object parseObject(String string) Parses the specified string using the rules of this format. abstract Object parseObject(String string, ParsePosition position) Parses the specified string starting at the index specified by position.","Object clone() Returns a copy of this Format instance.","final String format(Object object) Formats the specified object using the rules of this format.","abstract StringBuffer format(Object object, StringBuffer buffer, FieldPosition field) Appends the specified object to the specified string buffer using the rules of this format.","AttributedCharacterIterator formatToCharacterIterator(Object object) Formats the specified object using the rules of this format and returns an AttributedCharacterIterator with the formatted string and no attributes.","Object parseObject(String string) Parses the specified string using the rules of this format.","abstract Object parseObject(String string, ParsePosition position) Parses the specified string starting at the index specified by position.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"java.text","constants":["[Expand] Inherited Constants","From class java.text.NumberFormat int FRACTION_FIELD Field constant identifying the fractional part of a number. int INTEGER_FIELD Field constant identifying the integer part of a number.","int FRACTION_FIELD Field constant identifying the fractional part of a number.","int INTEGER_FIELD Field constant identifying the integer part of a number."],"class":"DecimalFormat","constructors":[],"fields":[]}