{"methods":["synchronized int deflate(byte[] buf, int offset, int byteCount, int flush) Deflates data (previously passed to setInput) into a specific region within the supplied buffer, optionally flushing the input buffer.","synchronized int deflate(byte[] buf, int offset, int byteCount) Deflates data (previously passed to setInput) into a specific region within the supplied buffer.","int deflate(byte[] buf) Deflates the data (previously passed to setInput) into the supplied buffer.","synchronized void end() Frees all resources held onto by this deflating algorithm.","synchronized void finish() Indicates to the Deflater that all uncompressed input has been provided to it.","synchronized boolean finished() Returns true if finish has been called and all data provided by setInput has been successfully compressed and consumed by deflate.","synchronized int getAdler() Returns the Adler32 checksum of the uncompressed data read so far.","synchronized long getBytesRead() Returns the total number of bytes read by the Deflater.","synchronized long getBytesWritten() Returns a the total number of bytes written by this Deflater.","synchronized int getTotalIn() Returns the total number of bytes of input read by this Deflater.","synchronized int getTotalOut() Returns the total number of bytes written to the output buffer by this Deflater.","synchronized boolean needsInput() Returns true if setInput must be called before deflation can continue.","synchronized void reset() Resets the Deflater to accept new input without affecting any previous compression strategy or level settings.","synchronized void setDictionary(byte[] buf, int offset, int byteCount) Sets the dictionary to be used for compression by this Deflater.","void setDictionary(byte[] dictionary) Sets the dictionary to be used for compression by this Deflater.","synchronized void setInput(byte[] buf, int offset, int byteCount) Sets the input buffer the Deflater will use to extract uncompressed bytes for later compression.","void setInput(byte[] buf) Sets the input buffer the Deflater will use to extract uncompressed bytes for later compression.","synchronized void setLevel(int level) Sets the given compression level to be used when compressing data.","synchronized void setStrategy(int strategy) Sets the compression strategy to be used.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"java.util.zip","constants":["int BEST_COMPRESSION This compression level gives the best compression, but takes the most time.","int BEST_SPEED This compression level gives minimal compression, but takes the least time (of any level that actually performs compression; see NO_COMPRESSION).","int DEFAULT_COMPRESSION The default compression level.","int DEFAULT_STRATEGY The default compression strategy.","int DEFLATED The default compression method.","int FILTERED A compression strategy.","int FULL_FLUSH Flush buffers so recipients can immediately decode the data sent thus far.","int HUFFMAN_ONLY A compression strategy.","int NO_COMPRESSION This compression level does no compression.","int NO_FLUSH Use buffering for best compression.","int SYNC_FLUSH Flush buffers so recipients can immediately decode the data sent thus far."],"class":"Deflater","constructors":[],"fields":[]}