{"methods":["abstract boolean add(E e) Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available.","abstract void addFirst(E e) Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions.","abstract void addLast(E e) Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions.","abstract boolean contains(Object o) Returns true if this deque contains the specified element.","abstract Iterator<E> descendingIterator() Returns an iterator over the elements in this deque in reverse sequential order.","abstract E element() Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque).","abstract E getFirst() Retrieves, but does not remove, the first element of this deque.","abstract E getLast() Retrieves, but does not remove, the last element of this deque.","abstract Iterator<E> iterator() Returns an iterator over the elements in this deque in proper sequence.","abstract boolean offer(E e) Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available.","abstract boolean offerFirst(E e) Inserts the specified element at the front of this deque unless it would violate capacity restrictions.","abstract boolean offerLast(E e) Inserts the specified element at the end of this deque unless it would violate capacity restrictions.","abstract E peek() Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty.","abstract E peekFirst() Retrieves, but does not remove, the first element of this deque, or returns null if this deque is empty.","abstract E peekLast() Retrieves, but does not remove, the last element of this deque, or returns null if this deque is empty.","abstract E poll() Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty.","abstract E pollFirst() Retrieves and removes the first element of this deque, or returns null if this deque is empty.","abstract E pollLast() Retrieves and removes the last element of this deque, or returns null if this deque is empty.","abstract E pop() Pops an element from the stack represented by this deque.","abstract void push(E e) Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available.","abstract E remove() Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque).","abstract boolean remove(Object o) Removes the first occurrence of the specified element from this deque.","abstract E removeFirst() Retrieves and removes the first element of this deque.","abstract boolean removeFirstOccurrence(Object o) Removes the first occurrence of the specified element from this deque.","abstract E removeLast() Retrieves and removes the last element of this deque.","abstract boolean removeLastOccurrence(Object o) Removes the last occurrence of the specified element from this deque.","abstract int size() Returns the number of elements in this deque.","[Expand] Inherited Methods","From interface java.lang.Iterable abstract Iterator<T> iterator() Returns an Iterator for the elements in this object.","abstract Iterator<T> iterator() Returns an Iterator for the elements in this object.","From interface java.util.Collection abstract boolean add(E object) Attempts to add object to the contents of this Collection (optional). abstract boolean addAll(Collection<? extends E> collection) Attempts to add all of the objects contained in Collection to the contents of this Collection (optional). abstract void clear() Removes all elements from this Collection, leaving it empty (optional). abstract boolean contains(Object object) Tests whether this Collection contains the specified object. abstract boolean containsAll(Collection<?> collection) Tests whether this Collection contains all objects contained in the specified Collection. abstract boolean equals(Object object) Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison. abstract int hashCode() Returns an integer hash code for the receiver. abstract boolean isEmpty() Returns if this Collection contains no elements. abstract Iterator<E> iterator() Returns an instance of Iterator that may be used to access the objects contained by this Collection. abstract boolean remove(Object object) Removes one instance of the specified object from this Collection if one is contained (optional). abstract boolean removeAll(Collection<?> collection) Removes all occurrences in this Collection of each object in the specified Collection (optional). abstract boolean retainAll(Collection<?> collection) Removes all objects from this Collection that are not also found in the Collection passed (optional). abstract int size() Returns a count of how many objects this Collection contains. abstract <T> T[] toArray(T[] array) Returns an array containing all elements contained in this Collection. abstract Object[] toArray() Returns a new array containing all elements contained in this Collection.","abstract boolean add(E object) Attempts to add object to the contents of this Collection (optional).","abstract boolean addAll(Collection<? extends E> collection) Attempts to add all of the objects contained in Collection to the contents of this Collection (optional).","abstract void clear() Removes all elements from this Collection, leaving it empty (optional).","abstract boolean contains(Object object) Tests whether this Collection contains the specified object.","abstract boolean containsAll(Collection<?> collection) Tests whether this Collection contains all objects contained in the specified Collection.","abstract boolean equals(Object object) Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.","abstract int hashCode() Returns an integer hash code for the receiver.","abstract boolean isEmpty() Returns if this Collection contains no elements.","abstract Iterator<E> iterator() Returns an instance of Iterator that may be used to access the objects contained by this Collection.","abstract boolean remove(Object object) Removes one instance of the specified object from this Collection if one is contained (optional).","abstract boolean removeAll(Collection<?> collection) Removes all occurrences in this Collection of each object in the specified Collection (optional).","abstract boolean retainAll(Collection<?> collection) Removes all objects from this Collection that are not also found in the Collection passed (optional).","abstract int size() Returns a count of how many objects this Collection contains.","abstract <T> T[] toArray(T[] array) Returns an array containing all elements contained in this Collection.","abstract Object[] toArray() Returns a new array containing all elements contained in this Collection.","From interface java.util.Queue abstract boolean add(E e) Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available. abstract E element() Retrieves, but does not remove, the head of this queue. abstract boolean offer(E e) Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions. abstract E peek() Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty. abstract E poll() Retrieves and removes the head of this queue, or returns null if this queue is empty. abstract E remove() Retrieves and removes the head of this queue.","abstract boolean add(E e) Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available.","abstract E element() Retrieves, but does not remove, the head of this queue.","abstract boolean offer(E e) Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions.","abstract E peek() Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.","abstract E poll() Retrieves and removes the head of this queue, or returns null if this queue is empty.","abstract E remove() Retrieves and removes the head of this queue."],"package":"java.util","constants":[],"class":"Deque","constructors":[],"fields":[]}