{"methods":["void addCrossProfileIntentFilter(ComponentName admin, IntentFilter filter, int flags) Called by the profile owner of a managed profile so that some intents sent in the managed profile can also be resolved in the parent, or vice versa.","boolean addCrossProfileWidgetProvider(ComponentName admin, String packageName) Called by the profile owner of a managed profile to enable widget providers from a given package to be available in the parent profile.","void addPersistentPreferredActivity(ComponentName admin, IntentFilter filter, ComponentName activity) Called by a profile owner or device owner to add a default intent handler activity for intents that match a certain intent filter.","void addUserRestriction(ComponentName admin, String key) Called by a profile or device owner to set a user restriction specified by the key.","void clearCrossProfileIntentFilters(ComponentName admin) Called by a profile owner of a managed profile to remove the cross-profile intent filters that go from the managed profile to the parent, or from the parent to the managed profile.","void clearDeviceOwnerApp(String packageName) Clears the current device owner.","void clearPackagePersistentPreferredActivities(ComponentName admin, String packageName) Called by a profile owner or device owner to remove all persistent intent handler preferences associated with the given package that were set by addPersistentPreferredActivity(ComponentName, IntentFilter, ComponentName).","void clearUserRestriction(ComponentName admin, String key) Called by a profile or device owner to clear a user restriction specified by the key.","UserHandle createAndInitializeUser(ComponentName admin, String name, String ownerName, ComponentName profileOwnerComponent, Bundle adminExtras) Called by a device owner to create a user with the specified name.","UserHandle createUser(ComponentName admin, String name) Called by a device owner to create a user with the specified name.","void enableSystemApp(ComponentName admin, String packageName) Called by profile or device owner to re-enable a system app that was disabled by default when the user was initialized.","int enableSystemApp(ComponentName admin, Intent intent) Called by profile or device owner to re-enable system apps by intent that were disabled by default when the user was initialized.","String[] getAccountTypesWithManagementDisabled() Gets the array of accounts for which account management is disabled by the profile owner.","List<ComponentName> getActiveAdmins() Return a list of all currently active device administrator's component names.","Bundle getApplicationRestrictions(ComponentName admin, String packageName) Called by a profile or device owner to get the application restrictions for a given target application running in the profile.","boolean getAutoTimeRequired()","boolean getCameraDisabled(ComponentName admin) Determine whether or not the device's cameras have been disabled for this user, either by the current admin, if specified, or all admins.","boolean getCrossProfileCallerIdDisabled(ComponentName who) Called by a profile owner of a managed profile to determine whether or not caller-Id information has been disabled.","List<String> getCrossProfileWidgetProviders(ComponentName admin) Called by the profile owner of a managed profile to query providers from which packages are available in the parent profile.","int getCurrentFailedPasswordAttempts() Retrieve the number of times the user has failed at entering a password since that last successful password entry.","List<byte[]> getInstalledCaCerts(ComponentName admin) Returns all CA certificates that are currently trusted, excluding system CA certificates.","int getKeyguardDisabledFeatures(ComponentName admin) Determine whether or not features have been disabled in keyguard either by the current admin, if specified, or all admins.","int getMaximumFailedPasswordsForWipe(ComponentName admin) Retrieve the current maximum number of login attempts that are allowed before the device wipes itself, for all admins of this user and its profiles or a particular one.","long getMaximumTimeToLock(ComponentName admin) Retrieve the current maximum time to unlock for all admins of this user and its profiles or a particular one.","long getPasswordExpiration(ComponentName admin) Get the current password expiration time for the given admin or an aggregate of all admins of this user and its profiles if admin is null.","long getPasswordExpirationTimeout(ComponentName admin) Get the password expiration timeout for the given admin.","int getPasswordHistoryLength(ComponentName admin) Retrieve the current password history length for all admins of this user and its profiles or a particular one.","int getPasswordMaximumLength(int quality) Return the maximum password length that the device supports for a particular password quality.","int getPasswordMinimumLength(ComponentName admin) Retrieve the current minimum password length for all admins of this user and its profiles or a particular one.","int getPasswordMinimumLetters(ComponentName admin) Retrieve the current number of letters required in the password for all admins or a particular one.","int getPasswordMinimumLowerCase(ComponentName admin) Retrieve the current number of lower case letters required in the password for all admins of this user and its profiles or a particular one.","int getPasswordMinimumNonLetter(ComponentName admin) Retrieve the current number of non-letter characters required in the password for all admins of this user and its profiles or a particular one.","int getPasswordMinimumNumeric(ComponentName admin) Retrieve the current number of numerical digits required in the password for all admins of this user and its profiles or a particular one.","int getPasswordMinimumSymbols(ComponentName admin) Retrieve the current number of symbols required in the password for all admins or a particular one.","int getPasswordMinimumUpperCase(ComponentName admin) Retrieve the current number of upper case letters required in the password for all admins of this user and its profiles or a particular one.","int getPasswordQuality(ComponentName admin) Retrieve the current minimum password quality for all admins of this user and its profiles or a particular one.","List<String> getPermittedAccessibilityServices(ComponentName admin) Returns the list of permitted accessibility services set by this device or profile owner.","List<String> getPermittedInputMethods(ComponentName admin) Returns the list of permitted input methods set by this device or profile owner.","boolean getScreenCaptureDisabled(ComponentName admin) Determine whether or not screen capture has been disabled by the current admin, if specified, or all admins.","boolean getStorageEncryption(ComponentName admin) Called by an application that is administering the device to determine the requested setting for secure storage.","int getStorageEncryptionStatus() Called by an application that is administering the device to determine the current encryption status of the device.","boolean hasCaCertInstalled(ComponentName admin, byte[] certBuffer) Returns whether this certificate is installed as a trusted CA.","boolean hasGrantedPolicy(ComponentName admin, int usesPolicy) Returns true if an administrator has been granted a particular device policy.","boolean installCaCert(ComponentName admin, byte[] certBuffer) Installs the given certificate as a user CA.","boolean installKeyPair(ComponentName who, PrivateKey privKey, Certificate cert, String alias) Called by a device or profile owner to install a certificate and private key pair.","boolean isActivePasswordSufficient() Determine whether the current password the user has set is sufficient to meet the policy requirements (quality, minimum length) that have been requested by the admins of this user and its profiles.","boolean isAdminActive(ComponentName who) Return true if the given administrator component is currently active (enabled) in the system.","boolean isApplicationHidden(ComponentName admin, String packageName) Called by device or profile owner to determine if a package is hidden.","boolean isDeviceOwnerApp(String packageName) Used to determine if a particular package has been registered as a Device Owner app.","boolean isLockTaskPermitted(String pkg) This function lets the caller know whether the given component is allowed to start the lock task mode.","boolean isMasterVolumeMuted(ComponentName admin) Called by profile or device owners to check whether the master volume mute is on or off.","boolean isProfileOwnerApp(String packageName) Used to determine if a particular package is registered as the profile owner for the current user.","boolean isUninstallBlocked(ComponentName admin, String packageName) Called by profile or device owners to check whether a user has been blocked from uninstalling a package.","void lockNow() Make the device lock immediately, as if the lock screen timeout has expired at the point of this call.","void removeActiveAdmin(ComponentName who) Remove a current administration component.","boolean removeCrossProfileWidgetProvider(ComponentName admin, String packageName) Called by the profile owner of a managed profile to disable widget providers from a given package to be available in the parent profile.","boolean removeUser(ComponentName admin, UserHandle userHandle) Called by a device owner to remove a user and all associated data.","boolean resetPassword(String password, int flags) Force a new device unlock password (the password needed to access the entire device, not for individual accounts) on the user.","void setAccountManagementDisabled(ComponentName admin, String accountType, boolean disabled) Called by a profile owner to disable account management for a specific type of account.","boolean setApplicationHidden(ComponentName admin, String packageName, boolean hidden) Called by device or profile owner to hide or unhide packages.","void setApplicationRestrictions(ComponentName admin, String packageName, Bundle settings) Called by a profile or device owner to set the application restrictions for a given target application running in the profile.","void setAutoTimeRequired(ComponentName admin, boolean required) Called by a device owner to set whether auto time is required.","void setCameraDisabled(ComponentName admin, boolean disabled) Called by an application that is administering the device to disable all cameras on the device, for this user.","void setCrossProfileCallerIdDisabled(ComponentName who, boolean disabled) Called by a profile owner of a managed profile to set whether caller-Id information from the managed profile will be shown in the parent profile, for incoming calls.","void setGlobalSetting(ComponentName admin, String setting, String value) Called by device owners to update Settings.Global settings.","void setKeyguardDisabledFeatures(ComponentName admin, int which) Called by an application that is administering the device to disable keyguard customizations, such as widgets.","void setLockTaskPackages(ComponentName admin, String[] packages) Sets which packages may enter lock task mode.","void setMasterVolumeMuted(ComponentName admin, boolean on) Called by profile or device owners to set the master volume mute on or off.","void setMaximumFailedPasswordsForWipe(ComponentName admin, int num) Setting this to a value greater than zero enables a built-in policy that will perform a device wipe after too many incorrect device-unlock passwords have been entered.","void setMaximumTimeToLock(ComponentName admin, long timeMs) Called by an application that is administering the device to set the maximum time for user activity until the device will lock.","void setPasswordExpirationTimeout(ComponentName admin, long timeout) Called by a device admin to set the password expiration timeout.","void setPasswordHistoryLength(ComponentName admin, int length) Called by an application that is administering the device to set the length of the password history.","void setPasswordMinimumLength(ComponentName admin, int length) Called by an application that is administering the device to set the minimum allowed password length.","void setPasswordMinimumLetters(ComponentName admin, int length) Called by an application that is administering the device to set the minimum number of letters required in the password.","void setPasswordMinimumLowerCase(ComponentName admin, int length) Called by an application that is administering the device to set the minimum number of lower case letters required in the password.","void setPasswordMinimumNonLetter(ComponentName admin, int length) Called by an application that is administering the device to set the minimum number of non-letter characters (numerical digits or symbols) required in the password.","void setPasswordMinimumNumeric(ComponentName admin, int length) Called by an application that is administering the device to set the minimum number of numerical digits required in the password.","void setPasswordMinimumSymbols(ComponentName admin, int length) Called by an application that is administering the device to set the minimum number of symbols required in the password.","void setPasswordMinimumUpperCase(ComponentName admin, int length) Called by an application that is administering the device to set the minimum number of upper case letters required in the password.","void setPasswordQuality(ComponentName admin, int quality) Called by an application that is administering the device to set the password restrictions it is imposing.","boolean setPermittedAccessibilityServices(ComponentName admin, List<String> packageNames) Called by a profile or device owner to set the permitted accessibility services.","boolean setPermittedInputMethods(ComponentName admin, List<String> packageNames) Called by a profile or device owner to set the permitted input methods services.","void setProfileEnabled(ComponentName admin) Sets the enabled state of the profile.","void setProfileName(ComponentName who, String profileName) Sets the name of the profile.","void setRecommendedGlobalProxy(ComponentName admin, ProxyInfo proxyInfo) Set a network-independent global HTTP proxy.","void setRestrictionsProvider(ComponentName admin, ComponentName provider) Designates a specific service component as the provider for making permission requests of a local or remote administrator of the user.","void setScreenCaptureDisabled(ComponentName admin, boolean disabled) Called by a device/profile owner to set whether the screen capture is disabled.","void setSecureSetting(ComponentName admin, String setting, String value) Called by profile or device owners to update Settings.Secure settings.","int setStorageEncryption(ComponentName admin, boolean encrypt) Called by an application that is administering the device to request that the storage system be encrypted.","void setUninstallBlocked(ComponentName admin, String packageName, boolean uninstallBlocked) Called by profile or device owners to change whether a user can uninstall a package.","boolean switchUser(ComponentName admin, UserHandle userHandle) Called by a device owner to switch the specified user to the foreground.","void uninstallAllUserCaCerts(ComponentName admin) Uninstalls all custom trusted CA certificates from the profile.","void uninstallCaCert(ComponentName admin, byte[] certBuffer) Uninstalls the given certificate from trusted user CAs, if present.","void wipeData(int flags) Ask the user data be wiped.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.app.admin","constants":["String ACTION_ADD_DEVICE_ADMIN Activity action: ask the user to add a new device administrator to the system.","String ACTION_PROVISION_MANAGED_PROFILE Activity action: Starts the provisioning flow which sets up a managed profile.","String ACTION_SET_NEW_PASSWORD Activity action: have the user enter a new password.","String ACTION_START_ENCRYPTION Activity action: begin the process of encrypting data on the device.","int ENCRYPTION_STATUS_ACTIVATING Result code for setStorageEncryption(ComponentName, boolean) and getStorageEncryptionStatus(): indicating that encryption is not currently active, but is currently being activated.","int ENCRYPTION_STATUS_ACTIVE Result code for setStorageEncryption(ComponentName, boolean) and getStorageEncryptionStatus(): indicating that encryption is active.","int ENCRYPTION_STATUS_INACTIVE Result code for setStorageEncryption(ComponentName, boolean) and getStorageEncryptionStatus(): indicating that encryption is supported, but is not currently active.","int ENCRYPTION_STATUS_UNSUPPORTED Result code for setStorageEncryption(ComponentName, boolean) and getStorageEncryptionStatus(): indicating that encryption is not supported.","String EXTRA_ADD_EXPLANATION An optional CharSequence providing additional explanation for why the admin is being added.","String EXTRA_DEVICE_ADMIN The ComponentName of the administrator component.","String EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE A Parcelable extra of type PersistableBundle that allows a mobile device management application that starts managed profile provisioning to pass data to itself on the managed profile when provisioning completes.","String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM A String extra holding the SHA-1 checksum of the file at download location specified in EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION.","String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER A String extra holding a http cookie header which should be used in the http request to the url specified in EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION.","String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION A String extra holding a url that specifies the download location of the device admin package.","String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME A String extra holding the package name of the mobile device management application that will be set as the profile owner or device owner.","String EXTRA_PROVISIONING_EMAIL_ADDRESS A String extra that, holds the email address of the account which a managed profile is created for.","String EXTRA_PROVISIONING_LOCALE A String extra holding the Locale that the device will be set to.","String EXTRA_PROVISIONING_LOCAL_TIME A Long extra holding the wall clock time (in milliseconds) to be set on the device's AlarmManager.","String EXTRA_PROVISIONING_TIME_ZONE A String extra holding the time zone AlarmManager that the device will be set to.","String EXTRA_PROVISIONING_WIFI_HIDDEN A boolean extra indicating whether the wifi network in EXTRA_PROVISIONING_WIFI_SSID is hidden or not.","String EXTRA_PROVISIONING_WIFI_PAC_URL A String extra holding the proxy auto-config (PAC) URL for the wifi network in EXTRA_PROVISIONING_WIFI_SSID.","String EXTRA_PROVISIONING_WIFI_PASSWORD A String extra holding the password of the wifi network in EXTRA_PROVISIONING_WIFI_SSID.","String EXTRA_PROVISIONING_WIFI_PROXY_BYPASS A String extra holding the proxy bypass for the wifi network in EXTRA_PROVISIONING_WIFI_SSID.","String EXTRA_PROVISIONING_WIFI_PROXY_HOST A String extra holding the proxy host for the wifi network in EXTRA_PROVISIONING_WIFI_SSID.","String EXTRA_PROVISIONING_WIFI_PROXY_PORT An int extra holding the proxy port for the wifi network in EXTRA_PROVISIONING_WIFI_SSID.","String EXTRA_PROVISIONING_WIFI_SECURITY_TYPE A String extra indicating the security type of the wifi network in EXTRA_PROVISIONING_WIFI_SSID.","String EXTRA_PROVISIONING_WIFI_SSID A String extra holding the ssid of the wifi network that should be used during nfc device owner provisioning for downloading the mobile device management application.","int FLAG_MANAGED_CAN_ACCESS_PARENT Flag used by addCrossProfileIntentFilter(ComponentName, IntentFilter, int) to allow access from a parent to its managed profile.","int FLAG_PARENT_CAN_ACCESS_MANAGED Flag used by addCrossProfileIntentFilter(ComponentName, IntentFilter, int) to allow access from a managed profile to its parent.","int KEYGUARD_DISABLE_FEATURES_ALL Disable all current and future keyguard customizations.","int KEYGUARD_DISABLE_FEATURES_NONE Widgets are enabled in keyguard","int KEYGUARD_DISABLE_FINGERPRINT Disable fingerprint sensor on keyguard secure screens (e.g.","int KEYGUARD_DISABLE_SECURE_CAMERA Disable the camera on secure keyguard screens (e.g.","int KEYGUARD_DISABLE_SECURE_NOTIFICATIONS Disable showing all notifications on secure keyguard screens (e.g.","int KEYGUARD_DISABLE_TRUST_AGENTS Ignore trust agent state on secure keyguard screens (e.g.","int KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS Only allow redacted notifications on secure keyguard screens (e.g.","int KEYGUARD_DISABLE_WIDGETS_ALL Disable all keyguard widgets.","String MIME_TYPE_PROVISIONING_NFC This MIME type is used for starting the Device Owner provisioning.","int PASSWORD_QUALITY_ALPHABETIC Constant for setPasswordQuality(ComponentName, int): the user must have entered a password containing at least alphabetic (or other symbol) characters.","int PASSWORD_QUALITY_ALPHANUMERIC Constant for setPasswordQuality(ComponentName, int): the user must have entered a password containing at least both> numeric and alphabetic (or other symbol) characters.","int PASSWORD_QUALITY_BIOMETRIC_WEAK Constant for setPasswordQuality(ComponentName, int): the policy allows for low-security biometric recognition technology.","int PASSWORD_QUALITY_COMPLEX Constant for setPasswordQuality(ComponentName, int): the user must have entered a password containing at least a letter, a numerical digit and a special symbol, by default.","int PASSWORD_QUALITY_NUMERIC Constant for setPasswordQuality(ComponentName, int): the user must have entered a password containing at least numeric characters.","int PASSWORD_QUALITY_NUMERIC_COMPLEX Constant for setPasswordQuality(ComponentName, int): the user must have entered a password containing at least numeric characters with no repeating (4444) or ordered (1234, 4321, 2468) sequences.","int PASSWORD_QUALITY_SOMETHING Constant for setPasswordQuality(ComponentName, int): the policy requires some kind of password, but doesn't care what it is.","int PASSWORD_QUALITY_UNSPECIFIED Constant for setPasswordQuality(ComponentName, int): the policy has no requirements for the password.","int RESET_PASSWORD_REQUIRE_ENTRY Flag for resetPassword(String, int): don't allow other admins to change the password again until the user has entered it.","int WIPE_EXTERNAL_STORAGE Flag for wipeData(int): also erase the device's external storage."],"class":"DevicePolicyManager","constructors":[],"fields":[]}