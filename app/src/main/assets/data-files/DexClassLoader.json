{"methods":["[Expand] Inherited Methods","From class dalvik.system.BaseDexClassLoader Class<?> findClass(String name) Overridden by subclasses, throws a ClassNotFoundException by default. String findLibrary(String name) Returns the absolute path of the native library with the specified name, or null. URL findResource(String name) Finds the URL of the resource with the specified name. Enumeration<URL> findResources(String name) Finds an enumeration of URLs for the resource with the specified name. synchronized Package getPackage(String name) Returns package information for the given package. String toString() Returns a string containing a concise, human-readable description of this object.","Class<?> findClass(String name) Overridden by subclasses, throws a ClassNotFoundException by default.","String findLibrary(String name) Returns the absolute path of the native library with the specified name, or null.","URL findResource(String name) Finds the URL of the resource with the specified name.","Enumeration<URL> findResources(String name) Finds an enumeration of URLs for the resource with the specified name.","synchronized Package getPackage(String name) Returns package information for the given package.","String toString() Returns a string containing a concise, human-readable description of this object.","From class java.lang.ClassLoader void clearAssertionStatus() Sets the default assertion status for this class loader to false and removes any package default and class assertion status settings. final Class<?> defineClass(String name, ByteBuffer b, ProtectionDomain protectionDomain) Defines a new class with the specified name, byte code from the byte buffer and the optional protection domain. final Class<?> defineClass(String className, byte[] classRep, int offset, int length, ProtectionDomain protectionDomain) Constructs a new class from an array of bytes containing a class definition in class file format and assigns the specified protection domain to the new class. final Class<?> defineClass(String className, byte[] classRep, int offset, int length) Constructs a new class from an array of bytes containing a class definition in class file format. final Class<?> defineClass(byte[] classRep, int offset, int length) This method was deprecated in API level 1. Use defineClass(String, byte[], int, int) Package definePackage(String name, String specTitle, String specVersion, String specVendor, String implTitle, String implVersion, String implVendor, URL sealBase) Defines and returns a new Package using the specified information. Class<?> findClass(String className) Overridden by subclasses, throws a ClassNotFoundException by default. String findLibrary(String libName) Returns the absolute path of the native library with the specified name, or null. final Class<?> findLoadedClass(String className) Returns the class with the specified name if it has already been loaded by the VM or null if it has not yet been loaded. URL findResource(String resName) Finds the URL of the resource with the specified name. Enumeration<URL> findResources(String resName) Finds an enumeration of URLs for the resource with the specified name. final Class<?> findSystemClass(String className) Finds the class with the specified name, loading it using the system class loader if necessary. Package getPackage(String name) Returns the package with the specified name. Package[] getPackages() Returns all the packages known to this class loader. final ClassLoader getParent() Returns this class loader's parent. URL getResource(String resName) Returns the URL of the resource with the specified name. InputStream getResourceAsStream(String resName) Returns a stream for the resource with the specified name. Enumeration<URL> getResources(String resName) Returns an enumeration of URLs for the resource with the specified name. static ClassLoader getSystemClassLoader() Returns the system class loader. static URL getSystemResource(String resName) Finds the URL of the resource with the specified name. static InputStream getSystemResourceAsStream(String resName) Returns a stream for the resource with the specified name. static Enumeration<URL> getSystemResources(String resName) Returns an enumeration of URLs for the resource with the specified name. Class<?> loadClass(String className, boolean resolve) Loads the class with the specified name, optionally linking it after loading. Class<?> loadClass(String className) Loads the class with the specified name. final void resolveClass(Class<?> clazz) Forces a class to be linked (initialized). void setClassAssertionStatus(String cname, boolean enable) Sets the assertion status of the class with the specified name. void setDefaultAssertionStatus(boolean enable) Sets the default assertion status for this class loader. void setPackageAssertionStatus(String pname, boolean enable) Sets the assertion status of the package with the specified name. final void setSigners(Class<?> c, Object[] signers) Sets the signers of the specified class.","void clearAssertionStatus() Sets the default assertion status for this class loader to false and removes any package default and class assertion status settings.","final Class<?> defineClass(String name, ByteBuffer b, ProtectionDomain protectionDomain) Defines a new class with the specified name, byte code from the byte buffer and the optional protection domain.","final Class<?> defineClass(String className, byte[] classRep, int offset, int length, ProtectionDomain protectionDomain) Constructs a new class from an array of bytes containing a class definition in class file format and assigns the specified protection domain to the new class.","final Class<?> defineClass(String className, byte[] classRep, int offset, int length) Constructs a new class from an array of bytes containing a class definition in class file format.","final Class<?> defineClass(byte[] classRep, int offset, int length) This method was deprecated in API level 1. Use defineClass(String, byte[], int, int)","Package definePackage(String name, String specTitle, String specVersion, String specVendor, String implTitle, String implVersion, String implVendor, URL sealBase) Defines and returns a new Package using the specified information.","Class<?> findClass(String className) Overridden by subclasses, throws a ClassNotFoundException by default.","String findLibrary(String libName) Returns the absolute path of the native library with the specified name, or null.","final Class<?> findLoadedClass(String className) Returns the class with the specified name if it has already been loaded by the VM or null if it has not yet been loaded.","URL findResource(String resName) Finds the URL of the resource with the specified name.","Enumeration<URL> findResources(String resName) Finds an enumeration of URLs for the resource with the specified name.","final Class<?> findSystemClass(String className) Finds the class with the specified name, loading it using the system class loader if necessary.","Package getPackage(String name) Returns the package with the specified name.","Package[] getPackages() Returns all the packages known to this class loader.","final ClassLoader getParent() Returns this class loader's parent.","URL getResource(String resName) Returns the URL of the resource with the specified name.","InputStream getResourceAsStream(String resName) Returns a stream for the resource with the specified name.","Enumeration<URL> getResources(String resName) Returns an enumeration of URLs for the resource with the specified name.","static ClassLoader getSystemClassLoader() Returns the system class loader.","static URL getSystemResource(String resName) Finds the URL of the resource with the specified name.","static InputStream getSystemResourceAsStream(String resName) Returns a stream for the resource with the specified name.","static Enumeration<URL> getSystemResources(String resName) Returns an enumeration of URLs for the resource with the specified name.","Class<?> loadClass(String className, boolean resolve) Loads the class with the specified name, optionally linking it after loading.","Class<?> loadClass(String className) Loads the class with the specified name.","final void resolveClass(Class<?> clazz) Forces a class to be linked (initialized).","void setClassAssertionStatus(String cname, boolean enable) Sets the assertion status of the class with the specified name.","void setDefaultAssertionStatus(boolean enable) Sets the default assertion status for this class loader.","void setPackageAssertionStatus(String pname, boolean enable) Sets the assertion status of the package with the specified name.","final void setSigners(Class<?> c, Object[] signers) Sets the signers of the specified class.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"dalvik.system","constants":[],"class":"DexClassLoader","constructors":[],"fields":[]}