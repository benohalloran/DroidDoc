{"methods":["void addContentView(View view, ViewGroup.LayoutParams params) Add an additional content view to the screen.","void cancel() Cancel the dialog.","void closeOptionsMenu()","void create() Forces immediate creation of the dialog.","void dismiss() Dismiss this dialog, removing it from the screen.","boolean dispatchGenericMotionEvent(MotionEvent ev) Called to process generic motion events.","boolean dispatchKeyEvent(KeyEvent event) Called to process key events.","boolean dispatchKeyShortcutEvent(KeyEvent event) Called to process a key shortcut event.","boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) Called to process population of AccessibilityEvents.","boolean dispatchTouchEvent(MotionEvent ev) Called to process touch screen events.","boolean dispatchTrackballEvent(MotionEvent ev) Called to process trackball events.","View findViewById(int id) Finds a child view with the given identifier.","ActionBar getActionBar() Retrieve the ActionBar attached to this dialog, if present.","final Context getContext() Retrieve the Context this Dialog is running in.","View getCurrentFocus() Call getCurrentFocus() on the Window if this Activity to return the currently focused view.","LayoutInflater getLayoutInflater()","final Activity getOwnerActivity() Returns the Activity that owns this Dialog.","final int getVolumeControlStream()","Window getWindow() Retrieve the current Window for the activity.","void hide() Hide the dialog, but do not dismiss it.","void invalidateOptionsMenu()","boolean isShowing()","void onActionModeFinished(ActionMode mode) Called when an action mode has been finished. Note that if you override this method you should always call through to the superclass implementation by calling super.onActionModeFinished(mode).","void onActionModeStarted(ActionMode mode) Called when an action mode has been started. Note that if you override this method you should always call through to the superclass implementation by calling super.onActionModeStarted(mode).","void onAttachedToWindow() Called when the window has been attached to the window manager.","void onBackPressed() Called when the dialog has detected the user's press of the back key.","void onContentChanged() This hook is called whenever the content view of the screen changes (due to a call to Window.setContentView or Window.addContentView).","boolean onContextItemSelected(MenuItem item)","void onContextMenuClosed(Menu menu)","void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) Called when the context menu for this view is being built.","boolean onCreateOptionsMenu(Menu menu) It is usually safe to proxy this call to the owner activity's onCreateOptionsMenu(Menu) if the client desires the same menu for this Dialog.","boolean onCreatePanelMenu(int featureId, Menu menu) Initialize the contents of the menu for panel 'featureId'.","View onCreatePanelView(int featureId) Instantiate the view to display in the panel for 'featureId'.","void onDetachedFromWindow() Called when the window has been attached to the window manager.","boolean onGenericMotionEvent(MotionEvent event) Called when a generic motion event was not handled by any of the views inside of the dialog.","boolean onKeyDown(int keyCode, KeyEvent event) A key was pressed down.","boolean onKeyLongPress(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyLongPress(): always returns false (doesn't handle the event).","boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event).","boolean onKeyShortcut(int keyCode, KeyEvent event) Called when a key shortcut event is not handled by any of the views in the Dialog.","boolean onKeyUp(int keyCode, KeyEvent event) A key was released.","boolean onMenuItemSelected(int featureId, MenuItem item) Called when a panel's menu item has been selected by the user.","boolean onMenuOpened(int featureId, Menu menu) Called when a panel's menu is opened by the user.","boolean onOptionsItemSelected(MenuItem item)","void onOptionsMenuClosed(Menu menu)","void onPanelClosed(int featureId, Menu menu) Called when a panel is being closed.","boolean onPrepareOptionsMenu(Menu menu) It is usually safe to proxy this call to the owner activity's onPrepareOptionsMenu(Menu) if the client desires the same menu for this Dialog.","boolean onPreparePanel(int featureId, View view, Menu menu) Prepare a panel to be displayed.","void onRestoreInstanceState(Bundle savedInstanceState) Restore the state of the dialog from a previously saved bundle.","Bundle onSaveInstanceState() Saves the state of the dialog into a bundle.","boolean onSearchRequested() This hook is called when the user signals the desire to start a search.","boolean onTouchEvent(MotionEvent event) Called when a touch screen event was not handled by any of the views under it.","boolean onTrackballEvent(MotionEvent event) Called when the trackball was moved and not handled by any of the views inside of the activity.","void onWindowAttributesChanged(WindowManager.LayoutParams params) This is called whenever the current window attributes change.","abstract void onWindowDismissed() Called when a window is dismissed.","void onWindowFocusChanged(boolean hasFocus) This hook is called whenever the window focus changes.","ActionMode onWindowStartingActionMode(ActionMode.Callback callback) Called when an action mode is being started for this window.","void openContextMenu(View view)","void openOptionsMenu()","void registerForContextMenu(View view)","final boolean requestWindowFeature(int featureId) Enable extended window features.","void setCancelMessage(Message msg) Set a message to be sent when the dialog is canceled.","void setCancelable(boolean flag) Sets whether this dialog is cancelable with the BACK key.","void setCanceledOnTouchOutside(boolean cancel) Sets whether this dialog is canceled when touched outside the window's bounds.","void setContentView(View view) Set the screen content to an explicit view.","void setContentView(int layoutResID) Set the screen content from a layout resource.","void setContentView(View view, ViewGroup.LayoutParams params) Set the screen content to an explicit view.","void setDismissMessage(Message msg) Set a message to be sent when the dialog is dismissed.","final void setFeatureDrawable(int featureId, Drawable drawable) Convenience for calling setFeatureDrawable(int, Drawable).","final void setFeatureDrawableAlpha(int featureId, int alpha) Convenience for calling setFeatureDrawableAlpha(int, int).","final void setFeatureDrawableResource(int featureId, int resId) Convenience for calling setFeatureDrawableResource(int, int).","final void setFeatureDrawableUri(int featureId, Uri uri) Convenience for calling setFeatureDrawableUri(int, Uri).","void setOnCancelListener(DialogInterface.OnCancelListener listener) Set a listener to be invoked when the dialog is canceled.","void setOnDismissListener(DialogInterface.OnDismissListener listener) Set a listener to be invoked when the dialog is dismissed.","void setOnKeyListener(DialogInterface.OnKeyListener onKeyListener) Sets the callback that will be called if a key is dispatched to the dialog.","void setOnShowListener(DialogInterface.OnShowListener listener) Sets a listener to be invoked when the dialog is shown.","final void setOwnerActivity(Activity activity) Sets the Activity that owns this dialog.","void setTitle(int titleId) Set the title text for this dialog's window.","void setTitle(CharSequence title) Set the title text for this dialog's window.","final void setVolumeControlStream(int streamType) By default, this will use the owner Activity's suggested stream type.","void show() Start the dialog and display it on screen.","void takeKeyEvents(boolean get) Request that key events come to this dialog.","void unregisterForContextMenu(View view)","void onCreate(Bundle savedInstanceState) Similar to onCreate(Bundle), you should initialize your dialog in this method, including calling setContentView(View).","void onStart() Called when the dialog is starting.","void onStop() Called to tell you that you're stopping.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface android.content.DialogInterface abstract void cancel() abstract void dismiss()","abstract void cancel()","abstract void dismiss()","From interface android.view.KeyEvent.Callback abstract boolean onKeyDown(int keyCode, KeyEvent event) Called when a key down event has occurred. abstract boolean onKeyLongPress(int keyCode, KeyEvent event) Called when a long press has occurred. abstract boolean onKeyMultiple(int keyCode, int count, KeyEvent event) Called when multiple down/up pairs of the same key have occurred in a row. abstract boolean onKeyUp(int keyCode, KeyEvent event) Called when a key up event has occurred.","abstract boolean onKeyDown(int keyCode, KeyEvent event) Called when a key down event has occurred.","abstract boolean onKeyLongPress(int keyCode, KeyEvent event) Called when a long press has occurred.","abstract boolean onKeyMultiple(int keyCode, int count, KeyEvent event) Called when multiple down/up pairs of the same key have occurred in a row.","abstract boolean onKeyUp(int keyCode, KeyEvent event) Called when a key up event has occurred.","From interface android.view.View.OnCreateContextMenuListener abstract void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) Called when the context menu for this view is being built.","abstract void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) Called when the context menu for this view is being built.","From interface android.view.Window.Callback abstract boolean dispatchGenericMotionEvent(MotionEvent event) Called to process generic motion events. abstract boolean dispatchKeyEvent(KeyEvent event) Called to process key events. abstract boolean dispatchKeyShortcutEvent(KeyEvent event) Called to process a key shortcut event. abstract boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) Called to process population of AccessibilityEvents. abstract boolean dispatchTouchEvent(MotionEvent event) Called to process touch screen events. abstract boolean dispatchTrackballEvent(MotionEvent event) Called to process trackball events. abstract void onActionModeFinished(ActionMode mode) Called when an action mode has been finished. abstract void onActionModeStarted(ActionMode mode) Called when an action mode has been started. abstract void onAttachedToWindow() Called when the window has been attached to the window manager. abstract void onContentChanged() This hook is called whenever the content view of the screen changes (due to a call to Window.setContentView or Window.addContentView). abstract boolean onCreatePanelMenu(int featureId, Menu menu) Initialize the contents of the menu for panel 'featureId'. abstract View onCreatePanelView(int featureId) Instantiate the view to display in the panel for 'featureId'. abstract void onDetachedFromWindow() Called when the window has been attached to the window manager. abstract boolean onMenuItemSelected(int featureId, MenuItem item) Called when a panel's menu item has been selected by the user. abstract boolean onMenuOpened(int featureId, Menu menu) Called when a panel's menu is opened by the user. abstract void onPanelClosed(int featureId, Menu menu) Called when a panel is being closed. abstract boolean onPreparePanel(int featureId, View view, Menu menu) Prepare a panel to be displayed. abstract boolean onSearchRequested() Called when the user signals the desire to start a search. abstract void onWindowAttributesChanged(WindowManager.LayoutParams attrs) This is called whenever the current window attributes change. abstract void onWindowFocusChanged(boolean hasFocus) This hook is called whenever the window focus changes. abstract ActionMode onWindowStartingActionMode(ActionMode.Callback callback) Called when an action mode is being started for this window.","abstract boolean dispatchGenericMotionEvent(MotionEvent event) Called to process generic motion events.","abstract boolean dispatchKeyEvent(KeyEvent event) Called to process key events.","abstract boolean dispatchKeyShortcutEvent(KeyEvent event) Called to process a key shortcut event.","abstract boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) Called to process population of AccessibilityEvents.","abstract boolean dispatchTouchEvent(MotionEvent event) Called to process touch screen events.","abstract boolean dispatchTrackballEvent(MotionEvent event) Called to process trackball events.","abstract void onActionModeFinished(ActionMode mode) Called when an action mode has been finished.","abstract void onActionModeStarted(ActionMode mode) Called when an action mode has been started.","abstract void onAttachedToWindow() Called when the window has been attached to the window manager.","abstract void onContentChanged() This hook is called whenever the content view of the screen changes (due to a call to Window.setContentView or Window.addContentView).","abstract boolean onCreatePanelMenu(int featureId, Menu menu) Initialize the contents of the menu for panel 'featureId'.","abstract View onCreatePanelView(int featureId) Instantiate the view to display in the panel for 'featureId'.","abstract void onDetachedFromWindow() Called when the window has been attached to the window manager.","abstract boolean onMenuItemSelected(int featureId, MenuItem item) Called when a panel's menu item has been selected by the user.","abstract boolean onMenuOpened(int featureId, Menu menu) Called when a panel's menu is opened by the user.","abstract void onPanelClosed(int featureId, Menu menu) Called when a panel is being closed.","abstract boolean onPreparePanel(int featureId, View view, Menu menu) Prepare a panel to be displayed.","abstract boolean onSearchRequested() Called when the user signals the desire to start a search.","abstract void onWindowAttributesChanged(WindowManager.LayoutParams attrs) This is called whenever the current window attributes change.","abstract void onWindowFocusChanged(boolean hasFocus) This hook is called whenever the window focus changes.","abstract ActionMode onWindowStartingActionMode(ActionMode.Callback callback) Called when an action mode is being started for this window."],"package":"android.app","constants":["[Expand] Inherited Constants","From interface android.content.DialogInterface int BUTTON1 This constant was deprecated in API level 3. Use BUTTON_POSITIVE int BUTTON2 This constant was deprecated in API level 3. Use BUTTON_NEGATIVE int BUTTON3 This constant was deprecated in API level 3. Use BUTTON_NEUTRAL int BUTTON_NEGATIVE The identifier for the negative button. int BUTTON_NEUTRAL The identifier for the neutral button. int BUTTON_POSITIVE The identifier for the positive button.","int BUTTON1 This constant was deprecated in API level 3. Use BUTTON_POSITIVE","int BUTTON2 This constant was deprecated in API level 3. Use BUTTON_NEGATIVE","int BUTTON3 This constant was deprecated in API level 3. Use BUTTON_NEUTRAL","int BUTTON_NEGATIVE The identifier for the negative button.","int BUTTON_NEUTRAL The identifier for the neutral button.","int BUTTON_POSITIVE The identifier for the positive button."],"class":"Dialog","constructors":[],"fields":[]}