{"methods":["abstract Node adoptNode(Node source) Attempts to adopt a node from another document to this document.","abstract Attr createAttribute(String name) Creates an Attr of the given name.","abstract Attr createAttributeNS(String namespaceURI, String qualifiedName) Creates an attribute of the given qualified name and namespace URI.","abstract CDATASection createCDATASection(String data) Creates a CDATASection node whose value is the specified string.","abstract Comment createComment(String data) Creates a Comment node given the specified string.","abstract DocumentFragment createDocumentFragment() Creates an empty DocumentFragment object.","abstract Element createElement(String tagName) Creates an element of the type specified.","abstract Element createElementNS(String namespaceURI, String qualifiedName) Creates an element of the given qualified name and namespace URI.","abstract EntityReference createEntityReference(String name) Creates an EntityReference object.","abstract ProcessingInstruction createProcessingInstruction(String target, String data) Creates a ProcessingInstruction node given the specified name and data strings.","abstract Text createTextNode(String data) Creates a Text node given the specified string.","abstract DocumentType getDoctype() The Document Type Declaration (see DocumentType) associated with this document.","abstract Element getDocumentElement() This is a convenience attribute that allows direct access to the child node that is the document element of the document.","abstract String getDocumentURI() The location of the document or null if undefined or if the Document was created using DOMImplementation.createDocument.","abstract DOMConfiguration getDomConfig() The configuration used when Document.normalizeDocument() is invoked.","abstract Element getElementById(String elementId) Returns the Element that has an ID attribute with the given value.","abstract NodeList getElementsByTagName(String tagname) Returns a NodeList of all the Elements in document order with a given tag name and are contained in the document.","abstract NodeList getElementsByTagNameNS(String namespaceURI, String localName) Returns a NodeList of all the Elements with a given local name and namespace URI in document order.","abstract DOMImplementation getImplementation() The DOMImplementation object that handles this document.","abstract String getInputEncoding() An attribute specifying the encoding used for this document at the time of the parsing.","abstract boolean getStrictErrorChecking() An attribute specifying whether error checking is enforced or not.","abstract String getXmlEncoding() An attribute specifying, as part of the XML declaration, the encoding of this document.","abstract boolean getXmlStandalone() An attribute specifying, as part of the XML declaration, whether this document is standalone.","abstract String getXmlVersion() An attribute specifying, as part of the XML declaration, the version number of this document.","abstract Node importNode(Node importedNode, boolean deep) Imports a node from another document to this document, without altering or removing the source node from the original document; this method creates a new copy of the source node.","abstract void normalizeDocument() This method acts as if the document was going through a save and load cycle, putting the document in a \"normal\" form.","abstract Node renameNode(Node n, String namespaceURI, String qualifiedName) Rename an existing node of type ELEMENT_NODE or ATTRIBUTE_NODE.","abstract void setDocumentURI(String documentURI) The location of the document or null if undefined or if the Document was created using DOMImplementation.createDocument.","abstract void setStrictErrorChecking(boolean strictErrorChecking) An attribute specifying whether error checking is enforced or not.","abstract void setXmlStandalone(boolean xmlStandalone) An attribute specifying, as part of the XML declaration, whether this document is standalone.","abstract void setXmlVersion(String xmlVersion) An attribute specifying, as part of the XML declaration, the version number of this document.","[Expand] Inherited Methods","From interface org.w3c.dom.Node abstract Node appendChild(Node newChild) Adds the node newChild to the end of the list of children of this node. abstract Node cloneNode(boolean deep) Returns a duplicate of this node, i.e., serves as a generic copy constructor for nodes. abstract short compareDocumentPosition(Node other) Compares the reference node, i.e. abstract NamedNodeMap getAttributes() A NamedNodeMap containing the attributes of this node (if it is an Element) or null otherwise. abstract String getBaseURI() The absolute base URI of this node or null if the implementation wasn't able to obtain an absolute URI. abstract NodeList getChildNodes() A NodeList that contains all children of this node. abstract Object getFeature(String feature, String version) This method returns a specialized object which implements the specialized APIs of the specified feature and version, as specified in . abstract Node getFirstChild() The first child of this node. abstract Node getLastChild() The last child of this node. abstract String getLocalName() Returns the local part of the qualified name of this node. abstract String getNamespaceURI() The namespace URI of this node, or null if it is unspecified (see ). abstract Node getNextSibling() The node immediately following this node. abstract String getNodeName() The name of this node, depending on its type; see the table above. abstract short getNodeType() A code representing the type of the underlying object, as defined above. abstract String getNodeValue() The value of this node, depending on its type; see the table above. abstract Document getOwnerDocument() The Document object associated with this node. abstract Node getParentNode() The parent of this node. abstract String getPrefix() The namespace prefix of this node, or null if it is unspecified. abstract Node getPreviousSibling() The node immediately preceding this node. abstract String getTextContent() This attribute returns the text content of this node and its descendants. abstract Object getUserData(String key) Retrieves the object associated to a key on a this node. abstract boolean hasAttributes() Returns whether this node (if it is an element) has any attributes. abstract boolean hasChildNodes() Returns whether this node has any children. abstract Node insertBefore(Node newChild, Node refChild) Inserts the node newChild before the existing child node refChild. abstract boolean isDefaultNamespace(String namespaceURI) This method checks if the specified namespaceURI is the default namespace or not. abstract boolean isEqualNode(Node arg) Tests whether two nodes are equal. abstract boolean isSameNode(Node other) Returns whether this node is the same node as the given one. abstract boolean isSupported(String feature, String version) Tests whether the DOM implementation implements a specific feature and that feature is supported by this node, as specified in . abstract String lookupNamespaceURI(String prefix) Look up the namespace URI associated to the given prefix, starting from this node. abstract String lookupPrefix(String namespaceURI) Look up the prefix associated to the given namespace URI, starting from this node. abstract void normalize() Puts all Text nodes in the full depth of the sub-tree underneath this Node, including attribute nodes, into a \"normal\" form where only structure (e.g., elements, comments, processing instructions, CDATA sections, and entity references) separates Text nodes, i.e., there are neither adjacent Text nodes nor empty Text nodes. abstract Node removeChild(Node oldChild) Removes the child node indicated by oldChild from the list of children, and returns it. abstract Node replaceChild(Node newChild, Node oldChild) Replaces the child node oldChild with newChild in the list of children, and returns the oldChild node. abstract void setNodeValue(String nodeValue) The value of this node, depending on its type; see the table above. abstract void setPrefix(String prefix) The namespace prefix of this node, or null if it is unspecified. abstract void setTextContent(String textContent) This attribute returns the text content of this node and its descendants. abstract Object setUserData(String key, Object data, UserDataHandler handler) Associate an object to a key on this node.","abstract Node appendChild(Node newChild) Adds the node newChild to the end of the list of children of this node.","abstract Node cloneNode(boolean deep) Returns a duplicate of this node, i.e., serves as a generic copy constructor for nodes.","abstract short compareDocumentPosition(Node other) Compares the reference node, i.e.","abstract NamedNodeMap getAttributes() A NamedNodeMap containing the attributes of this node (if it is an Element) or null otherwise.","abstract String getBaseURI() The absolute base URI of this node or null if the implementation wasn't able to obtain an absolute URI.","abstract NodeList getChildNodes() A NodeList that contains all children of this node.","abstract Object getFeature(String feature, String version) This method returns a specialized object which implements the specialized APIs of the specified feature and version, as specified in .","abstract Node getFirstChild() The first child of this node.","abstract Node getLastChild() The last child of this node.","abstract String getLocalName() Returns the local part of the qualified name of this node.","abstract String getNamespaceURI() The namespace URI of this node, or null if it is unspecified (see ).","abstract Node getNextSibling() The node immediately following this node.","abstract String getNodeName() The name of this node, depending on its type; see the table above.","abstract short getNodeType() A code representing the type of the underlying object, as defined above.","abstract String getNodeValue() The value of this node, depending on its type; see the table above.","abstract Document getOwnerDocument() The Document object associated with this node.","abstract Node getParentNode() The parent of this node.","abstract String getPrefix() The namespace prefix of this node, or null if it is unspecified.","abstract Node getPreviousSibling() The node immediately preceding this node.","abstract String getTextContent() This attribute returns the text content of this node and its descendants.","abstract Object getUserData(String key) Retrieves the object associated to a key on a this node.","abstract boolean hasAttributes() Returns whether this node (if it is an element) has any attributes.","abstract boolean hasChildNodes() Returns whether this node has any children.","abstract Node insertBefore(Node newChild, Node refChild) Inserts the node newChild before the existing child node refChild.","abstract boolean isDefaultNamespace(String namespaceURI) This method checks if the specified namespaceURI is the default namespace or not.","abstract boolean isEqualNode(Node arg) Tests whether two nodes are equal.","abstract boolean isSameNode(Node other) Returns whether this node is the same node as the given one.","abstract boolean isSupported(String feature, String version) Tests whether the DOM implementation implements a specific feature and that feature is supported by this node, as specified in .","abstract String lookupNamespaceURI(String prefix) Look up the namespace URI associated to the given prefix, starting from this node.","abstract String lookupPrefix(String namespaceURI) Look up the prefix associated to the given namespace URI, starting from this node.","abstract void normalize() Puts all Text nodes in the full depth of the sub-tree underneath this Node, including attribute nodes, into a \"normal\" form where only structure (e.g., elements, comments, processing instructions, CDATA sections, and entity references) separates Text nodes, i.e., there are neither adjacent Text nodes nor empty Text nodes.","abstract Node removeChild(Node oldChild) Removes the child node indicated by oldChild from the list of children, and returns it.","abstract Node replaceChild(Node newChild, Node oldChild) Replaces the child node oldChild with newChild in the list of children, and returns the oldChild node.","abstract void setNodeValue(String nodeValue) The value of this node, depending on its type; see the table above.","abstract void setPrefix(String prefix) The namespace prefix of this node, or null if it is unspecified.","abstract void setTextContent(String textContent) This attribute returns the text content of this node and its descendants.","abstract Object setUserData(String key, Object data, UserDataHandler handler) Associate an object to a key on this node."],"package":"org.w3c.dom","constants":["[Expand] Inherited Constants","From interface org.w3c.dom.Node short ATTRIBUTE_NODE The node is an Attr. short CDATA_SECTION_NODE The node is a CDATASection. short COMMENT_NODE The node is a Comment. short DOCUMENT_FRAGMENT_NODE The node is a DocumentFragment. short DOCUMENT_NODE The node is a Document. short DOCUMENT_POSITION_CONTAINED_BY The node is contained by the reference node. short DOCUMENT_POSITION_CONTAINS The node contains the reference node. short DOCUMENT_POSITION_DISCONNECTED The two nodes are disconnected. short DOCUMENT_POSITION_FOLLOWING The node follows the reference node. short DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC The determination of preceding versus following is implementation-specific. short DOCUMENT_POSITION_PRECEDING The second node precedes the reference node. short DOCUMENT_TYPE_NODE The node is a DocumentType. short ELEMENT_NODE The node is an Element. short ENTITY_NODE The node is an Entity. short ENTITY_REFERENCE_NODE The node is an EntityReference. short NOTATION_NODE The node is a Notation. short PROCESSING_INSTRUCTION_NODE The node is a ProcessingInstruction. short TEXT_NODE The node is a Text node.","short ATTRIBUTE_NODE The node is an Attr.","short CDATA_SECTION_NODE The node is a CDATASection.","short COMMENT_NODE The node is a Comment.","short DOCUMENT_FRAGMENT_NODE The node is a DocumentFragment.","short DOCUMENT_NODE The node is a Document.","short DOCUMENT_POSITION_CONTAINED_BY The node is contained by the reference node.","short DOCUMENT_POSITION_CONTAINS The node contains the reference node.","short DOCUMENT_POSITION_DISCONNECTED The two nodes are disconnected.","short DOCUMENT_POSITION_FOLLOWING The node follows the reference node.","short DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC The determination of preceding versus following is implementation-specific.","short DOCUMENT_POSITION_PRECEDING The second node precedes the reference node.","short DOCUMENT_TYPE_NODE The node is a DocumentType.","short ELEMENT_NODE The node is an Element.","short ENTITY_NODE The node is an Entity.","short ENTITY_REFERENCE_NODE The node is an EntityReference.","short NOTATION_NODE The node is a Notation.","short PROCESSING_INSTRUCTION_NODE The node is a ProcessingInstruction.","short TEXT_NODE The node is a Text node."],"class":"Document","constructors":[],"fields":[]}