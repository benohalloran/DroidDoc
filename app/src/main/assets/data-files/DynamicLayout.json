{"methods":["int getBottomPadding() Returns the number of extra pixels of descent padding in the bottom line of the Layout.","int getEllipsisCount(int line) Returns the number of characters to be ellipsized away, or 0 if no ellipsis is to take place.","int getEllipsisStart(int line) Return the offset of the first character to be ellipsized away, relative to the start of the line.","int getEllipsizedWidth() Return the width to which this Layout is ellipsizing, or getWidth() if it is not doing anything special.","boolean getLineContainsTab(int line) Returns whether the specified line contains one or more characters that need to be handled specially, like tabs or emoji.","int getLineCount() Return the number of lines of text in this layout.","int getLineDescent(int line) Return the descent of the specified line(0\u2026getLineCount() - 1).","final Layout.Directions getLineDirections(int line) Returns the directional run information for the specified line.","int getLineStart(int line) Return the text offset of the beginning of the specified line ( 0\u2026getLineCount()).","int getLineTop(int line) Return the vertical position of the top of the specified line (0\u2026getLineCount()).","int getParagraphDirection(int line) Returns the primary directionality of the paragraph containing the specified line, either 1 for left-to-right lines, or -1 for right-to-left lines (see DIR_LEFT_TO_RIGHT, DIR_RIGHT_TO_LEFT).","int getTopPadding() Returns the (negative) number of extra pixels of ascent padding in the top line of the Layout.","[Expand] Inherited Methods","From class android.text.Layout void draw(Canvas c) Draw this Layout on the specified Canvas. void draw(Canvas canvas, Path highlight, Paint highlightPaint, int cursorOffsetVertical) Draw this Layout on the specified canvas, with the highlight path drawn between the background and the text. final Layout.Alignment getAlignment() Return the base alignment of this layout. abstract int getBottomPadding() Returns the number of extra pixels of descent padding in the bottom line of the Layout. void getCursorPath(int point, Path dest, CharSequence editingBuffer) Fills in the specified Path with a representation of a cursor at the specified offset. static float getDesiredWidth(CharSequence source, int start, int end, TextPaint paint) Return how wide a layout must be in order to display the specified text slice with one line per paragraph. static float getDesiredWidth(CharSequence source, TextPaint paint) Return how wide a layout must be in order to display the specified text with one line per paragraph. abstract int getEllipsisCount(int line) Returns the number of characters to be ellipsized away, or 0 if no ellipsis is to take place. abstract int getEllipsisStart(int line) Return the offset of the first character to be ellipsized away, relative to the start of the line. int getEllipsizedWidth() Return the width to which this Layout is ellipsizing, or getWidth() if it is not doing anything special. int getHeight() Return the total height of this layout. final int getLineAscent(int line) Get the ascent of the text on the specified line. final int getLineBaseline(int line) Return the vertical position of the baseline of the specified line. final int getLineBottom(int line) Return the vertical position of the bottom of the specified line. int getLineBounds(int line, Rect bounds) Return the baseline for the specified line (0\u2026getLineCount() - 1) If bounds is not null, return the top, left, right, bottom extents of the specified line in it. abstract boolean getLineContainsTab(int line) Returns whether the specified line contains one or more characters that need to be handled specially, like tabs or emoji. abstract int getLineCount() Return the number of lines of text in this layout. abstract int getLineDescent(int line) Return the descent of the specified line(0\u2026getLineCount() - 1). abstract Layout.Directions getLineDirections(int line) Returns the directional run information for the specified line. final int getLineEnd(int line) Return the text offset after the last character on the specified line. int getLineForOffset(int offset) Get the line number on which the specified text offset appears. int getLineForVertical(int vertical) Get the line number corresponding to the specified vertical position. float getLineLeft(int line) Get the leftmost position that should be exposed for horizontal scrolling on the specified line. float getLineMax(int line) Gets the unsigned horizontal extent of the specified line, including leading margin indent, but excluding trailing whitespace. float getLineRight(int line) Get the rightmost position that should be exposed for horizontal scrolling on the specified line. abstract int getLineStart(int line) Return the text offset of the beginning of the specified line ( 0\u2026getLineCount()). abstract int getLineTop(int line) Return the vertical position of the top of the specified line (0\u2026getLineCount()). int getLineVisibleEnd(int line) Return the text offset after the last visible character (so whitespace is not counted) on the specified line. float getLineWidth(int line) Gets the unsigned horizontal extent of the specified line, including leading margin indent and trailing whitespace. int getOffsetForHorizontal(int line, float horiz) Get the character offset on the specified line whose position is closest to the specified horizontal position. int getOffsetToLeftOf(int offset) int getOffsetToRightOf(int offset) final TextPaint getPaint() Return the base Paint properties for this layout. final Layout.Alignment getParagraphAlignment(int line) Get the alignment of the specified paragraph, taking into account markup attached to it. abstract int getParagraphDirection(int line) Returns the primary directionality of the paragraph containing the specified line, either 1 for left-to-right lines, or -1 for right-to-left lines (see DIR_LEFT_TO_RIGHT, DIR_RIGHT_TO_LEFT). final int getParagraphLeft(int line) Get the left edge of the specified paragraph, inset by left margins. final int getParagraphRight(int line) Get the right edge of the specified paragraph, inset by right margins. float getPrimaryHorizontal(int offset) Get the primary horizontal position for the specified text offset. float getSecondaryHorizontal(int offset) Get the secondary horizontal position for the specified text offset. void getSelectionPath(int start, int end, Path dest) Fills in the specified Path with a representation of a highlight between the specified offsets. final float getSpacingAdd() Return the number of units of leading that are added to each line. final float getSpacingMultiplier() Return what the text height is multiplied by to get the line height. final CharSequence getText() Return the text that is displayed by this Layout. abstract int getTopPadding() Returns the (negative) number of extra pixels of ascent padding in the top line of the Layout. final int getWidth() Return the width of this layout. final void increaseWidthTo(int wid) Increase the width of this layout to the specified width. boolean isRtlCharAt(int offset) Returns true if the character at offset is right to left (RTL). final boolean isSpanned()","void draw(Canvas c) Draw this Layout on the specified Canvas.","void draw(Canvas canvas, Path highlight, Paint highlightPaint, int cursorOffsetVertical) Draw this Layout on the specified canvas, with the highlight path drawn between the background and the text.","final Layout.Alignment getAlignment() Return the base alignment of this layout.","abstract int getBottomPadding() Returns the number of extra pixels of descent padding in the bottom line of the Layout.","void getCursorPath(int point, Path dest, CharSequence editingBuffer) Fills in the specified Path with a representation of a cursor at the specified offset.","static float getDesiredWidth(CharSequence source, int start, int end, TextPaint paint) Return how wide a layout must be in order to display the specified text slice with one line per paragraph.","static float getDesiredWidth(CharSequence source, TextPaint paint) Return how wide a layout must be in order to display the specified text with one line per paragraph.","abstract int getEllipsisCount(int line) Returns the number of characters to be ellipsized away, or 0 if no ellipsis is to take place.","abstract int getEllipsisStart(int line) Return the offset of the first character to be ellipsized away, relative to the start of the line.","int getEllipsizedWidth() Return the width to which this Layout is ellipsizing, or getWidth() if it is not doing anything special.","int getHeight() Return the total height of this layout.","final int getLineAscent(int line) Get the ascent of the text on the specified line.","final int getLineBaseline(int line) Return the vertical position of the baseline of the specified line.","final int getLineBottom(int line) Return the vertical position of the bottom of the specified line.","int getLineBounds(int line, Rect bounds) Return the baseline for the specified line (0\u2026getLineCount() - 1) If bounds is not null, return the top, left, right, bottom extents of the specified line in it.","abstract boolean getLineContainsTab(int line) Returns whether the specified line contains one or more characters that need to be handled specially, like tabs or emoji.","abstract int getLineCount() Return the number of lines of text in this layout.","abstract int getLineDescent(int line) Return the descent of the specified line(0\u2026getLineCount() - 1).","abstract Layout.Directions getLineDirections(int line) Returns the directional run information for the specified line.","final int getLineEnd(int line) Return the text offset after the last character on the specified line.","int getLineForOffset(int offset) Get the line number on which the specified text offset appears.","int getLineForVertical(int vertical) Get the line number corresponding to the specified vertical position.","float getLineLeft(int line) Get the leftmost position that should be exposed for horizontal scrolling on the specified line.","float getLineMax(int line) Gets the unsigned horizontal extent of the specified line, including leading margin indent, but excluding trailing whitespace.","float getLineRight(int line) Get the rightmost position that should be exposed for horizontal scrolling on the specified line.","abstract int getLineStart(int line) Return the text offset of the beginning of the specified line ( 0\u2026getLineCount()).","abstract int getLineTop(int line) Return the vertical position of the top of the specified line (0\u2026getLineCount()).","int getLineVisibleEnd(int line) Return the text offset after the last visible character (so whitespace is not counted) on the specified line.","float getLineWidth(int line) Gets the unsigned horizontal extent of the specified line, including leading margin indent and trailing whitespace.","int getOffsetForHorizontal(int line, float horiz) Get the character offset on the specified line whose position is closest to the specified horizontal position.","int getOffsetToLeftOf(int offset)","int getOffsetToRightOf(int offset)","final TextPaint getPaint() Return the base Paint properties for this layout.","final Layout.Alignment getParagraphAlignment(int line) Get the alignment of the specified paragraph, taking into account markup attached to it.","abstract int getParagraphDirection(int line) Returns the primary directionality of the paragraph containing the specified line, either 1 for left-to-right lines, or -1 for right-to-left lines (see DIR_LEFT_TO_RIGHT, DIR_RIGHT_TO_LEFT).","final int getParagraphLeft(int line) Get the left edge of the specified paragraph, inset by left margins.","final int getParagraphRight(int line) Get the right edge of the specified paragraph, inset by right margins.","float getPrimaryHorizontal(int offset) Get the primary horizontal position for the specified text offset.","float getSecondaryHorizontal(int offset) Get the secondary horizontal position for the specified text offset.","void getSelectionPath(int start, int end, Path dest) Fills in the specified Path with a representation of a highlight between the specified offsets.","final float getSpacingAdd() Return the number of units of leading that are added to each line.","final float getSpacingMultiplier() Return what the text height is multiplied by to get the line height.","final CharSequence getText() Return the text that is displayed by this Layout.","abstract int getTopPadding() Returns the (negative) number of extra pixels of ascent padding in the top line of the Layout.","final int getWidth() Return the width of this layout.","final void increaseWidthTo(int wid) Increase the width of this layout to the specified width.","boolean isRtlCharAt(int offset) Returns true if the character at offset is right to left (RTL).","final boolean isSpanned()","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.text","constants":["[Expand] Inherited Constants","From class android.text.Layout int DIR_LEFT_TO_RIGHT int DIR_RIGHT_TO_LEFT","int DIR_LEFT_TO_RIGHT","int DIR_RIGHT_TO_LEFT"],"class":"DynamicLayout","constructors":[],"fields":[]}