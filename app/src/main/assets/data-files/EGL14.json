{"methods":["static boolean eglBindAPI(int api)","static boolean eglBindTexImage(EGLDisplay dpy, EGLSurface surface, int buffer)","static boolean eglChooseConfig(EGLDisplay dpy, int[] attrib_list, int attrib_listOffset, EGLConfig[] configs, int configsOffset, int config_size, int[] num_config, int num_configOffset)","static boolean eglCopyBuffers(EGLDisplay dpy, EGLSurface surface, int target)","static EGLContext eglCreateContext(EGLDisplay dpy, EGLConfig config, EGLContext share_context, int[] attrib_list, int offset)","static EGLSurface eglCreatePbufferFromClientBuffer(EGLDisplay dpy, int buftype, int buffer, EGLConfig config, int[] attrib_list, int offset)","static EGLSurface eglCreatePbufferSurface(EGLDisplay dpy, EGLConfig config, int[] attrib_list, int offset)","static EGLSurface eglCreatePixmapSurface(EGLDisplay dpy, EGLConfig config, int pixmap, int[] attrib_list, int offset)","static EGLSurface eglCreateWindowSurface(EGLDisplay dpy, EGLConfig config, Object win, int[] attrib_list, int offset)","static boolean eglDestroyContext(EGLDisplay dpy, EGLContext ctx)","static boolean eglDestroySurface(EGLDisplay dpy, EGLSurface surface)","static boolean eglGetConfigAttrib(EGLDisplay dpy, EGLConfig config, int attribute, int[] value, int offset)","static boolean eglGetConfigs(EGLDisplay dpy, EGLConfig[] configs, int configsOffset, int config_size, int[] num_config, int num_configOffset)","static EGLContext eglGetCurrentContext()","static EGLDisplay eglGetCurrentDisplay()","static EGLSurface eglGetCurrentSurface(int readdraw)","static EGLDisplay eglGetDisplay(int display_id)","static int eglGetError()","static boolean eglInitialize(EGLDisplay dpy, int[] major, int majorOffset, int[] minor, int minorOffset)","static boolean eglMakeCurrent(EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx)","static int eglQueryAPI()","static boolean eglQueryContext(EGLDisplay dpy, EGLContext ctx, int attribute, int[] value, int offset)","static String eglQueryString(EGLDisplay dpy, int name)","static boolean eglQuerySurface(EGLDisplay dpy, EGLSurface surface, int attribute, int[] value, int offset)","static boolean eglReleaseTexImage(EGLDisplay dpy, EGLSurface surface, int buffer)","static boolean eglReleaseThread()","static boolean eglSurfaceAttrib(EGLDisplay dpy, EGLSurface surface, int attribute, int value)","static boolean eglSwapBuffers(EGLDisplay dpy, EGLSurface surface)","static boolean eglSwapInterval(EGLDisplay dpy, int interval)","static boolean eglTerminate(EGLDisplay dpy)","static boolean eglWaitClient()","static boolean eglWaitGL()","static boolean eglWaitNative(int engine)","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.opengl","constants":["int EGL_ALPHA_MASK_SIZE","int EGL_ALPHA_SIZE","int EGL_BACK_BUFFER","int EGL_BAD_ACCESS","int EGL_BAD_ALLOC","int EGL_BAD_ATTRIBUTE","int EGL_BAD_CONFIG","int EGL_BAD_CONTEXT","int EGL_BAD_CURRENT_SURFACE","int EGL_BAD_DISPLAY","int EGL_BAD_MATCH","int EGL_BAD_NATIVE_PIXMAP","int EGL_BAD_NATIVE_WINDOW","int EGL_BAD_PARAMETER","int EGL_BAD_SURFACE","int EGL_BIND_TO_TEXTURE_RGB","int EGL_BIND_TO_TEXTURE_RGBA","int EGL_BLUE_SIZE","int EGL_BUFFER_DESTROYED","int EGL_BUFFER_PRESERVED","int EGL_BUFFER_SIZE","int EGL_CLIENT_APIS","int EGL_COLOR_BUFFER_TYPE","int EGL_CONFIG_CAVEAT","int EGL_CONFIG_ID","int EGL_CONFORMANT","int EGL_CONTEXT_CLIENT_TYPE","int EGL_CONTEXT_CLIENT_VERSION","int EGL_CONTEXT_LOST","int EGL_CORE_NATIVE_ENGINE","int EGL_DEFAULT_DISPLAY","int EGL_DEPTH_SIZE","int EGL_DISPLAY_SCALING","int EGL_DRAW","int EGL_EXTENSIONS","int EGL_FALSE","int EGL_GREEN_SIZE","int EGL_HEIGHT","int EGL_HORIZONTAL_RESOLUTION","int EGL_LARGEST_PBUFFER","int EGL_LEVEL","int EGL_LUMINANCE_BUFFER","int EGL_LUMINANCE_SIZE","int EGL_MATCH_NATIVE_PIXMAP","int EGL_MAX_PBUFFER_HEIGHT","int EGL_MAX_PBUFFER_PIXELS","int EGL_MAX_PBUFFER_WIDTH","int EGL_MAX_SWAP_INTERVAL","int EGL_MIN_SWAP_INTERVAL","int EGL_MIPMAP_LEVEL","int EGL_MIPMAP_TEXTURE","int EGL_MULTISAMPLE_RESOLVE","int EGL_MULTISAMPLE_RESOLVE_BOX","int EGL_MULTISAMPLE_RESOLVE_BOX_BIT","int EGL_MULTISAMPLE_RESOLVE_DEFAULT","int EGL_NATIVE_RENDERABLE","int EGL_NATIVE_VISUAL_ID","int EGL_NATIVE_VISUAL_TYPE","int EGL_NONE","int EGL_NON_CONFORMANT_CONFIG","int EGL_NOT_INITIALIZED","int EGL_NO_TEXTURE","int EGL_OPENGL_API","int EGL_OPENGL_BIT","int EGL_OPENGL_ES2_BIT","int EGL_OPENGL_ES_API","int EGL_OPENGL_ES_BIT","int EGL_OPENVG_API","int EGL_OPENVG_BIT","int EGL_OPENVG_IMAGE","int EGL_PBUFFER_BIT","int EGL_PIXEL_ASPECT_RATIO","int EGL_PIXMAP_BIT","int EGL_READ","int EGL_RED_SIZE","int EGL_RENDERABLE_TYPE","int EGL_RENDER_BUFFER","int EGL_RGB_BUFFER","int EGL_SAMPLES","int EGL_SAMPLE_BUFFERS","int EGL_SINGLE_BUFFER","int EGL_SLOW_CONFIG","int EGL_STENCIL_SIZE","int EGL_SUCCESS","int EGL_SURFACE_TYPE","int EGL_SWAP_BEHAVIOR","int EGL_SWAP_BEHAVIOR_PRESERVED_BIT","int EGL_TEXTURE_2D","int EGL_TEXTURE_FORMAT","int EGL_TEXTURE_RGB","int EGL_TEXTURE_RGBA","int EGL_TEXTURE_TARGET","int EGL_TRANSPARENT_BLUE_VALUE","int EGL_TRANSPARENT_GREEN_VALUE","int EGL_TRANSPARENT_RED_VALUE","int EGL_TRANSPARENT_RGB","int EGL_TRANSPARENT_TYPE","int EGL_TRUE","int EGL_VENDOR","int EGL_VERSION","int EGL_VERTICAL_RESOLUTION","int EGL_VG_ALPHA_FORMAT","int EGL_VG_ALPHA_FORMAT_NONPRE","int EGL_VG_ALPHA_FORMAT_PRE","int EGL_VG_ALPHA_FORMAT_PRE_BIT","int EGL_VG_COLORSPACE","int EGL_VG_COLORSPACE_LINEAR","int EGL_VG_COLORSPACE_LINEAR_BIT","int EGL_VG_COLORSPACE_sRGB","int EGL_WIDTH","int EGL_WINDOW_BIT"],"class":"EGL14","constructors":[],"fields":["public static EGLContext EGL_NO_CONTEXT","public static EGLDisplay EGL_NO_DISPLAY","public static EGLSurface EGL_NO_SURFACE"]}