{"methods":["int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation.","void dump(Printer pw, String prefix) Write debug output of this object.","final void makeCompatible(int targetSdkVersion) Ensure that the data in this EditorInfo is compatible with an application that was developed against the given target API version.","void writeToParcel(Parcel dest, int flags) Used to package this object into a Parcel.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface android.os.Parcelable abstract int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation. abstract void writeToParcel(Parcel dest, int flags) Flatten this object in to a Parcel.","abstract int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation.","abstract void writeToParcel(Parcel dest, int flags) Flatten this object in to a Parcel."],"package":"android.view.inputmethod","constants":["int IME_ACTION_DONE Bits of IME_MASK_ACTION: the action key performs a \"done\" operation, typically meaning there is nothing more to input and the IME will be closed.","int IME_ACTION_GO Bits of IME_MASK_ACTION: the action key performs a \"go\" operation to take the user to the target of the text they typed.","int IME_ACTION_NEXT Bits of IME_MASK_ACTION: the action key performs a \"next\" operation, taking the user to the next field that will accept text.","int IME_ACTION_NONE Bits of IME_MASK_ACTION: there is no available action.","int IME_ACTION_PREVIOUS Bits of IME_MASK_ACTION: like IME_ACTION_NEXT, but for moving to the previous field.","int IME_ACTION_SEARCH Bits of IME_MASK_ACTION: the action key performs a \"search\" operation, taking the user to the results of searching for the text they have typed (in whatever context is appropriate).","int IME_ACTION_SEND Bits of IME_MASK_ACTION: the action key performs a \"send\" operation, delivering the text to its target.","int IME_ACTION_UNSPECIFIED Bits of IME_MASK_ACTION: no specific action has been associated with this editor, let the editor come up with its own if it can.","int IME_FLAG_FORCE_ASCII Flag of imeOptions: used to request an IME that is capable of inputting ASCII characters.","int IME_FLAG_NAVIGATE_NEXT Flag of imeOptions: used to specify that there is something interesting that a forward navigation can focus on.","int IME_FLAG_NAVIGATE_PREVIOUS Flag of imeOptions: like IME_FLAG_NAVIGATE_NEXT, but specifies there is something interesting that a backward navigation can focus on.","int IME_FLAG_NO_ACCESSORY_ACTION Flag of imeOptions: used in conjunction with one of the actions masked by IME_MASK_ACTION, this indicates that the action should not be available as an accessory button on the right of the extracted text when the input method is full-screen.","int IME_FLAG_NO_ENTER_ACTION Flag of imeOptions: used in conjunction with one of the actions masked by IME_MASK_ACTION.","int IME_FLAG_NO_EXTRACT_UI Flag of imeOptions: used to specify that the IME does not need to show its extracted text UI.","int IME_FLAG_NO_FULLSCREEN Flag of imeOptions: used to request that the IME never go into fullscreen mode.","int IME_MASK_ACTION Set of bits in imeOptions that provide alternative actions associated with the \"enter\" key.","int IME_NULL Generic unspecified type for imeOptions.","[Expand] Inherited Constants","From interface android.os.Parcelable int CONTENTS_FILE_DESCRIPTOR Bit masks for use with describeContents(): each bit represents a kind of object considered to have potential special significance when marshalled. int PARCELABLE_WRITE_RETURN_VALUE Flag for use with writeToParcel(Parcel, int): the object being written is a return value, that is the result of a function such as \"Parcelable someFunction()\", \"void someFunction(out Parcelable)\", or \"void someFunction(inout Parcelable)\".","int CONTENTS_FILE_DESCRIPTOR Bit masks for use with describeContents(): each bit represents a kind of object considered to have potential special significance when marshalled.","int PARCELABLE_WRITE_RETURN_VALUE Flag for use with writeToParcel(Parcel, int): the object being written is a return value, that is the result of a function such as \"Parcelable someFunction()\", \"void someFunction(out Parcelable)\", or \"void someFunction(inout Parcelable)\".","From interface android.text.InputType int TYPE_CLASS_DATETIME Class for dates and times. int TYPE_CLASS_NUMBER Class for numeric text. int TYPE_CLASS_PHONE Class for a phone number. int TYPE_CLASS_TEXT Class for normal text. int TYPE_DATETIME_VARIATION_DATE Default variation of TYPE_CLASS_DATETIME: allows entering only a date. int TYPE_DATETIME_VARIATION_NORMAL Default variation of TYPE_CLASS_DATETIME: allows entering both a date and time. int TYPE_DATETIME_VARIATION_TIME Default variation of TYPE_CLASS_DATETIME: allows entering only a time. int TYPE_MASK_CLASS Mask of bits that determine the overall class of text being given. int TYPE_MASK_FLAGS Mask of bits that provide addition bit flags of options. int TYPE_MASK_VARIATION Mask of bits that determine the variation of the base content class. int TYPE_NULL Special content type for when no explicit type has been specified. int TYPE_NUMBER_FLAG_DECIMAL Flag of TYPE_CLASS_NUMBER: the number is decimal, allowing a decimal point to provide fractional values. int TYPE_NUMBER_FLAG_SIGNED Flag of TYPE_CLASS_NUMBER: the number is signed, allowing a positive or negative sign at the start. int TYPE_NUMBER_VARIATION_NORMAL Default variation of TYPE_CLASS_NUMBER: plain normal numeric text. int TYPE_NUMBER_VARIATION_PASSWORD Variation of TYPE_CLASS_NUMBER: entering a numeric password. int TYPE_TEXT_FLAG_AUTO_COMPLETE Flag for TYPE_CLASS_TEXT: the text editor (which means the application) is performing auto-completion of the text being entered based on its own semantics, which it will present to the user as they type. int TYPE_TEXT_FLAG_AUTO_CORRECT Flag for TYPE_CLASS_TEXT: the user is entering free-form text that should have auto-correction applied to it. int TYPE_TEXT_FLAG_CAP_CHARACTERS Flag for TYPE_CLASS_TEXT: capitalize all characters. int TYPE_TEXT_FLAG_CAP_SENTENCES Flag for TYPE_CLASS_TEXT: capitalize the first character of each sentence. int TYPE_TEXT_FLAG_CAP_WORDS Flag for TYPE_CLASS_TEXT: capitalize the first character of every word. int TYPE_TEXT_FLAG_IME_MULTI_LINE Flag for TYPE_CLASS_TEXT: the regular text view associated with this should not be multi-line, but when a fullscreen input method is providing text it should use multiple lines if it can. int TYPE_TEXT_FLAG_MULTI_LINE Flag for TYPE_CLASS_TEXT: multiple lines of text can be entered into the field. int TYPE_TEXT_FLAG_NO_SUGGESTIONS Flag for TYPE_CLASS_TEXT: the input method does not need to display any dictionary-based candidates. int TYPE_TEXT_VARIATION_EMAIL_ADDRESS Variation of TYPE_CLASS_TEXT: entering an e-mail address. int TYPE_TEXT_VARIATION_EMAIL_SUBJECT Variation of TYPE_CLASS_TEXT: entering the subject line of an e-mail. int TYPE_TEXT_VARIATION_FILTER Variation of TYPE_CLASS_TEXT: entering text to filter contents of a list etc. int TYPE_TEXT_VARIATION_LONG_MESSAGE Variation of TYPE_CLASS_TEXT: entering the content of a long, possibly formal message such as the body of an e-mail. int TYPE_TEXT_VARIATION_NORMAL Default variation of TYPE_CLASS_TEXT: plain old normal text. int TYPE_TEXT_VARIATION_PASSWORD Variation of TYPE_CLASS_TEXT: entering a password. int TYPE_TEXT_VARIATION_PERSON_NAME Variation of TYPE_CLASS_TEXT: entering the name of a person. int TYPE_TEXT_VARIATION_PHONETIC Variation of TYPE_CLASS_TEXT: entering text for phonetic pronunciation, such as a phonetic name field in contacts. int TYPE_TEXT_VARIATION_POSTAL_ADDRESS Variation of TYPE_CLASS_TEXT: entering a postal mailing address. int TYPE_TEXT_VARIATION_SHORT_MESSAGE Variation of TYPE_CLASS_TEXT: entering a short, possibly informal message such as an instant message or a text message. int TYPE_TEXT_VARIATION_URI Variation of TYPE_CLASS_TEXT: entering a URI. int TYPE_TEXT_VARIATION_VISIBLE_PASSWORD Variation of TYPE_CLASS_TEXT: entering a password, which should be visible to the user. int TYPE_TEXT_VARIATION_WEB_EDIT_TEXT Variation of TYPE_CLASS_TEXT: entering text inside of a web form. int TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS Variation of TYPE_CLASS_TEXT: entering e-mail address inside of a web form. int TYPE_TEXT_VARIATION_WEB_PASSWORD Variation of TYPE_CLASS_TEXT: entering password inside of a web form.","int TYPE_CLASS_DATETIME Class for dates and times.","int TYPE_CLASS_NUMBER Class for numeric text.","int TYPE_CLASS_PHONE Class for a phone number.","int TYPE_CLASS_TEXT Class for normal text.","int TYPE_DATETIME_VARIATION_DATE Default variation of TYPE_CLASS_DATETIME: allows entering only a date.","int TYPE_DATETIME_VARIATION_NORMAL Default variation of TYPE_CLASS_DATETIME: allows entering both a date and time.","int TYPE_DATETIME_VARIATION_TIME Default variation of TYPE_CLASS_DATETIME: allows entering only a time.","int TYPE_MASK_CLASS Mask of bits that determine the overall class of text being given.","int TYPE_MASK_FLAGS Mask of bits that provide addition bit flags of options.","int TYPE_MASK_VARIATION Mask of bits that determine the variation of the base content class.","int TYPE_NULL Special content type for when no explicit type has been specified.","int TYPE_NUMBER_FLAG_DECIMAL Flag of TYPE_CLASS_NUMBER: the number is decimal, allowing a decimal point to provide fractional values.","int TYPE_NUMBER_FLAG_SIGNED Flag of TYPE_CLASS_NUMBER: the number is signed, allowing a positive or negative sign at the start.","int TYPE_NUMBER_VARIATION_NORMAL Default variation of TYPE_CLASS_NUMBER: plain normal numeric text.","int TYPE_NUMBER_VARIATION_PASSWORD Variation of TYPE_CLASS_NUMBER: entering a numeric password.","int TYPE_TEXT_FLAG_AUTO_COMPLETE Flag for TYPE_CLASS_TEXT: the text editor (which means the application) is performing auto-completion of the text being entered based on its own semantics, which it will present to the user as they type.","int TYPE_TEXT_FLAG_AUTO_CORRECT Flag for TYPE_CLASS_TEXT: the user is entering free-form text that should have auto-correction applied to it.","int TYPE_TEXT_FLAG_CAP_CHARACTERS Flag for TYPE_CLASS_TEXT: capitalize all characters.","int TYPE_TEXT_FLAG_CAP_SENTENCES Flag for TYPE_CLASS_TEXT: capitalize the first character of each sentence.","int TYPE_TEXT_FLAG_CAP_WORDS Flag for TYPE_CLASS_TEXT: capitalize the first character of every word.","int TYPE_TEXT_FLAG_IME_MULTI_LINE Flag for TYPE_CLASS_TEXT: the regular text view associated with this should not be multi-line, but when a fullscreen input method is providing text it should use multiple lines if it can.","int TYPE_TEXT_FLAG_MULTI_LINE Flag for TYPE_CLASS_TEXT: multiple lines of text can be entered into the field.","int TYPE_TEXT_FLAG_NO_SUGGESTIONS Flag for TYPE_CLASS_TEXT: the input method does not need to display any dictionary-based candidates.","int TYPE_TEXT_VARIATION_EMAIL_ADDRESS Variation of TYPE_CLASS_TEXT: entering an e-mail address.","int TYPE_TEXT_VARIATION_EMAIL_SUBJECT Variation of TYPE_CLASS_TEXT: entering the subject line of an e-mail.","int TYPE_TEXT_VARIATION_FILTER Variation of TYPE_CLASS_TEXT: entering text to filter contents of a list etc.","int TYPE_TEXT_VARIATION_LONG_MESSAGE Variation of TYPE_CLASS_TEXT: entering the content of a long, possibly formal message such as the body of an e-mail.","int TYPE_TEXT_VARIATION_NORMAL Default variation of TYPE_CLASS_TEXT: plain old normal text.","int TYPE_TEXT_VARIATION_PASSWORD Variation of TYPE_CLASS_TEXT: entering a password.","int TYPE_TEXT_VARIATION_PERSON_NAME Variation of TYPE_CLASS_TEXT: entering the name of a person.","int TYPE_TEXT_VARIATION_PHONETIC Variation of TYPE_CLASS_TEXT: entering text for phonetic pronunciation, such as a phonetic name field in contacts.","int TYPE_TEXT_VARIATION_POSTAL_ADDRESS Variation of TYPE_CLASS_TEXT: entering a postal mailing address.","int TYPE_TEXT_VARIATION_SHORT_MESSAGE Variation of TYPE_CLASS_TEXT: entering a short, possibly informal message such as an instant message or a text message.","int TYPE_TEXT_VARIATION_URI Variation of TYPE_CLASS_TEXT: entering a URI.","int TYPE_TEXT_VARIATION_VISIBLE_PASSWORD Variation of TYPE_CLASS_TEXT: entering a password, which should be visible to the user.","int TYPE_TEXT_VARIATION_WEB_EDIT_TEXT Variation of TYPE_CLASS_TEXT: entering text inside of a web form.","int TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS Variation of TYPE_CLASS_TEXT: entering e-mail address inside of a web form.","int TYPE_TEXT_VARIATION_WEB_PASSWORD Variation of TYPE_CLASS_TEXT: entering password inside of a web form."],"class":"EditorInfo","constructors":[],"fields":["public static final Creator<EditorInfo> CREATOR Used to make this class parcelable.","public int actionId If actionLabel has been given, this is the id for that command when the user presses its button that is delivered back with InputConnection.performEditorAction().","public CharSequence actionLabel In some cases an IME may be able to display an arbitrary label for a command the user can perform, which you can specify here.","public Bundle extras Any extra data to supply to the input method.","public int fieldId Identifier for the editor's field.","public String fieldName Additional name for the editor's field.","public CharSequence hintText The \"hint\" text of the text view, typically shown in-line when the text is empty to tell the user what to enter.","public int imeOptions Extended type information for the editor, to help the IME better integrate with it.","public int initialCapsMode The capitalization mode of the first character being edited in the text.","public int initialSelEnd The text offset of the end of the selection at the time editing begins; -1 if not known.","public int initialSelStart The text offset of the start of the selection at the time editing begins; -1 if not known.","public int inputType The content type of the text box, whose bits are defined by InputType.","public CharSequence label A label to show to the user describing the text they are writing.","public String packageName Name of the package that owns this editor.","public String privateImeOptions A string supplying additional information options that are private to a particular IME implementation."]}