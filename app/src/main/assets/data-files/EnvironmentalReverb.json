{"methods":["short getDecayHFRatio() Gets the ratio of high frequency decay time (at 5 kHz) relative to low frequencies.","int getDecayTime() Gets the decay time.","short getDensity() Gets the density level.","short getDiffusion() Gets diffusion level.","EnvironmentalReverb.Settings getProperties() Gets the environmental reverb properties.","int getReflectionsDelay() Gets the reflections delay.","short getReflectionsLevel() Gets the volume level of the early reflections.","int getReverbDelay() Gets the reverb delay.","short getReverbLevel() Gets the reverb level.","short getRoomHFLevel() Gets the room HF level.","short getRoomLevel() Gets the master volume level of the environmental reverb effect.","void setDecayHFRatio(short decayHFRatio) Sets the ratio of high frequency decay time (at 5 kHz) relative to the decay time at low frequencies.","void setDecayTime(int decayTime) Sets the time taken for the level of reverberation to decay by 60 dB.","void setDensity(short density) Controls the modal density of the late reverberation decay.","void setDiffusion(short diffusion) Sets the echo density in the late reverberation decay.","void setParameterListener(EnvironmentalReverb.OnParameterChangeListener listener) Registers an OnParameterChangeListener interface.","void setProperties(EnvironmentalReverb.Settings settings) Sets the environmental reverb properties.","void setReflectionsDelay(int reflectionsDelay) Sets the delay time for the early reflections.","void setReflectionsLevel(short reflectionsLevel) Sets the volume level of the early reflections.","void setReverbDelay(int reverbDelay) Sets the time between the first reflection and the reverberation.","void setReverbLevel(short reverbLevel) Sets the volume level of the late reverberation.","void setRoomHFLevel(short roomHF) Sets the volume level at 5 kHz relative to the volume level at low frequencies of the overall reverb effect.","void setRoomLevel(short room) Sets the master volume level of the environmental reverb effect.","[Expand] Inherited Methods","From class android.media.audiofx.AudioEffect void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. AudioEffect.Descriptor getDescriptor() Get the effect descriptor. boolean getEnabled() Returns effect enabled state int getId() Returns effect unique identifier. boolean hasControl() Checks if this AudioEffect object is controlling the effect engine. static Descriptor[] queryEffects() Query all effects available on the platform. void release() Releases the native AudioEffect resources. void setControlStatusListener(AudioEffect.OnControlStatusChangeListener listener) Sets the listener AudioEffect notifies when the effect engine control is taken or returned. void setEnableStatusListener(AudioEffect.OnEnableStatusChangeListener listener) Sets the listener AudioEffect notifies when the effect engine is enabled or disabled. int setEnabled(boolean enabled) Enable or disable the effect.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","AudioEffect.Descriptor getDescriptor() Get the effect descriptor.","boolean getEnabled() Returns effect enabled state","int getId() Returns effect unique identifier.","boolean hasControl() Checks if this AudioEffect object is controlling the effect engine.","static Descriptor[] queryEffects() Query all effects available on the platform.","void release() Releases the native AudioEffect resources.","void setControlStatusListener(AudioEffect.OnControlStatusChangeListener listener) Sets the listener AudioEffect notifies when the effect engine control is taken or returned.","void setEnableStatusListener(AudioEffect.OnEnableStatusChangeListener listener) Sets the listener AudioEffect notifies when the effect engine is enabled or disabled.","int setEnabled(boolean enabled) Enable or disable the effect.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.media.audiofx","constants":["int PARAM_DECAY_HF_RATIO Decay HF ratio.","int PARAM_DECAY_TIME Decay time.","int PARAM_DENSITY Density.","int PARAM_DIFFUSION Diffusion.","int PARAM_REFLECTIONS_DELAY Early reflections delay.","int PARAM_REFLECTIONS_LEVEL Early reflections level.","int PARAM_REVERB_DELAY Reverb delay.","int PARAM_REVERB_LEVEL Reverb level.","int PARAM_ROOM_HF_LEVEL Room HF level.","int PARAM_ROOM_LEVEL Room level.","[Expand] Inherited Constants","From class android.media.audiofx.AudioEffect String ACTION_CLOSE_AUDIO_EFFECT_CONTROL_SESSION Intent to signal to the effect control application or service that an audio session is closed and that effects should not be applied anymore. String ACTION_DISPLAY_AUDIO_EFFECT_CONTROL_PANEL Intent to launch an audio effect control panel UI. String ACTION_OPEN_AUDIO_EFFECT_CONTROL_SESSION Intent to signal to the effect control application or service that a new audio session is opened and requires audio effects to be applied. int ALREADY_EXISTS Internal operation status. int CONTENT_TYPE_GAME Value for EXTRA_CONTENT_TYPE when the type of content played is game audio int CONTENT_TYPE_MOVIE Value for EXTRA_CONTENT_TYPE when the type of content played is video or movie int CONTENT_TYPE_MUSIC Value for EXTRA_CONTENT_TYPE when the type of content played is music int CONTENT_TYPE_VOICE Value for EXTRA_CONTENT_TYPE when the type of content played is voice audio String EFFECT_AUXILIARY Effect connection mode is auxiliary. String EFFECT_INSERT Effect connection mode is insert. int ERROR Unspecified error. int ERROR_BAD_VALUE Operation failed due to bad parameter value. int ERROR_DEAD_OBJECT Operation failed due to dead remote object. int ERROR_INVALID_OPERATION Operation failed because it was requested in wrong state. int ERROR_NO_INIT Operation failed due to bad object initialization. int ERROR_NO_MEMORY Operation failed due to lack of memory. String EXTRA_AUDIO_SESSION Contains the ID of the audio session the effects should be applied to. String EXTRA_CONTENT_TYPE Indicates which type of content is played by the application. String EXTRA_PACKAGE_NAME Contains the package name of the calling application. int SUCCESS Successful operation.","String ACTION_CLOSE_AUDIO_EFFECT_CONTROL_SESSION Intent to signal to the effect control application or service that an audio session is closed and that effects should not be applied anymore.","String ACTION_DISPLAY_AUDIO_EFFECT_CONTROL_PANEL Intent to launch an audio effect control panel UI.","String ACTION_OPEN_AUDIO_EFFECT_CONTROL_SESSION Intent to signal to the effect control application or service that a new audio session is opened and requires audio effects to be applied.","int ALREADY_EXISTS Internal operation status.","int CONTENT_TYPE_GAME Value for EXTRA_CONTENT_TYPE when the type of content played is game audio","int CONTENT_TYPE_MOVIE Value for EXTRA_CONTENT_TYPE when the type of content played is video or movie","int CONTENT_TYPE_MUSIC Value for EXTRA_CONTENT_TYPE when the type of content played is music","int CONTENT_TYPE_VOICE Value for EXTRA_CONTENT_TYPE when the type of content played is voice audio","String EFFECT_AUXILIARY Effect connection mode is auxiliary.","String EFFECT_INSERT Effect connection mode is insert.","int ERROR Unspecified error.","int ERROR_BAD_VALUE Operation failed due to bad parameter value.","int ERROR_DEAD_OBJECT Operation failed due to dead remote object.","int ERROR_INVALID_OPERATION Operation failed because it was requested in wrong state.","int ERROR_NO_INIT Operation failed due to bad object initialization.","int ERROR_NO_MEMORY Operation failed due to lack of memory.","String EXTRA_AUDIO_SESSION Contains the ID of the audio session the effects should be applied to.","String EXTRA_CONTENT_TYPE Indicates which type of content is played by the application.","String EXTRA_PACKAGE_NAME Contains the package name of the calling application.","int SUCCESS Successful operation."],"class":"EnvironmentalReverb","constructors":[],"fields":[]}