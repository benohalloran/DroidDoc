{"methods":["void attachInfo(Context context, ProviderInfo info) After the FileProvider is instantiated, this method is called to provide the system with information about the provider.","int delete(Uri uri, String selection, String[] selectionArgs) Deletes the file associated with the specified content URI, as returned by getUriForFile().","String getType(Uri uri) Returns the MIME type of a content URI returned by getUriForFile().","static Uri getUriForFile(Context context, String authority, File file) Return a content URI for a given File.","Uri insert(Uri uri, ContentValues values) By default, this method throws an UnsupportedOperationException.","boolean onCreate() The default FileProvider implementation does not need to be initialized.","ParcelFileDescriptor openFile(Uri uri, String mode) By default, FileProvider automatically returns the ParcelFileDescriptor for a file associated with a content:// Uri.","Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) Use a content URI returned by getUriForFile() to get information about a file managed by the FileProvider.","int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) By default, this method throws an UnsupportedOperationException.","[Expand] Inherited Methods","From class android.content.ContentProvider ContentProviderResult[] applyBatch(ArrayList<ContentProviderOperation> operations) Override this to handle requests to perform a batch of operations, or the default implementation will iterate over the operations and call apply(ContentProvider, ContentProviderResult[], int) on each of them. void attachInfo(Context context, ProviderInfo info) After being instantiated, this is called to tell the content provider about itself. int bulkInsert(Uri uri, ContentValues[] values) Override this to handle requests to insert a set of new rows, or the default implementation will iterate over the values and call insert(Uri, ContentValues) on each of them. Bundle call(String method, String arg, Bundle extras) Call a provider-defined method. Uri canonicalize(Uri url) Implement this to support canonicalization of URIs that refer to your content provider. abstract int delete(Uri uri, String selection, String[] selectionArgs) Implement this to handle requests to delete one or more rows. void dump(FileDescriptor fd, PrintWriter writer, String[] args) Print the Provider's state into the given stream. final String getCallingPackage() Return the package name of the caller that initiated the request being processed on the current thread. final Context getContext() Retrieves the Context this provider is running in. final PathPermission[] getPathPermissions() Return the path-based permissions required for read and/or write access to this content provider. final String getReadPermission() Return the name of the permission required for read-only access to this content provider. String[] getStreamTypes(Uri uri, String mimeTypeFilter) Called by a client to determine the types of data streams that this content provider supports for the given URI. abstract String getType(Uri uri) Implement this to handle requests for the MIME type of the data at the given URI. final String getWritePermission() Return the name of the permission required for read/write access to this content provider. abstract Uri insert(Uri uri, ContentValues values) Implement this to handle requests to insert a new row. boolean isTemporary() Returns true if this instance is a temporary content provider. void onConfigurationChanged(Configuration newConfig) Called by the system when the device configuration changes while your component is running. This method is always called on the application main thread, and must not perform lengthy operations. abstract boolean onCreate() Implement this to initialize your content provider on startup. void onLowMemory() This is called when the overall system is running low on memory, and actively running processes should trim their memory usage. This method is always called on the application main thread, and must not perform lengthy operations. void onTrimMemory(int level) Called when the operating system has determined that it is a good time for a process to trim unneeded memory from its process. AssetFileDescriptor openAssetFile(Uri uri, String mode, CancellationSignal signal) This is like openFile(Uri, String), but can be implemented by providers that need to be able to return sub-sections of files, often assets inside of their .apk. AssetFileDescriptor openAssetFile(Uri uri, String mode) This is like openFile(Uri, String), but can be implemented by providers that need to be able to return sub-sections of files, often assets inside of their .apk. ParcelFileDescriptor openFile(Uri uri, String mode) Override this to handle requests to open a file blob. ParcelFileDescriptor openFile(Uri uri, String mode, CancellationSignal signal) Override this to handle requests to open a file blob. final ParcelFileDescriptor openFileHelper(Uri uri, String mode) Convenience for subclasses that wish to implement openFile(Uri, String) by looking up a column named \"_data\" at the given URI. <T> ParcelFileDescriptor openPipeHelper(Uri uri, String mimeType, Bundle opts, T args, PipeDataWriter<T> func) A helper function for implementing openTypedAssetFile(Uri, String, Bundle), for creating a data pipe and background thread allowing you to stream generated data back to the client. AssetFileDescriptor openTypedAssetFile(Uri uri, String mimeTypeFilter, Bundle opts) Called by a client to open a read-only stream containing data of a particular MIME type. AssetFileDescriptor openTypedAssetFile(Uri uri, String mimeTypeFilter, Bundle opts, CancellationSignal signal) Called by a client to open a read-only stream containing data of a particular MIME type. abstract Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) Implement this to handle query requests from clients. Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder, CancellationSignal cancellationSignal) Implement this to handle query requests from clients with support for cancellation. final void setPathPermissions(PathPermission[] permissions) Change the path-based permission required to read and/or write data in the content provider. final void setReadPermission(String permission) Change the permission required to read data from the content provider. final void setWritePermission(String permission) Change the permission required to read and write data in the content provider. void shutdown() Implement this to shut down the ContentProvider instance. Uri uncanonicalize(Uri url) Remove canonicalization from canonical URIs previously returned by canonicalize(Uri). abstract int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) Implement this to handle requests to update one or more rows.","ContentProviderResult[] applyBatch(ArrayList<ContentProviderOperation> operations) Override this to handle requests to perform a batch of operations, or the default implementation will iterate over the operations and call apply(ContentProvider, ContentProviderResult[], int) on each of them.","void attachInfo(Context context, ProviderInfo info) After being instantiated, this is called to tell the content provider about itself.","int bulkInsert(Uri uri, ContentValues[] values) Override this to handle requests to insert a set of new rows, or the default implementation will iterate over the values and call insert(Uri, ContentValues) on each of them.","Bundle call(String method, String arg, Bundle extras) Call a provider-defined method.","Uri canonicalize(Uri url) Implement this to support canonicalization of URIs that refer to your content provider.","abstract int delete(Uri uri, String selection, String[] selectionArgs) Implement this to handle requests to delete one or more rows.","void dump(FileDescriptor fd, PrintWriter writer, String[] args) Print the Provider's state into the given stream.","final String getCallingPackage() Return the package name of the caller that initiated the request being processed on the current thread.","final Context getContext() Retrieves the Context this provider is running in.","final PathPermission[] getPathPermissions() Return the path-based permissions required for read and/or write access to this content provider.","final String getReadPermission() Return the name of the permission required for read-only access to this content provider.","String[] getStreamTypes(Uri uri, String mimeTypeFilter) Called by a client to determine the types of data streams that this content provider supports for the given URI.","abstract String getType(Uri uri) Implement this to handle requests for the MIME type of the data at the given URI.","final String getWritePermission() Return the name of the permission required for read/write access to this content provider.","abstract Uri insert(Uri uri, ContentValues values) Implement this to handle requests to insert a new row.","boolean isTemporary() Returns true if this instance is a temporary content provider.","void onConfigurationChanged(Configuration newConfig) Called by the system when the device configuration changes while your component is running. This method is always called on the application main thread, and must not perform lengthy operations.","abstract boolean onCreate() Implement this to initialize your content provider on startup.","void onLowMemory() This is called when the overall system is running low on memory, and actively running processes should trim their memory usage. This method is always called on the application main thread, and must not perform lengthy operations.","void onTrimMemory(int level) Called when the operating system has determined that it is a good time for a process to trim unneeded memory from its process.","AssetFileDescriptor openAssetFile(Uri uri, String mode, CancellationSignal signal) This is like openFile(Uri, String), but can be implemented by providers that need to be able to return sub-sections of files, often assets inside of their .apk.","AssetFileDescriptor openAssetFile(Uri uri, String mode) This is like openFile(Uri, String), but can be implemented by providers that need to be able to return sub-sections of files, often assets inside of their .apk.","ParcelFileDescriptor openFile(Uri uri, String mode) Override this to handle requests to open a file blob.","ParcelFileDescriptor openFile(Uri uri, String mode, CancellationSignal signal) Override this to handle requests to open a file blob.","final ParcelFileDescriptor openFileHelper(Uri uri, String mode) Convenience for subclasses that wish to implement openFile(Uri, String) by looking up a column named \"_data\" at the given URI.","<T> ParcelFileDescriptor openPipeHelper(Uri uri, String mimeType, Bundle opts, T args, PipeDataWriter<T> func) A helper function for implementing openTypedAssetFile(Uri, String, Bundle), for creating a data pipe and background thread allowing you to stream generated data back to the client.","AssetFileDescriptor openTypedAssetFile(Uri uri, String mimeTypeFilter, Bundle opts) Called by a client to open a read-only stream containing data of a particular MIME type.","AssetFileDescriptor openTypedAssetFile(Uri uri, String mimeTypeFilter, Bundle opts, CancellationSignal signal) Called by a client to open a read-only stream containing data of a particular MIME type.","abstract Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) Implement this to handle query requests from clients.","Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder, CancellationSignal cancellationSignal) Implement this to handle query requests from clients with support for cancellation.","final void setPathPermissions(PathPermission[] permissions) Change the path-based permission required to read and/or write data in the content provider.","final void setReadPermission(String permission) Change the permission required to read data from the content provider.","final void setWritePermission(String permission) Change the permission required to read and write data in the content provider.","void shutdown() Implement this to shut down the ContentProvider instance.","Uri uncanonicalize(Uri url) Remove canonicalization from canonical URIs previously returned by canonicalize(Uri).","abstract int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) Implement this to handle requests to update one or more rows.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface android.content.ComponentCallbacks abstract void onConfigurationChanged(Configuration newConfig) Called by the system when the device configuration changes while your component is running. abstract void onLowMemory() This is called when the overall system is running low on memory, and actively running processes should trim their memory usage.","abstract void onConfigurationChanged(Configuration newConfig) Called by the system when the device configuration changes while your component is running.","abstract void onLowMemory() This is called when the overall system is running low on memory, and actively running processes should trim their memory usage.","From interface android.content.ComponentCallbacks2 abstract void onTrimMemory(int level) Called when the operating system has determined that it is a good time for a process to trim unneeded memory from its process.","abstract void onTrimMemory(int level) Called when the operating system has determined that it is a good time for a process to trim unneeded memory from its process."],"package":"android.support.v4.content","constants":["[Expand] Inherited Constants","From interface android.content.ComponentCallbacks2 int TRIM_MEMORY_BACKGROUND Level for onTrimMemory(int): the process has gone on to the LRU list. int TRIM_MEMORY_COMPLETE Level for onTrimMemory(int): the process is nearing the end of the background LRU list, and if more memory isn't found soon it will be killed. int TRIM_MEMORY_MODERATE Level for onTrimMemory(int): the process is around the middle of the background LRU list; freeing memory can help the system keep other processes running later in the list for better overall performance. int TRIM_MEMORY_RUNNING_CRITICAL Level for onTrimMemory(int): the process is not an expendable background process, but the device is running extremely low on memory and is about to not be able to keep any background processes running. int TRIM_MEMORY_RUNNING_LOW Level for onTrimMemory(int): the process is not an expendable background process, but the device is running low on memory. int TRIM_MEMORY_RUNNING_MODERATE Level for onTrimMemory(int): the process is not an expendable background process, but the device is running moderately low on memory. int TRIM_MEMORY_UI_HIDDEN Level for onTrimMemory(int): the process had been showing a user interface, and is no longer doing so.","int TRIM_MEMORY_BACKGROUND Level for onTrimMemory(int): the process has gone on to the LRU list.","int TRIM_MEMORY_COMPLETE Level for onTrimMemory(int): the process is nearing the end of the background LRU list, and if more memory isn't found soon it will be killed.","int TRIM_MEMORY_MODERATE Level for onTrimMemory(int): the process is around the middle of the background LRU list; freeing memory can help the system keep other processes running later in the list for better overall performance.","int TRIM_MEMORY_RUNNING_CRITICAL Level for onTrimMemory(int): the process is not an expendable background process, but the device is running extremely low on memory and is about to not be able to keep any background processes running.","int TRIM_MEMORY_RUNNING_LOW Level for onTrimMemory(int): the process is not an expendable background process, but the device is running low on memory.","int TRIM_MEMORY_RUNNING_MODERATE Level for onTrimMemory(int): the process is not an expendable background process, but the device is running moderately low on memory.","int TRIM_MEMORY_UI_HIDDEN Level for onTrimMemory(int): the process had been showing a user interface, and is no longer doing so."],"class":"FileProvider","constructors":[],"fields":[]}