{"methods":["ForkJoinPool getPool() Returns the pool hosting this thread.","int getPoolIndex() Returns the unique index number of this thread in its pool.","void run() This method is required to be public, but should never be called explicitly.","void onStart() Initializes internal state after construction but before processing any tasks.","void onTermination(Throwable exception) Performs cleanup associated with termination of this worker thread.","[Expand] Inherited Methods","From class java.lang.Thread static int activeCount() Returns the number of active Threads in the running Thread's group and its subgroups. final void checkAccess() Does nothing. int countStackFrames() This method was deprecated in API level 1. The results of this call were never well defined. To make things worse, it would depend on whether the Thread was suspended or not, and suspend was deprecated too. static Thread currentThread() Returns the Thread of the caller, that is, the current Thread. void destroy() This method was deprecated in API level 1. Not implemented. static void dumpStack() Prints to the standard error stream a text representation of the current stack for this Thread. static int enumerate(Thread[] threads) Copies an array with all Threads which are in the same ThreadGroup as the receiver - and subgroups - into the array threads passed as parameter. static Map<Thread, StackTraceElement[]> getAllStackTraces() Returns a map of all the currently live threads to their stack traces. ClassLoader getContextClassLoader() Returns the context ClassLoader for this Thread. static Thread.UncaughtExceptionHandler getDefaultUncaughtExceptionHandler() Returns the default exception handler that's executed when uncaught exception terminates a thread. long getId() Returns the thread's identifier. final String getName() Returns the name of the Thread. final int getPriority() Returns the priority of the Thread. StackTraceElement[] getStackTrace() Returns an array of StackTraceElement representing the current thread's stack. Thread.State getState() Returns the current state of the Thread. final ThreadGroup getThreadGroup() Returns the ThreadGroup to which this Thread belongs. Thread.UncaughtExceptionHandler getUncaughtExceptionHandler() Returns the thread's uncaught exception handler. static boolean holdsLock(Object object) Indicates whether the current Thread has a monitor lock on the specified object. void interrupt() Posts an interrupt request to this Thread. static boolean interrupted() Returns a boolean indicating whether the current Thread ( currentThread()) has a pending interrupt request ( true) or not (false). final boolean isAlive() Returns true if the receiver has already been started and still runs code (hasn't died yet). final boolean isDaemon() Tests whether this is a daemon thread. boolean isInterrupted() Returns a boolean indicating whether the receiver has a pending interrupt request (true) or not ( false) final void join() Blocks the current Thread (Thread.currentThread()) until the receiver finishes its execution and dies. final void join(long millis, int nanos) Blocks the current Thread (Thread.currentThread()) until the receiver finishes its execution and dies or the specified timeout expires, whatever happens first. final void join(long millis) Blocks the current Thread (Thread.currentThread()) until the receiver finishes its execution and dies or the specified timeout expires, whatever happens first. final void resume() This method was deprecated in API level 1. Only useful in conjunction with deprecated method suspend(). void run() Calls the run() method of the Runnable object the receiver holds. void setContextClassLoader(ClassLoader cl) Set the context ClassLoader for the receiver. final void setDaemon(boolean isDaemon) Marks this thread as a daemon thread. static void setDefaultUncaughtExceptionHandler(Thread.UncaughtExceptionHandler handler) Sets the default uncaught exception handler. final void setName(String threadName) Sets the name of the Thread. final void setPriority(int priority) Sets the priority of this thread. void setUncaughtExceptionHandler(Thread.UncaughtExceptionHandler handler) Sets the uncaught exception handler. static void sleep(long millis, int nanos) Causes the thread which sent this message to sleep for the given interval of time (given in milliseconds and nanoseconds). static void sleep(long time) Causes the thread which sent this message to sleep for the given interval of time (given in milliseconds). synchronized void start() Starts the new Thread of execution. synchronized final void stop(Throwable throwable) This method was deprecated in API level 1. because stopping a thread in this manner is unsafe and can leave your application and the VM in an unpredictable state. final void stop() This method was deprecated in API level 1. because stopping a thread in this manner is unsafe and can leave your application and the VM in an unpredictable state. final void suspend() This method was deprecated in API level 1. May cause deadlocks. String toString() Returns a string containing a concise, human-readable description of the Thread. static void yield() Causes the calling Thread to yield execution time to another Thread that is ready to run.","static int activeCount() Returns the number of active Threads in the running Thread's group and its subgroups.","final void checkAccess() Does nothing.","int countStackFrames() This method was deprecated in API level 1. The results of this call were never well defined. To make things worse, it would depend on whether the Thread was suspended or not, and suspend was deprecated too.","static Thread currentThread() Returns the Thread of the caller, that is, the current Thread.","void destroy() This method was deprecated in API level 1. Not implemented.","static void dumpStack() Prints to the standard error stream a text representation of the current stack for this Thread.","static int enumerate(Thread[] threads) Copies an array with all Threads which are in the same ThreadGroup as the receiver - and subgroups - into the array threads passed as parameter.","static Map<Thread, StackTraceElement[]> getAllStackTraces() Returns a map of all the currently live threads to their stack traces.","ClassLoader getContextClassLoader() Returns the context ClassLoader for this Thread.","static Thread.UncaughtExceptionHandler getDefaultUncaughtExceptionHandler() Returns the default exception handler that's executed when uncaught exception terminates a thread.","long getId() Returns the thread's identifier.","final String getName() Returns the name of the Thread.","final int getPriority() Returns the priority of the Thread.","StackTraceElement[] getStackTrace() Returns an array of StackTraceElement representing the current thread's stack.","Thread.State getState() Returns the current state of the Thread.","final ThreadGroup getThreadGroup() Returns the ThreadGroup to which this Thread belongs.","Thread.UncaughtExceptionHandler getUncaughtExceptionHandler() Returns the thread's uncaught exception handler.","static boolean holdsLock(Object object) Indicates whether the current Thread has a monitor lock on the specified object.","void interrupt() Posts an interrupt request to this Thread.","static boolean interrupted() Returns a boolean indicating whether the current Thread ( currentThread()) has a pending interrupt request ( true) or not (false).","final boolean isAlive() Returns true if the receiver has already been started and still runs code (hasn't died yet).","final boolean isDaemon() Tests whether this is a daemon thread.","boolean isInterrupted() Returns a boolean indicating whether the receiver has a pending interrupt request (true) or not ( false)","final void join() Blocks the current Thread (Thread.currentThread()) until the receiver finishes its execution and dies.","final void join(long millis, int nanos) Blocks the current Thread (Thread.currentThread()) until the receiver finishes its execution and dies or the specified timeout expires, whatever happens first.","final void join(long millis) Blocks the current Thread (Thread.currentThread()) until the receiver finishes its execution and dies or the specified timeout expires, whatever happens first.","final void resume() This method was deprecated in API level 1. Only useful in conjunction with deprecated method suspend().","void run() Calls the run() method of the Runnable object the receiver holds.","void setContextClassLoader(ClassLoader cl) Set the context ClassLoader for the receiver.","final void setDaemon(boolean isDaemon) Marks this thread as a daemon thread.","static void setDefaultUncaughtExceptionHandler(Thread.UncaughtExceptionHandler handler) Sets the default uncaught exception handler.","final void setName(String threadName) Sets the name of the Thread.","final void setPriority(int priority) Sets the priority of this thread.","void setUncaughtExceptionHandler(Thread.UncaughtExceptionHandler handler) Sets the uncaught exception handler.","static void sleep(long millis, int nanos) Causes the thread which sent this message to sleep for the given interval of time (given in milliseconds and nanoseconds).","static void sleep(long time) Causes the thread which sent this message to sleep for the given interval of time (given in milliseconds).","synchronized void start() Starts the new Thread of execution.","synchronized final void stop(Throwable throwable) This method was deprecated in API level 1. because stopping a thread in this manner is unsafe and can leave your application and the VM in an unpredictable state.","final void stop() This method was deprecated in API level 1. because stopping a thread in this manner is unsafe and can leave your application and the VM in an unpredictable state.","final void suspend() This method was deprecated in API level 1. May cause deadlocks.","String toString() Returns a string containing a concise, human-readable description of the Thread.","static void yield() Causes the calling Thread to yield execution time to another Thread that is ready to run.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface java.lang.Runnable abstract void run() Starts executing the active part of the class' code.","abstract void run() Starts executing the active part of the class' code."],"package":"java.util.concurrent","constants":["[Expand] Inherited Constants","From class java.lang.Thread int MAX_PRIORITY The maximum priority value allowed for a thread. int MIN_PRIORITY The minimum priority value allowed for a thread. int NORM_PRIORITY The normal (default) priority value assigned to the main thread.","int MAX_PRIORITY The maximum priority value allowed for a thread.","int MIN_PRIORITY The minimum priority value allowed for a thread.","int NORM_PRIORITY The normal (default) priority value assigned to the main thread."],"class":"ForkJoinWorkerThread","constructors":[],"fields":[]}