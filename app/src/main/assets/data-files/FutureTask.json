{"methods":["boolean cancel(boolean mayInterruptIfRunning) Attempts to cancel execution of this task.","V get() Waits if necessary for the computation to complete, and then retrieves its result.","V get(long timeout, TimeUnit unit) Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available.","boolean isCancelled() Returns true if this task was cancelled before it completed normally.","boolean isDone() Returns true if this task completed.","void run() Sets this Future to the result of its computation unless it has been cancelled.","void done() Protected method invoked when this task transitions to state isDone (whether normally or via cancellation).","boolean runAndReset() Executes the computation without setting its result, and then resets this future to initial state, failing to do so if the computation encounters an exception or is cancelled.","void set(V v) Sets the result of this future to the given value unless this future has already been set or has been cancelled.","void setException(Throwable t) Causes this future to report an ExecutionException with the given throwable as its cause, unless this future has already been set or has been cancelled.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface java.lang.Runnable abstract void run() Starts executing the active part of the class' code.","abstract void run() Starts executing the active part of the class' code.","From interface java.util.concurrent.Future abstract boolean cancel(boolean mayInterruptIfRunning) Attempts to cancel execution of this task. abstract V get() Waits if necessary for the computation to complete, and then retrieves its result. abstract V get(long timeout, TimeUnit unit) Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available. abstract boolean isCancelled() Returns true if this task was cancelled before it completed normally. abstract boolean isDone() Returns true if this task completed.","abstract boolean cancel(boolean mayInterruptIfRunning) Attempts to cancel execution of this task.","abstract V get() Waits if necessary for the computation to complete, and then retrieves its result.","abstract V get(long timeout, TimeUnit unit) Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available.","abstract boolean isCancelled() Returns true if this task was cancelled before it completed normally.","abstract boolean isDone() Returns true if this task completed.","From interface java.util.concurrent.RunnableFuture abstract void run() Sets this Future to the result of its computation unless it has been cancelled.","abstract void run() Sets this Future to the result of its computation unless it has been cancelled."],"package":"java.util.concurrent","constants":[],"class":"FutureTask","constructors":[],"fields":[]}