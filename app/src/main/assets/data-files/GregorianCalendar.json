{"methods":["void add(int field, int value) Adds the specified amount to a Calendar field.","boolean equals(Object object) Returns true if object is a GregorianCalendar with the same properties.","int getActualMaximum(int field) Returns the maximum value of the given field for the current date.","int getActualMinimum(int field) Gets the minimum value of the specified field for the current date.","int getGreatestMinimum(int field) Gets the greatest minimum value of the specified field.","final Date getGregorianChange() Returns the gregorian change date of this calendar.","int getLeastMaximum(int field) Gets the smallest maximum value of the specified field.","int getMaximum(int field) Gets the greatest maximum value of the specified field.","int getMinimum(int field) Gets the smallest minimum value of the specified field.","int hashCode() Returns an integer hash code for this object.","boolean isLeapYear(int year) Returns true if year is a leap year.","void roll(int field, boolean increment) Increments or decrements the specified field and wraps the value of the field when it goes beyond the maximum or minimum value for the current date.","void roll(int field, int value) Adds the specified amount the specified field and wraps the value of the field when it goes beyond the maximum or minimum value for the current date.","void setGregorianChange(Date date) Sets the gregorian change date of this calendar.","void computeFields() Computes the Calendar fields from time.","void computeTime() Computes time from the Calendar fields.","[Expand] Inherited Methods","From class java.util.Calendar abstract void add(int field, int value) Adds the given amount to a Calendar field. boolean after(Object calendar) Returns whether the Date represented by this Calendar instance is after the Date represented by the parameter. boolean before(Object calendar) Returns whether the Date represented by this Calendar instance is before the Date represented by the parameter. final void clear(int field) Clears the value in the given time field, marking it unset and assigning it a value of zero. final void clear() Clears the values of all the time fields, marking them all unset and assigning them all a value of zero. Object clone() Returns a shallow copy of this Calendar with the same properties. int compareTo(Calendar anotherCalendar) Compares the time represented by this Calendar to that represented by the given Calendar. void complete() Computes the time from the fields if the time has not already been set. abstract void computeFields() Computes the Calendar fields from time. abstract void computeTime() Computes time from the Calendar fields. boolean equals(Object object) Compares the given object to this Calendar and returns whether they are equal. int get(int field) Returns the value of the given field after computing the field values by calling complete() first. int getActualMaximum(int field) Returns the maximum value of the given field for the current date. int getActualMinimum(int field) Returns the minimum value of the given field for the current date. synchronized static Locale[] getAvailableLocales() Returns an array of locales for which custom Calendar instances are available. String getDisplayName(int field, int style, Locale locale) Returns a human-readable string for the value of field using the given style and locale. Map<String, Integer> getDisplayNames(int field, int style, Locale locale) Returns a map of human-readable strings to corresponding values, for the given field, style, and locale. int getFirstDayOfWeek() Returns the first day of the week for this Calendar. abstract int getGreatestMinimum(int field) Returns the greatest minimum value of the given field. synchronized static Calendar getInstance(Locale locale) Constructs a new instance of the Calendar subclass appropriate for the given Locale and default TimeZone, set to the current date and time. synchronized static Calendar getInstance(TimeZone timezone, Locale locale) Constructs a new instance of the Calendar subclass appropriate for the given Locale and given TimeZone, set to the current date and time. synchronized static Calendar getInstance(TimeZone timezone) Constructs a new instance of the Calendar subclass appropriate for the default Locale and given TimeZone, set to the current date and time. synchronized static Calendar getInstance() Constructs a new instance of the Calendar subclass appropriate for the default Locale and default TimeZone, set to the current date and time. abstract int getLeastMaximum(int field) Returns the smallest maximum value of the given field. abstract int getMaximum(int field) Returns the greatest maximum value of the given field. int getMinimalDaysInFirstWeek() Returns the minimal days in the first week of the year. abstract int getMinimum(int field) Returns the smallest minimum value of the given field. final Date getTime() Returns the time of this Calendar as a Date object. long getTimeInMillis() Returns the time represented by this Calendar, recomputing the time from its fields if necessary. TimeZone getTimeZone() Returns the time zone used by this Calendar. int hashCode() Returns an integer hash code for this object. final int internalGet(int field) Returns the value of the given field without recomputing. boolean isLenient() Tests whether this Calendar accepts field values which are outside the valid range for the field. final boolean isSet(int field) Tests whether the given field is set. void roll(int field, int value) Adds the given amount to the given field and wraps the value of the field when it goes beyond the maximum or minimum value for the current date. abstract void roll(int field, boolean increment) Increment or decrement the given field and wrap the value of the field when it goes beyond the maximum or minimum value for the current date. void set(int field, int value) Sets the given field to the given value. final void set(int year, int month, int day, int hourOfDay, int minute, int second) Sets the year, month, day of the month, hour of day, minute, and second fields. final void set(int year, int month, int day) Sets the year, month, and day of the month fields. final void set(int year, int month, int day, int hourOfDay, int minute) Sets the year, month, day of the month, hour of day, and minute fields. void setFirstDayOfWeek(int value) Sets the first day of the week for this Calendar. void setLenient(boolean value) Sets whether this Calendar accepts field values which are outside the valid range for the field. void setMinimalDaysInFirstWeek(int value) Sets the minimal days in the first week of the year. final void setTime(Date date) Sets the time of this Calendar. void setTimeInMillis(long milliseconds) Sets the time of this Calendar to the given Unix time. void setTimeZone(TimeZone timezone) Sets the TimeZone used by this Calendar. String toString() Returns a string representation of this Calendar, showing which fields are set.","abstract void add(int field, int value) Adds the given amount to a Calendar field.","boolean after(Object calendar) Returns whether the Date represented by this Calendar instance is after the Date represented by the parameter.","boolean before(Object calendar) Returns whether the Date represented by this Calendar instance is before the Date represented by the parameter.","final void clear(int field) Clears the value in the given time field, marking it unset and assigning it a value of zero.","final void clear() Clears the values of all the time fields, marking them all unset and assigning them all a value of zero.","Object clone() Returns a shallow copy of this Calendar with the same properties.","int compareTo(Calendar anotherCalendar) Compares the time represented by this Calendar to that represented by the given Calendar.","void complete() Computes the time from the fields if the time has not already been set.","abstract void computeFields() Computes the Calendar fields from time.","abstract void computeTime() Computes time from the Calendar fields.","boolean equals(Object object) Compares the given object to this Calendar and returns whether they are equal.","int get(int field) Returns the value of the given field after computing the field values by calling complete() first.","int getActualMaximum(int field) Returns the maximum value of the given field for the current date.","int getActualMinimum(int field) Returns the minimum value of the given field for the current date.","synchronized static Locale[] getAvailableLocales() Returns an array of locales for which custom Calendar instances are available.","String getDisplayName(int field, int style, Locale locale) Returns a human-readable string for the value of field using the given style and locale.","Map<String, Integer> getDisplayNames(int field, int style, Locale locale) Returns a map of human-readable strings to corresponding values, for the given field, style, and locale.","int getFirstDayOfWeek() Returns the first day of the week for this Calendar.","abstract int getGreatestMinimum(int field) Returns the greatest minimum value of the given field.","synchronized static Calendar getInstance(Locale locale) Constructs a new instance of the Calendar subclass appropriate for the given Locale and default TimeZone, set to the current date and time.","synchronized static Calendar getInstance(TimeZone timezone, Locale locale) Constructs a new instance of the Calendar subclass appropriate for the given Locale and given TimeZone, set to the current date and time.","synchronized static Calendar getInstance(TimeZone timezone) Constructs a new instance of the Calendar subclass appropriate for the default Locale and given TimeZone, set to the current date and time.","synchronized static Calendar getInstance() Constructs a new instance of the Calendar subclass appropriate for the default Locale and default TimeZone, set to the current date and time.","abstract int getLeastMaximum(int field) Returns the smallest maximum value of the given field.","abstract int getMaximum(int field) Returns the greatest maximum value of the given field.","int getMinimalDaysInFirstWeek() Returns the minimal days in the first week of the year.","abstract int getMinimum(int field) Returns the smallest minimum value of the given field.","final Date getTime() Returns the time of this Calendar as a Date object.","long getTimeInMillis() Returns the time represented by this Calendar, recomputing the time from its fields if necessary.","TimeZone getTimeZone() Returns the time zone used by this Calendar.","int hashCode() Returns an integer hash code for this object.","final int internalGet(int field) Returns the value of the given field without recomputing.","boolean isLenient() Tests whether this Calendar accepts field values which are outside the valid range for the field.","final boolean isSet(int field) Tests whether the given field is set.","void roll(int field, int value) Adds the given amount to the given field and wraps the value of the field when it goes beyond the maximum or minimum value for the current date.","abstract void roll(int field, boolean increment) Increment or decrement the given field and wrap the value of the field when it goes beyond the maximum or minimum value for the current date.","void set(int field, int value) Sets the given field to the given value.","final void set(int year, int month, int day, int hourOfDay, int minute, int second) Sets the year, month, day of the month, hour of day, minute, and second fields.","final void set(int year, int month, int day) Sets the year, month, and day of the month fields.","final void set(int year, int month, int day, int hourOfDay, int minute) Sets the year, month, day of the month, hour of day, and minute fields.","void setFirstDayOfWeek(int value) Sets the first day of the week for this Calendar.","void setLenient(boolean value) Sets whether this Calendar accepts field values which are outside the valid range for the field.","void setMinimalDaysInFirstWeek(int value) Sets the minimal days in the first week of the year.","final void setTime(Date date) Sets the time of this Calendar.","void setTimeInMillis(long milliseconds) Sets the time of this Calendar to the given Unix time.","void setTimeZone(TimeZone timezone) Sets the TimeZone used by this Calendar.","String toString() Returns a string representation of this Calendar, showing which fields are set.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface java.lang.Comparable abstract int compareTo(T another) Compares this object to the specified object to determine their relative order.","abstract int compareTo(T another) Compares this object to the specified object to determine their relative order."],"package":"java.util","constants":["int AD Value for the AD era.","int BC Value for the BC era.","[Expand] Inherited Constants","From class java.util.Calendar int ALL_STYLES Requests both SHORT and LONG styles in the map returned by getDisplayNames(int, int, Locale). int AM Value of the AM_PM field indicating the period of the day from midnight to just before noon. int AM_PM Field number for get and set indicating whether the HOUR is before or after noon. int APRIL Value of the MONTH field indicating the fourth month of the year. int AUGUST Value of the MONTH field indicating the eighth month of the year. int DATE Field number for get and set indicating the day of the month. int DAY_OF_MONTH Field number for get and set indicating the day of the month. int DAY_OF_WEEK Field number for get and set indicating the day of the week. int DAY_OF_WEEK_IN_MONTH Field number for get and set indicating the ordinal number of the day of the week within the current month. int DAY_OF_YEAR Field number for get and set indicating the day number within the current year. int DECEMBER Value of the MONTH field indicating the twelfth month of the year. int DST_OFFSET Field number for get and set indicating the daylight savings offset from the ZONE_OFFSET in milliseconds. int ERA Field number for get and set indicating the era, e.g., AD or BC in the Julian calendar. int FEBRUARY Value of the MONTH field indicating the second month of the year. int FIELD_COUNT This is the total number of fields in this calendar. int FRIDAY Value of the DAY_OF_WEEK field indicating Friday. int HOUR Field number for get and set indicating the hour of the morning or afternoon. int HOUR_OF_DAY Field number for get and set indicating the hour of the day. int JANUARY Value of the MONTH field indicating the first month of the year. int JULY Value of the MONTH field indicating the seventh month of the year. int JUNE Value of the MONTH field indicating the sixth month of the year. int LONG Requests long names (such as \"January\") from getDisplayName(int, int, Locale) or getDisplayNames(int, int, Locale). int MARCH Value of the MONTH field indicating the third month of the year. int MAY Value of the MONTH field indicating the fifth month of the year. int MILLISECOND Field number for get and set indicating the millisecond within the second. int MINUTE Field number for get and set indicating the minute within the hour. int MONDAY Value of the DAY_OF_WEEK field indicating Monday. int MONTH Field number for get and set indicating the month. int NOVEMBER Value of the MONTH field indicating the eleventh month of the year. int OCTOBER Value of the MONTH field indicating the tenth month of the year. int PM Value of the AM_PM field indicating the period of the day from noon to just before midnight. int SATURDAY Value of the DAY_OF_WEEK field indicating Saturday. int SECOND Field number for get and set indicating the second within the minute. int SEPTEMBER Value of the MONTH field indicating the ninth month of the year. int SHORT Requests short names (such as \"Jan\") from getDisplayName(int, int, Locale) or getDisplayNames(int, int, Locale). int SUNDAY Value of the DAY_OF_WEEK field indicating Sunday. int THURSDAY Value of the DAY_OF_WEEK field indicating Thursday. int TUESDAY Value of the DAY_OF_WEEK field indicating Tuesday. int UNDECIMBER Value of the MONTH field indicating the thirteenth month of the year. int WEDNESDAY Value of the DAY_OF_WEEK field indicating Wednesday. int WEEK_OF_MONTH Field number for get and set indicating the week number within the current month. int WEEK_OF_YEAR Field number for get and set indicating the week number within the current year. int YEAR Field number for get and set indicating the year. int ZONE_OFFSET Field number for get and set indicating the raw (non-DST) offset from GMT in milliseconds.","int ALL_STYLES Requests both SHORT and LONG styles in the map returned by getDisplayNames(int, int, Locale).","int AM Value of the AM_PM field indicating the period of the day from midnight to just before noon.","int AM_PM Field number for get and set indicating whether the HOUR is before or after noon.","int APRIL Value of the MONTH field indicating the fourth month of the year.","int AUGUST Value of the MONTH field indicating the eighth month of the year.","int DATE Field number for get and set indicating the day of the month.","int DAY_OF_MONTH Field number for get and set indicating the day of the month.","int DAY_OF_WEEK Field number for get and set indicating the day of the week.","int DAY_OF_WEEK_IN_MONTH Field number for get and set indicating the ordinal number of the day of the week within the current month.","int DAY_OF_YEAR Field number for get and set indicating the day number within the current year.","int DECEMBER Value of the MONTH field indicating the twelfth month of the year.","int DST_OFFSET Field number for get and set indicating the daylight savings offset from the ZONE_OFFSET in milliseconds.","int ERA Field number for get and set indicating the era, e.g., AD or BC in the Julian calendar.","int FEBRUARY Value of the MONTH field indicating the second month of the year.","int FIELD_COUNT This is the total number of fields in this calendar.","int FRIDAY Value of the DAY_OF_WEEK field indicating Friday.","int HOUR Field number for get and set indicating the hour of the morning or afternoon.","int HOUR_OF_DAY Field number for get and set indicating the hour of the day.","int JANUARY Value of the MONTH field indicating the first month of the year.","int JULY Value of the MONTH field indicating the seventh month of the year.","int JUNE Value of the MONTH field indicating the sixth month of the year.","int LONG Requests long names (such as \"January\") from getDisplayName(int, int, Locale) or getDisplayNames(int, int, Locale).","int MARCH Value of the MONTH field indicating the third month of the year.","int MAY Value of the MONTH field indicating the fifth month of the year.","int MILLISECOND Field number for get and set indicating the millisecond within the second.","int MINUTE Field number for get and set indicating the minute within the hour.","int MONDAY Value of the DAY_OF_WEEK field indicating Monday.","int MONTH Field number for get and set indicating the month.","int NOVEMBER Value of the MONTH field indicating the eleventh month of the year.","int OCTOBER Value of the MONTH field indicating the tenth month of the year.","int PM Value of the AM_PM field indicating the period of the day from noon to just before midnight.","int SATURDAY Value of the DAY_OF_WEEK field indicating Saturday.","int SECOND Field number for get and set indicating the second within the minute.","int SEPTEMBER Value of the MONTH field indicating the ninth month of the year.","int SHORT Requests short names (such as \"Jan\") from getDisplayName(int, int, Locale) or getDisplayNames(int, int, Locale).","int SUNDAY Value of the DAY_OF_WEEK field indicating Sunday.","int THURSDAY Value of the DAY_OF_WEEK field indicating Thursday.","int TUESDAY Value of the DAY_OF_WEEK field indicating Tuesday.","int UNDECIMBER Value of the MONTH field indicating the thirteenth month of the year.","int WEDNESDAY Value of the DAY_OF_WEEK field indicating Wednesday.","int WEEK_OF_MONTH Field number for get and set indicating the week number within the current month.","int WEEK_OF_YEAR Field number for get and set indicating the week number within the current year.","int YEAR Field number for get and set indicating the year.","int ZONE_OFFSET Field number for get and set indicating the raw (non-DST) offset from GMT in milliseconds."],"class":"GregorianCalendar","constructors":[],"fields":[]}