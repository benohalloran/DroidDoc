{"methods":["float getColumnDelay() Returns the delay by which the children's animation are offset from one column to the other.","int getDirection() Returns the direction of the animation.","int getDirectionPriority() Returns the direction priority for the animation.","float getRowDelay() Returns the delay by which the children's animation are offset from one row to the other.","void setColumnDelay(float columnDelay) Sets the delay, as a fraction of the animation duration, by which the children's animations are offset from one column to the other.","void setDirection(int direction) Sets the direction of the animation.","void setDirectionPriority(int directionPriority) Specifies the direction priority of the animation.","void setRowDelay(float rowDelay) Sets the delay, as a fraction of the animation duration, by which the children's animations are offset from one row to the other.","boolean willOverlap() Indicates whether two children's animations will overlap.","long getDelayForView(View view) Returns the amount of milliseconds by which the specified view's animation must be delayed or offset.","[Expand] Inherited Methods","From class android.view.animation.LayoutAnimationController Animation getAnimation() Returns the animation applied to each child of the view group on which this controller is set. final Animation getAnimationForView(View view) Returns the animation to be applied to the specified view. float getDelay() Returns the delay by which the children's animation are offset. long getDelayForView(View view) Returns the amount of milliseconds by which the specified view's animation must be delayed or offset. Interpolator getInterpolator() Returns the interpolator used to interpolate the delays between the children. int getOrder() Returns the order used to compute the delay of each child's animation. int getTransformedIndex(LayoutAnimationController.AnimationParameters params) Transforms the index stored in LayoutAnimationController.AnimationParameters by the order returned by getOrder(). boolean isDone() Indicates whether the layout animation is over or not. void setAnimation(Context context, int resourceID) Sets the animation to be run on each child of the view group on which this layout animation controller is . void setAnimation(Animation animation) Sets the animation to be run on each child of the view group on which this layout animation controller is . void setDelay(float delay) Sets the delay, as a fraction of the animation duration, by which the children's animations are offset. void setInterpolator(Interpolator interpolator) Sets the interpolator used to interpolate the delays between the children. void setInterpolator(Context context, int resourceID) Sets the interpolator used to interpolate the delays between the children. void setOrder(int order) Sets the order used to compute the delay of each child's animation. void start() Starts the animation. boolean willOverlap() Indicates whether two children's animations will overlap.","Animation getAnimation() Returns the animation applied to each child of the view group on which this controller is set.","final Animation getAnimationForView(View view) Returns the animation to be applied to the specified view.","float getDelay() Returns the delay by which the children's animation are offset.","long getDelayForView(View view) Returns the amount of milliseconds by which the specified view's animation must be delayed or offset.","Interpolator getInterpolator() Returns the interpolator used to interpolate the delays between the children.","int getOrder() Returns the order used to compute the delay of each child's animation.","int getTransformedIndex(LayoutAnimationController.AnimationParameters params) Transforms the index stored in LayoutAnimationController.AnimationParameters by the order returned by getOrder().","boolean isDone() Indicates whether the layout animation is over or not.","void setAnimation(Context context, int resourceID) Sets the animation to be run on each child of the view group on which this layout animation controller is .","void setAnimation(Animation animation) Sets the animation to be run on each child of the view group on which this layout animation controller is .","void setDelay(float delay) Sets the delay, as a fraction of the animation duration, by which the children's animations are offset.","void setInterpolator(Interpolator interpolator) Sets the interpolator used to interpolate the delays between the children.","void setInterpolator(Context context, int resourceID) Sets the interpolator used to interpolate the delays between the children.","void setOrder(int order) Sets the order used to compute the delay of each child's animation.","void start() Starts the animation.","boolean willOverlap() Indicates whether two children's animations will overlap.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.view.animation","constants":["int DIRECTION_BOTTOM_TO_TOP Animates the children starting from the bottom of the grid to the top.","int DIRECTION_HORIZONTAL_MASK Bitmask used to retrieve the horizontal component of the direction.","int DIRECTION_LEFT_TO_RIGHT Animates the children starting from the left of the grid to the right.","int DIRECTION_RIGHT_TO_LEFT Animates the children starting from the right of the grid to the left.","int DIRECTION_TOP_TO_BOTTOM Animates the children starting from the top of the grid to the bottom.","int DIRECTION_VERTICAL_MASK Bitmask used to retrieve the vertical component of the direction.","int PRIORITY_COLUMN Columns are animated first.","int PRIORITY_NONE Rows and columns are animated at the same time.","int PRIORITY_ROW Rows are animated first.","[Expand] Inherited Constants","From class android.view.animation.LayoutAnimationController int ORDER_NORMAL Distributes the animation delays in the order in which view were added to their view group. int ORDER_RANDOM Randomly distributes the animation delays. int ORDER_REVERSE Distributes the animation delays in the reverse order in which view were added to their view group.","int ORDER_NORMAL Distributes the animation delays in the order in which view were added to their view group.","int ORDER_RANDOM Randomly distributes the animation delays.","int ORDER_REVERSE Distributes the animation delays in the reverse order in which view were added to their view group."],"class":"GridLayoutAnimationController","constructors":[],"fields":[]}