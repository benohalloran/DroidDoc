{"methods":["int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation.","int getControllerNumber() The controller number for a given input device.","String getDescriptor() Gets the input device descriptor, which is a stable identifier for an input device.","static InputDevice getDevice(int id) Gets information about the input device with the specified id.","static int[] getDeviceIds() Gets the ids of all input devices in the system.","int getId() Gets the input device id.","KeyCharacterMap getKeyCharacterMap() Gets the key character map associated with this input device.","int getKeyboardType() Gets the keyboard type.","InputDevice.MotionRange getMotionRange(int axis, int source) Gets information about the range of values for a particular MotionEvent axis used by a particular source on the device.","InputDevice.MotionRange getMotionRange(int axis) Gets information about the range of values for a particular MotionEvent axis.","List<InputDevice.MotionRange> getMotionRanges() Gets the ranges for all axes supported by the device.","String getName() Gets the name of this input device.","int getProductId() Gets the product id for the given device, if available.","int getSources() Gets the input sources supported by this input device as a combined bitfield.","int getVendorId() Gets the vendor id for the given device, if available.","Vibrator getVibrator() Gets the vibrator service associated with the device, if there is one.","boolean[] hasKeys(int... keys) Gets whether the device is capable of producing the list of keycodes.","boolean isVirtual() Returns true if the device is a virtual input device rather than a real one, such as the virtual keyboard (see VIRTUAL_KEYBOARD).","boolean supportsSource(int source) Determines whether the input device supports the given source or sources.","String toString() Returns a string containing a concise, human-readable description of this object.","void writeToParcel(Parcel out, int flags) Flatten this object in to a Parcel.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface android.os.Parcelable abstract int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation. abstract void writeToParcel(Parcel dest, int flags) Flatten this object in to a Parcel.","abstract int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation.","abstract void writeToParcel(Parcel dest, int flags) Flatten this object in to a Parcel."],"package":"android.view","constants":["int KEYBOARD_TYPE_ALPHABETIC The keyboard supports a complement of alphabetic keys.","int KEYBOARD_TYPE_NONE There is no keyboard.","int KEYBOARD_TYPE_NON_ALPHABETIC The keyboard is not fully alphabetic.","int MOTION_RANGE_ORIENTATION This constant was deprecated in API level 12. Use AXIS_ORIENTATION instead.","int MOTION_RANGE_PRESSURE This constant was deprecated in API level 12. Use AXIS_PRESSURE instead.","int MOTION_RANGE_SIZE This constant was deprecated in API level 12. Use AXIS_SIZE instead.","int MOTION_RANGE_TOOL_MAJOR This constant was deprecated in API level 12. Use AXIS_TOOL_MAJOR instead.","int MOTION_RANGE_TOOL_MINOR This constant was deprecated in API level 12. Use AXIS_TOOL_MINOR instead.","int MOTION_RANGE_TOUCH_MAJOR This constant was deprecated in API level 12. Use AXIS_TOUCH_MAJOR instead.","int MOTION_RANGE_TOUCH_MINOR This constant was deprecated in API level 12. Use AXIS_TOUCH_MINOR instead.","int MOTION_RANGE_X This constant was deprecated in API level 12. Use AXIS_X instead.","int MOTION_RANGE_Y This constant was deprecated in API level 12. Use AXIS_Y instead.","int SOURCE_ANY A special input source constant that is used when filtering input devices to match devices that provide any type of input source.","int SOURCE_CLASS_BUTTON The input source has buttons or keys.","int SOURCE_CLASS_JOYSTICK The input source is a joystick.","int SOURCE_CLASS_MASK A mask for input source classes.","int SOURCE_CLASS_NONE The input source has no class.","int SOURCE_CLASS_POINTER The input source is a pointing device associated with a display.","int SOURCE_CLASS_POSITION The input source is an absolute positioning device not associated with a display (unlike SOURCE_CLASS_POINTER).","int SOURCE_CLASS_TRACKBALL The input source is a trackball navigation device.","int SOURCE_DPAD The input source is a DPad.","int SOURCE_GAMEPAD The input source is a game pad.","int SOURCE_HDMI The input source is a device connected through HDMI-based bus.","int SOURCE_JOYSTICK The input source is a joystick.","int SOURCE_KEYBOARD The input source is a keyboard.","int SOURCE_MOUSE The input source is a mouse pointing device.","int SOURCE_STYLUS The input source is a stylus pointing device.","int SOURCE_TOUCHPAD The input source is a touch pad or digitizer tablet that is not associated with a display (unlike SOURCE_TOUCHSCREEN).","int SOURCE_TOUCHSCREEN The input source is a touch screen pointing device.","int SOURCE_TOUCH_NAVIGATION The input source is a touch device whose motions should be interpreted as navigation events.","int SOURCE_TRACKBALL The input source is a trackball.","int SOURCE_UNKNOWN The input source is unknown.","[Expand] Inherited Constants","From interface android.os.Parcelable int CONTENTS_FILE_DESCRIPTOR Bit masks for use with describeContents(): each bit represents a kind of object considered to have potential special significance when marshalled. int PARCELABLE_WRITE_RETURN_VALUE Flag for use with writeToParcel(Parcel, int): the object being written is a return value, that is the result of a function such as \"Parcelable someFunction()\", \"void someFunction(out Parcelable)\", or \"void someFunction(inout Parcelable)\".","int CONTENTS_FILE_DESCRIPTOR Bit masks for use with describeContents(): each bit represents a kind of object considered to have potential special significance when marshalled.","int PARCELABLE_WRITE_RETURN_VALUE Flag for use with writeToParcel(Parcel, int): the object being written is a return value, that is the result of a function such as \"Parcelable someFunction()\", \"void someFunction(out Parcelable)\", or \"void someFunction(inout Parcelable)\"."],"class":"InputDevice","constructors":[],"fields":["public static final Creator<InputDevice> CREATOR"]}