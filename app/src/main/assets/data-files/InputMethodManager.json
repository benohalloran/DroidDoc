{"methods":["void displayCompletions(View view, CompletionInfo[] completions)","InputMethodSubtype getCurrentInputMethodSubtype() Returns the current input method subtype.","List<InputMethodInfo> getEnabledInputMethodList()","List<InputMethodSubtype> getEnabledInputMethodSubtypeList(InputMethodInfo imi, boolean allowsImplicitlySelectedSubtypes) Returns a list of enabled input method subtypes for the specified input method info.","List<InputMethodInfo> getInputMethodList()","InputMethodSubtype getLastInputMethodSubtype()","Map<InputMethodInfo, List<InputMethodSubtype>> getShortcutInputMethodsAndSubtypes() Returns a map of all shortcut input method info and their subtypes.","void hideSoftInputFromInputMethod(IBinder token, int flags) Close/hide the input method's soft input area, so the user no longer sees it or can interact with it.","boolean hideSoftInputFromWindow(IBinder windowToken, int flags) Synonym for hideSoftInputFromWindow(IBinder, int, ResultReceiver) without a result: request to hide the soft input window from the context of the window that is currently accepting input.","boolean hideSoftInputFromWindow(IBinder windowToken, int flags, ResultReceiver resultReceiver) Request to hide the soft input window from the context of the window that is currently accepting input.","void hideStatusIcon(IBinder imeToken)","boolean isAcceptingText() Return true if the currently served view is accepting full text edits.","boolean isActive(View view) Return true if the given view is the currently active view for the input method.","boolean isActive() Return true if any view is currently active in the input method.","boolean isFullscreenMode() Allows you to discover whether the attached input method is running in fullscreen mode.","boolean isWatchingCursor(View view) This method was deprecated in API level 21. Use requestCursorUpdates(int) instead.","void restartInput(View view) If the input method is currently connected to the given view, restart it with its new contents.","void sendAppPrivateCommand(View view, String action, Bundle data) Call InputMethodSession.appPrivateCommand() on the current Input Method.","void setAdditionalInputMethodSubtypes(String imiId, InputMethodSubtype[] subtypes) Set additional input method subtypes.","boolean setCurrentInputMethodSubtype(InputMethodSubtype subtype) Switch to a new input method subtype of the current input method.","void setInputMethod(IBinder token, String id) Force switch to a new input method component.","void setInputMethodAndSubtype(IBinder token, String id, InputMethodSubtype subtype) Force switch to a new input method and subtype.","boolean shouldOfferSwitchingToNextInputMethod(IBinder imeToken) Returns true if the current IME needs to offer the users ways to switch to a next input method (e.g.","void showInputMethodAndSubtypeEnabler(String imiId) Show the settings for enabling subtypes of the specified input method.","void showInputMethodPicker()","boolean showSoftInput(View view, int flags, ResultReceiver resultReceiver) Explicitly request that the current input method's soft input area be shown to the user, if needed.","boolean showSoftInput(View view, int flags) Synonym for showSoftInput(View, int, ResultReceiver) without a result receiver: explicitly request that the current input method's soft input area be shown to the user, if needed.","void showSoftInputFromInputMethod(IBinder token, int flags) Show the input method's soft input area, so the user sees the input method window and can interact with it.","void showStatusIcon(IBinder imeToken, String packageName, int iconId)","boolean switchToLastInputMethod(IBinder imeToken) Force switch to the last used input method and subtype.","boolean switchToNextInputMethod(IBinder imeToken, boolean onlyCurrentIme) Force switch to the next input method and subtype.","void toggleSoftInput(int showFlags, int hideFlags)","void toggleSoftInputFromWindow(IBinder windowToken, int showFlags, int hideFlags) This method toggles the input method window display.","void updateCursor(View view, int left, int top, int right, int bottom) This method was deprecated in API level 21. Use updateCursorAnchorInfo(View, CursorAnchorInfo) instead.","void updateCursorAnchorInfo(View view, CursorAnchorInfo cursorAnchorInfo) Report positional change of the text insertion point and/or characters in the composition string.","void updateExtractedText(View view, int token, ExtractedText text)","void updateSelection(View view, int selStart, int selEnd, int candidatesStart, int candidatesEnd) Report the current selection range.","void viewClicked(View view) Notify the event when the user tapped or clicked the text view.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.view.inputmethod","constants":["int HIDE_IMPLICIT_ONLY Flag for hideSoftInputFromWindow(IBinder, int) to indicate that the soft input window should only be hidden if it was not explicitly shown by the user.","int HIDE_NOT_ALWAYS Flag for hideSoftInputFromWindow(IBinder, int) to indicate that the soft input window should normally be hidden, unless it was originally shown with SHOW_FORCED.","int RESULT_HIDDEN Flag for the ResultReceiver result code from showSoftInput(View, int, ResultReceiver) and hideSoftInputFromWindow(IBinder, int, ResultReceiver): the state of the soft input window changed from shown to hidden.","int RESULT_SHOWN Flag for the ResultReceiver result code from showSoftInput(View, int, ResultReceiver) and hideSoftInputFromWindow(IBinder, int, ResultReceiver): the state of the soft input window changed from hidden to shown.","int RESULT_UNCHANGED_HIDDEN Flag for the ResultReceiver result code from showSoftInput(View, int, ResultReceiver) and hideSoftInputFromWindow(IBinder, int, ResultReceiver): the state of the soft input window was unchanged and remains hidden.","int RESULT_UNCHANGED_SHOWN Flag for the ResultReceiver result code from showSoftInput(View, int, ResultReceiver) and hideSoftInputFromWindow(IBinder, int, ResultReceiver): the state of the soft input window was unchanged and remains shown.","int SHOW_FORCED Flag for showSoftInput(View, int) to indicate that the user has forced the input method open (such as by long-pressing menu) so it should not be closed until they explicitly do so.","int SHOW_IMPLICIT Flag for showSoftInput(View, int) to indicate that this is an implicit request to show the input window, not as the result of a direct request by the user."],"class":"InputMethodManager","constructors":[],"fields":[]}