{"methods":["int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation.","static boolean deviceHasKey(int keyCode) Queries the framework about whether any physical keys exist on the any keyboard attached to the device that are capable of producing the given key code.","static boolean[] deviceHasKeys(int[] keyCodes) Queries the framework about whether any physical keys exist on the any keyboard attached to the device that are capable of producing the given array of key codes.","int get(int keyCode, int metaState) Gets the Unicode character generated by the specified key and meta key state combination.","static int getDeadChar(int accent, int c) Get the character that is produced by combining the dead key producing accent with the key producing character c.","char getDisplayLabel(int keyCode) Gets the primary character for this key.","KeyEvent[] getEvents(char[] chars) Get an array of KeyEvent objects that if put into the input stream could plausibly generate the provided sequence of characters.","boolean getKeyData(int keyCode, KeyCharacterMap.KeyData results) This method was deprecated in API level 11. instead use getDisplayLabel(int), getNumber(int) or get(int, int).","int getKeyboardType() Gets the keyboard type.","char getMatch(int keyCode, char[] chars) Gets the first character in the character array that can be generated by the specified key code.","char getMatch(int keyCode, char[] chars, int metaState) Gets the first character in the character array that can be generated by the specified key code.","int getModifierBehavior() Gets a constant that describes the behavior of this keyboard's modifier keys such as KEYCODE_SHIFT_LEFT.","char getNumber(int keyCode) Gets the number or symbol associated with the key.","boolean isPrintingKey(int keyCode) Returns true if the specified key produces a glyph.","static KeyCharacterMap load(int deviceId) Loads the key character maps for the keyboard with the specified device id.","void writeToParcel(Parcel out, int flags) Flatten this object in to a Parcel.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface android.os.Parcelable abstract int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation. abstract void writeToParcel(Parcel dest, int flags) Flatten this object in to a Parcel.","abstract int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation.","abstract void writeToParcel(Parcel dest, int flags) Flatten this object in to a Parcel."],"package":"android.view","constants":["int ALPHA A keyboard with all the letters, and maybe some numbers.","int BUILT_IN_KEYBOARD This constant was deprecated in API level 11. This constant should no longer be used because there is no guarantee that a device has a built-in keyboard that can be used for typing text. There might not be a built-in keyboard, the built-in keyboard might be a NUMERIC or SPECIAL_FUNCTION keyboard, or there might be multiple keyboards installed including external keyboards. When interpreting key presses received from the framework, applications should use the device id specified in the KeyEvent received. When synthesizing key presses for delivery elsewhere or when translating key presses from unknown keyboards, applications should use the special VIRTUAL_KEYBOARD device id.","int COMBINING_ACCENT","int COMBINING_ACCENT_MASK Mask the return value from get(int, int) with this value to get a printable representation of the accent character of a \"dead key.\"","int FULL A full PC-style keyboard.","char HEX_INPUT This private-use character is used to trigger Unicode character input by hex digits.","int MODIFIER_BEHAVIOR_CHORDED Modifier keys may be chorded with character keys.","int MODIFIER_BEHAVIOR_CHORDED_OR_TOGGLED Modifier keys may be chorded with character keys or they may toggle into latched or locked states when pressed independently.","int NUMERIC A numeric (12-key) keyboard.","char PICKER_DIALOG_INPUT This private-use character is used to bring up a character picker for miscellaneous symbols.","int PREDICTIVE A keyboard with all the letters, but with more than one letter per key.","int SPECIAL_FUNCTION A keyboard that is only used to control special functions rather than for typing.","int VIRTUAL_KEYBOARD The id of a generic virtual keyboard with a full layout that can be used to synthesize key events.","[Expand] Inherited Constants","From interface android.os.Parcelable int CONTENTS_FILE_DESCRIPTOR Bit masks for use with describeContents(): each bit represents a kind of object considered to have potential special significance when marshalled. int PARCELABLE_WRITE_RETURN_VALUE Flag for use with writeToParcel(Parcel, int): the object being written is a return value, that is the result of a function such as \"Parcelable someFunction()\", \"void someFunction(out Parcelable)\", or \"void someFunction(inout Parcelable)\".","int CONTENTS_FILE_DESCRIPTOR Bit masks for use with describeContents(): each bit represents a kind of object considered to have potential special significance when marshalled.","int PARCELABLE_WRITE_RETURN_VALUE Flag for use with writeToParcel(Parcel, int): the object being written is a return value, that is the result of a function such as \"Parcelable someFunction()\", \"void someFunction(out Parcelable)\", or \"void someFunction(inout Parcelable)\"."],"class":"KeyCharacterMap","constructors":[],"fields":["public static final Creator<KeyCharacterMap> CREATOR"]}