{"methods":["abstract void abort() Abort the loading of the document that is currently being loaded by the LSParser.","abstract boolean getAsync() true if the LSParser is asynchronous, false if it is synchronous.","abstract boolean getBusy() true if the LSParser is currently busy loading a document, otherwise false.","abstract DOMConfiguration getDomConfig() The DOMConfiguration object used when parsing an input source.","abstract LSParserFilter getFilter() When a filter is provided, the implementation will call out to the filter as it is constructing the DOM tree structure.","abstract Document parse(LSInput input) Parse an XML document from a resource identified by a LSInput.","abstract Document parseURI(String uri) Parse an XML document from a location identified by a URI reference [IETF RFC 2396].","abstract Node parseWithContext(LSInput input, Node contextArg, short action) Parse an XML fragment from a resource identified by a LSInput and insert the content into an existing document at the position specified with the context and action arguments.","abstract void setFilter(LSParserFilter filter) When a filter is provided, the implementation will call out to the filter as it is constructing the DOM tree structure."],"package":"org.w3c.dom.ls","constants":["short ACTION_APPEND_AS_CHILDREN Append the result of the parse operation as children of the context node.","short ACTION_INSERT_AFTER Insert the result of the parse operation as the immediately following sibling of the context node.","short ACTION_INSERT_BEFORE Insert the result of the parse operation as the immediately preceding sibling of the context node.","short ACTION_REPLACE Replace the context node with the result of the parse operation.","short ACTION_REPLACE_CHILDREN Replace all the children of the context node with the result of the parse operation."],"class":"LSParser","constructors":[],"fields":[]}