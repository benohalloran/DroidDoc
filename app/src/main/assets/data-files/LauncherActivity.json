{"methods":["List<LauncherActivity.ListItem> makeListItems() Perform the query to determine which results to show and return a list of them.","void setTitle(int titleId) Change the title associated with this activity.","void setTitle(CharSequence title) Change the title associated with this activity.","Intent getTargetIntent() Get the base intent to use when running queryIntentActivities(Intent, int).","Intent intentForPosition(int position) Return the actual Intent for a specific position in our ListView.","LauncherActivity.ListItem itemForPosition(int position) Return the LauncherActivity.ListItem for a specific position in our ListView.","void onCreate(Bundle icicle) Called when the activity is starting.","void onListItemClick(ListView l, View v, int position, long id) This method will be called when an item in the list is selected.","List<ResolveInfo> onQueryPackageManager(Intent queryIntent) Perform query on package manager for list items.","void onSetContentView() Override to call setContentView() with your own content view to customize the list layout.","[Expand] Inherited Methods","From class android.app.ListActivity ListAdapter getListAdapter() Get the ListAdapter associated with this activity's ListView. ListView getListView() Get the activity's list view widget. long getSelectedItemId() Get the cursor row ID of the currently selected list item. int getSelectedItemPosition() Get the position of the currently selected list item. void onContentChanged() Updates the screen state (current list and other views) when the content changes. void onDestroy() Perform any final cleanup before an activity is destroyed. void onListItemClick(ListView l, View v, int position, long id) This method will be called when an item in the list is selected. void onRestoreInstanceState(Bundle state) Ensures the list view has been created before Activity restores all of the view states. void setListAdapter(ListAdapter adapter) Provide the cursor for the list view. void setSelection(int position) Set the currently selected list item to the specified position with the adapter's data","ListAdapter getListAdapter() Get the ListAdapter associated with this activity's ListView.","ListView getListView() Get the activity's list view widget.","long getSelectedItemId() Get the cursor row ID of the currently selected list item.","int getSelectedItemPosition() Get the position of the currently selected list item.","void onContentChanged() Updates the screen state (current list and other views) when the content changes.","void onDestroy() Perform any final cleanup before an activity is destroyed.","void onListItemClick(ListView l, View v, int position, long id) This method will be called when an item in the list is selected.","void onRestoreInstanceState(Bundle state) Ensures the list view has been created before Activity restores all of the view states.","void setListAdapter(ListAdapter adapter) Provide the cursor for the list view.","void setSelection(int position) Set the currently selected list item to the specified position with the adapter's data","From class android.app.Activity void addContentView(View view, ViewGroup.LayoutParams params) Add an additional content view to the activity. void closeContextMenu() Programmatically closes the most recently opened context menu, if showing. void closeOptionsMenu() Progammatically closes the options menu. PendingIntent createPendingResult(int requestCode, Intent data, int flags) Create a new PendingIntent object which you can hand to others for them to use to send result data back to your onActivityResult(int, int, Intent) callback. final void dismissDialog(int id) This method was deprecated in API level 13. Use the new DialogFragment class with FragmentManager instead; this is also available on older platforms through the Android compatibility package. boolean dispatchGenericMotionEvent(MotionEvent ev) Called to process generic motion events. boolean dispatchKeyEvent(KeyEvent event) Called to process key events. boolean dispatchKeyShortcutEvent(KeyEvent event) Called to process a key shortcut event. boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) Called to process population of AccessibilityEvents. boolean dispatchTouchEvent(MotionEvent ev) Called to process touch screen events. boolean dispatchTrackballEvent(MotionEvent ev) Called to process trackball events. void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args) Print the Activity's state into the given stream. View findViewById(int id) Finds a view that was identified by the id attribute from the XML that was processed in onCreate(Bundle). void finish() Call this when your activity is done and should be closed. void finishActivity(int requestCode) Force finish another activity that you had previously started with startActivityForResult(Intent, int). void finishActivityFromChild(Activity child, int requestCode) This is called when a child activity of this one calls its finishActivity(). void finishAffinity() Finish this activity as well as all activities immediately below it in the current task that have the same affinity. void finishAfterTransition() Reverses the Activity Scene entry Transition and triggers the calling Activity to reverse its exit Transition. void finishAndRemoveTask() Call this when your activity is done and should be closed and the task should be completely removed as a part of finishing the Activity. void finishFromChild(Activity child) This is called when a child activity of this one calls its finish() method. ActionBar getActionBar() Retrieve a reference to this activity's ActionBar. final Application getApplication() Return the application that owns this activity. ComponentName getCallingActivity() Return the name of the activity that invoked this activity. String getCallingPackage() Return the name of the package that invoked this activity. int getChangingConfigurations() If this activity is being destroyed because it can not handle a configuration parameter being changed (and thus its onConfigurationChanged(Configuration) method is not being called), then you can use this method to discover the set of changes that have occurred while in the process of being destroyed. ComponentName getComponentName() Returns complete component name of this activity. Scene getContentScene() Retrieve the Scene representing this window's current content. TransitionManager getContentTransitionManager() Retrieve the TransitionManager responsible for default transitions in this window. View getCurrentFocus() Calls getCurrentFocus() on the Window of this Activity to return the currently focused view. FragmentManager getFragmentManager() Return the FragmentManager for interacting with fragments associated with this activity. Intent getIntent() Return the intent that started this activity. Object getLastNonConfigurationInstance() This method was deprecated in API level 13. Use the new Fragment API setRetainInstance(boolean) instead; this is also available on older platforms through the Android compatibility package. LayoutInflater getLayoutInflater() Convenience for calling getLayoutInflater(). LoaderManager getLoaderManager() Return the LoaderManager for this activity, creating it if needed. String getLocalClassName() Returns class name for this activity with the package prefix removed. final MediaController getMediaController() Gets the controller which should be receiving media key and volume events while this activity is in the foreground. MenuInflater getMenuInflater() Returns a MenuInflater with this context. final Activity getParent() Return the parent activity if this view is an embedded child. Intent getParentActivityIntent() Obtain an Intent that will launch an explicit target activity specified by this activity's logical parent. SharedPreferences getPreferences(int mode) Retrieve a SharedPreferences object for accessing preferences that are private to this activity. int getRequestedOrientation() Return the current requested orientation of the activity. Object getSystemService(String name) Return the handle to a system-level service by name. int getTaskId() Return the identifier of the task this activity is in. final CharSequence getTitle() final int getTitleColor() final int getVolumeControlStream() Gets the suggested audio stream whose volume should be changed by the hardware volume controls. Window getWindow() Retrieve the current Window for the activity. WindowManager getWindowManager() Retrieve the window manager for showing custom windows. boolean hasWindowFocus() Returns true if this activity's main window currently has window focus. void invalidateOptionsMenu() Declare that the options menu has changed, so should be recreated. boolean isChangingConfigurations() Check to see whether this activity is in the process of being destroyed in order to be recreated with a new configuration. final boolean isChild() Is this activity embedded inside of another activity? boolean isDestroyed() Returns true if the final onDestroy() call has been made on the Activity, so this instance is now dead. boolean isFinishing() Check to see whether this activity is in the process of finishing, either because you called finish() on it or someone else has requested that it finished. boolean isImmersive() Bit indicating that this activity is \"immersive\" and should not be interrupted by notifications if possible. boolean isTaskRoot() Return whether this activity is the root of a task. final Cursor managedQuery(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) This method was deprecated in API level 11. Use CursorLoader instead. boolean moveTaskToBack(boolean nonRoot) Move the task containing this activity to the back of the activity stack. boolean navigateUpTo(Intent upIntent) Navigate from this activity to the activity specified by upIntent, finishing this activity in the process. boolean navigateUpToFromChild(Activity child, Intent upIntent) This is called when a child activity of this one calls its navigateUpTo(Intent) method. void onActionModeFinished(ActionMode mode) Notifies the activity that an action mode has finished. void onActionModeStarted(ActionMode mode) Notifies the Activity that an action mode has been started. void onActivityReenter(int resultCode, Intent data) Called when an activity you launched with an activity transition exposes this Activity through a returning activity transition, giving you the resultCode and any additional data from it. void onActivityResult(int requestCode, int resultCode, Intent data) Called when an activity you launched exits, giving you the requestCode you started it with, the resultCode it returned, and any additional data from it. void onApplyThemeResource(Resources.Theme theme, int resid, boolean first) Called by setTheme(int) and getTheme() to apply a theme resource to the current Theme object. void onAttachFragment(Fragment fragment) Called when a Fragment is being attached to this activity, immediately after the call to its Fragment.onAttach() method and before Fragment.onCreate(). void onAttachedToWindow() Called when the main window associated with the activity has been attached to the window manager. void onBackPressed() Called when the activity has detected the user's press of the back key. void onChildTitleChanged(Activity childActivity, CharSequence title) void onConfigurationChanged(Configuration newConfig) Called by the system when the device configuration changes while your activity is running. void onContentChanged() This hook is called whenever the content view of the screen changes (due to a call to Window.setContentView or Window.addContentView). boolean onContextItemSelected(MenuItem item) This hook is called whenever an item in a context menu is selected. void onContextMenuClosed(Menu menu) This hook is called whenever the context menu is being closed (either by the user canceling the menu with the back/menu button, or when an item is selected). void onCreate(Bundle savedInstanceState) Called when the activity is starting. void onCreate(Bundle savedInstanceState, PersistableBundle persistentState) Same as onCreate(android.os.Bundle) but called for those activities created with the attribute persistableMode set to persistAcrossReboots. void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) Called when a context menu for the view is about to be shown. CharSequence onCreateDescription() Generate a new description for this activity. Dialog onCreateDialog(int id, Bundle args) This method was deprecated in API level 13. Use the new DialogFragment class with FragmentManager instead; this is also available on older platforms through the Android compatibility package. Dialog onCreateDialog(int id) This method was deprecated in API level 8. Old no-arguments version of onCreateDialog(int, Bundle). void onCreateNavigateUpTaskStack(TaskStackBuilder builder) Define the synthetic task stack that will be generated during Up navigation from a different task. boolean onCreateOptionsMenu(Menu menu) Initialize the contents of the Activity's standard options menu. boolean onCreatePanelMenu(int featureId, Menu menu) Default implementation of onCreatePanelMenu(int, Menu) for activities. View onCreatePanelView(int featureId) Default implementation of onCreatePanelView(int) for activities. boolean onCreateThumbnail(Bitmap outBitmap, Canvas canvas) Generate a new thumbnail for this activity. View onCreateView(View parent, String name, Context context, AttributeSet attrs) Standard implementation of onCreateView(View, String, Context, AttributeSet) used when inflating with the LayoutInflater returned by getSystemService(String). View onCreateView(String name, Context context, AttributeSet attrs) Standard implementation of onCreateView(String, Context, AttributeSet) used when inflating with the LayoutInflater returned by getSystemService(String). void onDestroy() Perform any final cleanup before an activity is destroyed. void onDetachedFromWindow() Called when the main window associated with the activity has been detached from the window manager. void onEnterAnimationComplete() Activities cannot draw during the period that their windows are animating in. boolean onGenericMotionEvent(MotionEvent event) Called when a generic motion event was not handled by any of the views inside of the activity. boolean onKeyDown(int keyCode, KeyEvent event) Called when a key was pressed down and not handled by any of the views inside of the activity. boolean onKeyLongPress(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyLongPress(): always returns false (doesn't handle the event). boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event). boolean onKeyShortcut(int keyCode, KeyEvent event) Called when a key shortcut event is not handled by any of the views in the Activity. boolean onKeyUp(int keyCode, KeyEvent event) Called when a key was released and not handled by any of the views inside of the activity. void onLowMemory() This is called when the overall system is running low on memory, and actively running processes should trim their memory usage. boolean onMenuItemSelected(int featureId, MenuItem item) Default implementation of onMenuItemSelected(int, MenuItem) for activities. boolean onMenuOpened(int featureId, Menu menu) Called when a panel's menu is opened by the user. boolean onNavigateUp() This method is called whenever the user chooses to navigate Up within your application's activity hierarchy from the action bar. boolean onNavigateUpFromChild(Activity child) This is called when a child activity of this one attempts to navigate up. void onNewIntent(Intent intent) This is called for activities that set launchMode to \"singleTop\" in their package, or if a client used the FLAG_ACTIVITY_SINGLE_TOP flag when calling startActivity(Intent). boolean onOptionsItemSelected(MenuItem item) This hook is called whenever an item in your options menu is selected. void onOptionsMenuClosed(Menu menu) This hook is called whenever the options menu is being closed (either by the user canceling the menu with the back/menu button, or when an item is selected). void onPanelClosed(int featureId, Menu menu) Default implementation of onPanelClosed(int, Menu) for activities. void onPause() Called as part of the activity lifecycle when an activity is going into the background, but has not (yet) been killed. void onPostCreate(Bundle savedInstanceState) Called when activity start-up is complete (after onStart() and onRestoreInstanceState(Bundle) have been called). void onPostCreate(Bundle savedInstanceState, PersistableBundle persistentState) This is the same as onPostCreate(Bundle) but is called for activities created with the attribute persistableMode set to persistAcrossReboots. void onPostResume() Called when activity resume is complete (after onResume() has been called). void onPrepareDialog(int id, Dialog dialog, Bundle args) This method was deprecated in API level 13. Use the new DialogFragment class with FragmentManager instead; this is also available on older platforms through the Android compatibility package. void onPrepareDialog(int id, Dialog dialog) This method was deprecated in API level 8. Old no-arguments version of onPrepareDialog(int, Dialog, Bundle). void onPrepareNavigateUpTaskStack(TaskStackBuilder builder) Prepare the synthetic task stack that will be generated during Up navigation from a different task. boolean onPrepareOptionsMenu(Menu menu) Prepare the Screen's standard options menu to be displayed. boolean onPreparePanel(int featureId, View view, Menu menu) Default implementation of onPreparePanel(int, View, Menu) for activities. void onProvideAssistData(Bundle data) This is called when the user is requesting an assist, to build a full ACTION_ASSIST Intent with all of the context of the current application. void onRestart() Called after onStop() when the current activity is being re-displayed to the user (the user has navigated back to it). void onRestoreInstanceState(Bundle savedInstanceState, PersistableBundle persistentState) This is the same as onRestoreInstanceState(Bundle) but is called for activities created with the attribute persistableMode set to persistAcrossReboots. void onRestoreInstanceState(Bundle savedInstanceState) This method is called after onStart() when the activity is being re-initialized from a previously saved state, given here in savedInstanceState. void onResume() Called after onRestoreInstanceState(Bundle), onRestart(), or onPause(), for your activity to start interacting with the user. Object onRetainNonConfigurationInstance() This method was deprecated in API level 13. Use the new Fragment API setRetainInstance(boolean) instead; this is also available on older platforms through the Android compatibility package. void onSaveInstanceState(Bundle outState) Called to retrieve per-instance state from an activity before being killed so that the state can be restored in onCreate(Bundle) or onRestoreInstanceState(Bundle) (the Bundle populated by this method will be passed to both). void onSaveInstanceState(Bundle outState, PersistableBundle outPersistentState) This is the same as onSaveInstanceState(Bundle) but is called for activities created with the attribute persistableMode set to persistAcrossReboots. boolean onSearchRequested() This hook is called when the user signals the desire to start a search. void onStart() Called after onCreate(Bundle) \u2014 or after onRestart() when the activity had been stopped, but is now again being displayed to the user. void onStop() Called when you are no longer visible to the user. void onTitleChanged(CharSequence title, int color) boolean onTouchEvent(MotionEvent event) Called when a touch screen event was not handled by any of the views under it. boolean onTrackballEvent(MotionEvent event) Called when the trackball was moved and not handled by any of the views inside of the activity. void onTrimMemory(int level) Called when the operating system has determined that it is a good time for a process to trim unneeded memory from its process. void onUserInteraction() Called whenever a key, touch, or trackball event is dispatched to the activity. void onUserLeaveHint() Called as part of the activity lifecycle when an activity is about to go into the background as the result of user choice. void onVisibleBehindCanceled() Called when a translucent activity over this activity is becoming opaque or another activity is being launched. void onWindowAttributesChanged(WindowManager.LayoutParams params) This is called whenever the current window attributes change. abstract void onWindowDismissed() Called when a window is dismissed. void onWindowFocusChanged(boolean hasFocus) Called when the current Window of the activity gains or loses focus. ActionMode onWindowStartingActionMode(ActionMode.Callback callback) Give the Activity a chance to control the UI for an action mode requested by the system. void openContextMenu(View view) Programmatically opens the context menu for a particular view. void openOptionsMenu() Programmatically opens the options menu. void overridePendingTransition(int enterAnim, int exitAnim) Call immediately after one of the flavors of startActivity(Intent) or finish() to specify an explicit transition animation to perform next. void postponeEnterTransition() Postpone the entering activity transition when Activity was started with makeSceneTransitionAnimation(Activity, android.util.Pair[]). void recreate() Cause this Activity to be recreated with a new instance. void registerForContextMenu(View view) Registers a context menu to be shown for the given view (multiple views can show the context menu). boolean releaseInstance() Ask that the local app instance of this activity be released to free up its memory. final void removeDialog(int id) This method was deprecated in API level 13. Use the new DialogFragment class with FragmentManager instead; this is also available on older platforms through the Android compatibility package. void reportFullyDrawn() Report to the system that your app is now fully drawn, purely for diagnostic purposes (calling it does not impact the visible behavior of the activity). boolean requestVisibleBehind(boolean visible) Activities that want to remain visible behind a translucent activity above them must call this method anytime between the start of onResume() and the return from onPause(). final boolean requestWindowFeature(int featureId) Enable extended window features. final void runOnUiThread(Runnable action) Runs the specified action on the UI thread. void setActionBar(Toolbar toolbar) Set a Toolbar to act as the ActionBar for this Activity window. void setContentTransitionManager(TransitionManager tm) Set the TransitionManager to use for default transitions in this window. void setContentView(View view) Set the activity content to an explicit view. void setContentView(int layoutResID) Set the activity content from a layout resource. void setContentView(View view, ViewGroup.LayoutParams params) Set the activity content to an explicit view. final void setDefaultKeyMode(int mode) Select the default key handling for this activity. void setEnterSharedElementCallback(SharedElementCallback callback) When makeSceneTransitionAnimation(Activity, android.view.View, String) was used to start an Activity, callback will be called to handle shared elements on the launched Activity. void setExitSharedElementCallback(SharedElementCallback callback) When makeSceneTransitionAnimation(Activity, android.view.View, String) was used to start an Activity, callback will be called to handle shared elements on the launching Activity. final void setFeatureDrawable(int featureId, Drawable drawable) Convenience for calling setFeatureDrawable(int, Drawable). final void setFeatureDrawableAlpha(int featureId, int alpha) Convenience for calling setFeatureDrawableAlpha(int, int). final void setFeatureDrawableResource(int featureId, int resId) Convenience for calling setFeatureDrawableResource(int, int). final void setFeatureDrawableUri(int featureId, Uri uri) Convenience for calling setFeatureDrawableUri(int, Uri). void setFinishOnTouchOutside(boolean finish) Sets whether this activity is finished when touched outside its window's bounds. void setImmersive(boolean i) Adjust the current immersive mode setting. void setIntent(Intent newIntent) Change the intent returned by getIntent(). final void setMediaController(MediaController controller) Sets a MediaController to send media keys and volume changes to. final void setProgress(int progress) Sets the progress for the progress bars in the title. final void setProgressBarIndeterminate(boolean indeterminate) Sets whether the horizontal progress bar in the title should be indeterminate (the circular is always indeterminate). final void setProgressBarIndeterminateVisibility(boolean visible) Sets the visibility of the indeterminate progress bar in the title. final void setProgressBarVisibility(boolean visible) Sets the visibility of the progress bar in the title. void setRequestedOrientation(int requestedOrientation) Change the desired orientation of this activity. final void setResult(int resultCode) Call this to set the result that your activity will return to its caller. final void setResult(int resultCode, Intent data) Call this to set the result that your activity will return to its caller. final void setSecondaryProgress(int secondaryProgress) Sets the secondary progress for the progress bar in the title. void setTaskDescription(ActivityManager.TaskDescription taskDescription) Sets information describing the task with this activity for presentation inside the Recents System UI. void setTitle(int titleId) Change the title associated with this activity. void setTitle(CharSequence title) Change the title associated with this activity. void setTitleColor(int textColor) This method was deprecated in API level 21. Use action bar styles instead. void setVisible(boolean visible) Control whether this activity's main window is visible. final void setVolumeControlStream(int streamType) Suggests an audio stream whose volume should be changed by the hardware volume controls. boolean shouldUpRecreateTask(Intent targetIntent) Returns true if the app should recreate the task when navigating 'up' from this activity by using targetIntent. final boolean showDialog(int id, Bundle args) This method was deprecated in API level 13. Use the new DialogFragment class with FragmentManager instead; this is also available on older platforms through the Android compatibility package. final void showDialog(int id) This method was deprecated in API level 13. Use the new DialogFragment class with FragmentManager instead; this is also available on older platforms through the Android compatibility package. ActionMode startActionMode(ActionMode.Callback callback) Start an action mode. void startActivities(Intent[] intents, Bundle options) Launch a new activity. void startActivities(Intent[] intents) Same as startActivities(Intent[], Bundle) with no options specified. void startActivity(Intent intent, Bundle options) Launch a new activity. void startActivity(Intent intent) Same as startActivity(Intent, Bundle) with no options specified. void startActivityForResult(Intent intent, int requestCode) Same as calling startActivityForResult(Intent, int, Bundle) with no options. void startActivityForResult(Intent intent, int requestCode, Bundle options) Launch an activity for which you would like a result when it finished. void startActivityFromChild(Activity child, Intent intent, int requestCode, Bundle options) This is called when a child activity of this one calls its startActivity(Intent) or startActivityForResult(Intent, int) method. void startActivityFromChild(Activity child, Intent intent, int requestCode) Same as calling startActivityFromChild(Activity, Intent, int, Bundle) with no options. void startActivityFromFragment(Fragment fragment, Intent intent, int requestCode, Bundle options) This is called when a Fragment in this activity calls its startActivity(Intent) or startActivityForResult(Intent, int) method. void startActivityFromFragment(Fragment fragment, Intent intent, int requestCode) Same as calling startActivityFromFragment(Fragment, Intent, int, Bundle) with no options. boolean startActivityIfNeeded(Intent intent, int requestCode, Bundle options) A special variation to launch an activity only if a new activity instance is needed to handle the given Intent. boolean startActivityIfNeeded(Intent intent, int requestCode) Same as calling startActivityIfNeeded(Intent, int, Bundle) with no options. void startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options) Like startActivity(Intent, Bundle), but taking a IntentSender to start; see startIntentSenderForResult(IntentSender, int, Intent, int, int, int, Bundle) for more information. void startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags) Same as calling startIntentSender(IntentSender, Intent, int, int, int, Bundle) with no options. void startIntentSenderForResult(IntentSender intent, int requestCode, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags) Same as calling startIntentSenderForResult(IntentSender, int, Intent, int, int, int, Bundle) with no options. void startIntentSenderForResult(IntentSender intent, int requestCode, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options) Like startActivityForResult(Intent, int), but allowing you to use a IntentSender to describe the activity to be started. void startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags) Same as calling startIntentSenderFromChild(Activity, IntentSender, int, Intent, int, int, int, Bundle) with no options. void startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options) Like startActivityFromChild(Activity, Intent, int), but taking a IntentSender; see startIntentSenderForResult(IntentSender, int, Intent, int, int, int) for more information. void startLockTask() Request to put this Activity in a mode where the user is locked to the current task. void startManagingCursor(Cursor c) This method was deprecated in API level 11. Use the new CursorLoader class with LoaderManager instead; this is also available on older platforms through the Android compatibility package. boolean startNextMatchingActivity(Intent intent) Same as calling startNextMatchingActivity(Intent, Bundle) with no options. boolean startNextMatchingActivity(Intent intent, Bundle options) Special version of starting an activity, for use when you are replacing other activity components. void startPostponedEnterTransition() Begin postponed transitions after postponeEnterTransition() was called. void startSearch(String initialQuery, boolean selectInitialQuery, Bundle appSearchData, boolean globalSearch) This hook is called to launch the search UI. void stopLockTask() Allow the user to switch away from the current task. void stopManagingCursor(Cursor c) This method was deprecated in API level 11. Use the new CursorLoader class with LoaderManager instead; this is also available on older platforms through the Android compatibility package. void takeKeyEvents(boolean get) Request that key events come to this activity. void triggerSearch(String query, Bundle appSearchData) Similar to startSearch(String, boolean, Bundle, boolean), but actually fires off the search query after invoking the search dialog. void unregisterForContextMenu(View view) Prevents a context menu to be shown for the given view.","void addContentView(View view, ViewGroup.LayoutParams params) Add an additional content view to the activity.","void closeContextMenu() Programmatically closes the most recently opened context menu, if showing.","void closeOptionsMenu() Progammatically closes the options menu.","PendingIntent createPendingResult(int requestCode, Intent data, int flags) Create a new PendingIntent object which you can hand to others for them to use to send result data back to your onActivityResult(int, int, Intent) callback.","final void dismissDialog(int id) This method was deprecated in API level 13. Use the new DialogFragment class with FragmentManager instead; this is also available on older platforms through the Android compatibility package.","boolean dispatchGenericMotionEvent(MotionEvent ev) Called to process generic motion events.","boolean dispatchKeyEvent(KeyEvent event) Called to process key events.","boolean dispatchKeyShortcutEvent(KeyEvent event) Called to process a key shortcut event.","boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) Called to process population of AccessibilityEvents.","boolean dispatchTouchEvent(MotionEvent ev) Called to process touch screen events.","boolean dispatchTrackballEvent(MotionEvent ev) Called to process trackball events.","void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args) Print the Activity's state into the given stream.","View findViewById(int id) Finds a view that was identified by the id attribute from the XML that was processed in onCreate(Bundle).","void finish() Call this when your activity is done and should be closed.","void finishActivity(int requestCode) Force finish another activity that you had previously started with startActivityForResult(Intent, int).","void finishActivityFromChild(Activity child, int requestCode) This is called when a child activity of this one calls its finishActivity().","void finishAffinity() Finish this activity as well as all activities immediately below it in the current task that have the same affinity.","void finishAfterTransition() Reverses the Activity Scene entry Transition and triggers the calling Activity to reverse its exit Transition.","void finishAndRemoveTask() Call this when your activity is done and should be closed and the task should be completely removed as a part of finishing the Activity.","void finishFromChild(Activity child) This is called when a child activity of this one calls its finish() method.","ActionBar getActionBar() Retrieve a reference to this activity's ActionBar.","final Application getApplication() Return the application that owns this activity.","ComponentName getCallingActivity() Return the name of the activity that invoked this activity.","String getCallingPackage() Return the name of the package that invoked this activity.","int getChangingConfigurations() If this activity is being destroyed because it can not handle a configuration parameter being changed (and thus its onConfigurationChanged(Configuration) method is not being called), then you can use this method to discover the set of changes that have occurred while in the process of being destroyed.","ComponentName getComponentName() Returns complete component name of this activity.","Scene getContentScene() Retrieve the Scene representing this window's current content.","TransitionManager getContentTransitionManager() Retrieve the TransitionManager responsible for default transitions in this window.","View getCurrentFocus() Calls getCurrentFocus() on the Window of this Activity to return the currently focused view.","FragmentManager getFragmentManager() Return the FragmentManager for interacting with fragments associated with this activity.","Intent getIntent() Return the intent that started this activity.","Object getLastNonConfigurationInstance() This method was deprecated in API level 13. Use the new Fragment API setRetainInstance(boolean) instead; this is also available on older platforms through the Android compatibility package.","LayoutInflater getLayoutInflater() Convenience for calling getLayoutInflater().","LoaderManager getLoaderManager() Return the LoaderManager for this activity, creating it if needed.","String getLocalClassName() Returns class name for this activity with the package prefix removed.","final MediaController getMediaController() Gets the controller which should be receiving media key and volume events while this activity is in the foreground.","MenuInflater getMenuInflater() Returns a MenuInflater with this context.","final Activity getParent() Return the parent activity if this view is an embedded child.","Intent getParentActivityIntent() Obtain an Intent that will launch an explicit target activity specified by this activity's logical parent.","SharedPreferences getPreferences(int mode) Retrieve a SharedPreferences object for accessing preferences that are private to this activity.","int getRequestedOrientation() Return the current requested orientation of the activity.","Object getSystemService(String name) Return the handle to a system-level service by name.","int getTaskId() Return the identifier of the task this activity is in.","final CharSequence getTitle()","final int getTitleColor()","final int getVolumeControlStream() Gets the suggested audio stream whose volume should be changed by the hardware volume controls.","Window getWindow() Retrieve the current Window for the activity.","WindowManager getWindowManager() Retrieve the window manager for showing custom windows.","boolean hasWindowFocus() Returns true if this activity's main window currently has window focus.","void invalidateOptionsMenu() Declare that the options menu has changed, so should be recreated.","boolean isChangingConfigurations() Check to see whether this activity is in the process of being destroyed in order to be recreated with a new configuration.","final boolean isChild() Is this activity embedded inside of another activity?","boolean isDestroyed() Returns true if the final onDestroy() call has been made on the Activity, so this instance is now dead.","boolean isFinishing() Check to see whether this activity is in the process of finishing, either because you called finish() on it or someone else has requested that it finished.","boolean isImmersive() Bit indicating that this activity is \"immersive\" and should not be interrupted by notifications if possible.","boolean isTaskRoot() Return whether this activity is the root of a task.","final Cursor managedQuery(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) This method was deprecated in API level 11. Use CursorLoader instead.","boolean moveTaskToBack(boolean nonRoot) Move the task containing this activity to the back of the activity stack.","boolean navigateUpTo(Intent upIntent) Navigate from this activity to the activity specified by upIntent, finishing this activity in the process.","boolean navigateUpToFromChild(Activity child, Intent upIntent) This is called when a child activity of this one calls its navigateUpTo(Intent) method.","void onActionModeFinished(ActionMode mode) Notifies the activity that an action mode has finished.","void onActionModeStarted(ActionMode mode) Notifies the Activity that an action mode has been started.","void onActivityReenter(int resultCode, Intent data) Called when an activity you launched with an activity transition exposes this Activity through a returning activity transition, giving you the resultCode and any additional data from it.","void onActivityResult(int requestCode, int resultCode, Intent data) Called when an activity you launched exits, giving you the requestCode you started it with, the resultCode it returned, and any additional data from it.","void onApplyThemeResource(Resources.Theme theme, int resid, boolean first) Called by setTheme(int) and getTheme() to apply a theme resource to the current Theme object.","void onAttachFragment(Fragment fragment) Called when a Fragment is being attached to this activity, immediately after the call to its Fragment.onAttach() method and before Fragment.onCreate().","void onAttachedToWindow() Called when the main window associated with the activity has been attached to the window manager.","void onBackPressed() Called when the activity has detected the user's press of the back key.","void onChildTitleChanged(Activity childActivity, CharSequence title)","void onConfigurationChanged(Configuration newConfig) Called by the system when the device configuration changes while your activity is running.","void onContentChanged() This hook is called whenever the content view of the screen changes (due to a call to Window.setContentView or Window.addContentView).","boolean onContextItemSelected(MenuItem item) This hook is called whenever an item in a context menu is selected.","void onContextMenuClosed(Menu menu) This hook is called whenever the context menu is being closed (either by the user canceling the menu with the back/menu button, or when an item is selected).","void onCreate(Bundle savedInstanceState) Called when the activity is starting.","void onCreate(Bundle savedInstanceState, PersistableBundle persistentState) Same as onCreate(android.os.Bundle) but called for those activities created with the attribute persistableMode set to persistAcrossReboots.","void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) Called when a context menu for the view is about to be shown.","CharSequence onCreateDescription() Generate a new description for this activity.","Dialog onCreateDialog(int id, Bundle args) This method was deprecated in API level 13. Use the new DialogFragment class with FragmentManager instead; this is also available on older platforms through the Android compatibility package.","Dialog onCreateDialog(int id) This method was deprecated in API level 8. Old no-arguments version of onCreateDialog(int, Bundle).","void onCreateNavigateUpTaskStack(TaskStackBuilder builder) Define the synthetic task stack that will be generated during Up navigation from a different task.","boolean onCreateOptionsMenu(Menu menu) Initialize the contents of the Activity's standard options menu.","boolean onCreatePanelMenu(int featureId, Menu menu) Default implementation of onCreatePanelMenu(int, Menu) for activities.","View onCreatePanelView(int featureId) Default implementation of onCreatePanelView(int) for activities.","boolean onCreateThumbnail(Bitmap outBitmap, Canvas canvas) Generate a new thumbnail for this activity.","View onCreateView(View parent, String name, Context context, AttributeSet attrs) Standard implementation of onCreateView(View, String, Context, AttributeSet) used when inflating with the LayoutInflater returned by getSystemService(String).","View onCreateView(String name, Context context, AttributeSet attrs) Standard implementation of onCreateView(String, Context, AttributeSet) used when inflating with the LayoutInflater returned by getSystemService(String).","void onDestroy() Perform any final cleanup before an activity is destroyed.","void onDetachedFromWindow() Called when the main window associated with the activity has been detached from the window manager.","void onEnterAnimationComplete() Activities cannot draw during the period that their windows are animating in.","boolean onGenericMotionEvent(MotionEvent event) Called when a generic motion event was not handled by any of the views inside of the activity.","boolean onKeyDown(int keyCode, KeyEvent event) Called when a key was pressed down and not handled by any of the views inside of the activity.","boolean onKeyLongPress(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyLongPress(): always returns false (doesn't handle the event).","boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event).","boolean onKeyShortcut(int keyCode, KeyEvent event) Called when a key shortcut event is not handled by any of the views in the Activity.","boolean onKeyUp(int keyCode, KeyEvent event) Called when a key was released and not handled by any of the views inside of the activity.","void onLowMemory() This is called when the overall system is running low on memory, and actively running processes should trim their memory usage.","boolean onMenuItemSelected(int featureId, MenuItem item) Default implementation of onMenuItemSelected(int, MenuItem) for activities.","boolean onMenuOpened(int featureId, Menu menu) Called when a panel's menu is opened by the user.","boolean onNavigateUp() This method is called whenever the user chooses to navigate Up within your application's activity hierarchy from the action bar.","boolean onNavigateUpFromChild(Activity child) This is called when a child activity of this one attempts to navigate up.","void onNewIntent(Intent intent) This is called for activities that set launchMode to \"singleTop\" in their package, or if a client used the FLAG_ACTIVITY_SINGLE_TOP flag when calling startActivity(Intent).","boolean onOptionsItemSelected(MenuItem item) This hook is called whenever an item in your options menu is selected.","void onOptionsMenuClosed(Menu menu) This hook is called whenever the options menu is being closed (either by the user canceling the menu with the back/menu button, or when an item is selected).","void onPanelClosed(int featureId, Menu menu) Default implementation of onPanelClosed(int, Menu) for activities.","void onPause() Called as part of the activity lifecycle when an activity is going into the background, but has not (yet) been killed.","void onPostCreate(Bundle savedInstanceState) Called when activity start-up is complete (after onStart() and onRestoreInstanceState(Bundle) have been called).","void onPostCreate(Bundle savedInstanceState, PersistableBundle persistentState) This is the same as onPostCreate(Bundle) but is called for activities created with the attribute persistableMode set to persistAcrossReboots.","void onPostResume() Called when activity resume is complete (after onResume() has been called).","void onPrepareDialog(int id, Dialog dialog, Bundle args) This method was deprecated in API level 13. Use the new DialogFragment class with FragmentManager instead; this is also available on older platforms through the Android compatibility package.","void onPrepareDialog(int id, Dialog dialog) This method was deprecated in API level 8. Old no-arguments version of onPrepareDialog(int, Dialog, Bundle).","void onPrepareNavigateUpTaskStack(TaskStackBuilder builder) Prepare the synthetic task stack that will be generated during Up navigation from a different task.","boolean onPrepareOptionsMenu(Menu menu) Prepare the Screen's standard options menu to be displayed.","boolean onPreparePanel(int featureId, View view, Menu menu) Default implementation of onPreparePanel(int, View, Menu) for activities.","void onProvideAssistData(Bundle data) This is called when the user is requesting an assist, to build a full ACTION_ASSIST Intent with all of the context of the current application.","void onRestart() Called after onStop() when the current activity is being re-displayed to the user (the user has navigated back to it).","void onRestoreInstanceState(Bundle savedInstanceState, PersistableBundle persistentState) This is the same as onRestoreInstanceState(Bundle) but is called for activities created with the attribute persistableMode set to persistAcrossReboots.","void onRestoreInstanceState(Bundle savedInstanceState) This method is called after onStart() when the activity is being re-initialized from a previously saved state, given here in savedInstanceState.","void onResume() Called after onRestoreInstanceState(Bundle), onRestart(), or onPause(), for your activity to start interacting with the user.","Object onRetainNonConfigurationInstance() This method was deprecated in API level 13. Use the new Fragment API setRetainInstance(boolean) instead; this is also available on older platforms through the Android compatibility package.","void onSaveInstanceState(Bundle outState) Called to retrieve per-instance state from an activity before being killed so that the state can be restored in onCreate(Bundle) or onRestoreInstanceState(Bundle) (the Bundle populated by this method will be passed to both).","void onSaveInstanceState(Bundle outState, PersistableBundle outPersistentState) This is the same as onSaveInstanceState(Bundle) but is called for activities created with the attribute persistableMode set to persistAcrossReboots.","boolean onSearchRequested() This hook is called when the user signals the desire to start a search.","void onStart() Called after onCreate(Bundle) \u2014 or after onRestart() when the activity had been stopped, but is now again being displayed to the user.","void onStop() Called when you are no longer visible to the user.","void onTitleChanged(CharSequence title, int color)","boolean onTouchEvent(MotionEvent event) Called when a touch screen event was not handled by any of the views under it.","boolean onTrackballEvent(MotionEvent event) Called when the trackball was moved and not handled by any of the views inside of the activity.","void onTrimMemory(int level) Called when the operating system has determined that it is a good time for a process to trim unneeded memory from its process.","void onUserInteraction() Called whenever a key, touch, or trackball event is dispatched to the activity.","void onUserLeaveHint() Called as part of the activity lifecycle when an activity is about to go into the background as the result of user choice.","void onVisibleBehindCanceled() Called when a translucent activity over this activity is becoming opaque or another activity is being launched.","void onWindowAttributesChanged(WindowManager.LayoutParams params) This is called whenever the current window attributes change.","abstract void onWindowDismissed() Called when a window is dismissed.","void onWindowFocusChanged(boolean hasFocus) Called when the current Window of the activity gains or loses focus.","ActionMode onWindowStartingActionMode(ActionMode.Callback callback) Give the Activity a chance to control the UI for an action mode requested by the system.","void openContextMenu(View view) Programmatically opens the context menu for a particular view.","void openOptionsMenu() Programmatically opens the options menu.","void overridePendingTransition(int enterAnim, int exitAnim) Call immediately after one of the flavors of startActivity(Intent) or finish() to specify an explicit transition animation to perform next.","void postponeEnterTransition() Postpone the entering activity transition when Activity was started with makeSceneTransitionAnimation(Activity, android.util.Pair[]).","void recreate() Cause this Activity to be recreated with a new instance.","void registerForContextMenu(View view) Registers a context menu to be shown for the given view (multiple views can show the context menu).","boolean releaseInstance() Ask that the local app instance of this activity be released to free up its memory.","final void removeDialog(int id) This method was deprecated in API level 13. Use the new DialogFragment class with FragmentManager instead; this is also available on older platforms through the Android compatibility package.","void reportFullyDrawn() Report to the system that your app is now fully drawn, purely for diagnostic purposes (calling it does not impact the visible behavior of the activity).","boolean requestVisibleBehind(boolean visible) Activities that want to remain visible behind a translucent activity above them must call this method anytime between the start of onResume() and the return from onPause().","final boolean requestWindowFeature(int featureId) Enable extended window features.","final void runOnUiThread(Runnable action) Runs the specified action on the UI thread.","void setActionBar(Toolbar toolbar) Set a Toolbar to act as the ActionBar for this Activity window.","void setContentTransitionManager(TransitionManager tm) Set the TransitionManager to use for default transitions in this window.","void setContentView(View view) Set the activity content to an explicit view.","void setContentView(int layoutResID) Set the activity content from a layout resource.","void setContentView(View view, ViewGroup.LayoutParams params) Set the activity content to an explicit view.","final void setDefaultKeyMode(int mode) Select the default key handling for this activity.","void setEnterSharedElementCallback(SharedElementCallback callback) When makeSceneTransitionAnimation(Activity, android.view.View, String) was used to start an Activity, callback will be called to handle shared elements on the launched Activity.","void setExitSharedElementCallback(SharedElementCallback callback) When makeSceneTransitionAnimation(Activity, android.view.View, String) was used to start an Activity, callback will be called to handle shared elements on the launching Activity.","final void setFeatureDrawable(int featureId, Drawable drawable) Convenience for calling setFeatureDrawable(int, Drawable).","final void setFeatureDrawableAlpha(int featureId, int alpha) Convenience for calling setFeatureDrawableAlpha(int, int).","final void setFeatureDrawableResource(int featureId, int resId) Convenience for calling setFeatureDrawableResource(int, int).","final void setFeatureDrawableUri(int featureId, Uri uri) Convenience for calling setFeatureDrawableUri(int, Uri).","void setFinishOnTouchOutside(boolean finish) Sets whether this activity is finished when touched outside its window's bounds.","void setImmersive(boolean i) Adjust the current immersive mode setting.","void setIntent(Intent newIntent) Change the intent returned by getIntent().","final void setMediaController(MediaController controller) Sets a MediaController to send media keys and volume changes to.","final void setProgress(int progress) Sets the progress for the progress bars in the title.","final void setProgressBarIndeterminate(boolean indeterminate) Sets whether the horizontal progress bar in the title should be indeterminate (the circular is always indeterminate).","final void setProgressBarIndeterminateVisibility(boolean visible) Sets the visibility of the indeterminate progress bar in the title.","final void setProgressBarVisibility(boolean visible) Sets the visibility of the progress bar in the title.","void setRequestedOrientation(int requestedOrientation) Change the desired orientation of this activity.","final void setResult(int resultCode) Call this to set the result that your activity will return to its caller.","final void setResult(int resultCode, Intent data) Call this to set the result that your activity will return to its caller.","final void setSecondaryProgress(int secondaryProgress) Sets the secondary progress for the progress bar in the title.","void setTaskDescription(ActivityManager.TaskDescription taskDescription) Sets information describing the task with this activity for presentation inside the Recents System UI.","void setTitle(int titleId) Change the title associated with this activity.","void setTitle(CharSequence title) Change the title associated with this activity.","void setTitleColor(int textColor) This method was deprecated in API level 21. Use action bar styles instead.","void setVisible(boolean visible) Control whether this activity's main window is visible.","final void setVolumeControlStream(int streamType) Suggests an audio stream whose volume should be changed by the hardware volume controls.","boolean shouldUpRecreateTask(Intent targetIntent) Returns true if the app should recreate the task when navigating 'up' from this activity by using targetIntent.","final boolean showDialog(int id, Bundle args) This method was deprecated in API level 13. Use the new DialogFragment class with FragmentManager instead; this is also available on older platforms through the Android compatibility package.","final void showDialog(int id) This method was deprecated in API level 13. Use the new DialogFragment class with FragmentManager instead; this is also available on older platforms through the Android compatibility package.","ActionMode startActionMode(ActionMode.Callback callback) Start an action mode.","void startActivities(Intent[] intents, Bundle options) Launch a new activity.","void startActivities(Intent[] intents) Same as startActivities(Intent[], Bundle) with no options specified.","void startActivity(Intent intent, Bundle options) Launch a new activity.","void startActivity(Intent intent) Same as startActivity(Intent, Bundle) with no options specified.","void startActivityForResult(Intent intent, int requestCode) Same as calling startActivityForResult(Intent, int, Bundle) with no options.","void startActivityForResult(Intent intent, int requestCode, Bundle options) Launch an activity for which you would like a result when it finished.","void startActivityFromChild(Activity child, Intent intent, int requestCode, Bundle options) This is called when a child activity of this one calls its startActivity(Intent) or startActivityForResult(Intent, int) method.","void startActivityFromChild(Activity child, Intent intent, int requestCode) Same as calling startActivityFromChild(Activity, Intent, int, Bundle) with no options.","void startActivityFromFragment(Fragment fragment, Intent intent, int requestCode, Bundle options) This is called when a Fragment in this activity calls its startActivity(Intent) or startActivityForResult(Intent, int) method.","void startActivityFromFragment(Fragment fragment, Intent intent, int requestCode) Same as calling startActivityFromFragment(Fragment, Intent, int, Bundle) with no options.","boolean startActivityIfNeeded(Intent intent, int requestCode, Bundle options) A special variation to launch an activity only if a new activity instance is needed to handle the given Intent.","boolean startActivityIfNeeded(Intent intent, int requestCode) Same as calling startActivityIfNeeded(Intent, int, Bundle) with no options.","void startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options) Like startActivity(Intent, Bundle), but taking a IntentSender to start; see startIntentSenderForResult(IntentSender, int, Intent, int, int, int, Bundle) for more information.","void startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags) Same as calling startIntentSender(IntentSender, Intent, int, int, int, Bundle) with no options.","void startIntentSenderForResult(IntentSender intent, int requestCode, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags) Same as calling startIntentSenderForResult(IntentSender, int, Intent, int, int, int, Bundle) with no options.","void startIntentSenderForResult(IntentSender intent, int requestCode, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options) Like startActivityForResult(Intent, int), but allowing you to use a IntentSender to describe the activity to be started.","void startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags) Same as calling startIntentSenderFromChild(Activity, IntentSender, int, Intent, int, int, int, Bundle) with no options.","void startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options) Like startActivityFromChild(Activity, Intent, int), but taking a IntentSender; see startIntentSenderForResult(IntentSender, int, Intent, int, int, int) for more information.","void startLockTask() Request to put this Activity in a mode where the user is locked to the current task.","void startManagingCursor(Cursor c) This method was deprecated in API level 11. Use the new CursorLoader class with LoaderManager instead; this is also available on older platforms through the Android compatibility package.","boolean startNextMatchingActivity(Intent intent) Same as calling startNextMatchingActivity(Intent, Bundle) with no options.","boolean startNextMatchingActivity(Intent intent, Bundle options) Special version of starting an activity, for use when you are replacing other activity components.","void startPostponedEnterTransition() Begin postponed transitions after postponeEnterTransition() was called.","void startSearch(String initialQuery, boolean selectInitialQuery, Bundle appSearchData, boolean globalSearch) This hook is called to launch the search UI.","void stopLockTask() Allow the user to switch away from the current task.","void stopManagingCursor(Cursor c) This method was deprecated in API level 11. Use the new CursorLoader class with LoaderManager instead; this is also available on older platforms through the Android compatibility package.","void takeKeyEvents(boolean get) Request that key events come to this activity.","void triggerSearch(String query, Bundle appSearchData) Similar to startSearch(String, boolean, Bundle, boolean), but actually fires off the search query after invoking the search dialog.","void unregisterForContextMenu(View view) Prevents a context menu to be shown for the given view.","From class android.view.ContextThemeWrapper void applyOverrideConfiguration(Configuration overrideConfiguration) Call to set an \"override configuration\" on this context -- this is a configuration that replies one or more values of the standard configuration that is applied to the context. void attachBaseContext(Context newBase) Set the base context for this ContextWrapper. Resources getResources() Return a Resources instance for your application's package. Object getSystemService(String name) Return the handle to a system-level service by name. Resources.Theme getTheme() Return the Theme object associated with this Context. void onApplyThemeResource(Resources.Theme theme, int resid, boolean first) Called by setTheme(int) and getTheme() to apply a theme resource to the current Theme object. void setTheme(int resid) Set the base theme for this context.","void applyOverrideConfiguration(Configuration overrideConfiguration) Call to set an \"override configuration\" on this context -- this is a configuration that replies one or more values of the standard configuration that is applied to the context.","void attachBaseContext(Context newBase) Set the base context for this ContextWrapper.","Resources getResources() Return a Resources instance for your application's package.","Object getSystemService(String name) Return the handle to a system-level service by name.","Resources.Theme getTheme() Return the Theme object associated with this Context.","void onApplyThemeResource(Resources.Theme theme, int resid, boolean first) Called by setTheme(int) and getTheme() to apply a theme resource to the current Theme object.","void setTheme(int resid) Set the base theme for this context.","From class android.content.ContextWrapper void attachBaseContext(Context base) Set the base context for this ContextWrapper. boolean bindService(Intent service, ServiceConnection conn, int flags) Connect to an application service, creating it if needed. int checkCallingOrSelfPermission(String permission) Determine whether the calling process of an IPC or you have been granted a particular permission. int checkCallingOrSelfUriPermission(Uri uri, int modeFlags) Determine whether the calling process of an IPC or you has been granted permission to access a specific URI. int checkCallingPermission(String permission) Determine whether the calling process of an IPC you are handling has been granted a particular permission. int checkCallingUriPermission(Uri uri, int modeFlags) Determine whether the calling process and user ID has been granted permission to access a specific URI. int checkPermission(String permission, int pid, int uid) Determine whether the given permission is allowed for a particular process and user ID running in the system. int checkUriPermission(Uri uri, int pid, int uid, int modeFlags) Determine whether a particular process and user ID has been granted permission to access a specific URI. int checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags) Check both a Uri and normal permission. void clearWallpaper() This method is deprecated. Use WallpaperManager.clear() instead. This method requires the caller to hold the permission SET_WALLPAPER. Context createConfigurationContext(Configuration overrideConfiguration) Return a new Context object for the current Context but whose resources are adjusted to match the given Configuration. Context createDisplayContext(Display display) Return a new Context object for the current Context but whose resources are adjusted to match the metrics of the given Display. Context createPackageContext(String packageName, int flags) Return a new Context object for the given application name. String[] databaseList() Returns an array of strings naming the private databases associated with this Context's application package. boolean deleteDatabase(String name) Delete an existing private SQLiteDatabase associated with this Context's application package. boolean deleteFile(String name) Delete the given private file associated with this Context's application package. void enforceCallingOrSelfPermission(String permission, String message) If neither you nor the calling process of an IPC you are handling has been granted a particular permission, throw a SecurityException. void enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message) If the calling process of an IPC or you has not been granted permission to access a specific URI, throw SecurityException. void enforceCallingPermission(String permission, String message) If the calling process of an IPC you are handling has not been granted a particular permission, throw a SecurityException. void enforceCallingUriPermission(Uri uri, int modeFlags, String message) If the calling process and user ID has not been granted permission to access a specific URI, throw SecurityException. void enforcePermission(String permission, int pid, int uid, String message) If the given permission is not allowed for a particular process and user ID running in the system, throw a SecurityException. void enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message) If a particular process and user ID has not been granted permission to access a specific URI, throw SecurityException. void enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags, String message) Enforce both a Uri and normal permission. String[] fileList() Returns an array of strings naming the private files associated with this Context's application package. Context getApplicationContext() Return the context of the single, global Application object of the current process. ApplicationInfo getApplicationInfo() Return the full application info for this context's package. AssetManager getAssets() Return an AssetManager instance for your application's package. Context getBaseContext() File getCacheDir() Returns the absolute path to the application specific cache directory on the filesystem. ClassLoader getClassLoader() Return a class loader you can use to retrieve classes in this package. File getCodeCacheDir() Returns the absolute path to the application specific cache directory on the filesystem designed for storing cached code. ContentResolver getContentResolver() Return a ContentResolver instance for your application's package. File getDatabasePath(String name) Returns the absolute path on the filesystem where a database created with openOrCreateDatabase(String, int, SQLiteDatabase.CursorFactory) is stored. File getDir(String name, int mode) Retrieve, creating if needed, a new directory in which the application can place its own custom data files. File getExternalCacheDir() Returns the absolute path to the directory on the primary external filesystem (that is somewhere on Environment.getExternalStorageDirectory() where the application can place cache files it owns. File[] getExternalCacheDirs() Returns absolute paths to application-specific directories on all external storage devices where the application can place cache files it owns. File getExternalFilesDir(String type) Returns the absolute path to the directory on the primary external filesystem (that is somewhere on Environment.getExternalStorageDirectory()) where the application can place persistent files it owns. File[] getExternalFilesDirs(String type) Returns absolute paths to application-specific directories on all external storage devices where the application can place persistent files it owns. File[] getExternalMediaDirs() Returns absolute paths to application-specific directories on all external storage devices where the application can place media files. File getFileStreamPath(String name) Returns the absolute path on the filesystem where a file created with openFileOutput(String, int) is stored. File getFilesDir() Returns the absolute path to the directory on the filesystem where files created with openFileOutput(String, int) are stored. Looper getMainLooper() Return the Looper for the main thread of the current process. File getNoBackupFilesDir() Returns the absolute path to the directory on the filesystem similar to getFilesDir(). File getObbDir() Return the primary external storage directory where this application's OBB files (if there are any) can be found. File[] getObbDirs() Returns absolute paths to application-specific directories on all external storage devices where the application's OBB files (if there are any) can be found. String getPackageCodePath() Return the full path to this context's primary Android package. PackageManager getPackageManager() Return PackageManager instance to find global package information. String getPackageName() Return the name of this application's package. String getPackageResourcePath() Return the full path to this context's primary Android package. Resources getResources() Return a Resources instance for your application's package. SharedPreferences getSharedPreferences(String name, int mode) Retrieve and hold the contents of the preferences file 'name', returning a SharedPreferences through which you can retrieve and modify its values. Object getSystemService(String name) Return the handle to a system-level service by name. Resources.Theme getTheme() Return the Theme object associated with this Context. Drawable getWallpaper() This method is deprecated. Use WallpaperManager.get() instead. int getWallpaperDesiredMinimumHeight() This method is deprecated. Use WallpaperManager.getDesiredMinimumHeight() instead. int getWallpaperDesiredMinimumWidth() This method is deprecated. Use WallpaperManager.getDesiredMinimumWidth() instead. void grantUriPermission(String toPackage, Uri uri, int modeFlags) Grant permission to access a specific Uri to another package, regardless of whether that package has general permission to access the Uri's content provider. boolean isRestricted() Indicates whether this Context is restricted. FileInputStream openFileInput(String name) Open a private file associated with this Context's application package for reading. FileOutputStream openFileOutput(String name, int mode) Open a private file associated with this Context's application package for writing. SQLiteDatabase openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory) Open a new private SQLiteDatabase associated with this Context's application package. SQLiteDatabase openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory, DatabaseErrorHandler errorHandler) Open a new private SQLiteDatabase associated with this Context's application package. Drawable peekWallpaper() This method is deprecated. Use WallpaperManager.peek() instead. Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter) Register a BroadcastReceiver to be run in the main activity thread. Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler) Register to receive intent broadcasts, to run in the context of scheduler. void removeStickyBroadcast(Intent intent) This method is deprecated. Sticky broadcasts should not be used. They provide no security (anyone can access them), no protection (anyone can modify them), and many other problems. The recommended pattern is to use a non-sticky broadcast to report that something has changed, with another mechanism for apps to retrieve the current value whenever desired. void removeStickyBroadcastAsUser(Intent intent, UserHandle user) This method is deprecated. Sticky broadcasts should not be used. They provide no security (anyone can access them), no protection (anyone can modify them), and many other problems. The recommended pattern is to use a non-sticky broadcast to report that something has changed, with another mechanism for apps to retrieve the current value whenever desired. void revokeUriPermission(Uri uri, int modeFlags) Remove all permissions to access a particular content provider Uri that were previously added with grantUriPermission(String, Uri, int). void sendBroadcast(Intent intent) Broadcast the given intent to all interested BroadcastReceivers. void sendBroadcast(Intent intent, String receiverPermission) Broadcast the given intent to all interested BroadcastReceivers, allowing an optional required permission to be enforced. void sendBroadcastAsUser(Intent intent, UserHandle user) Version of sendBroadcast(Intent) that allows you to specify the user the broadcast will be sent to. void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission) Version of sendBroadcast(Intent, String) that allows you to specify the user the broadcast will be sent to. void sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras) Version of sendBroadcast(Intent) that allows you to receive data back from the broadcast. void sendOrderedBroadcast(Intent intent, String receiverPermission) Broadcast the given intent to all interested BroadcastReceivers, delivering them one at a time to allow more preferred receivers to consume the broadcast before it is delivered to less preferred receivers. void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras) Version of sendOrderedBroadcast(Intent, String, BroadcastReceiver, Handler, int, String, Bundle) that allows you to specify the user the broadcast will be sent to. void sendStickyBroadcast(Intent intent) This method is deprecated. Sticky broadcasts should not be used. They provide no security (anyone can access them), no protection (anyone can modify them), and many other problems. The recommended pattern is to use a non-sticky broadcast to report that something has changed, with another mechanism for apps to retrieve the current value whenever desired. void sendStickyBroadcastAsUser(Intent intent, UserHandle user) This method is deprecated. Sticky broadcasts should not be used. They provide no security (anyone can access them), no protection (anyone can modify them), and many other problems. The recommended pattern is to use a non-sticky broadcast to report that something has changed, with another mechanism for apps to retrieve the current value whenever desired. void sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras) This method is deprecated. Sticky broadcasts should not be used. They provide no security (anyone can access them), no protection (anyone can modify them), and many other problems. The recommended pattern is to use a non-sticky broadcast to report that something has changed, with another mechanism for apps to retrieve the current value whenever desired. void sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras) This method is deprecated. Sticky broadcasts should not be used. They provide no security (anyone can access them), no protection (anyone can modify them), and many other problems. The recommended pattern is to use a non-sticky broadcast to report that something has changed, with another mechanism for apps to retrieve the current value whenever desired. void setTheme(int resid) Set the base theme for this context. void setWallpaper(Bitmap bitmap) This method is deprecated. Use WallpaperManager.set() instead. This method requires the caller to hold the permission SET_WALLPAPER. void setWallpaper(InputStream data) This method is deprecated. Use WallpaperManager.set() instead. This method requires the caller to hold the permission SET_WALLPAPER. void startActivities(Intent[] intents) Same as startActivities(Intent[], Bundle) with no options specified. void startActivities(Intent[] intents, Bundle options) Launch multiple new activities. void startActivity(Intent intent) Same as startActivity(Intent, Bundle) with no options specified. void startActivity(Intent intent, Bundle options) Launch a new activity. boolean startInstrumentation(ComponentName className, String profileFile, Bundle arguments) Start executing an Instrumentation class. void startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options) Like startActivity(Intent, Bundle), but taking a IntentSender to start. void startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags) Same as startIntentSender(IntentSender, Intent, int, int, int, Bundle) with no options specified. ComponentName startService(Intent service) Request that a given application service be started. boolean stopService(Intent name) Request that a given application service be stopped. void unbindService(ServiceConnection conn) Disconnect from an application service. void unregisterReceiver(BroadcastReceiver receiver) Unregister a previously registered BroadcastReceiver.","void attachBaseContext(Context base) Set the base context for this ContextWrapper.","boolean bindService(Intent service, ServiceConnection conn, int flags) Connect to an application service, creating it if needed.","int checkCallingOrSelfPermission(String permission) Determine whether the calling process of an IPC or you have been granted a particular permission.","int checkCallingOrSelfUriPermission(Uri uri, int modeFlags) Determine whether the calling process of an IPC or you has been granted permission to access a specific URI.","int checkCallingPermission(String permission) Determine whether the calling process of an IPC you are handling has been granted a particular permission.","int checkCallingUriPermission(Uri uri, int modeFlags) Determine whether the calling process and user ID has been granted permission to access a specific URI.","int checkPermission(String permission, int pid, int uid) Determine whether the given permission is allowed for a particular process and user ID running in the system.","int checkUriPermission(Uri uri, int pid, int uid, int modeFlags) Determine whether a particular process and user ID has been granted permission to access a specific URI.","int checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags) Check both a Uri and normal permission.","void clearWallpaper() This method is deprecated. Use WallpaperManager.clear() instead. This method requires the caller to hold the permission SET_WALLPAPER.","Context createConfigurationContext(Configuration overrideConfiguration) Return a new Context object for the current Context but whose resources are adjusted to match the given Configuration.","Context createDisplayContext(Display display) Return a new Context object for the current Context but whose resources are adjusted to match the metrics of the given Display.","Context createPackageContext(String packageName, int flags) Return a new Context object for the given application name.","String[] databaseList() Returns an array of strings naming the private databases associated with this Context's application package.","boolean deleteDatabase(String name) Delete an existing private SQLiteDatabase associated with this Context's application package.","boolean deleteFile(String name) Delete the given private file associated with this Context's application package.","void enforceCallingOrSelfPermission(String permission, String message) If neither you nor the calling process of an IPC you are handling has been granted a particular permission, throw a SecurityException.","void enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message) If the calling process of an IPC or you has not been granted permission to access a specific URI, throw SecurityException.","void enforceCallingPermission(String permission, String message) If the calling process of an IPC you are handling has not been granted a particular permission, throw a SecurityException.","void enforceCallingUriPermission(Uri uri, int modeFlags, String message) If the calling process and user ID has not been granted permission to access a specific URI, throw SecurityException.","void enforcePermission(String permission, int pid, int uid, String message) If the given permission is not allowed for a particular process and user ID running in the system, throw a SecurityException.","void enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message) If a particular process and user ID has not been granted permission to access a specific URI, throw SecurityException.","void enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags, String message) Enforce both a Uri and normal permission.","String[] fileList() Returns an array of strings naming the private files associated with this Context's application package.","Context getApplicationContext() Return the context of the single, global Application object of the current process.","ApplicationInfo getApplicationInfo() Return the full application info for this context's package.","AssetManager getAssets() Return an AssetManager instance for your application's package.","Context getBaseContext()","File getCacheDir() Returns the absolute path to the application specific cache directory on the filesystem.","ClassLoader getClassLoader() Return a class loader you can use to retrieve classes in this package.","File getCodeCacheDir() Returns the absolute path to the application specific cache directory on the filesystem designed for storing cached code.","ContentResolver getContentResolver() Return a ContentResolver instance for your application's package.","File getDatabasePath(String name) Returns the absolute path on the filesystem where a database created with openOrCreateDatabase(String, int, SQLiteDatabase.CursorFactory) is stored.","File getDir(String name, int mode) Retrieve, creating if needed, a new directory in which the application can place its own custom data files.","File getExternalCacheDir() Returns the absolute path to the directory on the primary external filesystem (that is somewhere on Environment.getExternalStorageDirectory() where the application can place cache files it owns.","File[] getExternalCacheDirs() Returns absolute paths to application-specific directories on all external storage devices where the application can place cache files it owns.","File getExternalFilesDir(String type) Returns the absolute path to the directory on the primary external filesystem (that is somewhere on Environment.getExternalStorageDirectory()) where the application can place persistent files it owns.","File[] getExternalFilesDirs(String type) Returns absolute paths to application-specific directories on all external storage devices where the application can place persistent files it owns.","File[] getExternalMediaDirs() Returns absolute paths to application-specific directories on all external storage devices where the application can place media files.","File getFileStreamPath(String name) Returns the absolute path on the filesystem where a file created with openFileOutput(String, int) is stored.","File getFilesDir() Returns the absolute path to the directory on the filesystem where files created with openFileOutput(String, int) are stored.","Looper getMainLooper() Return the Looper for the main thread of the current process.","File getNoBackupFilesDir() Returns the absolute path to the directory on the filesystem similar to getFilesDir().","File getObbDir() Return the primary external storage directory where this application's OBB files (if there are any) can be found.","File[] getObbDirs() Returns absolute paths to application-specific directories on all external storage devices where the application's OBB files (if there are any) can be found.","String getPackageCodePath() Return the full path to this context's primary Android package.","PackageManager getPackageManager() Return PackageManager instance to find global package information.","String getPackageName() Return the name of this application's package.","String getPackageResourcePath() Return the full path to this context's primary Android package.","Resources getResources() Return a Resources instance for your application's package.","SharedPreferences getSharedPreferences(String name, int mode) Retrieve and hold the contents of the preferences file 'name', returning a SharedPreferences through which you can retrieve and modify its values.","Object getSystemService(String name) Return the handle to a system-level service by name.","Resources.Theme getTheme() Return the Theme object associated with this Context.","Drawable getWallpaper() This method is deprecated. Use WallpaperManager.get() instead.","int getWallpaperDesiredMinimumHeight() This method is deprecated. Use WallpaperManager.getDesiredMinimumHeight() instead.","int getWallpaperDesiredMinimumWidth() This method is deprecated. Use WallpaperManager.getDesiredMinimumWidth() instead.","void grantUriPermission(String toPackage, Uri uri, int modeFlags) Grant permission to access a specific Uri to another package, regardless of whether that package has general permission to access the Uri's content provider.","boolean isRestricted() Indicates whether this Context is restricted.","FileInputStream openFileInput(String name) Open a private file associated with this Context's application package for reading.","FileOutputStream openFileOutput(String name, int mode) Open a private file associated with this Context's application package for writing.","SQLiteDatabase openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory) Open a new private SQLiteDatabase associated with this Context's application package.","SQLiteDatabase openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory, DatabaseErrorHandler errorHandler) Open a new private SQLiteDatabase associated with this Context's application package.","Drawable peekWallpaper() This method is deprecated. Use WallpaperManager.peek() instead.","Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter) Register a BroadcastReceiver to be run in the main activity thread.","Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler) Register to receive intent broadcasts, to run in the context of scheduler.","void removeStickyBroadcast(Intent intent) This method is deprecated. Sticky broadcasts should not be used. They provide no security (anyone can access them), no protection (anyone can modify them), and many other problems. The recommended pattern is to use a non-sticky broadcast to report that something has changed, with another mechanism for apps to retrieve the current value whenever desired.","void removeStickyBroadcastAsUser(Intent intent, UserHandle user) This method is deprecated. Sticky broadcasts should not be used. They provide no security (anyone can access them), no protection (anyone can modify them), and many other problems. The recommended pattern is to use a non-sticky broadcast to report that something has changed, with another mechanism for apps to retrieve the current value whenever desired.","void revokeUriPermission(Uri uri, int modeFlags) Remove all permissions to access a particular content provider Uri that were previously added with grantUriPermission(String, Uri, int).","void sendBroadcast(Intent intent) Broadcast the given intent to all interested BroadcastReceivers.","void sendBroadcast(Intent intent, String receiverPermission) Broadcast the given intent to all interested BroadcastReceivers, allowing an optional required permission to be enforced.","void sendBroadcastAsUser(Intent intent, UserHandle user) Version of sendBroadcast(Intent) that allows you to specify the user the broadcast will be sent to.","void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission) Version of sendBroadcast(Intent, String) that allows you to specify the user the broadcast will be sent to.","void sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras) Version of sendBroadcast(Intent) that allows you to receive data back from the broadcast.","void sendOrderedBroadcast(Intent intent, String receiverPermission) Broadcast the given intent to all interested BroadcastReceivers, delivering them one at a time to allow more preferred receivers to consume the broadcast before it is delivered to less preferred receivers.","void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras) Version of sendOrderedBroadcast(Intent, String, BroadcastReceiver, Handler, int, String, Bundle) that allows you to specify the user the broadcast will be sent to.","void sendStickyBroadcast(Intent intent) This method is deprecated. Sticky broadcasts should not be used. They provide no security (anyone can access them), no protection (anyone can modify them), and many other problems. The recommended pattern is to use a non-sticky broadcast to report that something has changed, with another mechanism for apps to retrieve the current value whenever desired.","void sendStickyBroadcastAsUser(Intent intent, UserHandle user) This method is deprecated. Sticky broadcasts should not be used. They provide no security (anyone can access them), no protection (anyone can modify them), and many other problems. The recommended pattern is to use a non-sticky broadcast to report that something has changed, with another mechanism for apps to retrieve the current value whenever desired.","void sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras) This method is deprecated. Sticky broadcasts should not be used. They provide no security (anyone can access them), no protection (anyone can modify them), and many other problems. The recommended pattern is to use a non-sticky broadcast to report that something has changed, with another mechanism for apps to retrieve the current value whenever desired.","void sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras) This method is deprecated. Sticky broadcasts should not be used. They provide no security (anyone can access them), no protection (anyone can modify them), and many other problems. The recommended pattern is to use a non-sticky broadcast to report that something has changed, with another mechanism for apps to retrieve the current value whenever desired.","void setTheme(int resid) Set the base theme for this context.","void setWallpaper(Bitmap bitmap) This method is deprecated. Use WallpaperManager.set() instead. This method requires the caller to hold the permission SET_WALLPAPER.","void setWallpaper(InputStream data) This method is deprecated. Use WallpaperManager.set() instead. This method requires the caller to hold the permission SET_WALLPAPER.","void startActivities(Intent[] intents) Same as startActivities(Intent[], Bundle) with no options specified.","void startActivities(Intent[] intents, Bundle options) Launch multiple new activities.","void startActivity(Intent intent) Same as startActivity(Intent, Bundle) with no options specified.","void startActivity(Intent intent, Bundle options) Launch a new activity.","boolean startInstrumentation(ComponentName className, String profileFile, Bundle arguments) Start executing an Instrumentation class.","void startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options) Like startActivity(Intent, Bundle), but taking a IntentSender to start.","void startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags) Same as startIntentSender(IntentSender, Intent, int, int, int, Bundle) with no options specified.","ComponentName startService(Intent service) Request that a given application service be started.","boolean stopService(Intent name) Request that a given application service be stopped.","void unbindService(ServiceConnection conn) Disconnect from an application service.","void unregisterReceiver(BroadcastReceiver receiver) Unregister a previously registered BroadcastReceiver.","From class android.content.Context abstract boolean bindService(Intent service, ServiceConnection conn, int flags) Connect to an application service, creating it if needed. abstract int checkCallingOrSelfPermission(String permission) Determine whether the calling process of an IPC or you have been granted a particular permission. abstract int checkCallingOrSelfUriPermission(Uri uri, int modeFlags) Determine whether the calling process of an IPC or you has been granted permission to access a specific URI. abstract int checkCallingPermission(String permission) Determine whether the calling process of an IPC you are handling has been granted a particular permission. abstract int checkCallingUriPermission(Uri uri, int modeFlags) Determine whether the calling process and user ID has been granted permission to access a specific URI. abstract int checkPermission(String permission, int pid, int uid) Determine whether the given permission is allowed for a particular process and user ID running in the system. abstract int checkUriPermission(Uri uri, int pid, int uid, int modeFlags) Determine whether a particular process and user ID has been granted permission to access a specific URI. abstract int checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags) Check both a Uri and normal permission. abstract void clearWallpaper() This method was deprecated in API level 5. Use WallpaperManager.clear() instead. This method requires the caller to hold the permission SET_WALLPAPER. abstract Context createConfigurationContext(Configuration overrideConfiguration) Return a new Context object for the current Context but whose resources are adjusted to match the given Configuration. abstract Context createDisplayContext(Display display) Return a new Context object for the current Context but whose resources are adjusted to match the metrics of the given Display. abstract Context createPackageContext(String packageName, int flags) Return a new Context object for the given application name. abstract String[] databaseList() Returns an array of strings naming the private databases associated with this Context's application package. abstract boolean deleteDatabase(String name) Delete an existing private SQLiteDatabase associated with this Context's application package. abstract boolean deleteFile(String name) Delete the given private file associated with this Context's application package. abstract void enforceCallingOrSelfPermission(String permission, String message) If neither you nor the calling process of an IPC you are handling has been granted a particular permission, throw a SecurityException. abstract void enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message) If the calling process of an IPC or you has not been granted permission to access a specific URI, throw SecurityException. abstract void enforceCallingPermission(String permission, String message) If the calling process of an IPC you are handling has not been granted a particular permission, throw a SecurityException. abstract void enforceCallingUriPermission(Uri uri, int modeFlags, String message) If the calling process and user ID has not been granted permission to access a specific URI, throw SecurityException. abstract void enforcePermission(String permission, int pid, int uid, String message) If the given permission is not allowed for a particular process and user ID running in the system, throw a SecurityException. abstract void enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message) If a particular process and user ID has not been granted permission to access a specific URI, throw SecurityException. abstract void enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags, String message) Enforce both a Uri and normal permission. abstract String[] fileList() Returns an array of strings naming the private files associated with this Context's application package. abstract Context getApplicationContext() Return the context of the single, global Application object of the current process. abstract ApplicationInfo getApplicationInfo() Return the full application info for this context's package. abstract AssetManager getAssets() Return an AssetManager instance for your application's package. abstract File getCacheDir() Returns the absolute path to the application specific cache directory on the filesystem. abstract ClassLoader getClassLoader() Return a class loader you can use to retrieve classes in this package. abstract File getCodeCacheDir() Returns the absolute path to the application specific cache directory on the filesystem designed for storing cached code. abstract ContentResolver getContentResolver() Return a ContentResolver instance for your application's package. abstract File getDatabasePath(String name) Returns the absolute path on the filesystem where a database created with openOrCreateDatabase(String, int, SQLiteDatabase.CursorFactory) is stored. abstract File getDir(String name, int mode) Retrieve, creating if needed, a new directory in which the application can place its own custom data files. final Drawable getDrawable(int id) Return a drawable object associated with a particular resource ID and styled for the current theme. abstract File getExternalCacheDir() Returns the absolute path to the directory on the primary external filesystem (that is somewhere on Environment.getExternalStorageDirectory() where the application can place cache files it owns. abstract File[] getExternalCacheDirs() Returns absolute paths to application-specific directories on all external storage devices where the application can place cache files it owns. abstract File getExternalFilesDir(String type) Returns the absolute path to the directory on the primary external filesystem (that is somewhere on Environment.getExternalStorageDirectory()) where the application can place persistent files it owns. abstract File[] getExternalFilesDirs(String type) Returns absolute paths to application-specific directories on all external storage devices where the application can place persistent files it owns. abstract File[] getExternalMediaDirs() Returns absolute paths to application-specific directories on all external storage devices where the application can place media files. abstract File getFileStreamPath(String name) Returns the absolute path on the filesystem where a file created with openFileOutput(String, int) is stored. abstract File getFilesDir() Returns the absolute path to the directory on the filesystem where files created with openFileOutput(String, int) are stored. abstract Looper getMainLooper() Return the Looper for the main thread of the current process. abstract File getNoBackupFilesDir() Returns the absolute path to the directory on the filesystem similar to getFilesDir(). abstract File getObbDir() Return the primary external storage directory where this application's OBB files (if there are any) can be found. abstract File[] getObbDirs() Returns absolute paths to application-specific directories on all external storage devices where the application's OBB files (if there are any) can be found. abstract String getPackageCodePath() Return the full path to this context's primary Android package. abstract PackageManager getPackageManager() Return PackageManager instance to find global package information. abstract String getPackageName() Return the name of this application's package. abstract String getPackageResourcePath() Return the full path to this context's primary Android package. abstract Resources getResources() Return a Resources instance for your application's package. abstract SharedPreferences getSharedPreferences(String name, int mode) Retrieve and hold the contents of the preferences file 'name', returning a SharedPreferences through which you can retrieve and modify its values. final String getString(int resId) Return a localized string from the application's package's default string table. final String getString(int resId, Object... formatArgs) Return a localized formatted string from the application's package's default string table, substituting the format arguments as defined in Formatter and format(String, Object...). abstract Object getSystemService(String name) Return the handle to a system-level service by name. final CharSequence getText(int resId) Return a localized, styled CharSequence from the application's package's default string table. abstract Resources.Theme getTheme() Return the Theme object associated with this Context. abstract Drawable getWallpaper() This method was deprecated in API level 5. Use WallpaperManager.get() instead. abstract int getWallpaperDesiredMinimumHeight() This method was deprecated in API level 5. Use WallpaperManager.getDesiredMinimumHeight() instead. abstract int getWallpaperDesiredMinimumWidth() This method was deprecated in API level 5. Use WallpaperManager.getDesiredMinimumWidth() instead. abstract void grantUriPermission(String toPackage, Uri uri, int modeFlags) Grant permission to access a specific Uri to another package, regardless of whether that package has general permission to access the Uri's content provider. boolean isRestricted() Indicates whether this Context is restricted. final TypedArray obtainStyledAttributes(int[] attrs) Retrieve styled attribute information in this Context's theme. final TypedArray obtainStyledAttributes(AttributeSet set, int[] attrs, int defStyleAttr, int defStyleRes) Retrieve styled attribute information in this Context's theme. final TypedArray obtainStyledAttributes(AttributeSet set, int[] attrs) Retrieve styled attribute information in this Context's theme. final TypedArray obtainStyledAttributes(int resid, int[] attrs) Retrieve styled attribute information in this Context's theme. abstract FileInputStream openFileInput(String name) Open a private file associated with this Context's application package for reading. abstract FileOutputStream openFileOutput(String name, int mode) Open a private file associated with this Context's application package for writing. abstract SQLiteDatabase openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory) Open a new private SQLiteDatabase associated with this Context's application package. abstract SQLiteDatabase openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory, DatabaseErrorHandler errorHandler) Open a new private SQLiteDatabase associated with this Context's application package. abstract Drawable peekWallpaper() This method was deprecated in API level 5. Use WallpaperManager.peek() instead. void registerComponentCallbacks(ComponentCallbacks callback) Add a new ComponentCallbacks to the base application of the Context, which will be called at the same times as the ComponentCallbacks methods of activities and other components are called. abstract Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter) Register a BroadcastReceiver to be run in the main activity thread. abstract Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler) Register to receive intent broadcasts, to run in the context of scheduler. abstract void removeStickyBroadcast(Intent intent) This method was deprecated in API level 21. Sticky broadcasts should not be used. They provide no security (anyone can access them), no protection (anyone can modify them), and many other problems. The recommended pattern is to use a non-sticky broadcast to report that something has changed, with another mechanism for apps to retrieve the current value whenever desired. abstract void removeStickyBroadcastAsUser(Intent intent, UserHandle user) This method was deprecated in API level 21. Sticky broadcasts should not be used. They provide no security (anyone can access them), no protection (anyone can modify them), and many other problems. The recommended pattern is to use a non-sticky broadcast to report that something has changed, with another mechanism for apps to retrieve the current value whenever desired. abstract void revokeUriPermission(Uri uri, int modeFlags) Remove all permissions to access a particular content provider Uri that were previously added with grantUriPermission(String, Uri, int). abstract void sendBroadcast(Intent intent, String receiverPermission) Broadcast the given intent to all interested BroadcastReceivers, allowing an optional required permission to be enforced. abstract void sendBroadcast(Intent intent) Broadcast the given intent to all interested BroadcastReceivers. abstract void sendBroadcastAsUser(Intent intent, UserHandle user) Version of sendBroadcast(Intent) that allows you to specify the user the broadcast will be sent to. abstract void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission) Version of sendBroadcast(Intent, String) that allows you to specify the user the broadcast will be sent to. abstract void sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras) Version of sendBroadcast(Intent) that allows you to receive data back from the broadcast. abstract void sendOrderedBroadcast(Intent intent, String receiverPermission) Broadcast the given intent to all interested BroadcastReceivers, delivering them one at a time to allow more preferred receivers to consume the broadcast before it is delivered to less preferred receivers. abstract void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras) Version of sendOrderedBroadcast(Intent, String, BroadcastReceiver, Handler, int, String, Bundle) that allows you to specify the user the broadcast will be sent to. abstract void sendStickyBroadcast(Intent intent) This method was deprecated in API level 21. Sticky broadcasts should not be used. They provide no security (anyone can access them), no protection (anyone can modify them), and many other problems. The recommended pattern is to use a non-sticky broadcast to report that something has changed, with another mechanism for apps to retrieve the current value whenever desired. abstract void sendStickyBroadcastAsUser(Intent intent, UserHandle user) This method was deprecated in API level 21. Sticky broadcasts should not be used. They provide no security (anyone can access them), no protection (anyone can modify them), and many other problems. The recommended pattern is to use a non-sticky broadcast to report that something has changed, with another mechanism for apps to retrieve the current value whenever desired. abstract void sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras) This method was deprecated in API level 21. Sticky broadcasts should not be used. They provide no security (anyone can access them), no protection (anyone can modify them), and many other problems. The recommended pattern is to use a non-sticky broadcast to report that something has changed, with another mechanism for apps to retrieve the current value whenever desired. abstract void sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras) This method was deprecated in API level 21. Sticky broadcasts should not be used. They provide no security (anyone can access them), no protection (anyone can modify them), and many other problems. The recommended pattern is to use a non-sticky broadcast to report that something has changed, with another mechanism for apps to retrieve the current value whenever desired. abstract void setTheme(int resid) Set the base theme for this context. abstract void setWallpaper(InputStream data) This method was deprecated in API level 5. Use WallpaperManager.set() instead. This method requires the caller to hold the permission SET_WALLPAPER. abstract void setWallpaper(Bitmap bitmap) This method was deprecated in API level 5. Use WallpaperManager.set() instead. This method requires the caller to hold the permission SET_WALLPAPER. abstract void startActivities(Intent[] intents, Bundle options) Launch multiple new activities. abstract void startActivities(Intent[] intents) Same as startActivities(Intent[], Bundle) with no options specified. abstract void startActivity(Intent intent) Same as startActivity(Intent, Bundle) with no options specified. abstract void startActivity(Intent intent, Bundle options) Launch a new activity. abstract boolean startInstrumentation(ComponentName className, String profileFile, Bundle arguments) Start executing an Instrumentation class. abstract void startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options) Like startActivity(Intent, Bundle), but taking a IntentSender to start. abstract void startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags) Same as startIntentSender(IntentSender, Intent, int, int, int, Bundle) with no options specified. abstract ComponentName startService(Intent service) Request that a given application service be started. abstract boolean stopService(Intent service) Request that a given application service be stopped. abstract void unbindService(ServiceConnection conn) Disconnect from an application service. void unregisterComponentCallbacks(ComponentCallbacks callback) Remove a ComponentCallbacks object that was previously registered with registerComponentCallbacks(ComponentCallbacks). abstract void unregisterReceiver(BroadcastReceiver receiver) Unregister a previously registered BroadcastReceiver.","abstract boolean bindService(Intent service, ServiceConnection conn, int flags) Connect to an application service, creating it if needed.","abstract int checkCallingOrSelfPermission(String permission) Determine whether the calling process of an IPC or you have been granted a particular permission.","abstract int checkCallingOrSelfUriPermission(Uri uri, int modeFlags) Determine whether the calling process of an IPC or you has been granted permission to access a specific URI.","abstract int checkCallingPermission(String permission) Determine whether the calling process of an IPC you are handling has been granted a particular permission.","abstract int checkCallingUriPermission(Uri uri, int modeFlags) Determine whether the calling process and user ID has been granted permission to access a specific URI.","abstract int checkPermission(String permission, int pid, int uid) Determine whether the given permission is allowed for a particular process and user ID running in the system.","abstract int checkUriPermission(Uri uri, int pid, int uid, int modeFlags) Determine whether a particular process and user ID has been granted permission to access a specific URI.","abstract int checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags) Check both a Uri and normal permission.","abstract void clearWallpaper() This method was deprecated in API level 5. Use WallpaperManager.clear() instead. This method requires the caller to hold the permission SET_WALLPAPER.","abstract Context createConfigurationContext(Configuration overrideConfiguration) Return a new Context object for the current Context but whose resources are adjusted to match the given Configuration.","abstract Context createDisplayContext(Display display) Return a new Context object for the current Context but whose resources are adjusted to match the metrics of the given Display.","abstract Context createPackageContext(String packageName, int flags) Return a new Context object for the given application name.","abstract String[] databaseList() Returns an array of strings naming the private databases associated with this Context's application package.","abstract boolean deleteDatabase(String name) Delete an existing private SQLiteDatabase associated with this Context's application package.","abstract boolean deleteFile(String name) Delete the given private file associated with this Context's application package.","abstract void enforceCallingOrSelfPermission(String permission, String message) If neither you nor the calling process of an IPC you are handling has been granted a particular permission, throw a SecurityException.","abstract void enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message) If the calling process of an IPC or you has not been granted permission to access a specific URI, throw SecurityException.","abstract void enforceCallingPermission(String permission, String message) If the calling process of an IPC you are handling has not been granted a particular permission, throw a SecurityException.","abstract void enforceCallingUriPermission(Uri uri, int modeFlags, String message) If the calling process and user ID has not been granted permission to access a specific URI, throw SecurityException.","abstract void enforcePermission(String permission, int pid, int uid, String message) If the given permission is not allowed for a particular process and user ID running in the system, throw a SecurityException.","abstract void enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message) If a particular process and user ID has not been granted permission to access a specific URI, throw SecurityException.","abstract void enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags, String message) Enforce both a Uri and normal permission.","abstract String[] fileList() Returns an array of strings naming the private files associated with this Context's application package.","abstract Context getApplicationContext() Return the context of the single, global Application object of the current process.","abstract ApplicationInfo getApplicationInfo() Return the full application info for this context's package.","abstract AssetManager getAssets() Return an AssetManager instance for your application's package.","abstract File getCacheDir() Returns the absolute path to the application specific cache directory on the filesystem.","abstract ClassLoader getClassLoader() Return a class loader you can use to retrieve classes in this package.","abstract File getCodeCacheDir() Returns the absolute path to the application specific cache directory on the filesystem designed for storing cached code.","abstract ContentResolver getContentResolver() Return a ContentResolver instance for your application's package.","abstract File getDatabasePath(String name) Returns the absolute path on the filesystem where a database created with openOrCreateDatabase(String, int, SQLiteDatabase.CursorFactory) is stored.","abstract File getDir(String name, int mode) Retrieve, creating if needed, a new directory in which the application can place its own custom data files.","final Drawable getDrawable(int id) Return a drawable object associated with a particular resource ID and styled for the current theme.","abstract File getExternalCacheDir() Returns the absolute path to the directory on the primary external filesystem (that is somewhere on Environment.getExternalStorageDirectory() where the application can place cache files it owns.","abstract File[] getExternalCacheDirs() Returns absolute paths to application-specific directories on all external storage devices where the application can place cache files it owns.","abstract File getExternalFilesDir(String type) Returns the absolute path to the directory on the primary external filesystem (that is somewhere on Environment.getExternalStorageDirectory()) where the application can place persistent files it owns.","abstract File[] getExternalFilesDirs(String type) Returns absolute paths to application-specific directories on all external storage devices where the application can place persistent files it owns.","abstract File[] getExternalMediaDirs() Returns absolute paths to application-specific directories on all external storage devices where the application can place media files.","abstract File getFileStreamPath(String name) Returns the absolute path on the filesystem where a file created with openFileOutput(String, int) is stored.","abstract File getFilesDir() Returns the absolute path to the directory on the filesystem where files created with openFileOutput(String, int) are stored.","abstract Looper getMainLooper() Return the Looper for the main thread of the current process.","abstract File getNoBackupFilesDir() Returns the absolute path to the directory on the filesystem similar to getFilesDir().","abstract File getObbDir() Return the primary external storage directory where this application's OBB files (if there are any) can be found.","abstract File[] getObbDirs() Returns absolute paths to application-specific directories on all external storage devices where the application's OBB files (if there are any) can be found.","abstract String getPackageCodePath() Return the full path to this context's primary Android package.","abstract PackageManager getPackageManager() Return PackageManager instance to find global package information.","abstract String getPackageName() Return the name of this application's package.","abstract String getPackageResourcePath() Return the full path to this context's primary Android package.","abstract Resources getResources() Return a Resources instance for your application's package.","abstract SharedPreferences getSharedPreferences(String name, int mode) Retrieve and hold the contents of the preferences file 'name', returning a SharedPreferences through which you can retrieve and modify its values.","final String getString(int resId) Return a localized string from the application's package's default string table.","final String getString(int resId, Object... formatArgs) Return a localized formatted string from the application's package's default string table, substituting the format arguments as defined in Formatter and format(String, Object...).","abstract Object getSystemService(String name) Return the handle to a system-level service by name.","final CharSequence getText(int resId) Return a localized, styled CharSequence from the application's package's default string table.","abstract Resources.Theme getTheme() Return the Theme object associated with this Context.","abstract Drawable getWallpaper() This method was deprecated in API level 5. Use WallpaperManager.get() instead.","abstract int getWallpaperDesiredMinimumHeight() This method was deprecated in API level 5. Use WallpaperManager.getDesiredMinimumHeight() instead.","abstract int getWallpaperDesiredMinimumWidth() This method was deprecated in API level 5. Use WallpaperManager.getDesiredMinimumWidth() instead.","abstract void grantUriPermission(String toPackage, Uri uri, int modeFlags) Grant permission to access a specific Uri to another package, regardless of whether that package has general permission to access the Uri's content provider.","boolean isRestricted() Indicates whether this Context is restricted.","final TypedArray obtainStyledAttributes(int[] attrs) Retrieve styled attribute information in this Context's theme.","final TypedArray obtainStyledAttributes(AttributeSet set, int[] attrs, int defStyleAttr, int defStyleRes) Retrieve styled attribute information in this Context's theme.","final TypedArray obtainStyledAttributes(AttributeSet set, int[] attrs) Retrieve styled attribute information in this Context's theme.","final TypedArray obtainStyledAttributes(int resid, int[] attrs) Retrieve styled attribute information in this Context's theme.","abstract FileInputStream openFileInput(String name) Open a private file associated with this Context's application package for reading.","abstract FileOutputStream openFileOutput(String name, int mode) Open a private file associated with this Context's application package for writing.","abstract SQLiteDatabase openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory) Open a new private SQLiteDatabase associated with this Context's application package.","abstract SQLiteDatabase openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory, DatabaseErrorHandler errorHandler) Open a new private SQLiteDatabase associated with this Context's application package.","abstract Drawable peekWallpaper() This method was deprecated in API level 5. Use WallpaperManager.peek() instead.","void registerComponentCallbacks(ComponentCallbacks callback) Add a new ComponentCallbacks to the base application of the Context, which will be called at the same times as the ComponentCallbacks methods of activities and other components are called.","abstract Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter) Register a BroadcastReceiver to be run in the main activity thread.","abstract Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler) Register to receive intent broadcasts, to run in the context of scheduler.","abstract void removeStickyBroadcast(Intent intent) This method was deprecated in API level 21. Sticky broadcasts should not be used. They provide no security (anyone can access them), no protection (anyone can modify them), and many other problems. The recommended pattern is to use a non-sticky broadcast to report that something has changed, with another mechanism for apps to retrieve the current value whenever desired.","abstract void removeStickyBroadcastAsUser(Intent intent, UserHandle user) This method was deprecated in API level 21. Sticky broadcasts should not be used. They provide no security (anyone can access them), no protection (anyone can modify them), and many other problems. The recommended pattern is to use a non-sticky broadcast to report that something has changed, with another mechanism for apps to retrieve the current value whenever desired.","abstract void revokeUriPermission(Uri uri, int modeFlags) Remove all permissions to access a particular content provider Uri that were previously added with grantUriPermission(String, Uri, int).","abstract void sendBroadcast(Intent intent, String receiverPermission) Broadcast the given intent to all interested BroadcastReceivers, allowing an optional required permission to be enforced.","abstract void sendBroadcast(Intent intent) Broadcast the given intent to all interested BroadcastReceivers.","abstract void sendBroadcastAsUser(Intent intent, UserHandle user) Version of sendBroadcast(Intent) that allows you to specify the user the broadcast will be sent to.","abstract void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission) Version of sendBroadcast(Intent, String) that allows you to specify the user the broadcast will be sent to.","abstract void sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras) Version of sendBroadcast(Intent) that allows you to receive data back from the broadcast.","abstract void sendOrderedBroadcast(Intent intent, String receiverPermission) Broadcast the given intent to all interested BroadcastReceivers, delivering them one at a time to allow more preferred receivers to consume the broadcast before it is delivered to less preferred receivers.","abstract void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras) Version of sendOrderedBroadcast(Intent, String, BroadcastReceiver, Handler, int, String, Bundle) that allows you to specify the user the broadcast will be sent to.","abstract void sendStickyBroadcast(Intent intent) This method was deprecated in API level 21. Sticky broadcasts should not be used. They provide no security (anyone can access them), no protection (anyone can modify them), and many other problems. The recommended pattern is to use a non-sticky broadcast to report that something has changed, with another mechanism for apps to retrieve the current value whenever desired.","abstract void sendStickyBroadcastAsUser(Intent intent, UserHandle user) This method was deprecated in API level 21. Sticky broadcasts should not be used. They provide no security (anyone can access them), no protection (anyone can modify them), and many other problems. The recommended pattern is to use a non-sticky broadcast to report that something has changed, with another mechanism for apps to retrieve the current value whenever desired.","abstract void sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras) This method was deprecated in API level 21. Sticky broadcasts should not be used. They provide no security (anyone can access them), no protection (anyone can modify them), and many other problems. The recommended pattern is to use a non-sticky broadcast to report that something has changed, with another mechanism for apps to retrieve the current value whenever desired.","abstract void sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras) This method was deprecated in API level 21. Sticky broadcasts should not be used. They provide no security (anyone can access them), no protection (anyone can modify them), and many other problems. The recommended pattern is to use a non-sticky broadcast to report that something has changed, with another mechanism for apps to retrieve the current value whenever desired.","abstract void setTheme(int resid) Set the base theme for this context.","abstract void setWallpaper(InputStream data) This method was deprecated in API level 5. Use WallpaperManager.set() instead. This method requires the caller to hold the permission SET_WALLPAPER.","abstract void setWallpaper(Bitmap bitmap) This method was deprecated in API level 5. Use WallpaperManager.set() instead. This method requires the caller to hold the permission SET_WALLPAPER.","abstract void startActivities(Intent[] intents, Bundle options) Launch multiple new activities.","abstract void startActivities(Intent[] intents) Same as startActivities(Intent[], Bundle) with no options specified.","abstract void startActivity(Intent intent) Same as startActivity(Intent, Bundle) with no options specified.","abstract void startActivity(Intent intent, Bundle options) Launch a new activity.","abstract boolean startInstrumentation(ComponentName className, String profileFile, Bundle arguments) Start executing an Instrumentation class.","abstract void startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options) Like startActivity(Intent, Bundle), but taking a IntentSender to start.","abstract void startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags) Same as startIntentSender(IntentSender, Intent, int, int, int, Bundle) with no options specified.","abstract ComponentName startService(Intent service) Request that a given application service be started.","abstract boolean stopService(Intent service) Request that a given application service be stopped.","abstract void unbindService(ServiceConnection conn) Disconnect from an application service.","void unregisterComponentCallbacks(ComponentCallbacks callback) Remove a ComponentCallbacks object that was previously registered with registerComponentCallbacks(ComponentCallbacks).","abstract void unregisterReceiver(BroadcastReceiver receiver) Unregister a previously registered BroadcastReceiver.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface android.content.ComponentCallbacks abstract void onConfigurationChanged(Configuration newConfig) Called by the system when the device configuration changes while your component is running. abstract void onLowMemory() This is called when the overall system is running low on memory, and actively running processes should trim their memory usage.","abstract void onConfigurationChanged(Configuration newConfig) Called by the system when the device configuration changes while your component is running.","abstract void onLowMemory() This is called when the overall system is running low on memory, and actively running processes should trim their memory usage.","From interface android.content.ComponentCallbacks2 abstract void onTrimMemory(int level) Called when the operating system has determined that it is a good time for a process to trim unneeded memory from its process.","abstract void onTrimMemory(int level) Called when the operating system has determined that it is a good time for a process to trim unneeded memory from its process.","From interface android.view.KeyEvent.Callback abstract boolean onKeyDown(int keyCode, KeyEvent event) Called when a key down event has occurred. abstract boolean onKeyLongPress(int keyCode, KeyEvent event) Called when a long press has occurred. abstract boolean onKeyMultiple(int keyCode, int count, KeyEvent event) Called when multiple down/up pairs of the same key have occurred in a row. abstract boolean onKeyUp(int keyCode, KeyEvent event) Called when a key up event has occurred.","abstract boolean onKeyDown(int keyCode, KeyEvent event) Called when a key down event has occurred.","abstract boolean onKeyLongPress(int keyCode, KeyEvent event) Called when a long press has occurred.","abstract boolean onKeyMultiple(int keyCode, int count, KeyEvent event) Called when multiple down/up pairs of the same key have occurred in a row.","abstract boolean onKeyUp(int keyCode, KeyEvent event) Called when a key up event has occurred.","From interface android.view.LayoutInflater.Factory abstract View onCreateView(String name, Context context, AttributeSet attrs) Hook you can supply that is called when inflating from a LayoutInflater.","abstract View onCreateView(String name, Context context, AttributeSet attrs) Hook you can supply that is called when inflating from a LayoutInflater.","From interface android.view.LayoutInflater.Factory2 abstract View onCreateView(View parent, String name, Context context, AttributeSet attrs) Version of onCreateView(String, Context, AttributeSet) that also supplies the parent that the view created view will be placed in.","abstract View onCreateView(View parent, String name, Context context, AttributeSet attrs) Version of onCreateView(String, Context, AttributeSet) that also supplies the parent that the view created view will be placed in.","From interface android.view.View.OnCreateContextMenuListener abstract void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) Called when the context menu for this view is being built.","abstract void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) Called when the context menu for this view is being built.","From interface android.view.Window.Callback abstract boolean dispatchGenericMotionEvent(MotionEvent event) Called to process generic motion events. abstract boolean dispatchKeyEvent(KeyEvent event) Called to process key events. abstract boolean dispatchKeyShortcutEvent(KeyEvent event) Called to process a key shortcut event. abstract boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) Called to process population of AccessibilityEvents. abstract boolean dispatchTouchEvent(MotionEvent event) Called to process touch screen events. abstract boolean dispatchTrackballEvent(MotionEvent event) Called to process trackball events. abstract void onActionModeFinished(ActionMode mode) Called when an action mode has been finished. abstract void onActionModeStarted(ActionMode mode) Called when an action mode has been started. abstract void onAttachedToWindow() Called when the window has been attached to the window manager. abstract void onContentChanged() This hook is called whenever the content view of the screen changes (due to a call to Window.setContentView or Window.addContentView). abstract boolean onCreatePanelMenu(int featureId, Menu menu) Initialize the contents of the menu for panel 'featureId'. abstract View onCreatePanelView(int featureId) Instantiate the view to display in the panel for 'featureId'. abstract void onDetachedFromWindow() Called when the window has been attached to the window manager. abstract boolean onMenuItemSelected(int featureId, MenuItem item) Called when a panel's menu item has been selected by the user. abstract boolean onMenuOpened(int featureId, Menu menu) Called when a panel's menu is opened by the user. abstract void onPanelClosed(int featureId, Menu menu) Called when a panel is being closed. abstract boolean onPreparePanel(int featureId, View view, Menu menu) Prepare a panel to be displayed. abstract boolean onSearchRequested() Called when the user signals the desire to start a search. abstract void onWindowAttributesChanged(WindowManager.LayoutParams attrs) This is called whenever the current window attributes change. abstract void onWindowFocusChanged(boolean hasFocus) This hook is called whenever the window focus changes. abstract ActionMode onWindowStartingActionMode(ActionMode.Callback callback) Called when an action mode is being started for this window.","abstract boolean dispatchGenericMotionEvent(MotionEvent event) Called to process generic motion events.","abstract boolean dispatchKeyEvent(KeyEvent event) Called to process key events.","abstract boolean dispatchKeyShortcutEvent(KeyEvent event) Called to process a key shortcut event.","abstract boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) Called to process population of AccessibilityEvents.","abstract boolean dispatchTouchEvent(MotionEvent event) Called to process touch screen events.","abstract boolean dispatchTrackballEvent(MotionEvent event) Called to process trackball events.","abstract void onActionModeFinished(ActionMode mode) Called when an action mode has been finished.","abstract void onActionModeStarted(ActionMode mode) Called when an action mode has been started.","abstract void onAttachedToWindow() Called when the window has been attached to the window manager.","abstract void onContentChanged() This hook is called whenever the content view of the screen changes (due to a call to Window.setContentView or Window.addContentView).","abstract boolean onCreatePanelMenu(int featureId, Menu menu) Initialize the contents of the menu for panel 'featureId'.","abstract View onCreatePanelView(int featureId) Instantiate the view to display in the panel for 'featureId'.","abstract void onDetachedFromWindow() Called when the window has been attached to the window manager.","abstract boolean onMenuItemSelected(int featureId, MenuItem item) Called when a panel's menu item has been selected by the user.","abstract boolean onMenuOpened(int featureId, Menu menu) Called when a panel's menu is opened by the user.","abstract void onPanelClosed(int featureId, Menu menu) Called when a panel is being closed.","abstract boolean onPreparePanel(int featureId, View view, Menu menu) Prepare a panel to be displayed.","abstract boolean onSearchRequested() Called when the user signals the desire to start a search.","abstract void onWindowAttributesChanged(WindowManager.LayoutParams attrs) This is called whenever the current window attributes change.","abstract void onWindowFocusChanged(boolean hasFocus) This hook is called whenever the window focus changes.","abstract ActionMode onWindowStartingActionMode(ActionMode.Callback callback) Called when an action mode is being started for this window."],"package":"android.app","constants":["[Expand] Inherited Constants","From class android.app.Activity int DEFAULT_KEYS_DIALER Use with setDefaultKeyMode(int) to launch the dialer during default key handling. int DEFAULT_KEYS_DISABLE Use with setDefaultKeyMode(int) to turn off default handling of keys. int DEFAULT_KEYS_SEARCH_GLOBAL Use with setDefaultKeyMode(int) to specify that unhandled keystrokes will start a global search (typically web search, but some platforms may define alternate methods for global search) See android.app.SearchManager for more details. int DEFAULT_KEYS_SEARCH_LOCAL Use with setDefaultKeyMode(int) to specify that unhandled keystrokes will start an application-defined search. int DEFAULT_KEYS_SHORTCUT Use with setDefaultKeyMode(int) to execute a menu shortcut in default key handling. int RESULT_CANCELED Standard activity result: operation canceled. int RESULT_FIRST_USER Start of user-defined activity results. int RESULT_OK Standard activity result: operation succeeded.","int DEFAULT_KEYS_DIALER Use with setDefaultKeyMode(int) to launch the dialer during default key handling.","int DEFAULT_KEYS_DISABLE Use with setDefaultKeyMode(int) to turn off default handling of keys.","int DEFAULT_KEYS_SEARCH_GLOBAL Use with setDefaultKeyMode(int) to specify that unhandled keystrokes will start a global search (typically web search, but some platforms may define alternate methods for global search) See android.app.SearchManager for more details.","int DEFAULT_KEYS_SEARCH_LOCAL Use with setDefaultKeyMode(int) to specify that unhandled keystrokes will start an application-defined search.","int DEFAULT_KEYS_SHORTCUT Use with setDefaultKeyMode(int) to execute a menu shortcut in default key handling.","int RESULT_CANCELED Standard activity result: operation canceled.","int RESULT_FIRST_USER Start of user-defined activity results.","int RESULT_OK Standard activity result: operation succeeded.","From class android.content.Context String ACCESSIBILITY_SERVICE Use with getSystemService(String) to retrieve a AccessibilityManager for giving the user feedback for UI events through the registered event listeners. String ACCOUNT_SERVICE Use with getSystemService(String) to retrieve a AccountManager for receiving intents at a time of your choosing. String ACTIVITY_SERVICE Use with getSystemService(String) to retrieve a ActivityManager for interacting with the global system state. String ALARM_SERVICE Use with getSystemService(String) to retrieve a AlarmManager for receiving intents at a time of your choosing. String APPWIDGET_SERVICE Use with getSystemService(String) to retrieve a AppWidgetManager for accessing AppWidgets. String APP_OPS_SERVICE Use with getSystemService(String) to retrieve a AppOpsManager for tracking application operations on the device. String AUDIO_SERVICE Use with getSystemService(String) to retrieve a AudioManager for handling management of volume, ringer modes and audio routing. String BATTERY_SERVICE Use with getSystemService(String) to retrieve a BatteryManager for managing battery state. int BIND_ABOVE_CLIENT Flag for bindService(Intent, ServiceConnection, int): indicates that the client application binding to this service considers the service to be more important than the app itself. int BIND_ADJUST_WITH_ACTIVITY Flag for bindService(Intent, ServiceConnection, int): If binding from an activity, allow the target service's process importance to be raised based on whether the activity is visible to the user, regardless whether another flag is used to reduce the amount that the client process's overall importance is used to impact it. int BIND_ALLOW_OOM_MANAGEMENT Flag for bindService(Intent, ServiceConnection, int): allow the process hosting the bound service to go through its normal memory management. int BIND_AUTO_CREATE Flag for bindService(Intent, ServiceConnection, int): automatically create the service as long as the binding exists. int BIND_DEBUG_UNBIND Flag for bindService(Intent, ServiceConnection, int): include debugging help for mismatched calls to unbind. int BIND_IMPORTANT Flag for bindService(Intent, ServiceConnection, int): this service is very important to the client, so should be brought to the foreground process level when the client is. int BIND_NOT_FOREGROUND Flag for bindService(Intent, ServiceConnection, int): don't allow this binding to raise the target service's process to the foreground scheduling priority. int BIND_WAIVE_PRIORITY Flag for bindService(Intent, ServiceConnection, int): don't impact the scheduling or memory management priority of the target service's hosting process. String BLUETOOTH_SERVICE Use with getSystemService(String) to retrieve a BluetoothAdapter for using Bluetooth. String CAMERA_SERVICE Use with getSystemService(String) to retrieve a CameraManager for interacting with camera devices. String CAPTIONING_SERVICE Use with getSystemService(String) to retrieve a CaptioningManager for obtaining captioning properties and listening for changes in captioning preferences. String CLIPBOARD_SERVICE Use with getSystemService(String) to retrieve a ClipboardManager for accessing and modifying the contents of the global clipboard. String CONNECTIVITY_SERVICE Use with getSystemService(String) to retrieve a ConnectivityManager for handling management of network connections. String CONSUMER_IR_SERVICE Use with getSystemService(String) to retrieve a ConsumerIrManager for transmitting infrared signals from the device. int CONTEXT_IGNORE_SECURITY Flag for use with createPackageContext(String, int): ignore any security restrictions on the Context being requested, allowing it to always be loaded. int CONTEXT_INCLUDE_CODE Flag for use with createPackageContext(String, int): include the application code with the context. int CONTEXT_RESTRICTED Flag for use with createPackageContext(String, int): a restricted context may disable specific features. String DEVICE_POLICY_SERVICE Use with getSystemService(String) to retrieve a DevicePolicyManager for working with global device policy management. String DISPLAY_SERVICE Use with getSystemService(String) to retrieve a DisplayManager for interacting with display devices. String DOWNLOAD_SERVICE Use with getSystemService(String) to retrieve a DownloadManager for requesting HTTP downloads. String DROPBOX_SERVICE Use with getSystemService(String) to retrieve a DropBoxManager instance for recording diagnostic logs. String INPUT_METHOD_SERVICE Use with getSystemService(String) to retrieve a InputMethodManager for accessing input methods. String INPUT_SERVICE Use with getSystemService(String) to retrieve a InputManager for interacting with input devices. String JOB_SCHEDULER_SERVICE Use with getSystemService(String) to retrieve a JobScheduler instance for managing occasional background tasks. String KEYGUARD_SERVICE Use with getSystemService(String) to retrieve a NotificationManager for controlling keyguard. String LAUNCHER_APPS_SERVICE Use with getSystemService(String) to retrieve a LauncherApps for querying and monitoring launchable apps across profiles of a user. String LAYOUT_INFLATER_SERVICE Use with getSystemService(String) to retrieve a LayoutInflater for inflating layout resources in this context. String LOCATION_SERVICE Use with getSystemService(String) to retrieve a LocationManager for controlling location updates. String MEDIA_PROJECTION_SERVICE Use with getSystemService(String) to retrieve a MediaProjectionManager instance for managing media projection sessions. String MEDIA_ROUTER_SERVICE Use with getSystemService(String) to retrieve a MediaRouter for controlling and managing routing of media. String MEDIA_SESSION_SERVICE Use with getSystemService(String) to retrieve a MediaSessionManager for managing media Sessions. int MODE_APPEND File creation mode: for use with openFileOutput(String, int), if the file already exists then write data to the end of the existing file instead of erasing it. int MODE_ENABLE_WRITE_AHEAD_LOGGING Database open flag: when set, the database is opened with write-ahead logging enabled by default. int MODE_MULTI_PROCESS SharedPreference loading flag: when set, the file on disk will be checked for modification even if the shared preferences instance is already loaded in this process. int MODE_PRIVATE File creation mode: the default mode, where the created file can only be accessed by the calling application (or all applications sharing the same user ID). int MODE_WORLD_READABLE This constant was deprecated in API level 17. Creating world-readable files is very dangerous, and likely to cause security holes in applications. It is strongly discouraged; instead, applications should use more formal mechanism for interactions such as ContentProvider, BroadcastReceiver, and Service. There are no guarantees that this access mode will remain on a file, such as when it goes through a backup and restore. File creation mode: allow all other applications to have read access to the created file. int MODE_WORLD_WRITEABLE This constant was deprecated in API level 17. Creating world-writable files is very dangerous, and likely to cause security holes in applications. It is strongly discouraged; instead, applications should use more formal mechanism for interactions such as ContentProvider, BroadcastReceiver, and Service. There are no guarantees that this access mode will remain on a file, such as when it goes through a backup and restore. File creation mode: allow all other applications to have write access to the created file. String NFC_SERVICE Use with getSystemService(String) to retrieve a NfcManager for using NFC. String NOTIFICATION_SERVICE Use with getSystemService(String) to retrieve a NotificationManager for informing the user of background events. String NSD_SERVICE Use with getSystemService(String) to retrieve a NsdManager for handling management of network service discovery String POWER_SERVICE Use with getSystemService(String) to retrieve a PowerManager for controlling power management, including \"wake locks,\" which let you keep the device on while you're running long tasks. String PRINT_SERVICE PrintManager for printing and managing printers and print tasks. String RESTRICTIONS_SERVICE Use with getSystemService(String) to retrieve a RestrictionsManager for retrieving application restrictions and requesting permissions for restricted operations. String SEARCH_SERVICE Use with getSystemService(String) to retrieve a SearchManager for handling searches. String SENSOR_SERVICE Use with getSystemService(String) to retrieve a SensorManager for accessing sensors. String STORAGE_SERVICE Use with getSystemService(String) to retrieve a StorageManager for accessing system storage functions. String TELECOM_SERVICE Use with getSystemService(String) to retrieve a TelecomManager to manage telecom-related features of the device. String TELEPHONY_SERVICE Use with getSystemService(String) to retrieve a TelephonyManager for handling management the telephony features of the device. String TEXT_SERVICES_MANAGER_SERVICE Use with getSystemService(String) to retrieve a TextServicesManager for accessing text services. String TV_INPUT_SERVICE Use with getSystemService(String) to retrieve a TvInputManager for interacting with TV inputs on the device. String UI_MODE_SERVICE Use with getSystemService(String) to retrieve a UiModeManager for controlling UI modes. String USB_SERVICE Use with getSystemService(String) to retrieve a UsbManager for access to USB devices (as a USB host) and for controlling this device's behavior as a USB device. String USER_SERVICE Use with getSystemService(String) to retrieve a UserManager for managing users on devices that support multiple users. String VIBRATOR_SERVICE Use with getSystemService(String) to retrieve a Vibrator for interacting with the vibration hardware. String WALLPAPER_SERVICE Use with getSystemService(String) to retrieve a com.android.server.WallpaperService for accessing wallpapers. String WIFI_P2P_SERVICE Use with getSystemService(String) to retrieve a WifiP2pManager for handling management of Wi-Fi peer-to-peer connections. String WIFI_SERVICE Use with getSystemService(String) to retrieve a WifiManager for handling management of Wi-Fi access. String WINDOW_SERVICE Use with getSystemService(String) to retrieve a WindowManager for accessing the system's window manager.","String ACCESSIBILITY_SERVICE Use with getSystemService(String) to retrieve a AccessibilityManager for giving the user feedback for UI events through the registered event listeners.","String ACCOUNT_SERVICE Use with getSystemService(String) to retrieve a AccountManager for receiving intents at a time of your choosing.","String ACTIVITY_SERVICE Use with getSystemService(String) to retrieve a ActivityManager for interacting with the global system state.","String ALARM_SERVICE Use with getSystemService(String) to retrieve a AlarmManager for receiving intents at a time of your choosing.","String APPWIDGET_SERVICE Use with getSystemService(String) to retrieve a AppWidgetManager for accessing AppWidgets.","String APP_OPS_SERVICE Use with getSystemService(String) to retrieve a AppOpsManager for tracking application operations on the device.","String AUDIO_SERVICE Use with getSystemService(String) to retrieve a AudioManager for handling management of volume, ringer modes and audio routing.","String BATTERY_SERVICE Use with getSystemService(String) to retrieve a BatteryManager for managing battery state.","int BIND_ABOVE_CLIENT Flag for bindService(Intent, ServiceConnection, int): indicates that the client application binding to this service considers the service to be more important than the app itself.","int BIND_ADJUST_WITH_ACTIVITY Flag for bindService(Intent, ServiceConnection, int): If binding from an activity, allow the target service's process importance to be raised based on whether the activity is visible to the user, regardless whether another flag is used to reduce the amount that the client process's overall importance is used to impact it.","int BIND_ALLOW_OOM_MANAGEMENT Flag for bindService(Intent, ServiceConnection, int): allow the process hosting the bound service to go through its normal memory management.","int BIND_AUTO_CREATE Flag for bindService(Intent, ServiceConnection, int): automatically create the service as long as the binding exists.","int BIND_DEBUG_UNBIND Flag for bindService(Intent, ServiceConnection, int): include debugging help for mismatched calls to unbind.","int BIND_IMPORTANT Flag for bindService(Intent, ServiceConnection, int): this service is very important to the client, so should be brought to the foreground process level when the client is.","int BIND_NOT_FOREGROUND Flag for bindService(Intent, ServiceConnection, int): don't allow this binding to raise the target service's process to the foreground scheduling priority.","int BIND_WAIVE_PRIORITY Flag for bindService(Intent, ServiceConnection, int): don't impact the scheduling or memory management priority of the target service's hosting process.","String BLUETOOTH_SERVICE Use with getSystemService(String) to retrieve a BluetoothAdapter for using Bluetooth.","String CAMERA_SERVICE Use with getSystemService(String) to retrieve a CameraManager for interacting with camera devices.","String CAPTIONING_SERVICE Use with getSystemService(String) to retrieve a CaptioningManager for obtaining captioning properties and listening for changes in captioning preferences.","String CLIPBOARD_SERVICE Use with getSystemService(String) to retrieve a ClipboardManager for accessing and modifying the contents of the global clipboard.","String CONNECTIVITY_SERVICE Use with getSystemService(String) to retrieve a ConnectivityManager for handling management of network connections.","String CONSUMER_IR_SERVICE Use with getSystemService(String) to retrieve a ConsumerIrManager for transmitting infrared signals from the device.","int CONTEXT_IGNORE_SECURITY Flag for use with createPackageContext(String, int): ignore any security restrictions on the Context being requested, allowing it to always be loaded.","int CONTEXT_INCLUDE_CODE Flag for use with createPackageContext(String, int): include the application code with the context.","int CONTEXT_RESTRICTED Flag for use with createPackageContext(String, int): a restricted context may disable specific features.","String DEVICE_POLICY_SERVICE Use with getSystemService(String) to retrieve a DevicePolicyManager for working with global device policy management.","String DISPLAY_SERVICE Use with getSystemService(String) to retrieve a DisplayManager for interacting with display devices.","String DOWNLOAD_SERVICE Use with getSystemService(String) to retrieve a DownloadManager for requesting HTTP downloads.","String DROPBOX_SERVICE Use with getSystemService(String) to retrieve a DropBoxManager instance for recording diagnostic logs.","String INPUT_METHOD_SERVICE Use with getSystemService(String) to retrieve a InputMethodManager for accessing input methods.","String INPUT_SERVICE Use with getSystemService(String) to retrieve a InputManager for interacting with input devices.","String JOB_SCHEDULER_SERVICE Use with getSystemService(String) to retrieve a JobScheduler instance for managing occasional background tasks.","String KEYGUARD_SERVICE Use with getSystemService(String) to retrieve a NotificationManager for controlling keyguard.","String LAUNCHER_APPS_SERVICE Use with getSystemService(String) to retrieve a LauncherApps for querying and monitoring launchable apps across profiles of a user.","String LAYOUT_INFLATER_SERVICE Use with getSystemService(String) to retrieve a LayoutInflater for inflating layout resources in this context.","String LOCATION_SERVICE Use with getSystemService(String) to retrieve a LocationManager for controlling location updates.","String MEDIA_PROJECTION_SERVICE Use with getSystemService(String) to retrieve a MediaProjectionManager instance for managing media projection sessions.","String MEDIA_ROUTER_SERVICE Use with getSystemService(String) to retrieve a MediaRouter for controlling and managing routing of media.","String MEDIA_SESSION_SERVICE Use with getSystemService(String) to retrieve a MediaSessionManager for managing media Sessions.","int MODE_APPEND File creation mode: for use with openFileOutput(String, int), if the file already exists then write data to the end of the existing file instead of erasing it.","int MODE_ENABLE_WRITE_AHEAD_LOGGING Database open flag: when set, the database is opened with write-ahead logging enabled by default.","int MODE_MULTI_PROCESS SharedPreference loading flag: when set, the file on disk will be checked for modification even if the shared preferences instance is already loaded in this process.","int MODE_PRIVATE File creation mode: the default mode, where the created file can only be accessed by the calling application (or all applications sharing the same user ID).","int MODE_WORLD_READABLE This constant was deprecated in API level 17. Creating world-readable files is very dangerous, and likely to cause security holes in applications. It is strongly discouraged; instead, applications should use more formal mechanism for interactions such as ContentProvider, BroadcastReceiver, and Service. There are no guarantees that this access mode will remain on a file, such as when it goes through a backup and restore. File creation mode: allow all other applications to have read access to the created file.","int MODE_WORLD_WRITEABLE This constant was deprecated in API level 17. Creating world-writable files is very dangerous, and likely to cause security holes in applications. It is strongly discouraged; instead, applications should use more formal mechanism for interactions such as ContentProvider, BroadcastReceiver, and Service. There are no guarantees that this access mode will remain on a file, such as when it goes through a backup and restore. File creation mode: allow all other applications to have write access to the created file.","String NFC_SERVICE Use with getSystemService(String) to retrieve a NfcManager for using NFC.","String NOTIFICATION_SERVICE Use with getSystemService(String) to retrieve a NotificationManager for informing the user of background events.","String NSD_SERVICE Use with getSystemService(String) to retrieve a NsdManager for handling management of network service discovery","String POWER_SERVICE Use with getSystemService(String) to retrieve a PowerManager for controlling power management, including \"wake locks,\" which let you keep the device on while you're running long tasks.","String PRINT_SERVICE PrintManager for printing and managing printers and print tasks.","String RESTRICTIONS_SERVICE Use with getSystemService(String) to retrieve a RestrictionsManager for retrieving application restrictions and requesting permissions for restricted operations.","String SEARCH_SERVICE Use with getSystemService(String) to retrieve a SearchManager for handling searches.","String SENSOR_SERVICE Use with getSystemService(String) to retrieve a SensorManager for accessing sensors.","String STORAGE_SERVICE Use with getSystemService(String) to retrieve a StorageManager for accessing system storage functions.","String TELECOM_SERVICE Use with getSystemService(String) to retrieve a TelecomManager to manage telecom-related features of the device.","String TELEPHONY_SERVICE Use with getSystemService(String) to retrieve a TelephonyManager for handling management the telephony features of the device.","String TEXT_SERVICES_MANAGER_SERVICE Use with getSystemService(String) to retrieve a TextServicesManager for accessing text services.","String TV_INPUT_SERVICE Use with getSystemService(String) to retrieve a TvInputManager for interacting with TV inputs on the device.","String UI_MODE_SERVICE Use with getSystemService(String) to retrieve a UiModeManager for controlling UI modes.","String USB_SERVICE Use with getSystemService(String) to retrieve a UsbManager for access to USB devices (as a USB host) and for controlling this device's behavior as a USB device.","String USER_SERVICE Use with getSystemService(String) to retrieve a UserManager for managing users on devices that support multiple users.","String VIBRATOR_SERVICE Use with getSystemService(String) to retrieve a Vibrator for interacting with the vibration hardware.","String WALLPAPER_SERVICE Use with getSystemService(String) to retrieve a com.android.server.WallpaperService for accessing wallpapers.","String WIFI_P2P_SERVICE Use with getSystemService(String) to retrieve a WifiP2pManager for handling management of Wi-Fi peer-to-peer connections.","String WIFI_SERVICE Use with getSystemService(String) to retrieve a WifiManager for handling management of Wi-Fi access.","String WINDOW_SERVICE Use with getSystemService(String) to retrieve a WindowManager for accessing the system's window manager.","From interface android.content.ComponentCallbacks2 int TRIM_MEMORY_BACKGROUND Level for onTrimMemory(int): the process has gone on to the LRU list. int TRIM_MEMORY_COMPLETE Level for onTrimMemory(int): the process is nearing the end of the background LRU list, and if more memory isn't found soon it will be killed. int TRIM_MEMORY_MODERATE Level for onTrimMemory(int): the process is around the middle of the background LRU list; freeing memory can help the system keep other processes running later in the list for better overall performance. int TRIM_MEMORY_RUNNING_CRITICAL Level for onTrimMemory(int): the process is not an expendable background process, but the device is running extremely low on memory and is about to not be able to keep any background processes running. int TRIM_MEMORY_RUNNING_LOW Level for onTrimMemory(int): the process is not an expendable background process, but the device is running low on memory. int TRIM_MEMORY_RUNNING_MODERATE Level for onTrimMemory(int): the process is not an expendable background process, but the device is running moderately low on memory. int TRIM_MEMORY_UI_HIDDEN Level for onTrimMemory(int): the process had been showing a user interface, and is no longer doing so.","int TRIM_MEMORY_BACKGROUND Level for onTrimMemory(int): the process has gone on to the LRU list.","int TRIM_MEMORY_COMPLETE Level for onTrimMemory(int): the process is nearing the end of the background LRU list, and if more memory isn't found soon it will be killed.","int TRIM_MEMORY_MODERATE Level for onTrimMemory(int): the process is around the middle of the background LRU list; freeing memory can help the system keep other processes running later in the list for better overall performance.","int TRIM_MEMORY_RUNNING_CRITICAL Level for onTrimMemory(int): the process is not an expendable background process, but the device is running extremely low on memory and is about to not be able to keep any background processes running.","int TRIM_MEMORY_RUNNING_LOW Level for onTrimMemory(int): the process is not an expendable background process, but the device is running low on memory.","int TRIM_MEMORY_RUNNING_MODERATE Level for onTrimMemory(int): the process is not an expendable background process, but the device is running moderately low on memory.","int TRIM_MEMORY_UI_HIDDEN Level for onTrimMemory(int): the process had been showing a user interface, and is no longer doing so."],"class":"LauncherActivity","constructors":[],"fields":[]}