{"methods":["void assertNotInLayoutOrScroll(String message) Checks if RecyclerView is in the middle of a layout or scroll and throws an IllegalStateException if it is.","boolean canScrollHorizontally() Query if horizontal scrolling is currently supported.","boolean canScrollVertically() Query if vertical scrolling is currently supported.","int computeHorizontalScrollExtent(RecyclerView.State state) Override this method if you want to support scroll bars.","int computeHorizontalScrollOffset(RecyclerView.State state) Override this method if you want to support scroll bars.","int computeHorizontalScrollRange(RecyclerView.State state) Override this method if you want to support scroll bars.","PointF computeScrollVectorForPosition(int targetPosition)","int computeVerticalScrollExtent(RecyclerView.State state) Override this method if you want to support scroll bars.","int computeVerticalScrollOffset(RecyclerView.State state) Override this method if you want to support scroll bars.","int computeVerticalScrollRange(RecyclerView.State state) Override this method if you want to support scroll bars.","int findFirstCompletelyVisibleItemPosition() Returns the adapter position of the first fully visible view.","int findFirstVisibleItemPosition() Returns the adapter position of the first visible view.","int findLastCompletelyVisibleItemPosition() Returns the adapter position of the last fully visible view.","int findLastVisibleItemPosition() Returns the adapter position of the last visible view.","View findViewByPosition(int position) Finds the view which represents the given adapter position.","RecyclerView.LayoutParams generateDefaultLayoutParams() Create a default LayoutParams object for a child of the RecyclerView.","int getOrientation() Returns the current orientaion of the layout.","boolean getRecycleChildrenOnDetach() Returns whether LayoutManager will recycle its children when it is detached from RecyclerView.","boolean getReverseLayout() Returns if views are laid out from the opposite direction of the layout.","boolean getStackFromEnd()","boolean isSmoothScrollbarEnabled() Returns the current state of the smooth scrollbar feature.","void onDetachedFromWindow(RecyclerView view, RecyclerView.Recycler recycler) Called when this LayoutManager is detached from its parent RecyclerView or when its parent RecyclerView is detached from its window.","View onFocusSearchFailed(View focused, int focusDirection, RecyclerView.Recycler recycler, RecyclerView.State state) Called when searching for a focusable view in the given direction has failed for the current content of the RecyclerView.","void onInitializeAccessibilityEvent(AccessibilityEvent event)","void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) Lay out all relevant child views from the given adapter.","void onRestoreInstanceState(Parcelable state)","Parcelable onSaveInstanceState() Called when the LayoutManager should save its state.","int scrollHorizontallyBy(int dx, RecyclerView.Recycler recycler, RecyclerView.State state) Scroll horizontally by dx pixels in screen coordinates and return the distance traveled.","void scrollToPosition(int position) Scroll the RecyclerView to make the position visible.","void scrollToPositionWithOffset(int position, int offset) Scroll to the specified adapter position with the given offset from resolved layout start.","int scrollVerticallyBy(int dy, RecyclerView.Recycler recycler, RecyclerView.State state) Scroll vertically by dy pixels in screen coordinates and return the distance traveled.","void setOrientation(int orientation) Sets the orientation of the layout.","void setRecycleChildrenOnDetach(boolean recycleChildrenOnDetach) Set whether LayoutManager will recycle its children when it is detached from RecyclerView.","void setReverseLayout(boolean reverseLayout) Used to reverse item traversal and layout order.","void setSmoothScrollbarEnabled(boolean enabled) When smooth scrollbar is enabled, the position and size of the scrollbar thumb is computed based on the number of visible pixels in the visible items.","void setStackFromEnd(boolean stackFromEnd) Compatibility support for setStackFromBottom(boolean)","void smoothScrollToPosition(RecyclerView recyclerView, RecyclerView.State state, int position) Smooth scroll to the specified adapter position.","boolean supportsPredictiveItemAnimations() Returns whether this LayoutManager supports automatic item animations.","int getExtraLayoutSpace(RecyclerView.State state) Returns the amount of extra space that should be laid out by LayoutManager.","boolean isLayoutRTL()","[Expand] Inherited Methods","From class android.support.v7.widget.RecyclerView.LayoutManager void addDisappearingView(View child) To be called only during onLayoutChildren(Recycler, State) to add a view to the layout that is known to be going away, either because it has been removed or because it is actually not in the visible portion of the container but is being laid out in order to inform RecyclerView in how to animate the item out of view. void addDisappearingView(View child, int index) To be called only during onLayoutChildren(Recycler, State) to add a view to the layout that is known to be going away, either because it has been removed or because it is actually not in the visible portion of the container but is being laid out in order to inform RecyclerView in how to animate the item out of view. void addView(View child, int index) Add a view to the currently attached RecyclerView if needed. void addView(View child) Add a view to the currently attached RecyclerView if needed. void assertInLayoutOrScroll(String message) Checks if RecyclerView is in the middle of a layout or scroll and throws an IllegalStateException if it is not. void assertNotInLayoutOrScroll(String message) Checks if RecyclerView is in the middle of a layout or scroll and throws an IllegalStateException if it is. void attachView(View child, int index, RecyclerView.LayoutParams lp) Reattach a previously detached view. void attachView(View child) Reattach a previously detached view. void attachView(View child, int index) Reattach a previously detached view. void calculateItemDecorationsForChild(View child, Rect outRect) Calculates the item decor insets applied to the given child and updates the provided Rect instance with the inset values. boolean canScrollHorizontally() Query if horizontal scrolling is currently supported. boolean canScrollVertically() Query if vertical scrolling is currently supported. boolean checkLayoutParams(RecyclerView.LayoutParams lp) Determines the validity of the supplied LayoutParams object. int computeHorizontalScrollExtent(RecyclerView.State state) Override this method if you want to support scroll bars. int computeHorizontalScrollOffset(RecyclerView.State state) Override this method if you want to support scroll bars. int computeHorizontalScrollRange(RecyclerView.State state) Override this method if you want to support scroll bars. int computeVerticalScrollExtent(RecyclerView.State state) Override this method if you want to support scroll bars. int computeVerticalScrollOffset(RecyclerView.State state) Override this method if you want to support scroll bars. int computeVerticalScrollRange(RecyclerView.State state) Override this method if you want to support scroll bars. void detachAndScrapAttachedViews(RecyclerView.Recycler recycler) Temporarily detach and scrap all currently attached child views. void detachAndScrapView(View child, RecyclerView.Recycler recycler) Detach a child view and add it to a Recycler's scrap heap. void detachAndScrapViewAt(int index, RecyclerView.Recycler recycler) Detach a child view and add it to a Recycler's scrap heap. void detachView(View child) Temporarily detach a child view. void detachViewAt(int index) Temporarily detach a child view. void endAnimation(View view) Ends all animations on the view created by the RecyclerView.ItemAnimator. View findViewByPosition(int position) Finds the view which represents the given adapter position. abstract RecyclerView.LayoutParams generateDefaultLayoutParams() Create a default LayoutParams object for a child of the RecyclerView. RecyclerView.LayoutParams generateLayoutParams(ViewGroup.LayoutParams lp) Create a LayoutParams object suitable for this LayoutManager, copying relevant values from the supplied LayoutParams object if possible. RecyclerView.LayoutParams generateLayoutParams(Context c, AttributeSet attrs) Create a LayoutParams object suitable for this LayoutManager from an inflated layout resource. int getBottomDecorationHeight(View child) Returns the total height of item decorations applied to child's bottom. View getChildAt(int index) Return the child view at the given index int getChildCount() Return the current number of child views attached to the parent RecyclerView. static int getChildMeasureSpec(int parentSize, int padding, int childDimension, boolean canScroll) Calculate a MeasureSpec value for measuring a child view in one dimension. boolean getClipToPadding() Check if the RecyclerView is configured to clip child views to its padding. int getColumnCountForAccessibility(RecyclerView.Recycler recycler, RecyclerView.State state) Returns the number of columns for accessibility. int getDecoratedBottom(View child) Returns the bottom edge of the given child view within its parent, offset by any applied ItemDecorations. int getDecoratedLeft(View child) Returns the left edge of the given child view within its parent, offset by any applied ItemDecorations. int getDecoratedMeasuredHeight(View child) Returns the measured height of the given child, plus the additional size of any insets applied by ItemDecorations. int getDecoratedMeasuredWidth(View child) Returns the measured width of the given child, plus the additional size of any insets applied by ItemDecorations. int getDecoratedRight(View child) Returns the right edge of the given child view within its parent, offset by any applied ItemDecorations. int getDecoratedTop(View child) Returns the top edge of the given child view within its parent, offset by any applied ItemDecorations. View getFocusedChild() Returns the item View which has or contains focus. int getHeight() Return the height of the parent RecyclerView int getItemCount() Returns the number of items in the adapter bound to the parent RecyclerView. int getItemViewType(View view) Returns the View type defined by the adapter. int getLayoutDirection() Returns the resolved layout direction for this RecyclerView. int getLeftDecorationWidth(View child) Returns the total width of item decorations applied to child's left. int getMinimumHeight() int getMinimumWidth() int getPaddingBottom() Return the bottom padding of the parent RecyclerView int getPaddingEnd() Return the end padding of the parent RecyclerView int getPaddingLeft() Return the left padding of the parent RecyclerView int getPaddingRight() Return the right padding of the parent RecyclerView int getPaddingStart() Return the start padding of the parent RecyclerView int getPaddingTop() Return the top padding of the parent RecyclerView int getPosition(View view) Returns the adapter position of the item represented by the given View. int getRightDecorationWidth(View child) Returns the total width of item decorations applied to child's right. int getRowCountForAccessibility(RecyclerView.Recycler recycler, RecyclerView.State state) Returns the number of rows for accessibility. int getSelectionModeForAccessibility(RecyclerView.Recycler recycler, RecyclerView.State state) Returns the selection mode for accessibility. int getTopDecorationHeight(View child) Returns the total height of item decorations applied to child's top. int getWidth() Return the width of the parent RecyclerView boolean hasFocus() Returns true if the RecyclerView this LayoutManager is bound to has or contains focus. void ignoreView(View view) Flags a view so that it will not be scrapped or recycled. boolean isFocused() Returns true if the RecyclerView this LayoutManager is bound to has focus. boolean isLayoutHierarchical(RecyclerView.Recycler recycler, RecyclerView.State state) Returns whether layout is hierarchical or not to be used for accessibility. boolean isSmoothScrolling() void layoutDecorated(View child, int left, int top, int right, int bottom) Lay out the given child view within the RecyclerView using coordinates that include any current ItemDecorations. void measureChild(View child, int widthUsed, int heightUsed) Measure a child view using standard measurement policy, taking the padding of the parent RecyclerView and any added item decorations into account. void measureChildWithMargins(View child, int widthUsed, int heightUsed) Measure a child view using standard measurement policy, taking the padding of the parent RecyclerView, any added item decorations and the child margins into account. void moveView(int fromIndex, int toIndex) Moves a View from one position to another. void offsetChildrenHorizontal(int dx) Offset all child views attached to the parent RecyclerView by dx pixels along the horizontal axis. void offsetChildrenVertical(int dy) Offset all child views attached to the parent RecyclerView by dy pixels along the vertical axis. void onAdapterChanged(Adapter oldAdapter, Adapter newAdapter) Called if the RecyclerView this LayoutManager is bound to has a different adapter set. boolean onAddFocusables(RecyclerView recyclerView, ArrayList<View> views, int direction, int focusableMode) Called to populate focusable views within the RecyclerView. void onAttachedToWindow(RecyclerView view) Called when this LayoutManager is both attached to a RecyclerView and that RecyclerView is attached to a window. void onDetachedFromWindow(RecyclerView view, RecyclerView.Recycler recycler) Called when this LayoutManager is detached from its parent RecyclerView or when its parent RecyclerView is detached from its window. void onDetachedFromWindow(RecyclerView view) This method is deprecated. override onDetachedFromWindow(RecyclerView, Recycler) View onFocusSearchFailed(View focused, int direction, RecyclerView.Recycler recycler, RecyclerView.State state) Called when searching for a focusable view in the given direction has failed for the current content of the RecyclerView. void onInitializeAccessibilityEvent(AccessibilityEvent event) void onInitializeAccessibilityEvent(RecyclerView.Recycler recycler, RecyclerView.State state, AccessibilityEvent event) Called by the accessibility delegate to initialize an accessibility event. void onInitializeAccessibilityNodeInfo(RecyclerView.Recycler recycler, RecyclerView.State state, AccessibilityNodeInfoCompat info) Called by the AccessibilityDelegate when the information about the current layout should be populated. void onInitializeAccessibilityNodeInfoForItem(RecyclerView.Recycler recycler, RecyclerView.State state, View host, AccessibilityNodeInfoCompat info) Called by the AccessibilityDelegate when the accessibility information for a specific item should be populated. View onInterceptFocusSearch(View focused, int direction) This method gives a LayoutManager an opportunity to intercept the initial focus search before the default behavior of FocusFinder is used. void onItemsAdded(RecyclerView recyclerView, int positionStart, int itemCount) Called when items have been added to the adapter. void onItemsChanged(RecyclerView recyclerView) Called when notifyDataSetChanged() is triggered instead of giving detailed information on what has actually changed. void onItemsMoved(RecyclerView recyclerView, int from, int to, int itemCount) Called when an item is moved withing the adapter. void onItemsRemoved(RecyclerView recyclerView, int positionStart, int itemCount) Called when items have been removed from the adapter. void onItemsUpdated(RecyclerView recyclerView, int positionStart, int itemCount) Called when items have been changed in the adapter. void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) Lay out all relevant child views from the given adapter. void onMeasure(RecyclerView.Recycler recycler, RecyclerView.State state, int widthSpec, int heightSpec) Measure the attached RecyclerView. boolean onRequestChildFocus(RecyclerView parent, RecyclerView.State state, View child, View focused) Called when a descendant view of the RecyclerView requests focus. boolean onRequestChildFocus(RecyclerView parent, View child, View focused) This method is deprecated. Use onRequestChildFocus(RecyclerView, State, View, View) void onRestoreInstanceState(Parcelable state) Parcelable onSaveInstanceState() Called when the LayoutManager should save its state. void onScrollStateChanged(int state) RecyclerView calls this method to notify LayoutManager that scroll state has changed. boolean performAccessibilityAction(RecyclerView.Recycler recycler, RecyclerView.State state, int action, Bundle args) Called by AccessibilityDelegate when an action is requested from the RecyclerView. boolean performAccessibilityActionForItem(RecyclerView.Recycler recycler, RecyclerView.State state, View view, int action, Bundle args) Called by AccessibilityDelegate when an accessibility action is requested on one of the chidren of LayoutManager. void removeAllViews() Remove all views from the currently attached RecyclerView. void removeAndRecycleAllViews(RecyclerView.Recycler recycler) Removes all views and recycles them using the given recycler. void removeAndRecycleView(View child, RecyclerView.Recycler recycler) Remove a child view and recycle it using the given Recycler. void removeAndRecycleViewAt(int index, RecyclerView.Recycler recycler) Remove a child view and recycle it using the given Recycler. void removeDetachedView(View child) Finish removing a view that was previously temporarily detached. void removeView(View child) Remove a view from the currently attached RecyclerView if needed. void removeViewAt(int index) Remove a view from the currently attached RecyclerView if needed. boolean requestChildRectangleOnScreen(RecyclerView parent, View child, Rect rect, boolean immediate) Called when a child of the RecyclerView wants a particular rectangle to be positioned onto the screen. void requestLayout() Calls RecyclerView#requestLayout on the underlying RecyclerView void requestSimpleAnimationsInNextLayout() A LayoutManager can call this method to force RecyclerView to run simple animations in the next layout pass, even if there is not any trigger to do so. int scrollHorizontallyBy(int dx, RecyclerView.Recycler recycler, RecyclerView.State state) Scroll horizontally by dx pixels in screen coordinates and return the distance traveled. void scrollToPosition(int position) Scroll to the specified adapter position. int scrollVerticallyBy(int dy, RecyclerView.Recycler recycler, RecyclerView.State state) Scroll vertically by dy pixels in screen coordinates and return the distance traveled. void setMeasuredDimension(int widthSize, int heightSize) Set the measured dimensions of the host RecyclerView. void smoothScrollToPosition(RecyclerView recyclerView, RecyclerView.State state, int position) Smooth scroll to the specified adapter position. void startSmoothScroll(RecyclerView.SmoothScroller smoothScroller) Starts a smooth scroll using the provided SmoothScroller. void stopIgnoringView(View view) View can be scrapped and recycled again. boolean supportsPredictiveItemAnimations() Returns whether this LayoutManager supports automatic item animations.","void addDisappearingView(View child) To be called only during onLayoutChildren(Recycler, State) to add a view to the layout that is known to be going away, either because it has been removed or because it is actually not in the visible portion of the container but is being laid out in order to inform RecyclerView in how to animate the item out of view.","void addDisappearingView(View child, int index) To be called only during onLayoutChildren(Recycler, State) to add a view to the layout that is known to be going away, either because it has been removed or because it is actually not in the visible portion of the container but is being laid out in order to inform RecyclerView in how to animate the item out of view.","void addView(View child, int index) Add a view to the currently attached RecyclerView if needed.","void addView(View child) Add a view to the currently attached RecyclerView if needed.","void assertInLayoutOrScroll(String message) Checks if RecyclerView is in the middle of a layout or scroll and throws an IllegalStateException if it is not.","void assertNotInLayoutOrScroll(String message) Checks if RecyclerView is in the middle of a layout or scroll and throws an IllegalStateException if it is.","void attachView(View child, int index, RecyclerView.LayoutParams lp) Reattach a previously detached view.","void attachView(View child) Reattach a previously detached view.","void attachView(View child, int index) Reattach a previously detached view.","void calculateItemDecorationsForChild(View child, Rect outRect) Calculates the item decor insets applied to the given child and updates the provided Rect instance with the inset values.","boolean canScrollHorizontally() Query if horizontal scrolling is currently supported.","boolean canScrollVertically() Query if vertical scrolling is currently supported.","boolean checkLayoutParams(RecyclerView.LayoutParams lp) Determines the validity of the supplied LayoutParams object.","int computeHorizontalScrollExtent(RecyclerView.State state) Override this method if you want to support scroll bars.","int computeHorizontalScrollOffset(RecyclerView.State state) Override this method if you want to support scroll bars.","int computeHorizontalScrollRange(RecyclerView.State state) Override this method if you want to support scroll bars.","int computeVerticalScrollExtent(RecyclerView.State state) Override this method if you want to support scroll bars.","int computeVerticalScrollOffset(RecyclerView.State state) Override this method if you want to support scroll bars.","int computeVerticalScrollRange(RecyclerView.State state) Override this method if you want to support scroll bars.","void detachAndScrapAttachedViews(RecyclerView.Recycler recycler) Temporarily detach and scrap all currently attached child views.","void detachAndScrapView(View child, RecyclerView.Recycler recycler) Detach a child view and add it to a Recycler's scrap heap.","void detachAndScrapViewAt(int index, RecyclerView.Recycler recycler) Detach a child view and add it to a Recycler's scrap heap.","void detachView(View child) Temporarily detach a child view.","void detachViewAt(int index) Temporarily detach a child view.","void endAnimation(View view) Ends all animations on the view created by the RecyclerView.ItemAnimator.","View findViewByPosition(int position) Finds the view which represents the given adapter position.","abstract RecyclerView.LayoutParams generateDefaultLayoutParams() Create a default LayoutParams object for a child of the RecyclerView.","RecyclerView.LayoutParams generateLayoutParams(ViewGroup.LayoutParams lp) Create a LayoutParams object suitable for this LayoutManager, copying relevant values from the supplied LayoutParams object if possible.","RecyclerView.LayoutParams generateLayoutParams(Context c, AttributeSet attrs) Create a LayoutParams object suitable for this LayoutManager from an inflated layout resource.","int getBottomDecorationHeight(View child) Returns the total height of item decorations applied to child's bottom.","View getChildAt(int index) Return the child view at the given index","int getChildCount() Return the current number of child views attached to the parent RecyclerView.","static int getChildMeasureSpec(int parentSize, int padding, int childDimension, boolean canScroll) Calculate a MeasureSpec value for measuring a child view in one dimension.","boolean getClipToPadding() Check if the RecyclerView is configured to clip child views to its padding.","int getColumnCountForAccessibility(RecyclerView.Recycler recycler, RecyclerView.State state) Returns the number of columns for accessibility.","int getDecoratedBottom(View child) Returns the bottom edge of the given child view within its parent, offset by any applied ItemDecorations.","int getDecoratedLeft(View child) Returns the left edge of the given child view within its parent, offset by any applied ItemDecorations.","int getDecoratedMeasuredHeight(View child) Returns the measured height of the given child, plus the additional size of any insets applied by ItemDecorations.","int getDecoratedMeasuredWidth(View child) Returns the measured width of the given child, plus the additional size of any insets applied by ItemDecorations.","int getDecoratedRight(View child) Returns the right edge of the given child view within its parent, offset by any applied ItemDecorations.","int getDecoratedTop(View child) Returns the top edge of the given child view within its parent, offset by any applied ItemDecorations.","View getFocusedChild() Returns the item View which has or contains focus.","int getHeight() Return the height of the parent RecyclerView","int getItemCount() Returns the number of items in the adapter bound to the parent RecyclerView.","int getItemViewType(View view) Returns the View type defined by the adapter.","int getLayoutDirection() Returns the resolved layout direction for this RecyclerView.","int getLeftDecorationWidth(View child) Returns the total width of item decorations applied to child's left.","int getMinimumHeight()","int getMinimumWidth()","int getPaddingBottom() Return the bottom padding of the parent RecyclerView","int getPaddingEnd() Return the end padding of the parent RecyclerView","int getPaddingLeft() Return the left padding of the parent RecyclerView","int getPaddingRight() Return the right padding of the parent RecyclerView","int getPaddingStart() Return the start padding of the parent RecyclerView","int getPaddingTop() Return the top padding of the parent RecyclerView","int getPosition(View view) Returns the adapter position of the item represented by the given View.","int getRightDecorationWidth(View child) Returns the total width of item decorations applied to child's right.","int getRowCountForAccessibility(RecyclerView.Recycler recycler, RecyclerView.State state) Returns the number of rows for accessibility.","int getSelectionModeForAccessibility(RecyclerView.Recycler recycler, RecyclerView.State state) Returns the selection mode for accessibility.","int getTopDecorationHeight(View child) Returns the total height of item decorations applied to child's top.","int getWidth() Return the width of the parent RecyclerView","boolean hasFocus() Returns true if the RecyclerView this LayoutManager is bound to has or contains focus.","void ignoreView(View view) Flags a view so that it will not be scrapped or recycled.","boolean isFocused() Returns true if the RecyclerView this LayoutManager is bound to has focus.","boolean isLayoutHierarchical(RecyclerView.Recycler recycler, RecyclerView.State state) Returns whether layout is hierarchical or not to be used for accessibility.","boolean isSmoothScrolling()","void layoutDecorated(View child, int left, int top, int right, int bottom) Lay out the given child view within the RecyclerView using coordinates that include any current ItemDecorations.","void measureChild(View child, int widthUsed, int heightUsed) Measure a child view using standard measurement policy, taking the padding of the parent RecyclerView and any added item decorations into account.","void measureChildWithMargins(View child, int widthUsed, int heightUsed) Measure a child view using standard measurement policy, taking the padding of the parent RecyclerView, any added item decorations and the child margins into account.","void moveView(int fromIndex, int toIndex) Moves a View from one position to another.","void offsetChildrenHorizontal(int dx) Offset all child views attached to the parent RecyclerView by dx pixels along the horizontal axis.","void offsetChildrenVertical(int dy) Offset all child views attached to the parent RecyclerView by dy pixels along the vertical axis.","void onAdapterChanged(Adapter oldAdapter, Adapter newAdapter) Called if the RecyclerView this LayoutManager is bound to has a different adapter set.","boolean onAddFocusables(RecyclerView recyclerView, ArrayList<View> views, int direction, int focusableMode) Called to populate focusable views within the RecyclerView.","void onAttachedToWindow(RecyclerView view) Called when this LayoutManager is both attached to a RecyclerView and that RecyclerView is attached to a window.","void onDetachedFromWindow(RecyclerView view, RecyclerView.Recycler recycler) Called when this LayoutManager is detached from its parent RecyclerView or when its parent RecyclerView is detached from its window.","void onDetachedFromWindow(RecyclerView view) This method is deprecated. override onDetachedFromWindow(RecyclerView, Recycler)","View onFocusSearchFailed(View focused, int direction, RecyclerView.Recycler recycler, RecyclerView.State state) Called when searching for a focusable view in the given direction has failed for the current content of the RecyclerView.","void onInitializeAccessibilityEvent(AccessibilityEvent event)","void onInitializeAccessibilityEvent(RecyclerView.Recycler recycler, RecyclerView.State state, AccessibilityEvent event) Called by the accessibility delegate to initialize an accessibility event.","void onInitializeAccessibilityNodeInfo(RecyclerView.Recycler recycler, RecyclerView.State state, AccessibilityNodeInfoCompat info) Called by the AccessibilityDelegate when the information about the current layout should be populated.","void onInitializeAccessibilityNodeInfoForItem(RecyclerView.Recycler recycler, RecyclerView.State state, View host, AccessibilityNodeInfoCompat info) Called by the AccessibilityDelegate when the accessibility information for a specific item should be populated.","View onInterceptFocusSearch(View focused, int direction) This method gives a LayoutManager an opportunity to intercept the initial focus search before the default behavior of FocusFinder is used.","void onItemsAdded(RecyclerView recyclerView, int positionStart, int itemCount) Called when items have been added to the adapter.","void onItemsChanged(RecyclerView recyclerView) Called when notifyDataSetChanged() is triggered instead of giving detailed information on what has actually changed.","void onItemsMoved(RecyclerView recyclerView, int from, int to, int itemCount) Called when an item is moved withing the adapter.","void onItemsRemoved(RecyclerView recyclerView, int positionStart, int itemCount) Called when items have been removed from the adapter.","void onItemsUpdated(RecyclerView recyclerView, int positionStart, int itemCount) Called when items have been changed in the adapter.","void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) Lay out all relevant child views from the given adapter.","void onMeasure(RecyclerView.Recycler recycler, RecyclerView.State state, int widthSpec, int heightSpec) Measure the attached RecyclerView.","boolean onRequestChildFocus(RecyclerView parent, RecyclerView.State state, View child, View focused) Called when a descendant view of the RecyclerView requests focus.","boolean onRequestChildFocus(RecyclerView parent, View child, View focused) This method is deprecated. Use onRequestChildFocus(RecyclerView, State, View, View)","void onRestoreInstanceState(Parcelable state)","Parcelable onSaveInstanceState() Called when the LayoutManager should save its state.","void onScrollStateChanged(int state) RecyclerView calls this method to notify LayoutManager that scroll state has changed.","boolean performAccessibilityAction(RecyclerView.Recycler recycler, RecyclerView.State state, int action, Bundle args) Called by AccessibilityDelegate when an action is requested from the RecyclerView.","boolean performAccessibilityActionForItem(RecyclerView.Recycler recycler, RecyclerView.State state, View view, int action, Bundle args) Called by AccessibilityDelegate when an accessibility action is requested on one of the chidren of LayoutManager.","void removeAllViews() Remove all views from the currently attached RecyclerView.","void removeAndRecycleAllViews(RecyclerView.Recycler recycler) Removes all views and recycles them using the given recycler.","void removeAndRecycleView(View child, RecyclerView.Recycler recycler) Remove a child view and recycle it using the given Recycler.","void removeAndRecycleViewAt(int index, RecyclerView.Recycler recycler) Remove a child view and recycle it using the given Recycler.","void removeDetachedView(View child) Finish removing a view that was previously temporarily detached.","void removeView(View child) Remove a view from the currently attached RecyclerView if needed.","void removeViewAt(int index) Remove a view from the currently attached RecyclerView if needed.","boolean requestChildRectangleOnScreen(RecyclerView parent, View child, Rect rect, boolean immediate) Called when a child of the RecyclerView wants a particular rectangle to be positioned onto the screen.","void requestLayout() Calls RecyclerView#requestLayout on the underlying RecyclerView","void requestSimpleAnimationsInNextLayout() A LayoutManager can call this method to force RecyclerView to run simple animations in the next layout pass, even if there is not any trigger to do so.","int scrollHorizontallyBy(int dx, RecyclerView.Recycler recycler, RecyclerView.State state) Scroll horizontally by dx pixels in screen coordinates and return the distance traveled.","void scrollToPosition(int position) Scroll to the specified adapter position.","int scrollVerticallyBy(int dy, RecyclerView.Recycler recycler, RecyclerView.State state) Scroll vertically by dy pixels in screen coordinates and return the distance traveled.","void setMeasuredDimension(int widthSize, int heightSize) Set the measured dimensions of the host RecyclerView.","void smoothScrollToPosition(RecyclerView recyclerView, RecyclerView.State state, int position) Smooth scroll to the specified adapter position.","void startSmoothScroll(RecyclerView.SmoothScroller smoothScroller) Starts a smooth scroll using the provided SmoothScroller.","void stopIgnoringView(View view) View can be scrapped and recycled again.","boolean supportsPredictiveItemAnimations() Returns whether this LayoutManager supports automatic item animations.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.support.v7.widget","constants":["int HORIZONTAL","int INVALID_OFFSET","int VERTICAL"],"class":"LinearLayoutManager","constructors":[],"fields":[]}