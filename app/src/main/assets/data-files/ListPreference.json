{"methods":["int findIndexOfValue(String value) Returns the index of the given value (in the entry values array).","CharSequence[] getEntries() The list of entries to be shown in the list in subsequent dialogs.","CharSequence getEntry() Returns the entry corresponding to the current value.","CharSequence[] getEntryValues() Returns the array of values to be saved for the preference.","CharSequence getSummary() Returns the summary of this ListPreference.","String getValue() Returns the value of the key.","void setEntries(int entriesResId)","void setEntries(CharSequence[] entries) Sets the human-readable entries to be shown in the list.","void setEntryValues(CharSequence[] entryValues) The array to find the value to save for a preference when an entry from entries is selected.","void setEntryValues(int entryValuesResId)","void setSummary(CharSequence summary) Sets the summary for this Preference with a CharSequence.","void setValue(String value) Sets the value of the key.","void setValueIndex(int index) Sets the value to the given index from the entry values.","void onDialogClosed(boolean positiveResult) Called when the dialog is dismissed and should be used to save data to the SharedPreferences.","Object onGetDefaultValue(TypedArray a, int index) Called when a Preference is being inflated and the default value attribute needs to be read.","void onPrepareDialogBuilder(AlertDialog.Builder builder) Prepares the dialog builder to be shown when the preference is clicked.","void onRestoreInstanceState(Parcelable state) Hook allowing a Preference to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState().","Parcelable onSaveInstanceState() Hook allowing a Preference to generate a representation of its internal state that can later be used to create a new instance with that same state.","void onSetInitialValue(boolean restoreValue, Object defaultValue) Implement this to set the initial value of the Preference.","[Expand] Inherited Methods","From class android.preference.DialogPreference Dialog getDialog() Gets the dialog that is shown by this preference. Drawable getDialogIcon() Returns the icon to be shown on subsequent dialogs. int getDialogLayoutResource() Returns the layout resource that is used as the content View for subsequent dialogs. CharSequence getDialogMessage() Returns the message to be shown on subsequent dialogs. CharSequence getDialogTitle() Returns the title to be shown on subsequent dialogs. CharSequence getNegativeButtonText() Returns the text of the negative button to be shown on subsequent dialogs. CharSequence getPositiveButtonText() Returns the text of the positive button to be shown on subsequent dialogs. void onActivityDestroy() See Activity's onDestroy. void onBindDialogView(View view) Binds views in the content View of the dialog to data. void onClick() Processes a click on the preference. void onClick(DialogInterface dialog, int which) This method will be invoked when a button in the dialog is clicked. View onCreateDialogView() Creates the content view for the dialog (if a custom content view is required). void onDialogClosed(boolean positiveResult) Called when the dialog is dismissed and should be used to save data to the SharedPreferences. void onDismiss(DialogInterface dialog) This method will be invoked when the dialog is dismissed. void onPrepareDialogBuilder(AlertDialog.Builder builder) Prepares the dialog builder to be shown when the preference is clicked. void onRestoreInstanceState(Parcelable state) Hook allowing a Preference to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState(). Parcelable onSaveInstanceState() Hook allowing a Preference to generate a representation of its internal state that can later be used to create a new instance with that same state. void setDialogIcon(int dialogIconRes) Sets the icon (resource ID) of the dialog. void setDialogIcon(Drawable dialogIcon) Sets the icon of the dialog. void setDialogLayoutResource(int dialogLayoutResId) Sets the layout resource that is inflated as the View to be shown as the content View of subsequent dialogs. void setDialogMessage(CharSequence dialogMessage) Sets the message of the dialog. void setDialogMessage(int dialogMessageResId) void setDialogTitle(int dialogTitleResId) void setDialogTitle(CharSequence dialogTitle) Sets the title of the dialog. void setNegativeButtonText(int negativeButtonTextResId) void setNegativeButtonText(CharSequence negativeButtonText) Sets the text of the negative button of the dialog. void setPositiveButtonText(int positiveButtonTextResId) void setPositiveButtonText(CharSequence positiveButtonText) Sets the text of the positive button of the dialog. void showDialog(Bundle state) Shows the dialog associated with this Preference.","Dialog getDialog() Gets the dialog that is shown by this preference.","Drawable getDialogIcon() Returns the icon to be shown on subsequent dialogs.","int getDialogLayoutResource() Returns the layout resource that is used as the content View for subsequent dialogs.","CharSequence getDialogMessage() Returns the message to be shown on subsequent dialogs.","CharSequence getDialogTitle() Returns the title to be shown on subsequent dialogs.","CharSequence getNegativeButtonText() Returns the text of the negative button to be shown on subsequent dialogs.","CharSequence getPositiveButtonText() Returns the text of the positive button to be shown on subsequent dialogs.","void onActivityDestroy() See Activity's onDestroy.","void onBindDialogView(View view) Binds views in the content View of the dialog to data.","void onClick() Processes a click on the preference.","void onClick(DialogInterface dialog, int which) This method will be invoked when a button in the dialog is clicked.","View onCreateDialogView() Creates the content view for the dialog (if a custom content view is required).","void onDialogClosed(boolean positiveResult) Called when the dialog is dismissed and should be used to save data to the SharedPreferences.","void onDismiss(DialogInterface dialog) This method will be invoked when the dialog is dismissed.","void onPrepareDialogBuilder(AlertDialog.Builder builder) Prepares the dialog builder to be shown when the preference is clicked.","void onRestoreInstanceState(Parcelable state) Hook allowing a Preference to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState().","Parcelable onSaveInstanceState() Hook allowing a Preference to generate a representation of its internal state that can later be used to create a new instance with that same state.","void setDialogIcon(int dialogIconRes) Sets the icon (resource ID) of the dialog.","void setDialogIcon(Drawable dialogIcon) Sets the icon of the dialog.","void setDialogLayoutResource(int dialogLayoutResId) Sets the layout resource that is inflated as the View to be shown as the content View of subsequent dialogs.","void setDialogMessage(CharSequence dialogMessage) Sets the message of the dialog.","void setDialogMessage(int dialogMessageResId)","void setDialogTitle(int dialogTitleResId)","void setDialogTitle(CharSequence dialogTitle) Sets the title of the dialog.","void setNegativeButtonText(int negativeButtonTextResId)","void setNegativeButtonText(CharSequence negativeButtonText) Sets the text of the negative button of the dialog.","void setPositiveButtonText(int positiveButtonTextResId)","void setPositiveButtonText(CharSequence positiveButtonText) Sets the text of the positive button of the dialog.","void showDialog(Bundle state) Shows the dialog associated with this Preference.","From class android.preference.Preference boolean callChangeListener(Object newValue) Call this method after the user changes the preference, but before the internal state is set. int compareTo(Preference another) Compares Preference objects based on order (if set), otherwise alphabetically on the titles. Preference findPreferenceInHierarchy(String key) Finds a Preference in this hierarchy (the whole thing, even above/below your PreferenceScreen screen break) with the given key. Context getContext() Returns the Context of this Preference. String getDependency() Returns the key of the dependency on this Preference. SharedPreferences.Editor getEditor() Returns an SharedPreferences.Editor where this Preference can save its value(s). Bundle getExtras() Return the extras Bundle object associated with this preference, creating a new Bundle if there currently isn't one. String getFragment() Return the fragment class name associated with this Preference. Drawable getIcon() Returns the icon of this Preference. Intent getIntent() Return the Intent associated with this Preference. String getKey() Gets the key for this Preference, which is also the key used for storing values into SharedPreferences. int getLayoutResource() Gets the layout resource that will be shown as the View for this Preference. Preference.OnPreferenceChangeListener getOnPreferenceChangeListener() Returns the callback to be invoked when this Preference is changed by the user (but before the internal state has been updated). Preference.OnPreferenceClickListener getOnPreferenceClickListener() Returns the callback to be invoked when this Preference is clicked. int getOrder() Gets the order of this Preference with respect to other Preference objects on the same level. boolean getPersistedBoolean(boolean defaultReturnValue) Attempts to get a persisted boolean from the SharedPreferences. float getPersistedFloat(float defaultReturnValue) Attempts to get a persisted float from the SharedPreferences. int getPersistedInt(int defaultReturnValue) Attempts to get a persisted int from the SharedPreferences. long getPersistedLong(long defaultReturnValue) Attempts to get a persisted long from the SharedPreferences. String getPersistedString(String defaultReturnValue) Attempts to get a persisted String from the SharedPreferences. PreferenceManager getPreferenceManager() Gets the PreferenceManager that manages this Preference object's tree. SharedPreferences getSharedPreferences() Returns the SharedPreferences where this Preference can read its value(s). boolean getShouldDisableView() Checks whether this Preference should disable its view when it's action is disabled. CharSequence getSummary() Returns the summary of this Preference. CharSequence getTitle() Returns the title of this Preference. int getTitleRes() Returns the title resource ID of this Preference. View getView(View convertView, ViewGroup parent) Gets the View that will be shown in the PreferenceActivity. int getWidgetLayoutResource() Gets the layout resource for the controllable widget portion of this Preference. boolean hasKey() Checks whether this Preference has a valid key. boolean isEnabled() Checks whether this Preference should be enabled in the list. boolean isPersistent() Checks whether this Preference is persistent. boolean isSelectable() Checks whether this Preference should be selectable in the list. void notifyChanged() Should be called when the data of this Preference has changed. void notifyDependencyChange(boolean disableDependents) Notifies any listening dependents of a change that affects the dependency. void notifyHierarchyChanged() Should be called when a Preference has been added/removed from this group, or the ordering should be re-evaluated. void onAttachedToActivity() Called when the Preference hierarchy has been attached to the PreferenceActivity. void onAttachedToHierarchy(PreferenceManager preferenceManager) Called when this Preference has been attached to a Preference hierarchy. void onBindView(View view) Binds the created View to the data for this Preference. void onClick() Processes a click on the preference. View onCreateView(ViewGroup parent) Creates the View to be shown for this Preference in the PreferenceActivity. void onDependencyChanged(Preference dependency, boolean disableDependent) Called when the dependency changes. Object onGetDefaultValue(TypedArray a, int index) Called when a Preference is being inflated and the default value attribute needs to be read. void onParentChanged(Preference parent, boolean disableChild) Called when the implicit parent dependency changes. void onPrepareForRemoval() Called when this Preference is being removed from the hierarchy. void onRestoreInstanceState(Parcelable state) Hook allowing a Preference to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState(). Parcelable onSaveInstanceState() Hook allowing a Preference to generate a representation of its internal state that can later be used to create a new instance with that same state. void onSetInitialValue(boolean restorePersistedValue, Object defaultValue) Implement this to set the initial value of the Preference. Bundle peekExtras() Return the extras Bundle object associated with this preference, returning null if there is not currently one. boolean persistBoolean(boolean value) Attempts to persist a boolean to the SharedPreferences. boolean persistFloat(float value) Attempts to persist a float to the SharedPreferences. boolean persistInt(int value) Attempts to persist an int to the SharedPreferences. boolean persistLong(long value) Attempts to persist a long to the SharedPreferences. boolean persistString(String value) Attempts to persist a String to the SharedPreferences. void restoreHierarchyState(Bundle container) Restore this Preference hierarchy's previously saved state from the given container. void saveHierarchyState(Bundle container) Store this Preference hierarchy's frozen state into the given container. void setDefaultValue(Object defaultValue) Sets the default value for this Preference, which will be set either if persistence is off or persistence is on and the preference is not found in the persistent storage. void setDependency(String dependencyKey) Sets the key of a Preference that this Preference will depend on. void setEnabled(boolean enabled) Sets whether this Preference is enabled. void setFragment(String fragment) Sets the class name of a fragment to be shown when this Preference is clicked. void setIcon(Drawable icon) Sets the icon for this Preference with a Drawable. void setIcon(int iconResId) Sets the icon for this Preference with a resource ID. void setIntent(Intent intent) Sets an Intent to be used for startActivity(Intent) when this Preference is clicked. void setKey(String key) Sets the key for this Preference, which is used as a key to the SharedPreferences. void setLayoutResource(int layoutResId) Sets the layout resource that is inflated as the View to be shown for this Preference. void setOnPreferenceChangeListener(Preference.OnPreferenceChangeListener onPreferenceChangeListener) Sets the callback to be invoked when this Preference is changed by the user (but before the internal state has been updated). void setOnPreferenceClickListener(Preference.OnPreferenceClickListener onPreferenceClickListener) Sets the callback to be invoked when this Preference is clicked. void setOrder(int order) Sets the order of this Preference with respect to other Preference objects on the same level. void setPersistent(boolean persistent) Sets whether this Preference is persistent. void setSelectable(boolean selectable) Sets whether this Preference is selectable. void setShouldDisableView(boolean shouldDisableView) Sets whether this Preference should disable its view when it gets disabled. void setSummary(int summaryResId) Sets the summary for this Preference with a resource ID. void setSummary(CharSequence summary) Sets the summary for this Preference with a CharSequence. void setTitle(int titleResId) Sets the title for this Preference with a resource ID. void setTitle(CharSequence title) Sets the title for this Preference with a CharSequence. void setWidgetLayoutResource(int widgetLayoutResId) Sets the layout for the controllable widget portion of this Preference. boolean shouldCommit() Returns whether the Preference should commit its saved value(s) in getEditor(). boolean shouldDisableDependents() Checks whether this preference's dependents should currently be disabled. boolean shouldPersist() Checks whether, at the given time this method is called, this Preference should store/restore its value(s) into the SharedPreferences. String toString() Returns a string containing a concise, human-readable description of this object.","boolean callChangeListener(Object newValue) Call this method after the user changes the preference, but before the internal state is set.","int compareTo(Preference another) Compares Preference objects based on order (if set), otherwise alphabetically on the titles.","Preference findPreferenceInHierarchy(String key) Finds a Preference in this hierarchy (the whole thing, even above/below your PreferenceScreen screen break) with the given key.","Context getContext() Returns the Context of this Preference.","String getDependency() Returns the key of the dependency on this Preference.","SharedPreferences.Editor getEditor() Returns an SharedPreferences.Editor where this Preference can save its value(s).","Bundle getExtras() Return the extras Bundle object associated with this preference, creating a new Bundle if there currently isn't one.","String getFragment() Return the fragment class name associated with this Preference.","Drawable getIcon() Returns the icon of this Preference.","Intent getIntent() Return the Intent associated with this Preference.","String getKey() Gets the key for this Preference, which is also the key used for storing values into SharedPreferences.","int getLayoutResource() Gets the layout resource that will be shown as the View for this Preference.","Preference.OnPreferenceChangeListener getOnPreferenceChangeListener() Returns the callback to be invoked when this Preference is changed by the user (but before the internal state has been updated).","Preference.OnPreferenceClickListener getOnPreferenceClickListener() Returns the callback to be invoked when this Preference is clicked.","int getOrder() Gets the order of this Preference with respect to other Preference objects on the same level.","boolean getPersistedBoolean(boolean defaultReturnValue) Attempts to get a persisted boolean from the SharedPreferences.","float getPersistedFloat(float defaultReturnValue) Attempts to get a persisted float from the SharedPreferences.","int getPersistedInt(int defaultReturnValue) Attempts to get a persisted int from the SharedPreferences.","long getPersistedLong(long defaultReturnValue) Attempts to get a persisted long from the SharedPreferences.","String getPersistedString(String defaultReturnValue) Attempts to get a persisted String from the SharedPreferences.","PreferenceManager getPreferenceManager() Gets the PreferenceManager that manages this Preference object's tree.","SharedPreferences getSharedPreferences() Returns the SharedPreferences where this Preference can read its value(s).","boolean getShouldDisableView() Checks whether this Preference should disable its view when it's action is disabled.","CharSequence getSummary() Returns the summary of this Preference.","CharSequence getTitle() Returns the title of this Preference.","int getTitleRes() Returns the title resource ID of this Preference.","View getView(View convertView, ViewGroup parent) Gets the View that will be shown in the PreferenceActivity.","int getWidgetLayoutResource() Gets the layout resource for the controllable widget portion of this Preference.","boolean hasKey() Checks whether this Preference has a valid key.","boolean isEnabled() Checks whether this Preference should be enabled in the list.","boolean isPersistent() Checks whether this Preference is persistent.","boolean isSelectable() Checks whether this Preference should be selectable in the list.","void notifyChanged() Should be called when the data of this Preference has changed.","void notifyDependencyChange(boolean disableDependents) Notifies any listening dependents of a change that affects the dependency.","void notifyHierarchyChanged() Should be called when a Preference has been added/removed from this group, or the ordering should be re-evaluated.","void onAttachedToActivity() Called when the Preference hierarchy has been attached to the PreferenceActivity.","void onAttachedToHierarchy(PreferenceManager preferenceManager) Called when this Preference has been attached to a Preference hierarchy.","void onBindView(View view) Binds the created View to the data for this Preference.","void onClick() Processes a click on the preference.","View onCreateView(ViewGroup parent) Creates the View to be shown for this Preference in the PreferenceActivity.","void onDependencyChanged(Preference dependency, boolean disableDependent) Called when the dependency changes.","Object onGetDefaultValue(TypedArray a, int index) Called when a Preference is being inflated and the default value attribute needs to be read.","void onParentChanged(Preference parent, boolean disableChild) Called when the implicit parent dependency changes.","void onPrepareForRemoval() Called when this Preference is being removed from the hierarchy.","void onRestoreInstanceState(Parcelable state) Hook allowing a Preference to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState().","Parcelable onSaveInstanceState() Hook allowing a Preference to generate a representation of its internal state that can later be used to create a new instance with that same state.","void onSetInitialValue(boolean restorePersistedValue, Object defaultValue) Implement this to set the initial value of the Preference.","Bundle peekExtras() Return the extras Bundle object associated with this preference, returning null if there is not currently one.","boolean persistBoolean(boolean value) Attempts to persist a boolean to the SharedPreferences.","boolean persistFloat(float value) Attempts to persist a float to the SharedPreferences.","boolean persistInt(int value) Attempts to persist an int to the SharedPreferences.","boolean persistLong(long value) Attempts to persist a long to the SharedPreferences.","boolean persistString(String value) Attempts to persist a String to the SharedPreferences.","void restoreHierarchyState(Bundle container) Restore this Preference hierarchy's previously saved state from the given container.","void saveHierarchyState(Bundle container) Store this Preference hierarchy's frozen state into the given container.","void setDefaultValue(Object defaultValue) Sets the default value for this Preference, which will be set either if persistence is off or persistence is on and the preference is not found in the persistent storage.","void setDependency(String dependencyKey) Sets the key of a Preference that this Preference will depend on.","void setEnabled(boolean enabled) Sets whether this Preference is enabled.","void setFragment(String fragment) Sets the class name of a fragment to be shown when this Preference is clicked.","void setIcon(Drawable icon) Sets the icon for this Preference with a Drawable.","void setIcon(int iconResId) Sets the icon for this Preference with a resource ID.","void setIntent(Intent intent) Sets an Intent to be used for startActivity(Intent) when this Preference is clicked.","void setKey(String key) Sets the key for this Preference, which is used as a key to the SharedPreferences.","void setLayoutResource(int layoutResId) Sets the layout resource that is inflated as the View to be shown for this Preference.","void setOnPreferenceChangeListener(Preference.OnPreferenceChangeListener onPreferenceChangeListener) Sets the callback to be invoked when this Preference is changed by the user (but before the internal state has been updated).","void setOnPreferenceClickListener(Preference.OnPreferenceClickListener onPreferenceClickListener) Sets the callback to be invoked when this Preference is clicked.","void setOrder(int order) Sets the order of this Preference with respect to other Preference objects on the same level.","void setPersistent(boolean persistent) Sets whether this Preference is persistent.","void setSelectable(boolean selectable) Sets whether this Preference is selectable.","void setShouldDisableView(boolean shouldDisableView) Sets whether this Preference should disable its view when it gets disabled.","void setSummary(int summaryResId) Sets the summary for this Preference with a resource ID.","void setSummary(CharSequence summary) Sets the summary for this Preference with a CharSequence.","void setTitle(int titleResId) Sets the title for this Preference with a resource ID.","void setTitle(CharSequence title) Sets the title for this Preference with a CharSequence.","void setWidgetLayoutResource(int widgetLayoutResId) Sets the layout for the controllable widget portion of this Preference.","boolean shouldCommit() Returns whether the Preference should commit its saved value(s) in getEditor().","boolean shouldDisableDependents() Checks whether this preference's dependents should currently be disabled.","boolean shouldPersist() Checks whether, at the given time this method is called, this Preference should store/restore its value(s) into the SharedPreferences.","String toString() Returns a string containing a concise, human-readable description of this object.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface android.content.DialogInterface.OnClickListener abstract void onClick(DialogInterface dialog, int which) This method will be invoked when a button in the dialog is clicked.","abstract void onClick(DialogInterface dialog, int which) This method will be invoked when a button in the dialog is clicked.","From interface android.content.DialogInterface.OnDismissListener abstract void onDismiss(DialogInterface dialog) This method will be invoked when the dialog is dismissed.","abstract void onDismiss(DialogInterface dialog) This method will be invoked when the dialog is dismissed.","From interface android.preference.PreferenceManager.OnActivityDestroyListener abstract void onActivityDestroy() See Activity's onDestroy.","abstract void onActivityDestroy() See Activity's onDestroy.","From interface java.lang.Comparable abstract int compareTo(T another) Compares this object to the specified object to determine their relative order.","abstract int compareTo(T another) Compares this object to the specified object to determine their relative order."],"package":"android.preference","constants":["[Expand] Inherited Constants","From class android.preference.Preference int DEFAULT_ORDER Specify for setOrder(int) if a specific order is not required.","int DEFAULT_ORDER Specify for setOrder(int) if a specific order is not required."],"class":"ListPreference","constructors":[],"fields":[]}