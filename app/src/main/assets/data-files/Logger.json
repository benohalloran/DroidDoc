{"methods":["void addHandler(Handler handler) Adds a handler to this logger.","void config(String msg) Logs a message of level Level.CONFIG; the message is transmitted to all subscribed handlers.","void entering(String sourceClass, String sourceMethod, Object[] params) Logs a message indicating that a method has been entered.","void entering(String sourceClass, String sourceMethod) Logs a message indicating that a method has been entered.","void entering(String sourceClass, String sourceMethod, Object param) Logs a message indicating that a method has been entered.","void exiting(String sourceClass, String sourceMethod) Logs a message indicating that a method is exited.","void exiting(String sourceClass, String sourceMethod, Object result) Logs a message indicating that a method is exited.","void fine(String msg) Logs a message of level Level.FINE; the message is transmitted to all subscribed handlers.","void finer(String msg) Logs a message of level Level.FINER; the message is transmitted to all subscribed handlers.","void finest(String msg) Logs a message of level Level.FINEST; the message is transmitted to all subscribed handlers.","static Logger getAnonymousLogger(String resourceBundleName) Gets an anonymous logger to use internally in a thread.","static Logger getAnonymousLogger() Gets an anonymous logger to use internally in a thread.","Filter getFilter() Gets the filter used by this logger.","static Logger getGlobal() Returns the global Logger.","Handler[] getHandlers() Gets all the handlers associated with this logger.","Level getLevel() Gets the logging level of this logger.","static Logger getLogger(String name, String resourceBundleName) Gets a named logger associated with the supplied resource bundle.","static Logger getLogger(String name) Gets a named logger.","String getName() Gets the name of this logger, null for anonymous loggers.","Logger getParent() Gets the nearest parent of this logger in the namespace, a null value will be returned if called on the root logger.","ResourceBundle getResourceBundle() Gets the loaded resource bundle used by this logger to localize logging messages.","String getResourceBundleName() Gets the name of the loaded resource bundle used by this logger to localize logging messages.","boolean getUseParentHandlers() Gets the flag which indicates whether to use the handlers of this logger's parent to publish incoming log records, potentially recursively up the namespace.","void info(String msg) Logs a message of level Level.INFO; the message is transmitted to all subscribed handlers.","boolean isLoggable(Level l) Determines whether this logger will actually log messages of the specified level.","void log(Level logLevel, String msg, Object[] params) Logs a message of the specified level with the supplied parameter array.","void log(Level logLevel, String msg) Logs a message of the specified level.","void log(LogRecord record) Logs a given log record.","void log(Level logLevel, String msg, Throwable thrown) Logs a message of the specified level with the supplied Throwable object.","void log(Level logLevel, String msg, Object param) Logs a message of the specified level with the supplied parameter.","void logp(Level logLevel, String sourceClass, String sourceMethod, String msg) Logs a message of the given level with the specified source class name and source method name.","void logp(Level logLevel, String sourceClass, String sourceMethod, String msg, Throwable thrown) Logs a message of the given level with the specified source class name, source method name and Throwable object.","void logp(Level logLevel, String sourceClass, String sourceMethod, String msg, Object[] params) Logs a message of the given level with the specified source class name, source method name and parameter array.","void logp(Level logLevel, String sourceClass, String sourceMethod, String msg, Object param) Logs a message of the given level with the specified source class name, source method name and parameter.","void logrb(Level logLevel, String sourceClass, String sourceMethod, String bundleName, String msg, Throwable thrown) Logs a message of the given level with the specified source class name, source method name and Throwable object, using the given resource bundle to localize the message.","void logrb(Level logLevel, String sourceClass, String sourceMethod, String bundleName, String msg, Object param) Logs a message of the given level with the specified source class name, source method name and parameter, using the given resource bundle to localize the message.","void logrb(Level logLevel, String sourceClass, String sourceMethod, String bundleName, String msg) Logs a message of the given level with the specified source class name and source method name, using the given resource bundle to localize the message.","void logrb(Level logLevel, String sourceClass, String sourceMethod, String bundleName, String msg, Object[] params) Logs a message of the given level with the specified source class name, source method name and parameter array, using the given resource bundle to localize the message.","void removeHandler(Handler handler) Removes a handler from this logger.","void setFilter(Filter newFilter) Sets the filter used by this logger.","void setLevel(Level newLevel) Sets the logging level for this logger.","void setParent(Logger parent) Sets the parent of this logger in the namespace.","void setUseParentHandlers(boolean notifyParentHandlers) Sets the flag which indicates whether to use the handlers of this logger's parent, potentially recursively up the namespace.","void severe(String msg) Logs a message of level Level.SEVERE; the message is transmitted to all subscribed handlers.","void throwing(String sourceClass, String sourceMethod, Throwable thrown) Logs a message indicating that an exception is thrown.","void warning(String msg) Logs a message of level Level.WARNING; the message is transmitted to all subscribed handlers.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"java.util.logging","constants":["String GLOBAL_LOGGER_NAME The name of the global logger."],"class":"Logger","constructors":[],"fields":["public static final Logger global This field was deprecated in API level 9. This is deadlock-prone. Use Logger.getLogger(Logger.GLOBAL_LOGGER_NAME) as a direct replacement, but read the discussion of how to use Logger in the class documentation."]}