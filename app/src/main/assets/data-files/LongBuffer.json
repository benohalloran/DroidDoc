{"methods":["static LongBuffer allocate(int capacity) Creates a long buffer based on a newly allocated long array.","final long[] array() Returns the array that backs this buffer (optional operation).","final int arrayOffset() Returns the offset into the array returned by array of the first element of the buffer (optional operation).","abstract LongBuffer asReadOnlyBuffer() Returns a read-only buffer that shares its content with this buffer.","abstract LongBuffer compact() Compacts this long buffer.","int compareTo(LongBuffer otherBuffer) Compare the remaining longs of this buffer to another long buffer's remaining longs.","abstract LongBuffer duplicate() Returns a duplicated buffer that shares its content with this buffer.","boolean equals(Object other) Checks whether this long buffer is equal to another object.","abstract long get(int index) Returns the long at the specified index; the position is not changed.","LongBuffer get(long[] dst) Reads longs from the current position into the specified long array and increases the position by the number of longs read.","LongBuffer get(long[] dst, int dstOffset, int longCount) Reads longs from the current position into the specified long array, starting from the specified offset, and increase the position by the number of longs read.","abstract long get() Returns the long at the current position and increase the position by 1.","final boolean hasArray() Returns true if array and arrayOffset won't throw.","int hashCode() Calculates this buffer's hash code from the remaining chars.","abstract boolean isDirect() Indicates whether this buffer is direct.","abstract ByteOrder order() Returns the byte order used by this buffer when converting longs from/to bytes.","LongBuffer put(long[] src, int srcOffset, int longCount) Writes longs from the given long array, starting from the specified offset, to the current position and increases the position by the number of longs written.","final LongBuffer put(long[] src) Writes longs from the given long array to the current position and increases the position by the number of longs written.","LongBuffer put(LongBuffer src) Writes all the remaining longs of the src long buffer to this buffer's current position, and increases both buffers' position by the number of longs copied.","abstract LongBuffer put(int index, long l) Writes a long to the specified index of this buffer; the position is not changed.","abstract LongBuffer put(long l) Writes the given long to the current position and increases the position by 1.","abstract LongBuffer slice() Returns a sliced buffer that shares its content with this buffer.","static LongBuffer wrap(long[] array, int start, int longCount) Creates a new long buffer by wrapping the given long array.","static LongBuffer wrap(long[] array) Creates a new long buffer by wrapping the given long array.","[Expand] Inherited Methods","From class java.nio.Buffer abstract Object array() Returns the array that backs this buffer (optional operation). abstract int arrayOffset() Returns the offset into the array returned by array of the first element of the buffer (optional operation). final int capacity() Returns the capacity of this buffer. final Buffer clear() Clears this buffer. final Buffer flip() Flips this buffer. abstract boolean hasArray() Returns true if array and arrayOffset won't throw. final boolean hasRemaining() Indicates if there are elements remaining in this buffer, that is if position < limit. abstract boolean isDirect() Returns true if this is a direct buffer. abstract boolean isReadOnly() Indicates whether this buffer is read-only. final int limit() Returns the limit of this buffer. final Buffer limit(int newLimit) Sets the limit of this buffer. final Buffer mark() Marks the current position, so that the position may return to this point later by calling reset(). final Buffer position(int newPosition) Sets the position of this buffer. final int position() Returns the position of this buffer. final int remaining() Returns the number of remaining elements in this buffer, that is limit - position. final Buffer reset() Resets the position of this buffer to the mark. final Buffer rewind() Rewinds this buffer. String toString() Returns a string describing this buffer.","abstract Object array() Returns the array that backs this buffer (optional operation).","abstract int arrayOffset() Returns the offset into the array returned by array of the first element of the buffer (optional operation).","final int capacity() Returns the capacity of this buffer.","final Buffer clear() Clears this buffer.","final Buffer flip() Flips this buffer.","abstract boolean hasArray() Returns true if array and arrayOffset won't throw.","final boolean hasRemaining() Indicates if there are elements remaining in this buffer, that is if position < limit.","abstract boolean isDirect() Returns true if this is a direct buffer.","abstract boolean isReadOnly() Indicates whether this buffer is read-only.","final int limit() Returns the limit of this buffer.","final Buffer limit(int newLimit) Sets the limit of this buffer.","final Buffer mark() Marks the current position, so that the position may return to this point later by calling reset().","final Buffer position(int newPosition) Sets the position of this buffer.","final int position() Returns the position of this buffer.","final int remaining() Returns the number of remaining elements in this buffer, that is limit - position.","final Buffer reset() Resets the position of this buffer to the mark.","final Buffer rewind() Rewinds this buffer.","String toString() Returns a string describing this buffer.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface java.lang.Comparable abstract int compareTo(T another) Compares this object to the specified object to determine their relative order.","abstract int compareTo(T another) Compares this object to the specified object to determine their relative order."],"package":"java.nio","constants":[],"class":"LongBuffer","constructors":[],"fields":[]}