{"methods":["MarkerOptions alpha(float alpha) Sets the alpha (opacity) of the marker.","MarkerOptions anchor(float u, float v) Specifies the anchor to be at a particular point in the marker image.","int describeContents()","MarkerOptions draggable(boolean draggable) Sets the draggability for the marker.","MarkerOptions flat(boolean flat) Sets whether this marker should be flat against the map true or a billboard facing the camera false.","float getAlpha() Gets the alpha set for this MarkerOptions object.","float getAnchorU() Horizontal distance, normalized to [0, 1], of the anchor from the left edge.","float getAnchorV() Vertical distance, normalized to [0, 1], of the anchor from the top edge.","BitmapDescriptor getIcon() Gets the custom icon set for this MarkerOptions object.","float getInfoWindowAnchorU() Horizontal distance, normalized to [0, 1], of the info window anchor from the left edge.","float getInfoWindowAnchorV() Vertical distance, normalized to [0, 1], of the info window anchor from the top edge.","LatLng getPosition() Returns the position set for this MarkerOptions object.","float getRotation() Gets the rotation set for this MarkerOptions object.","String getSnippet() Gets the snippet set for this MarkerOptions object.","String getTitle() Gets the title set for this MarkerOptions object.","MarkerOptions icon(BitmapDescriptor icon) Sets the icon for the marker.","MarkerOptions infoWindowAnchor(float u, float v) Specifies the anchor point of the info window on the marker image.","boolean isDraggable() Gets the draggability setting for this MarkerOptions object.","boolean isFlat() Gets the flat setting for this MarkerOptions object.","boolean isVisible() Gets the visibility setting for this MarkerOptions object.","MarkerOptions position(LatLng position) Sets the location for the marker.","MarkerOptions rotation(float rotation) Sets the rotation of the marker in degrees clockwise about the marker's anchor point.","MarkerOptions snippet(String snippet) Sets the snippet for the marker.","MarkerOptions title(String title) Sets the title for the marker.","MarkerOptions visible(boolean visible) Sets the visibility for the marker.","void writeToParcel(Parcel out, int flags)","[Expand] Inherited Methods","From class java.lang.Object Object clone() boolean equals(Object arg0) void finalize() final Class<?> getClass() int hashCode() final void notify() final void notifyAll() String toString() final void wait() final void wait(long arg0, int arg1) final void wait(long arg0)","Object clone()","boolean equals(Object arg0)","void finalize()","final Class<?> getClass()","int hashCode()","final void notify()","final void notifyAll()","String toString()","final void wait()","final void wait(long arg0, int arg1)","final void wait(long arg0)","From interface android.os.Parcelable abstract int describeContents() abstract void writeToParcel(Parcel arg0, int arg1)","abstract int describeContents()","abstract void writeToParcel(Parcel arg0, int arg1)"],"package":"com.google.android.gms.maps.model","constants":["[Expand] Inherited Constants","From interface android.os.Parcelable int CONTENTS_FILE_DESCRIPTOR int PARCELABLE_WRITE_RETURN_VALUE","int CONTENTS_FILE_DESCRIPTOR","int PARCELABLE_WRITE_RETURN_VALUE","From interface com.google.android.gms.common.internal.safeparcel.SafeParcelable String NULL","String NULL"],"class":"MarkerOptions","constructors":[],"fields":[]}