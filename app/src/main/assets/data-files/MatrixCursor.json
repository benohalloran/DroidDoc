{"methods":["void addRow(Iterable<?> columnValues) Adds a new row to the end with the given column values.","void addRow(Object[] columnValues) Adds a new row to the end with the given column values.","byte[] getBlob(int column) Returns the value of the requested column as a byte array.","String[] getColumnNames() Returns a string array holding the names of all of the columns in the result set in the order in which they were listed in the result.","int getCount() Returns the numbers of rows in the cursor.","double getDouble(int column) Returns the value of the requested column as a double.","float getFloat(int column) Returns the value of the requested column as a float.","int getInt(int column) Returns the value of the requested column as an int.","long getLong(int column) Returns the value of the requested column as a long.","short getShort(int column) Returns the value of the requested column as a short.","String getString(int column) Returns the value of the requested column as a String.","int getType(int column) Returns data type of the given column's value.","boolean isNull(int column) Returns true if the value in the indicated column is null.","MatrixCursor.RowBuilder newRow() Adds a new row to the end and returns a builder for that row.","[Expand] Inherited Methods","From class android.database.AbstractCursor void checkPosition() This function throws CursorIndexOutOfBoundsException if the cursor position is out of bounds. void close() Closes the Cursor, releasing all of its resources and making it completely invalid. void copyStringToBuffer(int columnIndex, CharArrayBuffer buffer) Retrieves the requested column text and stores it in the buffer provided. void deactivate() Deactivates the Cursor, making all calls on it fail until requery() is called. void fillWindow(int position, CursorWindow window) Copies cursor data into the window. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. byte[] getBlob(int column) Returns the value of the requested column as a byte array. int getColumnCount() Return total number of columns int getColumnIndex(String columnName) Returns the zero-based index for the given column name, or -1 if the column doesn't exist. int getColumnIndexOrThrow(String columnName) Returns the zero-based index for the given column name, or throws IllegalArgumentException if the column doesn't exist. String getColumnName(int columnIndex) Returns the column name at the given zero-based column index. abstract String[] getColumnNames() Returns a string array holding the names of all of the columns in the result set in the order in which they were listed in the result. abstract int getCount() Returns the numbers of rows in the cursor. abstract double getDouble(int column) Returns the value of the requested column as a double. Bundle getExtras() Returns a bundle of extra values. abstract float getFloat(int column) Returns the value of the requested column as a float. abstract int getInt(int column) Returns the value of the requested column as an int. abstract long getLong(int column) Returns the value of the requested column as a long. Uri getNotificationUri() Return the URI at which notifications of changes in this Cursor's data will be delivered, as previously set by setNotificationUri(ContentResolver, Uri). final int getPosition() Returns the current position of the cursor in the row set. abstract short getShort(int column) Returns the value of the requested column as a short. abstract String getString(int column) Returns the value of the requested column as a String. int getType(int column) Returns data type of the given column's value. Object getUpdatedField(int columnIndex) This method was deprecated in API level 11. Always returns null since Cursors do not support updating rows boolean getWantsAllOnMoveCalls() onMove() will only be called across processes if this method returns true. CursorWindow getWindow() If the cursor is backed by a CursorWindow, returns a pre-filled window with the contents of the cursor, otherwise null. final boolean isAfterLast() Returns whether the cursor is pointing to the position after the last row. final boolean isBeforeFirst() Returns whether the cursor is pointing to the position before the first row. boolean isClosed() return true if the cursor is closed boolean isFieldUpdated(int columnIndex) This method was deprecated in API level 11. Always returns false since Cursors do not support updating rows final boolean isFirst() Returns whether the cursor is pointing to the first row. final boolean isLast() Returns whether the cursor is pointing to the last row. abstract boolean isNull(int column) Returns true if the value in the indicated column is null. final boolean move(int offset) Move the cursor by a relative amount, forward or backward, from the current position. final boolean moveToFirst() Move the cursor to the first row. final boolean moveToLast() Move the cursor to the last row. final boolean moveToNext() Move the cursor to the next row. final boolean moveToPosition(int position) Move the cursor to an absolute position. final boolean moveToPrevious() Move the cursor to the previous row. void onChange(boolean selfChange) Subclasses must call this method when they finish committing updates to notify all observers. boolean onMove(int oldPosition, int newPosition) This function is called every time the cursor is successfully scrolled to a new position, giving the subclass a chance to update any state it may have. void registerContentObserver(ContentObserver observer) Register an observer that is called when changes happen to the content backing this cursor. void registerDataSetObserver(DataSetObserver observer) Register an observer that is called when changes happen to the contents of the this cursors data set, for example, when the data set is changed via requery(), deactivate(), or close(). boolean requery() Performs the query that created the cursor again, refreshing its contents. Bundle respond(Bundle extras) This is an out-of-band way for the the user of a cursor to communicate with the cursor. void setNotificationUri(ContentResolver cr, Uri notifyUri) Specifies a content URI to watch for changes. void unregisterContentObserver(ContentObserver observer) Unregister an observer that has previously been registered with this cursor via registerContentObserver(ContentObserver). void unregisterDataSetObserver(DataSetObserver observer) Unregister an observer that has previously been registered with this cursor via registerContentObserver(ContentObserver).","void checkPosition() This function throws CursorIndexOutOfBoundsException if the cursor position is out of bounds.","void close() Closes the Cursor, releasing all of its resources and making it completely invalid.","void copyStringToBuffer(int columnIndex, CharArrayBuffer buffer) Retrieves the requested column text and stores it in the buffer provided.","void deactivate() Deactivates the Cursor, making all calls on it fail until requery() is called.","void fillWindow(int position, CursorWindow window) Copies cursor data into the window.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","byte[] getBlob(int column) Returns the value of the requested column as a byte array.","int getColumnCount() Return total number of columns","int getColumnIndex(String columnName) Returns the zero-based index for the given column name, or -1 if the column doesn't exist.","int getColumnIndexOrThrow(String columnName) Returns the zero-based index for the given column name, or throws IllegalArgumentException if the column doesn't exist.","String getColumnName(int columnIndex) Returns the column name at the given zero-based column index.","abstract String[] getColumnNames() Returns a string array holding the names of all of the columns in the result set in the order in which they were listed in the result.","abstract int getCount() Returns the numbers of rows in the cursor.","abstract double getDouble(int column) Returns the value of the requested column as a double.","Bundle getExtras() Returns a bundle of extra values.","abstract float getFloat(int column) Returns the value of the requested column as a float.","abstract int getInt(int column) Returns the value of the requested column as an int.","abstract long getLong(int column) Returns the value of the requested column as a long.","Uri getNotificationUri() Return the URI at which notifications of changes in this Cursor's data will be delivered, as previously set by setNotificationUri(ContentResolver, Uri).","final int getPosition() Returns the current position of the cursor in the row set.","abstract short getShort(int column) Returns the value of the requested column as a short.","abstract String getString(int column) Returns the value of the requested column as a String.","int getType(int column) Returns data type of the given column's value.","Object getUpdatedField(int columnIndex) This method was deprecated in API level 11. Always returns null since Cursors do not support updating rows","boolean getWantsAllOnMoveCalls() onMove() will only be called across processes if this method returns true.","CursorWindow getWindow() If the cursor is backed by a CursorWindow, returns a pre-filled window with the contents of the cursor, otherwise null.","final boolean isAfterLast() Returns whether the cursor is pointing to the position after the last row.","final boolean isBeforeFirst() Returns whether the cursor is pointing to the position before the first row.","boolean isClosed() return true if the cursor is closed","boolean isFieldUpdated(int columnIndex) This method was deprecated in API level 11. Always returns false since Cursors do not support updating rows","final boolean isFirst() Returns whether the cursor is pointing to the first row.","final boolean isLast() Returns whether the cursor is pointing to the last row.","abstract boolean isNull(int column) Returns true if the value in the indicated column is null.","final boolean move(int offset) Move the cursor by a relative amount, forward or backward, from the current position.","final boolean moveToFirst() Move the cursor to the first row.","final boolean moveToLast() Move the cursor to the last row.","final boolean moveToNext() Move the cursor to the next row.","final boolean moveToPosition(int position) Move the cursor to an absolute position.","final boolean moveToPrevious() Move the cursor to the previous row.","void onChange(boolean selfChange) Subclasses must call this method when they finish committing updates to notify all observers.","boolean onMove(int oldPosition, int newPosition) This function is called every time the cursor is successfully scrolled to a new position, giving the subclass a chance to update any state it may have.","void registerContentObserver(ContentObserver observer) Register an observer that is called when changes happen to the content backing this cursor.","void registerDataSetObserver(DataSetObserver observer) Register an observer that is called when changes happen to the contents of the this cursors data set, for example, when the data set is changed via requery(), deactivate(), or close().","boolean requery() Performs the query that created the cursor again, refreshing its contents.","Bundle respond(Bundle extras) This is an out-of-band way for the the user of a cursor to communicate with the cursor.","void setNotificationUri(ContentResolver cr, Uri notifyUri) Specifies a content URI to watch for changes.","void unregisterContentObserver(ContentObserver observer) Unregister an observer that has previously been registered with this cursor via registerContentObserver(ContentObserver).","void unregisterDataSetObserver(DataSetObserver observer) Unregister an observer that has previously been registered with this cursor via registerContentObserver(ContentObserver).","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface android.database.CrossProcessCursor abstract void fillWindow(int position, CursorWindow window) Copies cursor data into the window. abstract CursorWindow getWindow() Returns a pre-filled window that contains the data within this cursor. abstract boolean onMove(int oldPosition, int newPosition) This function is called every time the cursor is successfully scrolled to a new position, giving the subclass a chance to update any state it may have.","abstract void fillWindow(int position, CursorWindow window) Copies cursor data into the window.","abstract CursorWindow getWindow() Returns a pre-filled window that contains the data within this cursor.","abstract boolean onMove(int oldPosition, int newPosition) This function is called every time the cursor is successfully scrolled to a new position, giving the subclass a chance to update any state it may have.","From interface android.database.Cursor abstract void close() Closes the Cursor, releasing all of its resources and making it completely invalid. abstract void copyStringToBuffer(int columnIndex, CharArrayBuffer buffer) Retrieves the requested column text and stores it in the buffer provided. abstract void deactivate() This method was deprecated in API level 16. Since requery() is deprecated, so too is this. abstract byte[] getBlob(int columnIndex) Returns the value of the requested column as a byte array. abstract int getColumnCount() Return total number of columns abstract int getColumnIndex(String columnName) Returns the zero-based index for the given column name, or -1 if the column doesn't exist. abstract int getColumnIndexOrThrow(String columnName) Returns the zero-based index for the given column name, or throws IllegalArgumentException if the column doesn't exist. abstract String getColumnName(int columnIndex) Returns the column name at the given zero-based column index. abstract String[] getColumnNames() Returns a string array holding the names of all of the columns in the result set in the order in which they were listed in the result. abstract int getCount() Returns the numbers of rows in the cursor. abstract double getDouble(int columnIndex) Returns the value of the requested column as a double. abstract Bundle getExtras() Returns a bundle of extra values. abstract float getFloat(int columnIndex) Returns the value of the requested column as a float. abstract int getInt(int columnIndex) Returns the value of the requested column as an int. abstract long getLong(int columnIndex) Returns the value of the requested column as a long. abstract Uri getNotificationUri() Return the URI at which notifications of changes in this Cursor's data will be delivered, as previously set by setNotificationUri(ContentResolver, Uri). abstract int getPosition() Returns the current position of the cursor in the row set. abstract short getShort(int columnIndex) Returns the value of the requested column as a short. abstract String getString(int columnIndex) Returns the value of the requested column as a String. abstract int getType(int columnIndex) Returns data type of the given column's value. abstract boolean getWantsAllOnMoveCalls() onMove() will only be called across processes if this method returns true. abstract boolean isAfterLast() Returns whether the cursor is pointing to the position after the last row. abstract boolean isBeforeFirst() Returns whether the cursor is pointing to the position before the first row. abstract boolean isClosed() return true if the cursor is closed abstract boolean isFirst() Returns whether the cursor is pointing to the first row. abstract boolean isLast() Returns whether the cursor is pointing to the last row. abstract boolean isNull(int columnIndex) Returns true if the value in the indicated column is null. abstract boolean move(int offset) Move the cursor by a relative amount, forward or backward, from the current position. abstract boolean moveToFirst() Move the cursor to the first row. abstract boolean moveToLast() Move the cursor to the last row. abstract boolean moveToNext() Move the cursor to the next row. abstract boolean moveToPosition(int position) Move the cursor to an absolute position. abstract boolean moveToPrevious() Move the cursor to the previous row. abstract void registerContentObserver(ContentObserver observer) Register an observer that is called when changes happen to the content backing this cursor. abstract void registerDataSetObserver(DataSetObserver observer) Register an observer that is called when changes happen to the contents of the this cursors data set, for example, when the data set is changed via requery(), deactivate(), or close(). abstract boolean requery() This method was deprecated in API level 11. Don't use this. Just request a new cursor, so you can do this asynchronously and update your list view once the new cursor comes back. abstract Bundle respond(Bundle extras) This is an out-of-band way for the the user of a cursor to communicate with the cursor. abstract void setNotificationUri(ContentResolver cr, Uri uri) Register to watch a content URI for changes. abstract void unregisterContentObserver(ContentObserver observer) Unregister an observer that has previously been registered with this cursor via registerContentObserver(ContentObserver). abstract void unregisterDataSetObserver(DataSetObserver observer) Unregister an observer that has previously been registered with this cursor via registerContentObserver(ContentObserver).","abstract void close() Closes the Cursor, releasing all of its resources and making it completely invalid.","abstract void copyStringToBuffer(int columnIndex, CharArrayBuffer buffer) Retrieves the requested column text and stores it in the buffer provided.","abstract void deactivate() This method was deprecated in API level 16. Since requery() is deprecated, so too is this.","abstract byte[] getBlob(int columnIndex) Returns the value of the requested column as a byte array.","abstract int getColumnCount() Return total number of columns","abstract int getColumnIndex(String columnName) Returns the zero-based index for the given column name, or -1 if the column doesn't exist.","abstract int getColumnIndexOrThrow(String columnName) Returns the zero-based index for the given column name, or throws IllegalArgumentException if the column doesn't exist.","abstract String getColumnName(int columnIndex) Returns the column name at the given zero-based column index.","abstract String[] getColumnNames() Returns a string array holding the names of all of the columns in the result set in the order in which they were listed in the result.","abstract int getCount() Returns the numbers of rows in the cursor.","abstract double getDouble(int columnIndex) Returns the value of the requested column as a double.","abstract Bundle getExtras() Returns a bundle of extra values.","abstract float getFloat(int columnIndex) Returns the value of the requested column as a float.","abstract int getInt(int columnIndex) Returns the value of the requested column as an int.","abstract long getLong(int columnIndex) Returns the value of the requested column as a long.","abstract Uri getNotificationUri() Return the URI at which notifications of changes in this Cursor's data will be delivered, as previously set by setNotificationUri(ContentResolver, Uri).","abstract int getPosition() Returns the current position of the cursor in the row set.","abstract short getShort(int columnIndex) Returns the value of the requested column as a short.","abstract String getString(int columnIndex) Returns the value of the requested column as a String.","abstract int getType(int columnIndex) Returns data type of the given column's value.","abstract boolean getWantsAllOnMoveCalls() onMove() will only be called across processes if this method returns true.","abstract boolean isAfterLast() Returns whether the cursor is pointing to the position after the last row.","abstract boolean isBeforeFirst() Returns whether the cursor is pointing to the position before the first row.","abstract boolean isClosed() return true if the cursor is closed","abstract boolean isFirst() Returns whether the cursor is pointing to the first row.","abstract boolean isLast() Returns whether the cursor is pointing to the last row.","abstract boolean isNull(int columnIndex) Returns true if the value in the indicated column is null.","abstract boolean move(int offset) Move the cursor by a relative amount, forward or backward, from the current position.","abstract boolean moveToFirst() Move the cursor to the first row.","abstract boolean moveToLast() Move the cursor to the last row.","abstract boolean moveToNext() Move the cursor to the next row.","abstract boolean moveToPosition(int position) Move the cursor to an absolute position.","abstract boolean moveToPrevious() Move the cursor to the previous row.","abstract void registerContentObserver(ContentObserver observer) Register an observer that is called when changes happen to the content backing this cursor.","abstract void registerDataSetObserver(DataSetObserver observer) Register an observer that is called when changes happen to the contents of the this cursors data set, for example, when the data set is changed via requery(), deactivate(), or close().","abstract boolean requery() This method was deprecated in API level 11. Don't use this. Just request a new cursor, so you can do this asynchronously and update your list view once the new cursor comes back.","abstract Bundle respond(Bundle extras) This is an out-of-band way for the the user of a cursor to communicate with the cursor.","abstract void setNotificationUri(ContentResolver cr, Uri uri) Register to watch a content URI for changes.","abstract void unregisterContentObserver(ContentObserver observer) Unregister an observer that has previously been registered with this cursor via registerContentObserver(ContentObserver).","abstract void unregisterDataSetObserver(DataSetObserver observer) Unregister an observer that has previously been registered with this cursor via registerContentObserver(ContentObserver).","From interface java.io.Closeable abstract void close() Closes the object and release any system resources it holds.","abstract void close() Closes the object and release any system resources it holds.","From interface java.lang.AutoCloseable abstract void close() Closes the object and release any system resources it holds.","abstract void close() Closes the object and release any system resources it holds."],"package":"android.database","constants":["[Expand] Inherited Constants","From interface android.database.Cursor int FIELD_TYPE_BLOB Value returned by getType(int) if the specified column type is blob int FIELD_TYPE_FLOAT Value returned by getType(int) if the specified column type is float int FIELD_TYPE_INTEGER Value returned by getType(int) if the specified column type is integer int FIELD_TYPE_NULL Value returned by getType(int) if the specified column is null int FIELD_TYPE_STRING Value returned by getType(int) if the specified column type is string","int FIELD_TYPE_BLOB Value returned by getType(int) if the specified column type is blob","int FIELD_TYPE_FLOAT Value returned by getType(int) if the specified column type is float","int FIELD_TYPE_INTEGER Value returned by getType(int) if the specified column type is integer","int FIELD_TYPE_NULL Value returned by getType(int) if the specified column is null","int FIELD_TYPE_STRING Value returned by getType(int) if the specified column type is string"],"class":"MatrixCursor","constructors":[],"fields":[]}