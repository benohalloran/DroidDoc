{"methods":["void configure(MediaFormat format, Surface surface, MediaCrypto crypto, int flags) Configures a component.","static MediaCodec createByCodecName(String name) If you know the exact name of the component you want to instantiate use this method to instantiate it.","static MediaCodec createDecoderByType(String type) Instantiate a decoder supporting input data of the given mime type.","static MediaCodec createEncoderByType(String type) Instantiate an encoder supporting output data of the given mime type.","final Surface createInputSurface() Requests a Surface to use as the input to an encoder, in place of input buffers.","final int dequeueInputBuffer(long timeoutUs) Returns the index of an input buffer to be filled with valid data or -1 if no such buffer is currently available.","final int dequeueOutputBuffer(MediaCodec.BufferInfo info, long timeoutUs) Dequeue an output buffer, block at most \"timeoutUs\" microseconds.","final void flush() Flush both input and output ports of the component, all indices previously returned in calls to dequeueInputBuffer(long) and dequeueOutputBuffer(MediaCodec.BufferInfo, long) become invalid.","MediaCodecInfo getCodecInfo() Get the codec info.","ByteBuffer getInputBuffer(int index) Returns a cleared, writable ByteBuffer object for a dequeued input buffer index to contain the input data.","ByteBuffer[] getInputBuffers() This method was deprecated in API level 21. Use the new getInputBuffer(int) method instead each time an input buffer is dequeued. Note:As of API 21, dequeued input buffers are automatically cleared.","final MediaFormat getInputFormat() Call this after configure(MediaFormat, Surface, MediaCrypto, int) returns successfully to get the input format accepted by the codec.","Image getInputImage(int index) Returns a writable Image object for a dequeued input buffer index to contain the raw input video frame.","final String getName() Get the component name.","ByteBuffer getOutputBuffer(int index) Returns a read-only ByteBuffer for a dequeued output buffer index.","ByteBuffer[] getOutputBuffers() This method was deprecated in API level 21. Use the new getOutputBuffer(int) method instead each time an output buffer is dequeued. This method is not supported if codec is configured in asynchronous mode. Note:As of API 21, the position and limit of output buffers that are dequeued will be set to the valid data range.","final MediaFormat getOutputFormat() Call this after dequeueOutputBuffer signals a format change by returning INFO_OUTPUT_FORMAT_CHANGED.","final MediaFormat getOutputFormat(int index) Returns the output format for a specific output buffer.","Image getOutputImage(int index) Returns a read-only Image object for a dequeued output buffer index that contains the raw video frame.","final void queueInputBuffer(int index, int offset, int size, long presentationTimeUs, int flags) After filling a range of the input buffer at the specified index submit it to the component.","final void queueSecureInputBuffer(int index, int offset, MediaCodec.CryptoInfo info, long presentationTimeUs, int flags) Similar to queueInputBuffer(int, int, int, long, int) but submits a buffer that is potentially encrypted.","final void release() Make sure you call this when you're done to free up any opened component instance instead of relying on the garbage collector to do this for you at some point in the future.","final void releaseOutputBuffer(int index, boolean render) If you are done with a buffer, use this call to return the buffer to the codec.","final void releaseOutputBuffer(int index, long renderTimestampNs) If you are done with a buffer, use this call to update its surface timestamp and return it to the codec to render it on the output surface.","final void reset() Returns the codec to its initial (Initialized) state.","void setCallback(MediaCodec.Callback cb) Sets an asynchronous callback for actionable MediaCodec events.","final void setParameters(Bundle params) Communicate additional parameter changes to the component instance.","final void setVideoScalingMode(int mode) If a surface has been specified in a previous call to configure(MediaFormat, Surface, MediaCrypto, int) specifies the scaling mode to use.","final void signalEndOfInputStream() Signals end-of-stream on input.","final void start() After successfully configuring the component, call start.","final void stop() Finish the decode/encode session, note that the codec instance remains active and ready to be start()ed again.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.media","constants":["int BUFFER_FLAG_CODEC_CONFIG This indicated that the buffer marked as such contains codec initialization / codec specific data instead of media data.","int BUFFER_FLAG_END_OF_STREAM This signals the end of stream, i.e.","int BUFFER_FLAG_KEY_FRAME This indicates that the (encoded) buffer marked as such contains the data for a key frame.","int BUFFER_FLAG_SYNC_FRAME This constant was deprecated in API level 21. Use BUFFER_FLAG_KEY_FRAME instead.","int CONFIGURE_FLAG_ENCODE If this codec is to be used as an encoder, pass this flag.","int CRYPTO_MODE_AES_CTR","int CRYPTO_MODE_UNENCRYPTED","int INFO_OUTPUT_BUFFERS_CHANGED This constant was deprecated in API level 21. This return value can be ignored as getOutputBuffers() has been deprecated. Client should request a current buffer using on of the get-buffer or get-image methods each time one has been dequeued.","int INFO_OUTPUT_FORMAT_CHANGED The output format has changed, subsequent data will follow the new format.","int INFO_TRY_AGAIN_LATER If a non-negative timeout had been specified in the call to dequeueOutputBuffer(MediaCodec.BufferInfo, long), indicates that the call timed out.","String PARAMETER_KEY_REQUEST_SYNC_FRAME Request that the encoder produce a sync frame \"soon\".","String PARAMETER_KEY_SUSPEND Temporarily suspend/resume encoding of input data.","String PARAMETER_KEY_VIDEO_BITRATE Change a video encoder's target bitrate on the fly.","int VIDEO_SCALING_MODE_SCALE_TO_FIT The content is scaled to the surface dimensions","int VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING The content is scaled, maintaining its aspect ratio, the whole surface area is used, content may be cropped"],"class":"MediaCodec","constructors":[],"fields":[]}