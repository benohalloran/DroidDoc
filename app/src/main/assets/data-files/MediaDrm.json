{"methods":["void closeSession(byte[] sessionId) Close a session on the MediaDrm object that was previously opened with openSession().","MediaDrm.CryptoSession getCryptoSession(byte[] sessionId, String cipherAlgorithm, String macAlgorithm) Obtain a CryptoSession object which can be used to encrypt, decrypt, sign and verify messages or data using the session keys established for the session using methods getKeyRequest(byte[], byte[], String, int, HashMap) and provideKeyResponse(byte[], byte[]) using a session key server.","MediaDrm.KeyRequest getKeyRequest(byte[] scope, byte[] init, String mimeType, int keyType, HashMap<String, String> optionalParameters) A key request/response exchange occurs between the app and a license server to obtain or release keys used to decrypt encrypted content.","byte[] getPropertyByteArray(String propertyName) Read a DRM engine plugin byte array property value, given the property name string.","String getPropertyString(String propertyName) Read a DRM engine plugin String property value, given the property name string.","MediaDrm.ProvisionRequest getProvisionRequest() A provision request/response exchange occurs between the app and a provisioning server to retrieve a device certificate.","List<byte[]> getSecureStops() A means of enforcing limits on the number of concurrent streams per subscriber across devices is provided via SecureStop.","final static boolean isCryptoSchemeSupported(UUID uuid, String mimeType) Query if the given scheme identified by its UUID is supported on this device, and whether the drm plugin is able to handle the media container format specified by mimeType.","final static boolean isCryptoSchemeSupported(UUID uuid) Query if the given scheme identified by its UUID is supported on this device.","byte[] openSession() Open a new session with the MediaDrm object.","byte[] provideKeyResponse(byte[] scope, byte[] response) A key response is received from the license server by the app, then it is provided to the DRM engine plugin using provideKeyResponse.","void provideProvisionResponse(byte[] response) After a provision response is received by the app, it is provided to the DRM engine plugin using this method.","HashMap<String, String> queryKeyStatus(byte[] sessionId) Request an informative description of the key status for the session.","final void release()","void releaseSecureStops(byte[] ssRelease) Process the SecureStop server response message ssRelease.","void removeKeys(byte[] sessionId) Remove the current keys from a session.","void restoreKeys(byte[] sessionId, byte[] keySetId) Restore persisted offline keys into a new session.","void setOnEventListener(MediaDrm.OnEventListener listener) Register a callback to be invoked when an event occurs","void setPropertyByteArray(String propertyName, byte[] value) Set a DRM engine plugin byte array property value.","void setPropertyString(String propertyName, String value) Set a DRM engine plugin String property value.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.media","constants":["int EVENT_KEY_EXPIRED This event type indicates that the licensed usage duration for keys in a session has expired.","int EVENT_KEY_REQUIRED This event type indicates that the app needs to request keys from a license server.","int EVENT_PROVISION_REQUIRED This event type indicates that the app needs to request a certificate from the provisioning server.","int EVENT_VENDOR_DEFINED This event may indicate some specific vendor-defined condition, see your DRM provider documentation for details","int KEY_TYPE_OFFLINE This key request type specifies that the keys will be for offline use, they will be saved to the device for use when the device is not connected to a network.","int KEY_TYPE_RELEASE This key request type specifies that previously saved offline keys should be released.","int KEY_TYPE_STREAMING This key request type species that the keys will be for online use, they will not be saved to the device for subsequent use when the device is not connected to a network.","String PROPERTY_ALGORITHMS String property name: a comma-separated list of cipher and mac algorithms supported by CryptoSession.","String PROPERTY_DESCRIPTION String property name: describes the DRM engine plugin","String PROPERTY_DEVICE_UNIQUE_ID Byte array property name: the device unique identifier is established during device provisioning and provides a means of uniquely identifying each device.","String PROPERTY_VENDOR String property name: identifies the maker of the DRM engine plugin","String PROPERTY_VERSION String property name: identifies the version of the DRM engine plugin"],"class":"MediaDrm","constructors":[],"fields":[]}