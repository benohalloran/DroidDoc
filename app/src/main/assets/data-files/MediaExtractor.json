{"methods":["boolean advance() Advance to the next sample.","long getCachedDuration() Returns an estimate of how much data is presently cached in memory expressed in microseconds.","Map<UUID, byte[]> getPsshInfo() Get the PSSH info if present.","boolean getSampleCryptoInfo(MediaCodec.CryptoInfo info) If the sample flags indicate that the current sample is at least partially encrypted, this call returns relevant information about the structure of the sample data required for decryption.","int getSampleFlags() Returns the current sample's flags.","long getSampleTime() Returns the current sample's presentation time in microseconds.","int getSampleTrackIndex() Returns the track index the current sample originates from (or -1 if no more samples are available)","final int getTrackCount() Count the number of tracks found in the data source.","MediaFormat getTrackFormat(int index) Get the track format at the specified index.","boolean hasCacheReachedEndOfStream() Returns true iff we are caching data and the cache has reached the end of the data stream (for now, a future seek may of course restart the fetching of data).","int readSampleData(ByteBuffer byteBuf, int offset) Retrieve the current encoded sample and store it in the byte buffer starting at the given offset.","final void release() Make sure you call this when you're done to free up any resources instead of relying on the garbage collector to do this for you at some point in the future.","void seekTo(long timeUs, int mode) All selected tracks seek near the requested time according to the specified mode.","void selectTrack(int index) Subsequent calls to readSampleData(ByteBuffer, int), getSampleTrackIndex() and getSampleTime() only retrieve information for the subset of tracks selected.","final void setDataSource(String path) Sets the data source (file-path or http URL) to use.","final void setDataSource(String path, Map<String, String> headers) Sets the data source (file-path or http URL) to use.","final void setDataSource(FileDescriptor fd) Sets the data source (FileDescriptor) to use.","final void setDataSource(FileDescriptor fd, long offset, long length) Sets the data source (FileDescriptor) to use.","final void setDataSource(Context context, Uri uri, Map<String, String> headers) Sets the data source as a content Uri.","void unselectTrack(int index) Subsequent calls to readSampleData(ByteBuffer, int), getSampleTrackIndex() and getSampleTime() only retrieve information for the subset of tracks selected.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.media","constants":["int SAMPLE_FLAG_ENCRYPTED The sample is (at least partially) encrypted, see also the documentation for queueSecureInputBuffer(int, int, MediaCodec.CryptoInfo, long, int)","int SAMPLE_FLAG_SYNC The sample is a sync sample (or in MediaCodec's terminology it is a key frame.)","int SEEK_TO_CLOSEST_SYNC If possible, seek to the sync sample closest to the specified time","int SEEK_TO_NEXT_SYNC If possible, seek to a sync sample at or after the specified time","int SEEK_TO_PREVIOUS_SYNC If possible, seek to a sync sample at or before the specified time"],"class":"MediaExtractor","constructors":[],"fields":[]}