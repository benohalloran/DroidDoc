{"methods":["String extractMetadata(int keyCode) Call this method after setDataSource().","byte[] getEmbeddedPicture() Call this method after setDataSource().","Bitmap getFrameAtTime(long timeUs, int option) Call this method after setDataSource().","Bitmap getFrameAtTime(long timeUs) Call this method after setDataSource().","Bitmap getFrameAtTime() Call this method after setDataSource().","void release() Call it when one is done with the object.","void setDataSource(FileDescriptor fd, long offset, long length) Sets the data source (FileDescriptor) to use.","void setDataSource(String path) Sets the data source (file pathname) to use.","void setDataSource(FileDescriptor fd) Sets the data source (FileDescriptor) to use.","void setDataSource(String uri, Map<String, String> headers) Sets the data source (URI) to use.","void setDataSource(Context context, Uri uri) Sets the data source as a content Uri.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.media","constants":["int METADATA_KEY_ALBUM The metadata key to retrieve the information about the album title of the data source.","int METADATA_KEY_ALBUMARTIST The metadata key to retrieve the information about the performers or artist associated with the data source.","int METADATA_KEY_ARTIST The metadata key to retrieve the information about the artist of the data source.","int METADATA_KEY_AUTHOR The metadata key to retrieve the information about the author of the data source.","int METADATA_KEY_BITRATE This key retrieves the average bitrate (in bits/sec), if available.","int METADATA_KEY_CD_TRACK_NUMBER The metadata key to retrieve the numeric string describing the order of the audio data source on its original recording.","int METADATA_KEY_COMPILATION The metadata key to retrieve the music album compilation status.","int METADATA_KEY_COMPOSER The metadata key to retrieve the information about the composer of the data source.","int METADATA_KEY_DATE The metadata key to retrieve the date when the data source was created or modified.","int METADATA_KEY_DISC_NUMBER The metadata key to retrieve the numberic string that describes which part of a set the audio data source comes from.","int METADATA_KEY_DURATION The metadata key to retrieve the playback duration of the data source.","int METADATA_KEY_GENRE The metadata key to retrieve the content type or genre of the data source.","int METADATA_KEY_HAS_AUDIO If this key exists the media contains audio content.","int METADATA_KEY_HAS_VIDEO If this key exists the media contains video content.","int METADATA_KEY_LOCATION This key retrieves the location information, if available.","int METADATA_KEY_MIMETYPE The metadata key to retrieve the mime type of the data source.","int METADATA_KEY_NUM_TRACKS The metadata key to retrieve the number of tracks, such as audio, video, text, in the data source, such as a mp4 or 3gpp file.","int METADATA_KEY_TITLE The metadata key to retrieve the data source title.","int METADATA_KEY_VIDEO_HEIGHT If the media contains video, this key retrieves its height.","int METADATA_KEY_VIDEO_ROTATION This key retrieves the video rotation angle in degrees, if available.","int METADATA_KEY_VIDEO_WIDTH If the media contains video, this key retrieves its width.","int METADATA_KEY_WRITER The metadata key to retrieve the information of the writer (such as lyricist) of the data source.","int METADATA_KEY_YEAR The metadata key to retrieve the year when the data source was created or modified.","int OPTION_CLOSEST This option is used with getFrameAtTime(long, int) to retrieve a frame (not necessarily a key frame) associated with a data source that is located closest to or at the given time.","int OPTION_CLOSEST_SYNC This option is used with getFrameAtTime(long, int) to retrieve a sync (or key) frame associated with a data source that is located closest to (in time) or at the given time.","int OPTION_NEXT_SYNC This option is used with getFrameAtTime(long, int) to retrieve a sync (or key) frame associated with a data source that is located right after or at the given time.","int OPTION_PREVIOUS_SYNC This option is used with getFrameAtTime(long, int) to retrieve a sync (or key) frame associated with a data source that is located right before or at the given time."],"class":"MediaMetadataRetriever","constructors":[],"fields":[]}