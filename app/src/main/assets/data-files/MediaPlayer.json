{"methods":["void addTimedTextSource(Context context, Uri uri, String mimeType) Adds an external timed text source file (Uri).","void addTimedTextSource(String path, String mimeType) Adds an external timed text source file.","void addTimedTextSource(FileDescriptor fd, long offset, long length, String mime) Adds an external timed text file (FileDescriptor).","void addTimedTextSource(FileDescriptor fd, String mimeType) Adds an external timed text source file (FileDescriptor).","void attachAuxEffect(int effectId) Attaches an auxiliary effect to the player.","static MediaPlayer create(Context context, Uri uri, SurfaceHolder holder, AudioAttributes audioAttributes, int audioSessionId) Same factory method as create(Context, Uri, SurfaceHolder) but that lets you specify the audio attributes and session ID to be used by the new MediaPlayer instance.","static MediaPlayer create(Context context, Uri uri, SurfaceHolder holder) Convenience method to create a MediaPlayer for a given Uri.","static MediaPlayer create(Context context, int resid, AudioAttributes audioAttributes, int audioSessionId) Same factory method as create(Context, int) but that lets you specify the audio attributes and session ID to be used by the new MediaPlayer instance.","static MediaPlayer create(Context context, int resid) Convenience method to create a MediaPlayer for a given resource id.","static MediaPlayer create(Context context, Uri uri) Convenience method to create a MediaPlayer for a given Uri.","void deselectTrack(int index) Deselect a track.","int getAudioSessionId() Returns the audio session ID.","int getCurrentPosition() Gets the current playback position.","int getDuration() Gets the duration of the file.","int getSelectedTrack(int trackType) Returns the index of the audio, video, or subtitle track currently selected for playback, The return value is an index into the array returned by getTrackInfo(), and can be used in calls to selectTrack(int) or deselectTrack(int).","TrackInfo[] getTrackInfo() Returns an array of track information.","int getVideoHeight() Returns the height of the video.","int getVideoWidth() Returns the width of the video.","boolean isLooping() Checks whether the MediaPlayer is looping or non-looping.","boolean isPlaying() Checks whether the MediaPlayer is playing.","void pause() Pauses playback.","void prepare() Prepares the player for playback, synchronously.","void prepareAsync() Prepares the player for playback, asynchronously.","void release() Releases resources associated with this MediaPlayer object.","void reset() Resets the MediaPlayer to its uninitialized state.","void seekTo(int msec) Seeks to specified time position.","void selectTrack(int index) Selects a track.","void setAudioAttributes(AudioAttributes attributes) Sets the audio attributes for this MediaPlayer.","void setAudioSessionId(int sessionId) Sets the audio session ID.","void setAudioStreamType(int streamtype) Sets the audio stream type for this MediaPlayer.","void setAuxEffectSendLevel(float level) Sets the send level of the player to the attached auxiliary effect .","void setDataSource(String path) Sets the data source (file-path or http/rtsp URL) to use.","void setDataSource(Context context, Uri uri, Map<String, String> headers) Sets the data source as a content Uri.","void setDataSource(Context context, Uri uri) Sets the data source as a content Uri.","void setDataSource(FileDescriptor fd, long offset, long length) Sets the data source (FileDescriptor) to use.","void setDataSource(FileDescriptor fd) Sets the data source (FileDescriptor) to use.","void setDisplay(SurfaceHolder sh) Sets the SurfaceHolder to use for displaying the video portion of the media.","void setLooping(boolean looping) Sets the player to be looping or non-looping.","void setNextMediaPlayer(MediaPlayer next) Set the MediaPlayer to start when this MediaPlayer finishes playback (i.e.","void setOnBufferingUpdateListener(MediaPlayer.OnBufferingUpdateListener listener) Register a callback to be invoked when the status of a network stream's buffer has changed.","void setOnCompletionListener(MediaPlayer.OnCompletionListener listener) Register a callback to be invoked when the end of a media source has been reached during playback.","void setOnErrorListener(MediaPlayer.OnErrorListener listener) Register a callback to be invoked when an error has happened during an asynchronous operation.","void setOnInfoListener(MediaPlayer.OnInfoListener listener) Register a callback to be invoked when an info/warning is available.","void setOnPreparedListener(MediaPlayer.OnPreparedListener listener) Register a callback to be invoked when the media source is ready for playback.","void setOnSeekCompleteListener(MediaPlayer.OnSeekCompleteListener listener) Register a callback to be invoked when a seek operation has been completed.","void setOnTimedTextListener(MediaPlayer.OnTimedTextListener listener) Register a callback to be invoked when a timed text is available for display.","void setOnVideoSizeChangedListener(MediaPlayer.OnVideoSizeChangedListener listener) Register a callback to be invoked when the video size is known or updated.","void setScreenOnWhilePlaying(boolean screenOn) Control whether we should use the attached SurfaceHolder to keep the screen on while video playback is occurring.","void setSurface(Surface surface) Sets the Surface to be used as the sink for the video portion of the media.","void setVideoScalingMode(int mode) Sets video scaling mode.","void setVolume(float leftVolume, float rightVolume) Sets the volume on this player.","void setWakeMode(Context context, int mode) Set the low-level power management behavior for this MediaPlayer.","void start() Starts or resumes playback.","void stop() Stops playback after playback has been stopped or paused.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.media","constants":["int MEDIA_ERROR_IO File or network related operation errors.","int MEDIA_ERROR_MALFORMED Bitstream is not conforming to the related coding standard or file spec.","int MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK The video is streamed and its container is not valid for progressive playback i.e the video's index (e.g moov atom) is not at the start of the file.","int MEDIA_ERROR_SERVER_DIED Media server died.","int MEDIA_ERROR_TIMED_OUT Some operation takes too long to complete, usually more than 3-5 seconds.","int MEDIA_ERROR_UNKNOWN Unspecified media player error.","int MEDIA_ERROR_UNSUPPORTED Bitstream is conforming to the related coding standard or file spec, but the media framework does not support the feature.","int MEDIA_INFO_BAD_INTERLEAVING Bad interleaving means that a media has been improperly interleaved or not interleaved at all, e.g has all the video samples first then all the audio ones.","int MEDIA_INFO_BUFFERING_END MediaPlayer is resuming playback after filling buffers.","int MEDIA_INFO_BUFFERING_START MediaPlayer is temporarily pausing playback internally in order to buffer more data.","int MEDIA_INFO_METADATA_UPDATE A new set of metadata is available.","int MEDIA_INFO_NOT_SEEKABLE The media cannot be seeked (e.g live stream)","int MEDIA_INFO_SUBTITLE_TIMED_OUT Reading the subtitle track takes too long.","int MEDIA_INFO_UNKNOWN Unspecified media player info.","int MEDIA_INFO_UNSUPPORTED_SUBTITLE Subtitle track was not supported by the media framework.","int MEDIA_INFO_VIDEO_RENDERING_START The player just pushed the very first video frame for rendering.","int MEDIA_INFO_VIDEO_TRACK_LAGGING The video is too complex for the decoder: it can't decode frames fast enough.","String MEDIA_MIMETYPE_TEXT_SUBRIP MIME type for SubRip (SRT) container.","int VIDEO_SCALING_MODE_SCALE_TO_FIT Specifies a video scaling mode.","int VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING Specifies a video scaling mode."],"class":"MediaPlayer","constructors":[],"fields":[]}