{"methods":["List<IntentFilter> getControlFilters() Gets a list of media control intent filters that describe the capabilities of this route and the media control actions that it supports.","String getDescription() Gets the user-visible description of the route.","Bundle getExtras() Gets a collection of extra properties about this route that were supplied by its media route provider, or null if none.","String getId() Gets the unique id of the route.","String getName() Gets the user-visible name of the route.","int getPlaybackStream() Gets the audio stream over which the playback associated with this route is performed.","int getPlaybackType() Gets the type of playback associated with this route.","Display getPresentationDisplay() Gets the Display that should be used by the application to show a Presentation on an external display when this route is selected.","MediaRouter.ProviderInfo getProvider() Gets information about the provider of this media route.","int getVolume() Gets the current volume for this route.","int getVolumeHandling() Gets information about how volume is handled on the route.","int getVolumeMax() Gets the maximum volume at which the playback associated with this route is performed.","boolean isConnecting() Returns true if the route is in the process of connecting and is not yet ready for use.","boolean isDefault() Returns true if this route is the default route.","boolean isEnabled() Returns true if this route is enabled and may be selected.","boolean isSelected() Returns true if this route is currently selected.","boolean matchesSelector(MediaRouteSelector selector) Returns true if the route supports at least one of the capabilities described by a media route selector.","void requestSetVolume(int volume) Requests a volume change for this route asynchronously.","void requestUpdateVolume(int delta) Requests an incremental volume update for this route asynchronously.","void select() Selects this media route.","void sendControlRequest(Intent intent, MediaRouter.ControlRequestCallback callback) Sends a media control request to be performed asynchronously by the route's destination.","boolean supportsControlAction(String category, String action) Returns true if the route supports the specified media control category and action.","boolean supportsControlCategory(String category) Returns true if the route supports the specified media control category.","boolean supportsControlRequest(Intent intent) Returns true if the route supports the specified media control request.","String toString() Returns a string containing a concise, human-readable description of this object.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.support.v7.media","constants":["int PLAYBACK_TYPE_LOCAL The default playback type, \"local\", indicating the presentation of the media is happening on the same device (e.g.","int PLAYBACK_TYPE_REMOTE A playback type indicating the presentation of the media is happening on a different device (i.e.","int PLAYBACK_VOLUME_FIXED Playback information indicating the playback volume is fixed, i.e.","int PLAYBACK_VOLUME_VARIABLE Playback information indicating the playback volume is variable and can be controlled from this object."],"class":"MediaRouter.RouteInfo","constructors":[],"fields":[]}