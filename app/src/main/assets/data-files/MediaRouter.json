{"methods":["void addCallback(MediaRouteSelector selector, MediaRouter.Callback callback, int flags) Registers a callback to discover routes that match the selector and to receive events when they change.","void addCallback(MediaRouteSelector selector, MediaRouter.Callback callback) Registers a callback to discover routes that match the selector and to receive events when they change.","void addProvider(MediaRouteProvider providerInstance) Registers a media route provider within this application process.","void addRemoteControlClient(Object remoteControlClient) Adds a remote control client to enable remote control of the volume of the selected route.","MediaRouter.RouteInfo getDefaultRoute() Gets the default route for playing media content on the system.","static MediaRouter getInstance(Context context) Gets an instance of the media router service associated with the context.","List<MediaRouter.ProviderInfo> getProviders() Gets information about the route providers currently known to this media router.","List<MediaRouter.RouteInfo> getRoutes() Gets information about the routes currently known to this media router.","MediaRouter.RouteInfo getSelectedRoute() Gets the currently selected route.","boolean isRouteAvailable(MediaRouteSelector selector, int flags) Returns true if there is a route that matches the specified selector.","void removeCallback(MediaRouter.Callback callback) Removes the specified callback.","void removeProvider(MediaRouteProvider providerInstance) Unregisters a media route provider within this application process.","void removeRemoteControlClient(Object remoteControlClient) Removes a remote control client.","void selectRoute(MediaRouter.RouteInfo route) Selects the specified route.","void setMediaSession(Object mediaSession) Sets the media session to enable remote control of the volume of the selected route.","MediaRouter.RouteInfo updateSelectedRoute(MediaRouteSelector selector) Returns the selected route if it matches the specified selector, otherwise selects the default route and returns it.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.support.v7.media","constants":["int AVAILABILITY_FLAG_IGNORE_DEFAULT_ROUTE Flag for isRouteAvailable(MediaRouteSelector, int): Ignore the default route.","int AVAILABILITY_FLAG_REQUIRE_MATCH Flag for isRouteAvailable(MediaRouteSelector, int): Require an actual route to be matched.","int CALLBACK_FLAG_FORCE_DISCOVERY Flag for addCallback(MediaRouteSelector, MediaRouter.Callback): Request passive route discovery while this callback is registered, even on low-RAM devices.","int CALLBACK_FLAG_PERFORM_ACTIVE_SCAN Flag for addCallback(MediaRouteSelector, MediaRouter.Callback): Actively scan for routes while this callback is registered.","int CALLBACK_FLAG_REQUEST_DISCOVERY Flag for addCallback(MediaRouteSelector, MediaRouter.Callback): Request passive route discovery while this callback is registered, except on low-RAM devices.","int CALLBACK_FLAG_UNFILTERED_EVENTS Flag for addCallback(MediaRouteSelector, MediaRouter.Callback): Do not filter route events."],"class":"MediaRouter","constructors":[],"fields":[]}