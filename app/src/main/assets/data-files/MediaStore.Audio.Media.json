{"methods":["static Uri getContentUri(String volumeName) Get the content:// style URI for the audio media table on the given volume.","static Uri getContentUriForPath(String path)","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.provider","constants":["String CONTENT_TYPE The MIME type for this table.","String DEFAULT_SORT_ORDER The default sort order for this table","String ENTRY_CONTENT_TYPE The MIME type for an audio track.","String EXTRA_MAX_BYTES The name of the Intent-extra used to define a maximum file size for a recording made by the SoundRecorder application.","String RECORD_SOUND_ACTION Activity Action: Start SoundRecorder application.","[Expand] Inherited Constants","From interface android.provider.BaseColumns String _COUNT The count of rows in a directory. String _ID The unique ID for a row.","String _COUNT The count of rows in a directory.","String _ID The unique ID for a row.","From interface android.provider.MediaStore.Audio.AudioColumns String ALBUM The album the audio file is from, if any Type: TEXT String ALBUM_ID The id of the album the audio file is from, if any Type: INTEGER (long) String ALBUM_KEY A non human readable key calculated from the ALBUM, used for searching, sorting and grouping Type: TEXT String ARTIST The artist who created the audio file, if any Type: TEXT String ARTIST_ID The id of the artist who created the audio file, if any Type: INTEGER (long) String ARTIST_KEY A non human readable key calculated from the ARTIST, used for searching, sorting and grouping Type: TEXT String BOOKMARK The position, in ms, playback was at when playback for this file was last stopped. String COMPOSER The composer of the audio file, if any Type: TEXT String DURATION The duration of the audio file, in ms Type: INTEGER (long) String IS_ALARM Non-zero if the audio file may be an alarm Type: INTEGER (boolean) String IS_MUSIC Non-zero if the audio file is music Type: INTEGER (boolean) String IS_NOTIFICATION Non-zero if the audio file may be a notification sound Type: INTEGER (boolean) String IS_PODCAST Non-zero if the audio file is a podcast Type: INTEGER (boolean) String IS_RINGTONE Non-zero if the audio file may be a ringtone Type: INTEGER (boolean) String TITLE_KEY A non human readable key calculated from the TITLE, used for searching, sorting and grouping Type: TEXT String TRACK The track number of this song on the album, if any. String YEAR The year the audio file was recorded, if any Type: INTEGER","String ALBUM The album the audio file is from, if any Type: TEXT","String ALBUM_ID The id of the album the audio file is from, if any Type: INTEGER (long)","String ALBUM_KEY A non human readable key calculated from the ALBUM, used for searching, sorting and grouping Type: TEXT","String ARTIST The artist who created the audio file, if any Type: TEXT","String ARTIST_ID The id of the artist who created the audio file, if any Type: INTEGER (long)","String ARTIST_KEY A non human readable key calculated from the ARTIST, used for searching, sorting and grouping Type: TEXT","String BOOKMARK The position, in ms, playback was at when playback for this file was last stopped.","String COMPOSER The composer of the audio file, if any Type: TEXT","String DURATION The duration of the audio file, in ms Type: INTEGER (long)","String IS_ALARM Non-zero if the audio file may be an alarm Type: INTEGER (boolean)","String IS_MUSIC Non-zero if the audio file is music Type: INTEGER (boolean)","String IS_NOTIFICATION Non-zero if the audio file may be a notification sound Type: INTEGER (boolean)","String IS_PODCAST Non-zero if the audio file is a podcast Type: INTEGER (boolean)","String IS_RINGTONE Non-zero if the audio file may be a ringtone Type: INTEGER (boolean)","String TITLE_KEY A non human readable key calculated from the TITLE, used for searching, sorting and grouping Type: TEXT","String TRACK The track number of this song on the album, if any.","String YEAR The year the audio file was recorded, if any Type: INTEGER","From interface android.provider.MediaStore.MediaColumns String DATA The data stream for the file Type: DATA STREAM String DATE_ADDED The time the file was added to the media provider Units are seconds since 1970. String DATE_MODIFIED The time the file was last modified Units are seconds since 1970. String DISPLAY_NAME The display name of the file Type: TEXT String HEIGHT The height of the image/video in pixels. String MIME_TYPE The MIME type of the file Type: TEXT String SIZE The size of the file in bytes Type: INTEGER (long) String TITLE The title of the content Type: TEXT String WIDTH The width of the image/video in pixels.","String DATA The data stream for the file Type: DATA STREAM","String DATE_ADDED The time the file was added to the media provider Units are seconds since 1970.","String DATE_MODIFIED The time the file was last modified Units are seconds since 1970.","String DISPLAY_NAME The display name of the file Type: TEXT","String HEIGHT The height of the image/video in pixels.","String MIME_TYPE The MIME type of the file Type: TEXT","String SIZE The size of the file in bytes Type: INTEGER (long)","String TITLE The title of the content Type: TEXT","String WIDTH The width of the image/video in pixels."],"class":"MediaStore.Audio.Media","constructors":[],"fields":["public static final Uri EXTERNAL_CONTENT_URI The content:// style URI for the \"primary\" external storage volume.","public static final Uri INTERNAL_CONTENT_URI The content:// style URI for the internal storage."]}