{"methods":["boolean authenticateSectorWithKeyA(int sectorIndex, byte[] key) Authenticate a sector with key A.","boolean authenticateSectorWithKeyB(int sectorIndex, byte[] key) Authenticate a sector with key B.","int blockToSector(int blockIndex) Return the sector that contains a given block.","void close() Disable I/O operations to the tag from this TagTechnology object, and release resources.","void connect() Enable I/O operations to the tag from this TagTechnology object.","void decrement(int blockIndex, int value) Decrement a value block, storing the result in the temporary block on the tag.","static MifareClassic get(Tag tag) Get an instance of MifareClassic for the given tag.","int getBlockCount() Return the total number of MIFARE Classic blocks.","int getBlockCountInSector(int sectorIndex) Return the number of blocks in the given sector.","int getMaxTransceiveLength() Return the maximum number of bytes that can be sent with transceive(byte[]).","int getSectorCount() Return the number of MIFARE Classic sectors.","int getSize() Return the size of the tag in bytes One of SIZE_MINI, SIZE_1K, SIZE_2K, SIZE_4K.","Tag getTag() Get the Tag object backing this TagTechnology object.","int getTimeout() Get the current transceive(byte[]) timeout in milliseconds.","int getType() Return the type of this MIFARE Classic compatible tag.","void increment(int blockIndex, int value) Increment a value block, storing the result in the temporary block on the tag.","boolean isConnected() Helper to indicate if I/O operations should be possible.","byte[] readBlock(int blockIndex) Read 16-byte block.","void restore(int blockIndex) Copy from a value block to the temporary block.","int sectorToBlock(int sectorIndex) Return the first block of a given sector.","void setTimeout(int timeout) Set the transceive(byte[]) timeout in milliseconds.","byte[] transceive(byte[] data) Send raw NfcA data to a tag and receive the response.","void transfer(int blockIndex) Copy from the temporary block to a value block.","void writeBlock(int blockIndex, byte[] data) Write 16-byte block.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface android.nfc.tech.TagTechnology abstract void close() Disable I/O operations to the tag from this TagTechnology object, and release resources. abstract void connect() Enable I/O operations to the tag from this TagTechnology object. abstract Tag getTag() Get the Tag object backing this TagTechnology object. abstract boolean isConnected() Helper to indicate if I/O operations should be possible.","abstract void close() Disable I/O operations to the tag from this TagTechnology object, and release resources.","abstract void connect() Enable I/O operations to the tag from this TagTechnology object.","abstract Tag getTag() Get the Tag object backing this TagTechnology object.","abstract boolean isConnected() Helper to indicate if I/O operations should be possible.","From interface java.io.Closeable abstract void close() Closes the object and release any system resources it holds.","abstract void close() Closes the object and release any system resources it holds.","From interface java.lang.AutoCloseable abstract void close() Closes the object and release any system resources it holds.","abstract void close() Closes the object and release any system resources it holds."],"package":"android.nfc.tech","constants":["int BLOCK_SIZE Size of a MIFARE Classic block (in bytes)","int SIZE_1K Tag contains 16 sectors, each with 4 blocks.","int SIZE_2K Tag contains 32 sectors, each with 4 blocks.","int SIZE_4K Tag contains 40 sectors.","int SIZE_MINI Tag contains 5 sectors, each with 4 blocks.","int TYPE_CLASSIC A MIFARE Classic tag","int TYPE_PLUS A MIFARE Plus tag","int TYPE_PRO A MIFARE Pro tag","int TYPE_UNKNOWN A MIFARE Classic compatible card of unknown type"],"class":"MifareClassic","constructors":[],"fields":["public static final byte[] KEY_DEFAULT The default factory key.","public static final byte[] KEY_MIFARE_APPLICATION_DIRECTORY The well-known key for tags formatted according to the MIFARE Application Directory (MAD) specification.","public static final byte[] KEY_NFC_FORUM The well-known key for tags formatted according to the NDEF on MIFARE Classic specification."]}