{"methods":["void addPackageToPreferred(String packageName) This method is deprecated. This function no longer does anything; it was an old approach to managing preferred activities, which has been superseded by (and conflicts with) the modern activity-based preferences.","boolean addPermission(PermissionInfo info) Add a new dynamic permission to the system.","boolean addPermissionAsync(PermissionInfo info) Like addPermission(PermissionInfo) but asynchronously persists the package manager state after returning from the call, allowing it to return quicker and batch a series of adds at the expense of no guarantee the added permission will be retained if the device is rebooted before it is written.","void addPreferredActivity(IntentFilter filter, int match, ComponentName[] set, ComponentName activity) This method is deprecated. This is a protected API that should not have been available to third party applications. It is the platform's responsibility for assigning preferred activities and this cannot be directly modified. Add a new preferred activity mapping to the system. This will be used to automatically select the given activity component when Context.startActivity() finds multiple matching activities and also matches the given filter.","String[] canonicalToCurrentPackageNames(String[] names) Map from a packages canonical name to the current name in use on the device.","int checkPermission(String permName, String pkgName) Check whether a particular package has been granted a particular permission.","int checkSignatures(int uid1, int uid2) Like checkSignatures(String, String), but takes UIDs of the two packages to be checked.","int checkSignatures(String pkg1, String pkg2) Compare the signatures of two packages to determine if the same signature appears in both of them.","void clearPackagePreferredActivities(String packageName) Remove all preferred activity mappings, previously added with addPreferredActivity(IntentFilter, int, ComponentName[], ComponentName), from the system whose activities are implemented in the given package name.","String[] currentToCanonicalPackageNames(String[] names) Map from the current package names in use on the device to whatever the current canonical name of that package is.","void extendVerificationTimeout(int id, int verificationCodeAtTimeout, long millisecondsToDelay) Allows a package listening to the package verification broadcast to extend the default timeout for a response and declare what action to perform after the timeout occurs.","Drawable getActivityBanner(Intent intent) Retrieve the banner associated with an Intent.","Drawable getActivityBanner(ComponentName activityName) Retrieve the banner associated with an activity.","Drawable getActivityIcon(Intent intent) Retrieve the icon associated with an Intent.","Drawable getActivityIcon(ComponentName activityName) Retrieve the icon associated with an activity.","ActivityInfo getActivityInfo(ComponentName className, int flags) Retrieve all of the information we know about a particular activity class.","Drawable getActivityLogo(Intent intent) Retrieve the logo associated with an Intent.","Drawable getActivityLogo(ComponentName activityName) Retrieve the logo associated with an activity.","List<PermissionGroupInfo> getAllPermissionGroups(int flags) Retrieve all of the known permission groups in the system.","Drawable getApplicationBanner(ApplicationInfo info) Retrieve the banner associated with an application.","Drawable getApplicationBanner(String packageName) Retrieve the banner associated with an application.","int getApplicationEnabledSetting(String packageName) Return the enabled setting for an application.","Drawable getApplicationIcon(String packageName) Retrieve the icon associated with an application.","Drawable getApplicationIcon(ApplicationInfo info) Retrieve the icon associated with an application.","ApplicationInfo getApplicationInfo(String packageName, int flags) Retrieve all of the information we know about a particular package/application.","CharSequence getApplicationLabel(ApplicationInfo info) Return the label to use for this application.","Drawable getApplicationLogo(String packageName) Retrieve the logo associated with an application.","Drawable getApplicationLogo(ApplicationInfo info) Retrieve the logo associated with an application.","int getComponentEnabledSetting(ComponentName componentName) Return the enabled setting for a package component (activity, receiver, service, provider).","Drawable getDefaultActivityIcon() Return the generic icon for an activity that is used when no specific icon is defined.","Drawable getDrawable(String packageName, int resid, ApplicationInfo appInfo) Retrieve an image from a package.","List<ApplicationInfo> getInstalledApplications(int flags) Return a List of all application packages that are installed on the device.","List<PackageInfo> getInstalledPackages(int flags) Return a List of all packages that are installed on the device.","String getInstallerPackageName(String packageName) Retrieve the package name of the application that installed a package.","InstrumentationInfo getInstrumentationInfo(ComponentName className, int flags) Retrieve all of the information we know about a particular instrumentation class.","Intent getLaunchIntentForPackage(String packageName) Returns a \"good\" intent to launch a front-door activity in a package.","Intent getLeanbackLaunchIntentForPackage(String packageName) Return a \"good\" intent to launch a front-door Leanback activity in a package, for use for example to implement an \"open\" button when browsing through packages.","String getNameForUid(int uid) Retrieve the official name associated with a user id.","PackageInfo getPackageArchiveInfo(String archiveFilePath, int flags) Retrieve overall information about an application package defined in a package archive file","int[] getPackageGids(String packageName) Return an array of all of the secondary group-ids that have been assigned to a package.","PackageInfo getPackageInfo(String packageName, int flags) Retrieve overall information about an application package that is installed on the system.","String[] getPackagesForUid(int uid) Retrieve the names of all packages that are associated with a particular user id.","List<PackageInfo> getPackagesHoldingPermissions(String[] permissions, int flags) Return a List of all installed packages that are currently holding any of the given permissions.","PermissionGroupInfo getPermissionGroupInfo(String name, int flags) Retrieve all of the information we know about a particular group of permissions.","PermissionInfo getPermissionInfo(String name, int flags) Retrieve all of the information we know about a particular permission.","int getPreferredActivities(List<IntentFilter> outFilters, List<ComponentName> outActivities, String packageName) Retrieve all preferred activities, previously added with addPreferredActivity(IntentFilter, int, ComponentName[], ComponentName), that are currently registered with the system.","List<PackageInfo> getPreferredPackages(int flags) Retrieve the list of all currently configured preferred packages.","ProviderInfo getProviderInfo(ComponentName className, int flags) Retrieve all of the information we know about a particular content provider class.","ActivityInfo getReceiverInfo(ComponentName className, int flags) Retrieve all of the information we know about a particular receiver class.","Resources getResourcesForActivity(ComponentName activityName) Retrieve the resources associated with an activity.","Resources getResourcesForApplication(String appPackageName) Retrieve the resources associated with an application.","Resources getResourcesForApplication(ApplicationInfo app) Retrieve the resources for an application.","ServiceInfo getServiceInfo(ComponentName className, int flags) Retrieve all of the information we know about a particular service class.","FeatureInfo[] getSystemAvailableFeatures() Get a list of features that are available on the system.","String[] getSystemSharedLibraryNames() Get a list of shared libraries that are available on the system.","CharSequence getText(String packageName, int resid, ApplicationInfo appInfo) Retrieve text from a package.","Drawable getUserBadgedDrawableForDensity(Drawable drawable, UserHandle user, Rect badgeLocation, int badgeDensity) If the target user is a managed profile of the calling user or the caller is itself a managed profile, then this returns a badged copy of the given drawable allowing the user to distinguish it from the original drawable.","Drawable getUserBadgedIcon(Drawable icon, UserHandle user) If the target user is a managed profile of the calling user or the caller is itself a managed profile, then this returns a badged copy of the given icon to be able to distinguish it from the original icon.","CharSequence getUserBadgedLabel(CharSequence label, UserHandle user) If the target user is a managed profile of the calling user or the caller is itself a managed profile, then this returns a copy of the label with badging for accessibility services like talkback.","XmlResourceParser getXml(String packageName, int resid, ApplicationInfo appInfo) Retrieve an XML file from a package.","boolean hasSystemFeature(String name) Check whether the given feature name is one of the available features as returned by getSystemAvailableFeatures().","boolean isSafeMode() Return whether the device has been booted into safe mode.","List<ResolveInfo> queryBroadcastReceivers(Intent intent, int flags) Retrieve all receivers that can handle a broadcast of the given intent.","List<ProviderInfo> queryContentProviders(String processName, int uid, int flags) Retrieve content provider information.","List<InstrumentationInfo> queryInstrumentation(String targetPackage, int flags) Retrieve information about available instrumentation code.","List<ResolveInfo> queryIntentActivities(Intent intent, int flags) Retrieve all activities that can be performed for the given intent.","List<ResolveInfo> queryIntentActivityOptions(ComponentName caller, Intent[] specifics, Intent intent, int flags) Retrieve a set of activities that should be presented to the user as similar options.","List<ResolveInfo> queryIntentContentProviders(Intent intent, int flags) Retrieve all providers that can match the given intent.","List<ResolveInfo> queryIntentServices(Intent intent, int flags) Retrieve all services that can match the given intent.","List<PermissionInfo> queryPermissionsByGroup(String group, int flags) Query for all of the permissions associated with a particular group.","void removePackageFromPreferred(String packageName) This method is deprecated. This function no longer does anything; it was an old approach to managing preferred activities, which has been superseded by (and conflicts with) the modern activity-based preferences.","void removePermission(String name) Removes a permission that was previously added with addPermission(PermissionInfo).","ResolveInfo resolveActivity(Intent intent, int flags) Determine the best action to perform for a given Intent.","ProviderInfo resolveContentProvider(String name, int flags) Find a single content provider by its base path name.","ResolveInfo resolveService(Intent intent, int flags) Determine the best service to handle for a given Intent.","void setApplicationEnabledSetting(String packageName, int newState, int flags) Set the enabled setting for an application This setting will override any enabled state which may have been set by the application in its manifest.","void setComponentEnabledSetting(ComponentName componentName, int newState, int flags) Set the enabled setting for a package component (activity, receiver, service, provider).","void setInstallerPackageName(String targetPackage, String installerPackageName) Change the installer associated with a given package.","void verifyPendingInstall(int id, int verificationCode) Allows a package listening to the package verification broadcast to respond to the package manager.","[Expand] Inherited Methods","From class android.content.pm.PackageManager abstract void addPackageToPreferred(String packageName) This method was deprecated in API level 7. This function no longer does anything; it was an old approach to managing preferred activities, which has been superseded by (and conflicts with) the modern activity-based preferences. abstract boolean addPermission(PermissionInfo info) Add a new dynamic permission to the system. abstract boolean addPermissionAsync(PermissionInfo info) Like addPermission(PermissionInfo) but asynchronously persists the package manager state after returning from the call, allowing it to return quicker and batch a series of adds at the expense of no guarantee the added permission will be retained if the device is rebooted before it is written. abstract void addPreferredActivity(IntentFilter filter, int match, ComponentName[] set, ComponentName activity) This method was deprecated in API level 8. This is a protected API that should not have been available to third party applications. It is the platform's responsibility for assigning preferred activities and this cannot be directly modified. Add a new preferred activity mapping to the system. This will be used to automatically select the given activity component when Context.startActivity() finds multiple matching activities and also matches the given filter. abstract String[] canonicalToCurrentPackageNames(String[] names) Map from a packages canonical name to the current name in use on the device. abstract int checkPermission(String permName, String pkgName) Check whether a particular package has been granted a particular permission. abstract int checkSignatures(int uid1, int uid2) Like checkSignatures(String, String), but takes UIDs of the two packages to be checked. abstract int checkSignatures(String pkg1, String pkg2) Compare the signatures of two packages to determine if the same signature appears in both of them. abstract void clearPackagePreferredActivities(String packageName) Remove all preferred activity mappings, previously added with addPreferredActivity(IntentFilter, int, ComponentName[], ComponentName), from the system whose activities are implemented in the given package name. abstract String[] currentToCanonicalPackageNames(String[] names) Map from the current package names in use on the device to whatever the current canonical name of that package is. abstract void extendVerificationTimeout(int id, int verificationCodeAtTimeout, long millisecondsToDelay) Allows a package listening to the package verification broadcast to extend the default timeout for a response and declare what action to perform after the timeout occurs. abstract Drawable getActivityBanner(Intent intent) Retrieve the banner associated with an Intent. abstract Drawable getActivityBanner(ComponentName activityName) Retrieve the banner associated with an activity. abstract Drawable getActivityIcon(Intent intent) Retrieve the icon associated with an Intent. abstract Drawable getActivityIcon(ComponentName activityName) Retrieve the icon associated with an activity. abstract ActivityInfo getActivityInfo(ComponentName component, int flags) Retrieve all of the information we know about a particular activity class. abstract Drawable getActivityLogo(Intent intent) Retrieve the logo associated with an Intent. abstract Drawable getActivityLogo(ComponentName activityName) Retrieve the logo associated with an activity. abstract List<PermissionGroupInfo> getAllPermissionGroups(int flags) Retrieve all of the known permission groups in the system. abstract Drawable getApplicationBanner(ApplicationInfo info) Retrieve the banner associated with an application. abstract Drawable getApplicationBanner(String packageName) Retrieve the banner associated with an application. abstract int getApplicationEnabledSetting(String packageName) Return the enabled setting for an application. abstract Drawable getApplicationIcon(String packageName) Retrieve the icon associated with an application. abstract Drawable getApplicationIcon(ApplicationInfo info) Retrieve the icon associated with an application. abstract ApplicationInfo getApplicationInfo(String packageName, int flags) Retrieve all of the information we know about a particular package/application. abstract CharSequence getApplicationLabel(ApplicationInfo info) Return the label to use for this application. abstract Drawable getApplicationLogo(String packageName) Retrieve the logo associated with an application. abstract Drawable getApplicationLogo(ApplicationInfo info) Retrieve the logo associated with an application. abstract int getComponentEnabledSetting(ComponentName componentName) Return the enabled setting for a package component (activity, receiver, service, provider). abstract Drawable getDefaultActivityIcon() Return the generic icon for an activity that is used when no specific icon is defined. abstract Drawable getDrawable(String packageName, int resid, ApplicationInfo appInfo) Retrieve an image from a package. abstract List<ApplicationInfo> getInstalledApplications(int flags) Return a List of all application packages that are installed on the device. abstract List<PackageInfo> getInstalledPackages(int flags) Return a List of all packages that are installed on the device. abstract String getInstallerPackageName(String packageName) Retrieve the package name of the application that installed a package. abstract InstrumentationInfo getInstrumentationInfo(ComponentName className, int flags) Retrieve all of the information we know about a particular instrumentation class. abstract Intent getLaunchIntentForPackage(String packageName) Returns a \"good\" intent to launch a front-door activity in a package. abstract Intent getLeanbackLaunchIntentForPackage(String packageName) Return a \"good\" intent to launch a front-door Leanback activity in a package, for use for example to implement an \"open\" button when browsing through packages. abstract String getNameForUid(int uid) Retrieve the official name associated with a user id. PackageInfo getPackageArchiveInfo(String archiveFilePath, int flags) Retrieve overall information about an application package defined in a package archive file abstract int[] getPackageGids(String packageName) Return an array of all of the secondary group-ids that have been assigned to a package. abstract PackageInfo getPackageInfo(String packageName, int flags) Retrieve overall information about an application package that is installed on the system. abstract PackageInstaller getPackageInstaller() Return interface that offers the ability to install, upgrade, and remove applications on the device. abstract String[] getPackagesForUid(int uid) Retrieve the names of all packages that are associated with a particular user id. abstract List<PackageInfo> getPackagesHoldingPermissions(String[] permissions, int flags) Return a List of all installed packages that are currently holding any of the given permissions. abstract PermissionGroupInfo getPermissionGroupInfo(String name, int flags) Retrieve all of the information we know about a particular group of permissions. abstract PermissionInfo getPermissionInfo(String name, int flags) Retrieve all of the information we know about a particular permission. abstract int getPreferredActivities(List<IntentFilter> outFilters, List<ComponentName> outActivities, String packageName) Retrieve all preferred activities, previously added with addPreferredActivity(IntentFilter, int, ComponentName[], ComponentName), that are currently registered with the system. abstract List<PackageInfo> getPreferredPackages(int flags) Retrieve the list of all currently configured preferred packages. abstract ProviderInfo getProviderInfo(ComponentName component, int flags) Retrieve all of the information we know about a particular content provider class. abstract ActivityInfo getReceiverInfo(ComponentName component, int flags) Retrieve all of the information we know about a particular receiver class. abstract Resources getResourcesForActivity(ComponentName activityName) Retrieve the resources associated with an activity. abstract Resources getResourcesForApplication(String appPackageName) Retrieve the resources associated with an application. abstract Resources getResourcesForApplication(ApplicationInfo app) Retrieve the resources for an application. abstract ServiceInfo getServiceInfo(ComponentName component, int flags) Retrieve all of the information we know about a particular service class. abstract FeatureInfo[] getSystemAvailableFeatures() Get a list of features that are available on the system. abstract String[] getSystemSharedLibraryNames() Get a list of shared libraries that are available on the system. abstract CharSequence getText(String packageName, int resid, ApplicationInfo appInfo) Retrieve text from a package. abstract Drawable getUserBadgedDrawableForDensity(Drawable drawable, UserHandle user, Rect badgeLocation, int badgeDensity) If the target user is a managed profile of the calling user or the caller is itself a managed profile, then this returns a badged copy of the given drawable allowing the user to distinguish it from the original drawable. abstract Drawable getUserBadgedIcon(Drawable icon, UserHandle user) If the target user is a managed profile of the calling user or the caller is itself a managed profile, then this returns a badged copy of the given icon to be able to distinguish it from the original icon. abstract CharSequence getUserBadgedLabel(CharSequence label, UserHandle user) If the target user is a managed profile of the calling user or the caller is itself a managed profile, then this returns a copy of the label with badging for accessibility services like talkback. abstract XmlResourceParser getXml(String packageName, int resid, ApplicationInfo appInfo) Retrieve an XML file from a package. abstract boolean hasSystemFeature(String name) Check whether the given feature name is one of the available features as returned by getSystemAvailableFeatures(). abstract boolean isSafeMode() Return whether the device has been booted into safe mode. abstract List<ResolveInfo> queryBroadcastReceivers(Intent intent, int flags) Retrieve all receivers that can handle a broadcast of the given intent. abstract List<ProviderInfo> queryContentProviders(String processName, int uid, int flags) Retrieve content provider information. abstract List<InstrumentationInfo> queryInstrumentation(String targetPackage, int flags) Retrieve information about available instrumentation code. abstract List<ResolveInfo> queryIntentActivities(Intent intent, int flags) Retrieve all activities that can be performed for the given intent. abstract List<ResolveInfo> queryIntentActivityOptions(ComponentName caller, Intent[] specifics, Intent intent, int flags) Retrieve a set of activities that should be presented to the user as similar options. abstract List<ResolveInfo> queryIntentContentProviders(Intent intent, int flags) Retrieve all providers that can match the given intent. abstract List<ResolveInfo> queryIntentServices(Intent intent, int flags) Retrieve all services that can match the given intent. abstract List<PermissionInfo> queryPermissionsByGroup(String group, int flags) Query for all of the permissions associated with a particular group. abstract void removePackageFromPreferred(String packageName) This method was deprecated in API level 7. This function no longer does anything; it was an old approach to managing preferred activities, which has been superseded by (and conflicts with) the modern activity-based preferences. abstract void removePermission(String name) Removes a permission that was previously added with addPermission(PermissionInfo). abstract ResolveInfo resolveActivity(Intent intent, int flags) Determine the best action to perform for a given Intent. abstract ProviderInfo resolveContentProvider(String name, int flags) Find a single content provider by its base path name. abstract ResolveInfo resolveService(Intent intent, int flags) Determine the best service to handle for a given Intent. abstract void setApplicationEnabledSetting(String packageName, int newState, int flags) Set the enabled setting for an application This setting will override any enabled state which may have been set by the application in its manifest. abstract void setComponentEnabledSetting(ComponentName componentName, int newState, int flags) Set the enabled setting for a package component (activity, receiver, service, provider). abstract void setInstallerPackageName(String targetPackage, String installerPackageName) Change the installer associated with a given package. abstract void verifyPendingInstall(int id, int verificationCode) Allows a package listening to the package verification broadcast to respond to the package manager.","abstract void addPackageToPreferred(String packageName) This method was deprecated in API level 7. This function no longer does anything; it was an old approach to managing preferred activities, which has been superseded by (and conflicts with) the modern activity-based preferences.","abstract boolean addPermission(PermissionInfo info) Add a new dynamic permission to the system.","abstract boolean addPermissionAsync(PermissionInfo info) Like addPermission(PermissionInfo) but asynchronously persists the package manager state after returning from the call, allowing it to return quicker and batch a series of adds at the expense of no guarantee the added permission will be retained if the device is rebooted before it is written.","abstract void addPreferredActivity(IntentFilter filter, int match, ComponentName[] set, ComponentName activity) This method was deprecated in API level 8. This is a protected API that should not have been available to third party applications. It is the platform's responsibility for assigning preferred activities and this cannot be directly modified. Add a new preferred activity mapping to the system. This will be used to automatically select the given activity component when Context.startActivity() finds multiple matching activities and also matches the given filter.","abstract String[] canonicalToCurrentPackageNames(String[] names) Map from a packages canonical name to the current name in use on the device.","abstract int checkPermission(String permName, String pkgName) Check whether a particular package has been granted a particular permission.","abstract int checkSignatures(int uid1, int uid2) Like checkSignatures(String, String), but takes UIDs of the two packages to be checked.","abstract int checkSignatures(String pkg1, String pkg2) Compare the signatures of two packages to determine if the same signature appears in both of them.","abstract void clearPackagePreferredActivities(String packageName) Remove all preferred activity mappings, previously added with addPreferredActivity(IntentFilter, int, ComponentName[], ComponentName), from the system whose activities are implemented in the given package name.","abstract String[] currentToCanonicalPackageNames(String[] names) Map from the current package names in use on the device to whatever the current canonical name of that package is.","abstract void extendVerificationTimeout(int id, int verificationCodeAtTimeout, long millisecondsToDelay) Allows a package listening to the package verification broadcast to extend the default timeout for a response and declare what action to perform after the timeout occurs.","abstract Drawable getActivityBanner(Intent intent) Retrieve the banner associated with an Intent.","abstract Drawable getActivityBanner(ComponentName activityName) Retrieve the banner associated with an activity.","abstract Drawable getActivityIcon(Intent intent) Retrieve the icon associated with an Intent.","abstract Drawable getActivityIcon(ComponentName activityName) Retrieve the icon associated with an activity.","abstract ActivityInfo getActivityInfo(ComponentName component, int flags) Retrieve all of the information we know about a particular activity class.","abstract Drawable getActivityLogo(Intent intent) Retrieve the logo associated with an Intent.","abstract Drawable getActivityLogo(ComponentName activityName) Retrieve the logo associated with an activity.","abstract List<PermissionGroupInfo> getAllPermissionGroups(int flags) Retrieve all of the known permission groups in the system.","abstract Drawable getApplicationBanner(ApplicationInfo info) Retrieve the banner associated with an application.","abstract Drawable getApplicationBanner(String packageName) Retrieve the banner associated with an application.","abstract int getApplicationEnabledSetting(String packageName) Return the enabled setting for an application.","abstract Drawable getApplicationIcon(String packageName) Retrieve the icon associated with an application.","abstract Drawable getApplicationIcon(ApplicationInfo info) Retrieve the icon associated with an application.","abstract ApplicationInfo getApplicationInfo(String packageName, int flags) Retrieve all of the information we know about a particular package/application.","abstract CharSequence getApplicationLabel(ApplicationInfo info) Return the label to use for this application.","abstract Drawable getApplicationLogo(String packageName) Retrieve the logo associated with an application.","abstract Drawable getApplicationLogo(ApplicationInfo info) Retrieve the logo associated with an application.","abstract int getComponentEnabledSetting(ComponentName componentName) Return the enabled setting for a package component (activity, receiver, service, provider).","abstract Drawable getDefaultActivityIcon() Return the generic icon for an activity that is used when no specific icon is defined.","abstract Drawable getDrawable(String packageName, int resid, ApplicationInfo appInfo) Retrieve an image from a package.","abstract List<ApplicationInfo> getInstalledApplications(int flags) Return a List of all application packages that are installed on the device.","abstract List<PackageInfo> getInstalledPackages(int flags) Return a List of all packages that are installed on the device.","abstract String getInstallerPackageName(String packageName) Retrieve the package name of the application that installed a package.","abstract InstrumentationInfo getInstrumentationInfo(ComponentName className, int flags) Retrieve all of the information we know about a particular instrumentation class.","abstract Intent getLaunchIntentForPackage(String packageName) Returns a \"good\" intent to launch a front-door activity in a package.","abstract Intent getLeanbackLaunchIntentForPackage(String packageName) Return a \"good\" intent to launch a front-door Leanback activity in a package, for use for example to implement an \"open\" button when browsing through packages.","abstract String getNameForUid(int uid) Retrieve the official name associated with a user id.","PackageInfo getPackageArchiveInfo(String archiveFilePath, int flags) Retrieve overall information about an application package defined in a package archive file","abstract int[] getPackageGids(String packageName) Return an array of all of the secondary group-ids that have been assigned to a package.","abstract PackageInfo getPackageInfo(String packageName, int flags) Retrieve overall information about an application package that is installed on the system.","abstract PackageInstaller getPackageInstaller() Return interface that offers the ability to install, upgrade, and remove applications on the device.","abstract String[] getPackagesForUid(int uid) Retrieve the names of all packages that are associated with a particular user id.","abstract List<PackageInfo> getPackagesHoldingPermissions(String[] permissions, int flags) Return a List of all installed packages that are currently holding any of the given permissions.","abstract PermissionGroupInfo getPermissionGroupInfo(String name, int flags) Retrieve all of the information we know about a particular group of permissions.","abstract PermissionInfo getPermissionInfo(String name, int flags) Retrieve all of the information we know about a particular permission.","abstract int getPreferredActivities(List<IntentFilter> outFilters, List<ComponentName> outActivities, String packageName) Retrieve all preferred activities, previously added with addPreferredActivity(IntentFilter, int, ComponentName[], ComponentName), that are currently registered with the system.","abstract List<PackageInfo> getPreferredPackages(int flags) Retrieve the list of all currently configured preferred packages.","abstract ProviderInfo getProviderInfo(ComponentName component, int flags) Retrieve all of the information we know about a particular content provider class.","abstract ActivityInfo getReceiverInfo(ComponentName component, int flags) Retrieve all of the information we know about a particular receiver class.","abstract Resources getResourcesForActivity(ComponentName activityName) Retrieve the resources associated with an activity.","abstract Resources getResourcesForApplication(String appPackageName) Retrieve the resources associated with an application.","abstract Resources getResourcesForApplication(ApplicationInfo app) Retrieve the resources for an application.","abstract ServiceInfo getServiceInfo(ComponentName component, int flags) Retrieve all of the information we know about a particular service class.","abstract FeatureInfo[] getSystemAvailableFeatures() Get a list of features that are available on the system.","abstract String[] getSystemSharedLibraryNames() Get a list of shared libraries that are available on the system.","abstract CharSequence getText(String packageName, int resid, ApplicationInfo appInfo) Retrieve text from a package.","abstract Drawable getUserBadgedDrawableForDensity(Drawable drawable, UserHandle user, Rect badgeLocation, int badgeDensity) If the target user is a managed profile of the calling user or the caller is itself a managed profile, then this returns a badged copy of the given drawable allowing the user to distinguish it from the original drawable.","abstract Drawable getUserBadgedIcon(Drawable icon, UserHandle user) If the target user is a managed profile of the calling user or the caller is itself a managed profile, then this returns a badged copy of the given icon to be able to distinguish it from the original icon.","abstract CharSequence getUserBadgedLabel(CharSequence label, UserHandle user) If the target user is a managed profile of the calling user or the caller is itself a managed profile, then this returns a copy of the label with badging for accessibility services like talkback.","abstract XmlResourceParser getXml(String packageName, int resid, ApplicationInfo appInfo) Retrieve an XML file from a package.","abstract boolean hasSystemFeature(String name) Check whether the given feature name is one of the available features as returned by getSystemAvailableFeatures().","abstract boolean isSafeMode() Return whether the device has been booted into safe mode.","abstract List<ResolveInfo> queryBroadcastReceivers(Intent intent, int flags) Retrieve all receivers that can handle a broadcast of the given intent.","abstract List<ProviderInfo> queryContentProviders(String processName, int uid, int flags) Retrieve content provider information.","abstract List<InstrumentationInfo> queryInstrumentation(String targetPackage, int flags) Retrieve information about available instrumentation code.","abstract List<ResolveInfo> queryIntentActivities(Intent intent, int flags) Retrieve all activities that can be performed for the given intent.","abstract List<ResolveInfo> queryIntentActivityOptions(ComponentName caller, Intent[] specifics, Intent intent, int flags) Retrieve a set of activities that should be presented to the user as similar options.","abstract List<ResolveInfo> queryIntentContentProviders(Intent intent, int flags) Retrieve all providers that can match the given intent.","abstract List<ResolveInfo> queryIntentServices(Intent intent, int flags) Retrieve all services that can match the given intent.","abstract List<PermissionInfo> queryPermissionsByGroup(String group, int flags) Query for all of the permissions associated with a particular group.","abstract void removePackageFromPreferred(String packageName) This method was deprecated in API level 7. This function no longer does anything; it was an old approach to managing preferred activities, which has been superseded by (and conflicts with) the modern activity-based preferences.","abstract void removePermission(String name) Removes a permission that was previously added with addPermission(PermissionInfo).","abstract ResolveInfo resolveActivity(Intent intent, int flags) Determine the best action to perform for a given Intent.","abstract ProviderInfo resolveContentProvider(String name, int flags) Find a single content provider by its base path name.","abstract ResolveInfo resolveService(Intent intent, int flags) Determine the best service to handle for a given Intent.","abstract void setApplicationEnabledSetting(String packageName, int newState, int flags) Set the enabled setting for an application This setting will override any enabled state which may have been set by the application in its manifest.","abstract void setComponentEnabledSetting(ComponentName componentName, int newState, int flags) Set the enabled setting for a package component (activity, receiver, service, provider).","abstract void setInstallerPackageName(String targetPackage, String installerPackageName) Change the installer associated with a given package.","abstract void verifyPendingInstall(int id, int verificationCode) Allows a package listening to the package verification broadcast to respond to the package manager.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.test.mock","constants":["[Expand] Inherited Constants","From class android.content.pm.PackageManager int COMPONENT_ENABLED_STATE_DEFAULT Flag for setApplicationEnabledSetting(String, int, int) and setComponentEnabledSetting(ComponentName, int, int): This component or application is in its default enabled state (as specified in its manifest). int COMPONENT_ENABLED_STATE_DISABLED Flag for setApplicationEnabledSetting(String, int, int) and setComponentEnabledSetting(ComponentName, int, int): This component or application has been explicitly disabled, regardless of what it has specified in its manifest. int COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED Flag for setApplicationEnabledSetting(String, int, int) only: This application should be considered, until the point where the user actually wants to use it. int COMPONENT_ENABLED_STATE_DISABLED_USER Flag for setApplicationEnabledSetting(String, int, int) only: The user has explicitly disabled the application, regardless of what it has specified in its manifest. int COMPONENT_ENABLED_STATE_ENABLED Flag for setApplicationEnabledSetting(String, int, int) and setComponentEnabledSetting(ComponentName, int, int): This component or application has been explictily enabled, regardless of what it has specified in its manifest. int DONT_KILL_APP Flag parameter for setComponentEnabledSetting(android.content.ComponentName, int, int) to indicate that you don't want to kill the app containing the component. String EXTRA_VERIFICATION_ID Extra field name for the ID of a package pending verification. String EXTRA_VERIFICATION_RESULT Extra field name for the result of a verification, either VERIFICATION_ALLOW, or VERIFICATION_REJECT. String FEATURE_APP_WIDGETS Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports app widgets. String FEATURE_AUDIO_LOW_LATENCY Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device's audio pipeline is low-latency, more suitable for audio applications sensitive to delays or lag in sound input or output. String FEATURE_AUDIO_OUTPUT Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device includes at least one form of audio output, such as speakers, audio jack or streaming over bluetooth String FEATURE_BACKUP Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device can perform backup and restore operations on installed applications. String FEATURE_BLUETOOTH Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device is capable of communicating with other devices via Bluetooth. String FEATURE_BLUETOOTH_LE Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device is capable of communicating with other devices via Bluetooth Low Energy radio. String FEATURE_CAMERA Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device has a camera facing away from the screen. String FEATURE_CAMERA_ANY Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device has at least one camera pointing in some direction, or can support an external camera being connected to it. String FEATURE_CAMERA_AUTOFOCUS Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device's camera supports auto-focus. String FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING Feature for getSystemAvailableFeatures() and hasSystemFeature(String): At least one of the cameras on the device supports the manual post-processing capability level. String FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR Feature for getSystemAvailableFeatures() and hasSystemFeature(String): At least one of the cameras on the device supports the manual sensor capability level. String FEATURE_CAMERA_CAPABILITY_RAW Feature for getSystemAvailableFeatures() and hasSystemFeature(String): At least one of the cameras on the device supports the RAW capability level. String FEATURE_CAMERA_EXTERNAL Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device can support having an external camera connected to it. String FEATURE_CAMERA_FLASH Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device's camera supports flash. String FEATURE_CAMERA_FRONT Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device has a front facing camera. String FEATURE_CAMERA_LEVEL_FULL Feature for getSystemAvailableFeatures() and hasSystemFeature(String): At least one of the cameras on the device supports the full hardware capability level. String FEATURE_CONNECTION_SERVICE Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The Connection Service API is enabled on the device. String FEATURE_CONSUMER_IR Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device is capable of communicating with consumer IR devices. String FEATURE_DEVICE_ADMIN Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports device policy enforcement via device admins. String FEATURE_FAKETOUCH Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device does not have a touch screen, but does support touch emulation for basic events. String FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device does not have a touch screen, but does support touch emulation for basic events that supports distinct tracking of two or more fingers. String FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device does not have a touch screen, but does support touch emulation for basic events that supports tracking a hand of fingers (5 or more fingers) fully independently. String FEATURE_GAMEPAD Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device has all of the inputs necessary to be considered a compatible game controller, or includes a compatible game controller in the box. String FEATURE_HOME_SCREEN Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports a home screen that is replaceable by third party applications. String FEATURE_INPUT_METHODS Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports adding new input methods implemented with the InputMethodService API. String FEATURE_LEANBACK Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports leanback UI. String FEATURE_LIVE_TV Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports live TV and can display contents from TV inputs implemented with the TvInputService API. String FEATURE_LIVE_WALLPAPER Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports live wallpapers. String FEATURE_LOCATION Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports one or more methods of reporting current location. String FEATURE_LOCATION_GPS Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device has a Global Positioning System receiver and can report precise location. String FEATURE_LOCATION_NETWORK Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device can report location with coarse accuracy using a network-based geolocation system. String FEATURE_MANAGED_USERS Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports creating secondary users and managed profiles via DevicePolicyManager. String FEATURE_MICROPHONE Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device can record audio via a microphone. String FEATURE_NFC Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device can communicate using Near-Field Communications (NFC). String FEATURE_NFC_HOST_CARD_EMULATION Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports host- based NFC card emulation. String FEATURE_OPENGLES_EXTENSION_PACK Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports the OpenGL ES Android Extension Pack. String FEATURE_PRINTING Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports printing. String FEATURE_SCREEN_LANDSCAPE Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports landscape orientation screens. String FEATURE_SCREEN_PORTRAIT Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports portrait orientation screens. String FEATURE_SECURELY_REMOVES_USERS Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports secure removal of users. String FEATURE_SENSOR_ACCELEROMETER Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device includes an accelerometer. String FEATURE_SENSOR_AMBIENT_TEMPERATURE Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device includes an ambient temperature sensor. String FEATURE_SENSOR_BAROMETER Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device includes a barometer (air pressure sensor.) String FEATURE_SENSOR_COMPASS Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device includes a magnetometer (compass). String FEATURE_SENSOR_GYROSCOPE Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device includes a gyroscope. String FEATURE_SENSOR_HEART_RATE Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device includes a heart rate monitor. String FEATURE_SENSOR_HEART_RATE_ECG Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The heart rate sensor on this device is an Electrocargiogram. String FEATURE_SENSOR_LIGHT Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device includes a light sensor. String FEATURE_SENSOR_PROXIMITY Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device includes a proximity sensor. String FEATURE_SENSOR_RELATIVE_HUMIDITY Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device includes a relative humidity sensor. String FEATURE_SENSOR_STEP_COUNTER Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device includes a hardware step counter. String FEATURE_SENSOR_STEP_DETECTOR Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device includes a hardware step detector. String FEATURE_SIP Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The SIP API is enabled on the device. String FEATURE_SIP_VOIP Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports SIP-based VOIP. String FEATURE_TELEPHONY Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device has a telephony radio with data communication support. String FEATURE_TELEPHONY_CDMA Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device has a CDMA telephony stack. String FEATURE_TELEPHONY_GSM Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device has a GSM telephony stack. String FEATURE_TELEVISION This constant was deprecated in API level 21. use FEATURE_LEANBACK instead. String FEATURE_TOUCHSCREEN Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device's display has a touch screen. String FEATURE_TOUCHSCREEN_MULTITOUCH Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device's touch screen supports multitouch sufficient for basic two-finger gesture detection. String FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device's touch screen is capable of tracking two or more fingers fully independently. String FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device's touch screen is capable of tracking a full hand of fingers fully independently -- that is, 5 or more simultaneous independent pointers. String FEATURE_USB_ACCESSORY Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports connecting to USB accessories. String FEATURE_USB_HOST Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports connecting to USB devices as the USB host. String FEATURE_VERIFIED_BOOT Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports verified boot. String FEATURE_WATCH Feature for getSystemAvailableFeatures() and hasSystemFeature(String): This is a device dedicated to showing UI on a watch. String FEATURE_WEBVIEW Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device has a full implementation of the android.webkit.* APIs. String FEATURE_WIFI Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports WiFi (802.11) networking. String FEATURE_WIFI_DIRECT Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports Wi-Fi Direct networking. int GET_ACTIVITIES PackageInfo flag: return information about activities in the package in activities. int GET_CONFIGURATIONS PackageInfo flag: return information about hardware preferences in PackageInfo.configPreferences, and requested features in reqFeatures and featureGroups. int GET_DISABLED_COMPONENTS PackageInfo flag: include disabled components in the returned info. int GET_DISABLED_UNTIL_USED_COMPONENTS PackageInfo flag: include disabled components which are in that state only because of COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED in the returned info. int GET_GIDS PackageInfo flag: return the group ids that are associated with an application. int GET_INSTRUMENTATION PackageInfo flag: return information about instrumentation in the package in instrumentation. int GET_INTENT_FILTERS PackageInfo flag: return information about the intent filters supported by the activity. int GET_META_DATA ComponentInfo flag: return the metaData data Bundles that are associated with a component. int GET_PERMISSIONS PackageInfo flag: return information about permissions in the package in permissions. int GET_PROVIDERS PackageInfo flag: return information about content providers in the package in providers. int GET_RECEIVERS PackageInfo flag: return information about intent receivers in the package in receivers. int GET_RESOLVED_FILTER ResolveInfo flag: return the IntentFilter that was matched for a particular ResolveInfo in filter. int GET_SERVICES PackageInfo flag: return information about services in the package in services. int GET_SHARED_LIBRARY_FILES ApplicationInfo flag: return the paths to the shared libraries that are associated with an application. int GET_SIGNATURES PackageInfo flag: return information about the signatures included in the package. int GET_UNINSTALLED_PACKAGES Flag parameter to retrieve some information about all applications (even uninstalled ones) which have data directories. int GET_URI_PERMISSION_PATTERNS ProviderInfo flag: return the URI permission patterns that are associated with a content provider. int MATCH_DEFAULT_ONLY Resolution and querying flag: if set, only filters that support the CATEGORY_DEFAULT will be considered for matching. long MAXIMUM_VERIFICATION_TIMEOUT Can be used as the millisecondsToDelay argument for extendVerificationTimeout(int, int, long). int PERMISSION_DENIED Permission check result: this is returned by checkPermission(String, String) if the permission has not been granted to the given package. int PERMISSION_GRANTED Permission check result: this is returned by checkPermission(String, String) if the permission has been granted to the given package. int SIGNATURE_FIRST_NOT_SIGNED Signature check result: this is returned by checkSignatures(int, int) if the first package is not signed but the second is. int SIGNATURE_MATCH Signature check result: this is returned by checkSignatures(int, int) if all signatures on the two packages match. int SIGNATURE_NEITHER_SIGNED Signature check result: this is returned by checkSignatures(int, int) if neither of the two packages is signed. int SIGNATURE_NO_MATCH Signature check result: this is returned by checkSignatures(int, int) if not all signatures on both packages match. int SIGNATURE_SECOND_NOT_SIGNED Signature check result: this is returned by checkSignatures(int, int) if the second package is not signed but the first is. int SIGNATURE_UNKNOWN_PACKAGE Signature check result: this is returned by checkSignatures(int, int) if either of the packages are not valid. int VERIFICATION_ALLOW Used as the verificationCode argument for verifyPendingInstall(int, int) to indicate that the calling package verifier allows the installation to proceed. int VERIFICATION_REJECT Used as the verificationCode argument for verifyPendingInstall(int, int) to indicate the calling package verifier does not vote to allow the installation to proceed.","int COMPONENT_ENABLED_STATE_DEFAULT Flag for setApplicationEnabledSetting(String, int, int) and setComponentEnabledSetting(ComponentName, int, int): This component or application is in its default enabled state (as specified in its manifest).","int COMPONENT_ENABLED_STATE_DISABLED Flag for setApplicationEnabledSetting(String, int, int) and setComponentEnabledSetting(ComponentName, int, int): This component or application has been explicitly disabled, regardless of what it has specified in its manifest.","int COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED Flag for setApplicationEnabledSetting(String, int, int) only: This application should be considered, until the point where the user actually wants to use it.","int COMPONENT_ENABLED_STATE_DISABLED_USER Flag for setApplicationEnabledSetting(String, int, int) only: The user has explicitly disabled the application, regardless of what it has specified in its manifest.","int COMPONENT_ENABLED_STATE_ENABLED Flag for setApplicationEnabledSetting(String, int, int) and setComponentEnabledSetting(ComponentName, int, int): This component or application has been explictily enabled, regardless of what it has specified in its manifest.","int DONT_KILL_APP Flag parameter for setComponentEnabledSetting(android.content.ComponentName, int, int) to indicate that you don't want to kill the app containing the component.","String EXTRA_VERIFICATION_ID Extra field name for the ID of a package pending verification.","String EXTRA_VERIFICATION_RESULT Extra field name for the result of a verification, either VERIFICATION_ALLOW, or VERIFICATION_REJECT.","String FEATURE_APP_WIDGETS Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports app widgets.","String FEATURE_AUDIO_LOW_LATENCY Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device's audio pipeline is low-latency, more suitable for audio applications sensitive to delays or lag in sound input or output.","String FEATURE_AUDIO_OUTPUT Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device includes at least one form of audio output, such as speakers, audio jack or streaming over bluetooth","String FEATURE_BACKUP Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device can perform backup and restore operations on installed applications.","String FEATURE_BLUETOOTH Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device is capable of communicating with other devices via Bluetooth.","String FEATURE_BLUETOOTH_LE Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device is capable of communicating with other devices via Bluetooth Low Energy radio.","String FEATURE_CAMERA Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device has a camera facing away from the screen.","String FEATURE_CAMERA_ANY Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device has at least one camera pointing in some direction, or can support an external camera being connected to it.","String FEATURE_CAMERA_AUTOFOCUS Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device's camera supports auto-focus.","String FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING Feature for getSystemAvailableFeatures() and hasSystemFeature(String): At least one of the cameras on the device supports the manual post-processing capability level.","String FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR Feature for getSystemAvailableFeatures() and hasSystemFeature(String): At least one of the cameras on the device supports the manual sensor capability level.","String FEATURE_CAMERA_CAPABILITY_RAW Feature for getSystemAvailableFeatures() and hasSystemFeature(String): At least one of the cameras on the device supports the RAW capability level.","String FEATURE_CAMERA_EXTERNAL Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device can support having an external camera connected to it.","String FEATURE_CAMERA_FLASH Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device's camera supports flash.","String FEATURE_CAMERA_FRONT Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device has a front facing camera.","String FEATURE_CAMERA_LEVEL_FULL Feature for getSystemAvailableFeatures() and hasSystemFeature(String): At least one of the cameras on the device supports the full hardware capability level.","String FEATURE_CONNECTION_SERVICE Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The Connection Service API is enabled on the device.","String FEATURE_CONSUMER_IR Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device is capable of communicating with consumer IR devices.","String FEATURE_DEVICE_ADMIN Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports device policy enforcement via device admins.","String FEATURE_FAKETOUCH Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device does not have a touch screen, but does support touch emulation for basic events.","String FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device does not have a touch screen, but does support touch emulation for basic events that supports distinct tracking of two or more fingers.","String FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device does not have a touch screen, but does support touch emulation for basic events that supports tracking a hand of fingers (5 or more fingers) fully independently.","String FEATURE_GAMEPAD Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device has all of the inputs necessary to be considered a compatible game controller, or includes a compatible game controller in the box.","String FEATURE_HOME_SCREEN Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports a home screen that is replaceable by third party applications.","String FEATURE_INPUT_METHODS Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports adding new input methods implemented with the InputMethodService API.","String FEATURE_LEANBACK Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports leanback UI.","String FEATURE_LIVE_TV Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports live TV and can display contents from TV inputs implemented with the TvInputService API.","String FEATURE_LIVE_WALLPAPER Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports live wallpapers.","String FEATURE_LOCATION Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports one or more methods of reporting current location.","String FEATURE_LOCATION_GPS Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device has a Global Positioning System receiver and can report precise location.","String FEATURE_LOCATION_NETWORK Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device can report location with coarse accuracy using a network-based geolocation system.","String FEATURE_MANAGED_USERS Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports creating secondary users and managed profiles via DevicePolicyManager.","String FEATURE_MICROPHONE Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device can record audio via a microphone.","String FEATURE_NFC Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device can communicate using Near-Field Communications (NFC).","String FEATURE_NFC_HOST_CARD_EMULATION Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports host- based NFC card emulation.","String FEATURE_OPENGLES_EXTENSION_PACK Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports the OpenGL ES Android Extension Pack.","String FEATURE_PRINTING Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports printing.","String FEATURE_SCREEN_LANDSCAPE Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports landscape orientation screens.","String FEATURE_SCREEN_PORTRAIT Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports portrait orientation screens.","String FEATURE_SECURELY_REMOVES_USERS Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports secure removal of users.","String FEATURE_SENSOR_ACCELEROMETER Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device includes an accelerometer.","String FEATURE_SENSOR_AMBIENT_TEMPERATURE Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device includes an ambient temperature sensor.","String FEATURE_SENSOR_BAROMETER Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device includes a barometer (air pressure sensor.)","String FEATURE_SENSOR_COMPASS Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device includes a magnetometer (compass).","String FEATURE_SENSOR_GYROSCOPE Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device includes a gyroscope.","String FEATURE_SENSOR_HEART_RATE Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device includes a heart rate monitor.","String FEATURE_SENSOR_HEART_RATE_ECG Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The heart rate sensor on this device is an Electrocargiogram.","String FEATURE_SENSOR_LIGHT Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device includes a light sensor.","String FEATURE_SENSOR_PROXIMITY Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device includes a proximity sensor.","String FEATURE_SENSOR_RELATIVE_HUMIDITY Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device includes a relative humidity sensor.","String FEATURE_SENSOR_STEP_COUNTER Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device includes a hardware step counter.","String FEATURE_SENSOR_STEP_DETECTOR Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device includes a hardware step detector.","String FEATURE_SIP Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The SIP API is enabled on the device.","String FEATURE_SIP_VOIP Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports SIP-based VOIP.","String FEATURE_TELEPHONY Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device has a telephony radio with data communication support.","String FEATURE_TELEPHONY_CDMA Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device has a CDMA telephony stack.","String FEATURE_TELEPHONY_GSM Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device has a GSM telephony stack.","String FEATURE_TELEVISION This constant was deprecated in API level 21. use FEATURE_LEANBACK instead.","String FEATURE_TOUCHSCREEN Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device's display has a touch screen.","String FEATURE_TOUCHSCREEN_MULTITOUCH Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device's touch screen supports multitouch sufficient for basic two-finger gesture detection.","String FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device's touch screen is capable of tracking two or more fingers fully independently.","String FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device's touch screen is capable of tracking a full hand of fingers fully independently -- that is, 5 or more simultaneous independent pointers.","String FEATURE_USB_ACCESSORY Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports connecting to USB accessories.","String FEATURE_USB_HOST Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports connecting to USB devices as the USB host.","String FEATURE_VERIFIED_BOOT Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports verified boot.","String FEATURE_WATCH Feature for getSystemAvailableFeatures() and hasSystemFeature(String): This is a device dedicated to showing UI on a watch.","String FEATURE_WEBVIEW Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device has a full implementation of the android.webkit.* APIs.","String FEATURE_WIFI Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports WiFi (802.11) networking.","String FEATURE_WIFI_DIRECT Feature for getSystemAvailableFeatures() and hasSystemFeature(String): The device supports Wi-Fi Direct networking.","int GET_ACTIVITIES PackageInfo flag: return information about activities in the package in activities.","int GET_CONFIGURATIONS PackageInfo flag: return information about hardware preferences in PackageInfo.configPreferences, and requested features in reqFeatures and featureGroups.","int GET_DISABLED_COMPONENTS PackageInfo flag: include disabled components in the returned info.","int GET_DISABLED_UNTIL_USED_COMPONENTS PackageInfo flag: include disabled components which are in that state only because of COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED in the returned info.","int GET_GIDS PackageInfo flag: return the group ids that are associated with an application.","int GET_INSTRUMENTATION PackageInfo flag: return information about instrumentation in the package in instrumentation.","int GET_INTENT_FILTERS PackageInfo flag: return information about the intent filters supported by the activity.","int GET_META_DATA ComponentInfo flag: return the metaData data Bundles that are associated with a component.","int GET_PERMISSIONS PackageInfo flag: return information about permissions in the package in permissions.","int GET_PROVIDERS PackageInfo flag: return information about content providers in the package in providers.","int GET_RECEIVERS PackageInfo flag: return information about intent receivers in the package in receivers.","int GET_RESOLVED_FILTER ResolveInfo flag: return the IntentFilter that was matched for a particular ResolveInfo in filter.","int GET_SERVICES PackageInfo flag: return information about services in the package in services.","int GET_SHARED_LIBRARY_FILES ApplicationInfo flag: return the paths to the shared libraries that are associated with an application.","int GET_SIGNATURES PackageInfo flag: return information about the signatures included in the package.","int GET_UNINSTALLED_PACKAGES Flag parameter to retrieve some information about all applications (even uninstalled ones) which have data directories.","int GET_URI_PERMISSION_PATTERNS ProviderInfo flag: return the URI permission patterns that are associated with a content provider.","int MATCH_DEFAULT_ONLY Resolution and querying flag: if set, only filters that support the CATEGORY_DEFAULT will be considered for matching.","long MAXIMUM_VERIFICATION_TIMEOUT Can be used as the millisecondsToDelay argument for extendVerificationTimeout(int, int, long).","int PERMISSION_DENIED Permission check result: this is returned by checkPermission(String, String) if the permission has not been granted to the given package.","int PERMISSION_GRANTED Permission check result: this is returned by checkPermission(String, String) if the permission has been granted to the given package.","int SIGNATURE_FIRST_NOT_SIGNED Signature check result: this is returned by checkSignatures(int, int) if the first package is not signed but the second is.","int SIGNATURE_MATCH Signature check result: this is returned by checkSignatures(int, int) if all signatures on the two packages match.","int SIGNATURE_NEITHER_SIGNED Signature check result: this is returned by checkSignatures(int, int) if neither of the two packages is signed.","int SIGNATURE_NO_MATCH Signature check result: this is returned by checkSignatures(int, int) if not all signatures on both packages match.","int SIGNATURE_SECOND_NOT_SIGNED Signature check result: this is returned by checkSignatures(int, int) if the second package is not signed but the first is.","int SIGNATURE_UNKNOWN_PACKAGE Signature check result: this is returned by checkSignatures(int, int) if either of the packages are not valid.","int VERIFICATION_ALLOW Used as the verificationCode argument for verifyPendingInstall(int, int) to indicate that the calling package verifier allows the installation to proceed.","int VERIFICATION_REJECT Used as the verificationCode argument for verifyPendingInstall(int, int) to indicate the calling package verifier does not vote to allow the installation to proceed."],"class":"MockPackageManager","constructors":[],"fields":[]}