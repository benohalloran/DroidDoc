{"methods":["static String actionToString(int action) Returns a string that represents the symbolic name of the specified unmasked action such as \"ACTION_DOWN\", \"ACTION_POINTER_DOWN(3)\" or an equivalent numeric constant such as \"35\" if unknown.","final void addBatch(long eventTime, PointerCoords[] pointerCoords, int metaState) Add a new movement to the batch of movements in this event.","final void addBatch(long eventTime, float x, float y, float pressure, float size, int metaState) Add a new movement to the batch of movements in this event.","static int axisFromString(String symbolicName) Gets an axis by its symbolic name such as \"AXIS_X\" or an equivalent numeric constant such as \"42\".","static String axisToString(int axis) Returns a string that represents the symbolic name of the specified axis such as \"AXIS_X\" or an equivalent numeric constant such as \"42\" if unknown.","final int findPointerIndex(int pointerId) Given a pointer identifier, find the index of its data in the event.","final int getAction() Return the kind of action being performed.","final int getActionIndex() For ACTION_POINTER_DOWN or ACTION_POINTER_UP as returned by getActionMasked(), this returns the associated pointer index.","final int getActionMasked() Return the masked action being performed, without pointer index information.","final float getAxisValue(int axis) getAxisValue(int) for the first pointer index (may be an arbitrary pointer identifier).","final float getAxisValue(int axis, int pointerIndex) Returns the value of the requested axis for the given pointer index (use getPointerId(int) to find the pointer identifier for this index).","final int getButtonState() Gets the state of all buttons that are pressed such as a mouse or stylus button.","final int getDeviceId() Gets the id for the device that this event came from.","final long getDownTime() Returns the time (in ms) when the user originally pressed down to start a stream of position events.","final int getEdgeFlags() Returns a bitfield indicating which edges, if any, were touched by this MotionEvent.","final long getEventTime() Retrieve the time this event occurred, in the uptimeMillis() time base.","final int getFlags() Gets the motion event flags.","final float getHistoricalAxisValue(int axis, int pointerIndex, int pos) Returns the historical value of the requested axis, as per getAxisValue(int, int), occurred between this event and the previous event for the given pointer.","final float getHistoricalAxisValue(int axis, int pos) getHistoricalAxisValue(int, int, int) for the first pointer index (may be an arbitrary pointer identifier).","final long getHistoricalEventTime(int pos) Returns the time that a historical movement occurred between this event and the previous event, in the uptimeMillis() time base.","final float getHistoricalOrientation(int pointerIndex, int pos) Returns a historical orientation coordinate, as per getOrientation(int), that occurred between this event and the previous event for the given pointer.","final float getHistoricalOrientation(int pos) getHistoricalOrientation(int, int) for the first pointer index (may be an arbitrary pointer identifier).","final void getHistoricalPointerCoords(int pointerIndex, int pos, MotionEvent.PointerCoords outPointerCoords) Populates a MotionEvent.PointerCoords object with historical pointer coordinate data, as per getPointerCoords(int, MotionEvent.PointerCoords), that occurred between this event and the previous event for the given pointer.","final float getHistoricalPressure(int pos) getHistoricalPressure(int, int) for the first pointer index (may be an arbitrary pointer identifier).","final float getHistoricalPressure(int pointerIndex, int pos) Returns a historical pressure coordinate, as per getPressure(int), that occurred between this event and the previous event for the given pointer.","final float getHistoricalSize(int pos) getHistoricalSize(int, int) for the first pointer index (may be an arbitrary pointer identifier).","final float getHistoricalSize(int pointerIndex, int pos) Returns a historical size coordinate, as per getSize(int), that occurred between this event and the previous event for the given pointer.","final float getHistoricalToolMajor(int pointerIndex, int pos) Returns a historical tool major axis coordinate, as per getToolMajor(int), that occurred between this event and the previous event for the given pointer.","final float getHistoricalToolMajor(int pos) getHistoricalToolMajor(int, int) for the first pointer index (may be an arbitrary pointer identifier).","final float getHistoricalToolMinor(int pointerIndex, int pos) Returns a historical tool minor axis coordinate, as per getToolMinor(int), that occurred between this event and the previous event for the given pointer.","final float getHistoricalToolMinor(int pos) getHistoricalToolMinor(int, int) for the first pointer index (may be an arbitrary pointer identifier).","final float getHistoricalTouchMajor(int pointerIndex, int pos) Returns a historical touch major axis coordinate, as per getTouchMajor(int), that occurred between this event and the previous event for the given pointer.","final float getHistoricalTouchMajor(int pos) getHistoricalTouchMajor(int, int) for the first pointer index (may be an arbitrary pointer identifier).","final float getHistoricalTouchMinor(int pointerIndex, int pos) Returns a historical touch minor axis coordinate, as per getTouchMinor(int), that occurred between this event and the previous event for the given pointer.","final float getHistoricalTouchMinor(int pos) getHistoricalTouchMinor(int, int) for the first pointer index (may be an arbitrary pointer identifier).","final float getHistoricalX(int pos) getHistoricalX(int, int) for the first pointer index (may be an arbitrary pointer identifier).","final float getHistoricalX(int pointerIndex, int pos) Returns a historical X coordinate, as per getX(int), that occurred between this event and the previous event for the given pointer.","final float getHistoricalY(int pos) getHistoricalY(int, int) for the first pointer index (may be an arbitrary pointer identifier).","final float getHistoricalY(int pointerIndex, int pos) Returns a historical Y coordinate, as per getY(int), that occurred between this event and the previous event for the given pointer.","final int getHistorySize() Returns the number of historical points in this event.","final int getMetaState() Returns the state of any meta / modifier keys that were in effect when the event was generated.","final float getOrientation(int pointerIndex) Returns the orientation of the touch area and tool area in radians clockwise from vertical for the given pointer index (use getPointerId(int) to find the pointer identifier for this index).","final float getOrientation() getOrientation(int) for the first pointer index (may be an arbitrary pointer identifier).","final void getPointerCoords(int pointerIndex, MotionEvent.PointerCoords outPointerCoords) Populates a MotionEvent.PointerCoords object with pointer coordinate data for the specified pointer index.","final int getPointerCount() The number of pointers of data contained in this event.","final int getPointerId(int pointerIndex) Return the pointer identifier associated with a particular pointer data index is this event.","final void getPointerProperties(int pointerIndex, MotionEvent.PointerProperties outPointerProperties) Populates a MotionEvent.PointerProperties object with pointer properties for the specified pointer index.","final float getPressure() getPressure(int) for the first pointer index (may be an arbitrary pointer identifier).","final float getPressure(int pointerIndex) Returns the current pressure of this event for the given pointer index (use getPointerId(int) to find the pointer identifier for this index).","final float getRawX() Returns the original raw X coordinate of this event.","final float getRawY() Returns the original raw Y coordinate of this event.","final float getSize(int pointerIndex) Returns a scaled value of the approximate size for the given pointer index (use getPointerId(int) to find the pointer identifier for this index).","final float getSize() getSize(int) for the first pointer index (may be an arbitrary pointer identifier).","final int getSource() Gets the source of the event.","final float getToolMajor(int pointerIndex) Returns the length of the major axis of an ellipse that describes the size of the approaching tool for the given pointer index (use getPointerId(int) to find the pointer identifier for this index).","final float getToolMajor() getToolMajor(int) for the first pointer index (may be an arbitrary pointer identifier).","final float getToolMinor() getToolMinor(int) for the first pointer index (may be an arbitrary pointer identifier).","final float getToolMinor(int pointerIndex) Returns the length of the minor axis of an ellipse that describes the size of the approaching tool for the given pointer index (use getPointerId(int) to find the pointer identifier for this index).","final int getToolType(int pointerIndex) Gets the tool type of a pointer for the given pointer index.","final float getTouchMajor() getTouchMajor(int) for the first pointer index (may be an arbitrary pointer identifier).","final float getTouchMajor(int pointerIndex) Returns the length of the major axis of an ellipse that describes the touch area at the point of contact for the given pointer index (use getPointerId(int) to find the pointer identifier for this index).","final float getTouchMinor() getTouchMinor(int) for the first pointer index (may be an arbitrary pointer identifier).","final float getTouchMinor(int pointerIndex) Returns the length of the minor axis of an ellipse that describes the touch area at the point of contact for the given pointer index (use getPointerId(int) to find the pointer identifier for this index).","final float getX(int pointerIndex) Returns the X coordinate of this event for the given pointer index (use getPointerId(int) to find the pointer identifier for this index).","final float getX() getX(int) for the first pointer index (may be an arbitrary pointer identifier).","final float getXPrecision() Return the precision of the X coordinates being reported.","final float getY(int pointerIndex) Returns the Y coordinate of this event for the given pointer index (use getPointerId(int) to find the pointer identifier for this index).","final float getY() getY(int) for the first pointer index (may be an arbitrary pointer identifier).","final float getYPrecision() Return the precision of the Y coordinates being reported.","final boolean isButtonPressed(int button) Checks if a mouse or stylus button (or combination of buttons) is pressed.","static MotionEvent obtain(long downTime, long eventTime, int action, int pointerCount, PointerProperties[] pointerProperties, PointerCoords[] pointerCoords, int metaState, int buttonState, float xPrecision, float yPrecision, int deviceId, int edgeFlags, int source, int flags) Create a new MotionEvent, filling in all of the basic values that define the motion.","static MotionEvent obtain(long downTime, long eventTime, int action, float x, float y, float pressure, float size, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags) Create a new MotionEvent, filling in all of the basic values that define the motion.","static MotionEvent obtain(long downTime, long eventTime, int action, int pointerCount, float x, float y, float pressure, float size, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags) This method was deprecated in API level 9. Use obtain(long, long, int, float, float, float, float, int, float, float, int, int) instead.","static MotionEvent obtain(long downTime, long eventTime, int action, int pointerCount, int[] pointerIds, PointerCoords[] pointerCoords, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags, int source, int flags) This method was deprecated in API level 14. Use obtain(long, long, int, int, PointerProperties[], PointerCoords[], int, int, float, float, int, int, int, int) instead.","static MotionEvent obtain(MotionEvent other) Create a new MotionEvent, copying from an existing one.","static MotionEvent obtain(long downTime, long eventTime, int action, float x, float y, int metaState) Create a new MotionEvent, filling in a subset of the basic motion values.","static MotionEvent obtainNoHistory(MotionEvent other) Create a new MotionEvent, copying from an existing one, but not including any historical point information.","final void offsetLocation(float deltaX, float deltaY) Adjust this event's location.","final void recycle() Recycle the MotionEvent, to be re-used by a later caller.","final void setAction(int action) Sets this event's action.","final void setEdgeFlags(int flags) Sets the bitfield indicating which edges, if any, were touched by this MotionEvent.","final void setLocation(float x, float y) Set this event's location.","final void setSource(int source) Modifies the source of the event.","String toString() Returns a string containing a concise, human-readable description of this object.","final void transform(Matrix matrix) Applies a transformation matrix to all of the points in the event.","void writeToParcel(Parcel out, int flags) Flatten this object in to a Parcel.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","[Expand] Inherited Methods","From class android.view.InputEvent int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation. final InputDevice getDevice() Gets the device that this event came from. abstract int getDeviceId() Gets the id for the device that this event came from. abstract long getEventTime() Retrieve the time this event occurred, in the uptimeMillis() time base. abstract int getSource() Gets the source of the event. boolean isFromSource(int source) Determines whether the event is from the given source.","int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation.","final InputDevice getDevice() Gets the device that this event came from.","abstract int getDeviceId() Gets the id for the device that this event came from.","abstract long getEventTime() Retrieve the time this event occurred, in the uptimeMillis() time base.","abstract int getSource() Gets the source of the event.","boolean isFromSource(int source) Determines whether the event is from the given source.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface android.os.Parcelable abstract int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation. abstract void writeToParcel(Parcel dest, int flags) Flatten this object in to a Parcel.","abstract int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation.","abstract void writeToParcel(Parcel dest, int flags) Flatten this object in to a Parcel."],"package":"android.view","constants":["int ACTION_CANCEL Constant for getActionMasked(): The current gesture has been aborted.","int ACTION_DOWN Constant for getActionMasked(): A pressed gesture has started, the motion contains the initial starting location.","int ACTION_HOVER_ENTER Constant for getActionMasked(): The pointer is not down but has entered the boundaries of a window or view.","int ACTION_HOVER_EXIT Constant for getActionMasked(): The pointer is not down but has exited the boundaries of a window or view.","int ACTION_HOVER_MOVE Constant for getActionMasked(): A change happened but the pointer is not down (unlike ACTION_MOVE).","int ACTION_MASK Bit mask of the parts of the action code that are the action itself.","int ACTION_MOVE Constant for getActionMasked(): A change has happened during a press gesture (between ACTION_DOWN and ACTION_UP).","int ACTION_OUTSIDE Constant for getActionMasked(): A movement has happened outside of the normal bounds of the UI element.","int ACTION_POINTER_1_DOWN This constant was deprecated in API level 8. Use ACTION_POINTER_INDEX_MASK to retrieve the data index associated with ACTION_POINTER_DOWN.","int ACTION_POINTER_1_UP This constant was deprecated in API level 8. Use ACTION_POINTER_INDEX_MASK to retrieve the data index associated with ACTION_POINTER_UP.","int ACTION_POINTER_2_DOWN This constant was deprecated in API level 8. Use ACTION_POINTER_INDEX_MASK to retrieve the data index associated with ACTION_POINTER_DOWN.","int ACTION_POINTER_2_UP This constant was deprecated in API level 8. Use ACTION_POINTER_INDEX_MASK to retrieve the data index associated with ACTION_POINTER_UP.","int ACTION_POINTER_3_DOWN This constant was deprecated in API level 8. Use ACTION_POINTER_INDEX_MASK to retrieve the data index associated with ACTION_POINTER_DOWN.","int ACTION_POINTER_3_UP This constant was deprecated in API level 8. Use ACTION_POINTER_INDEX_MASK to retrieve the data index associated with ACTION_POINTER_UP.","int ACTION_POINTER_DOWN Constant for getActionMasked(): A non-primary pointer has gone down.","int ACTION_POINTER_ID_MASK This constant was deprecated in API level 8. Renamed to ACTION_POINTER_INDEX_MASK to match the actual data contained in these bits.","int ACTION_POINTER_ID_SHIFT This constant was deprecated in API level 8. Renamed to ACTION_POINTER_INDEX_SHIFT to match the actual data contained in these bits.","int ACTION_POINTER_INDEX_MASK Bits in the action code that represent a pointer index, used with ACTION_POINTER_DOWN and ACTION_POINTER_UP.","int ACTION_POINTER_INDEX_SHIFT Bit shift for the action bits holding the pointer index as defined by ACTION_POINTER_INDEX_MASK.","int ACTION_POINTER_UP Constant for getActionMasked(): A non-primary pointer has gone up.","int ACTION_SCROLL Constant for getActionMasked(): The motion event contains relative vertical and/or horizontal scroll offsets.","int ACTION_UP Constant for getActionMasked(): A pressed gesture has finished, the motion contains the final release location as well as any intermediate points since the last down or move event.","int AXIS_BRAKE Axis constant: Brake axis of a motion event.","int AXIS_DISTANCE Axis constant: Distance axis of a motion event.","int AXIS_GAS Axis constant: Gas axis of a motion event.","int AXIS_GENERIC_1 Axis constant: Generic 1 axis of a motion event.","int AXIS_GENERIC_10 Axis constant: Generic 10 axis of a motion event.","int AXIS_GENERIC_11 Axis constant: Generic 11 axis of a motion event.","int AXIS_GENERIC_12 Axis constant: Generic 12 axis of a motion event.","int AXIS_GENERIC_13 Axis constant: Generic 13 axis of a motion event.","int AXIS_GENERIC_14 Axis constant: Generic 14 axis of a motion event.","int AXIS_GENERIC_15 Axis constant: Generic 15 axis of a motion event.","int AXIS_GENERIC_16 Axis constant: Generic 16 axis of a motion event.","int AXIS_GENERIC_2 Axis constant: Generic 2 axis of a motion event.","int AXIS_GENERIC_3 Axis constant: Generic 3 axis of a motion event.","int AXIS_GENERIC_4 Axis constant: Generic 4 axis of a motion event.","int AXIS_GENERIC_5 Axis constant: Generic 5 axis of a motion event.","int AXIS_GENERIC_6 Axis constant: Generic 6 axis of a motion event.","int AXIS_GENERIC_7 Axis constant: Generic 7 axis of a motion event.","int AXIS_GENERIC_8 Axis constant: Generic 8 axis of a motion event.","int AXIS_GENERIC_9 Axis constant: Generic 9 axis of a motion event.","int AXIS_HAT_X Axis constant: Hat X axis of a motion event.","int AXIS_HAT_Y Axis constant: Hat Y axis of a motion event.","int AXIS_HSCROLL Axis constant: Horizontal Scroll axis of a motion event.","int AXIS_LTRIGGER Axis constant: Left Trigger axis of a motion event.","int AXIS_ORIENTATION Axis constant: Orientation axis of a motion event.","int AXIS_PRESSURE Axis constant: Pressure axis of a motion event.","int AXIS_RTRIGGER Axis constant: Right Trigger axis of a motion event.","int AXIS_RUDDER Axis constant: Rudder axis of a motion event.","int AXIS_RX Axis constant: X Rotation axis of a motion event.","int AXIS_RY Axis constant: Y Rotation axis of a motion event.","int AXIS_RZ Axis constant: Z Rotation axis of a motion event.","int AXIS_SIZE Axis constant: Size axis of a motion event.","int AXIS_THROTTLE Axis constant: Throttle axis of a motion event.","int AXIS_TILT Axis constant: Tilt axis of a motion event.","int AXIS_TOOL_MAJOR Axis constant: ToolMajor axis of a motion event.","int AXIS_TOOL_MINOR Axis constant: ToolMinor axis of a motion event.","int AXIS_TOUCH_MAJOR Axis constant: TouchMajor axis of a motion event.","int AXIS_TOUCH_MINOR Axis constant: TouchMinor axis of a motion event.","int AXIS_VSCROLL Axis constant: Vertical Scroll axis of a motion event.","int AXIS_WHEEL Axis constant: Wheel axis of a motion event.","int AXIS_X Axis constant: X axis of a motion event.","int AXIS_Y Axis constant: Y axis of a motion event.","int AXIS_Z Axis constant: Z axis of a motion event.","int BUTTON_BACK Button constant: Back button pressed (mouse back button).","int BUTTON_FORWARD Button constant: Forward button pressed (mouse forward button).","int BUTTON_PRIMARY Button constant: Primary button (left mouse button).","int BUTTON_SECONDARY Button constant: Secondary button (right mouse button, stylus first button).","int BUTTON_TERTIARY Button constant: Tertiary button (middle mouse button, stylus second button).","int EDGE_BOTTOM Flag indicating the motion event intersected the bottom edge of the screen.","int EDGE_LEFT Flag indicating the motion event intersected the left edge of the screen.","int EDGE_RIGHT Flag indicating the motion event intersected the right edge of the screen.","int EDGE_TOP Flag indicating the motion event intersected the top edge of the screen.","int FLAG_WINDOW_IS_OBSCURED This flag indicates that the window that received this motion event is partly or wholly obscured by another visible window above it.","int INVALID_POINTER_ID An invalid pointer id.","int TOOL_TYPE_ERASER Tool type constant: The tool is an eraser or a stylus being used in an inverted posture.","int TOOL_TYPE_FINGER Tool type constant: The tool is a finger.","int TOOL_TYPE_MOUSE Tool type constant: The tool is a mouse or trackpad.","int TOOL_TYPE_STYLUS Tool type constant: The tool is a stylus.","int TOOL_TYPE_UNKNOWN Tool type constant: Unknown tool type.","[Expand] Inherited Constants","From interface android.os.Parcelable int CONTENTS_FILE_DESCRIPTOR Bit masks for use with describeContents(): each bit represents a kind of object considered to have potential special significance when marshalled. int PARCELABLE_WRITE_RETURN_VALUE Flag for use with writeToParcel(Parcel, int): the object being written is a return value, that is the result of a function such as \"Parcelable someFunction()\", \"void someFunction(out Parcelable)\", or \"void someFunction(inout Parcelable)\".","int CONTENTS_FILE_DESCRIPTOR Bit masks for use with describeContents(): each bit represents a kind of object considered to have potential special significance when marshalled.","int PARCELABLE_WRITE_RETURN_VALUE Flag for use with writeToParcel(Parcel, int): the object being written is a return value, that is the result of a function such as \"Parcelable someFunction()\", \"void someFunction(out Parcelable)\", or \"void someFunction(inout Parcelable)\"."],"class":"MotionEvent","constructors":[],"fields":["public static final Creator<MotionEvent> CREATOR"]}