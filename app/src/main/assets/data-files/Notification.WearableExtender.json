{"methods":["Notification.WearableExtender addAction(Notification.Action action) Add a wearable action to this notification.","Notification.WearableExtender addActions(List<Notification.Action> actions) Adds wearable actions to this notification.","Notification.WearableExtender addPage(Notification page) Add an additional page of content to display with this notification.","Notification.WearableExtender addPages(List<Notification> pages) Add additional pages of content to display with this notification.","Notification.WearableExtender clearActions() Clear all wearable actions present on this builder.","Notification.WearableExtender clearPages() Clear all additional pages present on this builder.","Notification.WearableExtender clone() Creates and returns a copy of this Object.","Notification.Builder extend(Notification.Builder builder) Apply wearable extensions to a notification that is being built.","List<Notification.Action> getActions() Get the wearable actions present on this notification.","Bitmap getBackground() Get a background image to be displayed behind the notification content.","int getContentAction() Get the index of the notification action, if any, that was specified as being clickable with the content of this notification.","int getContentIcon() Get an icon that goes with the content of this notification.","int getContentIconGravity() Get the gravity that the content icon should have within the notification display.","boolean getContentIntentAvailableOffline() Get whether the content intent is available when the wearable device is not connected to a companion device.","int getCustomContentHeight() Get the custom height in pixels for the display of this notification's content.","int getCustomSizePreset() Get the custom size preset for the display of this notification out of the available presets found in Notification.WearableExtender, e.g.","PendingIntent getDisplayIntent() Get the intent to launch inside of an activity view when displaying this notification.","int getGravity() Get the gravity that this notification should have within the available viewport space.","boolean getHintHideIcon() Get a hint that this notification's icon should not be displayed.","boolean getHintShowBackgroundOnly() Get a visual hint that only the background image of this notification should be displayed, and other semantic content should be hidden.","List<Notification> getPages() Get the array of additional pages of content for displaying this notification.","boolean getStartScrollBottom() Get whether the scrolling position for the contents of this notification should start at the bottom of the contents instead of the top when the contents are too long to display within the screen.","Notification.WearableExtender setBackground(Bitmap background) Set a background image to be displayed behind the notification content.","Notification.WearableExtender setContentAction(int actionIndex) Set an action from this notification's actions to be clickable with the content of this notification.","Notification.WearableExtender setContentIcon(int icon) Set an icon that goes with the content of this notification.","Notification.WearableExtender setContentIconGravity(int contentIconGravity) Set the gravity that the content icon should have within the notification display.","Notification.WearableExtender setContentIntentAvailableOffline(boolean contentIntentAvailableOffline) Set whether the content intent is available when the wearable device is not connected to a companion device.","Notification.WearableExtender setCustomContentHeight(int height) Set the custom height in pixels for the display of this notification's content.","Notification.WearableExtender setCustomSizePreset(int sizePreset) Set the custom size preset for the display of this notification out of the available presets found in Notification.WearableExtender, e.g.","Notification.WearableExtender setDisplayIntent(PendingIntent intent) Set an intent to launch inside of an activity view when displaying this notification.","Notification.WearableExtender setGravity(int gravity) Set the gravity that this notification should have within the available viewport space.","Notification.WearableExtender setHintHideIcon(boolean hintHideIcon) Set a hint that this notification's icon should not be displayed.","Notification.WearableExtender setHintShowBackgroundOnly(boolean hintShowBackgroundOnly) Set a visual hint that only the background image of this notification should be displayed, and other semantic content should be hidden.","Notification.WearableExtender setStartScrollBottom(boolean startScrollBottom) Set whether the scrolling position for the contents of this notification should start at the bottom of the contents instead of the top when the contents are too long to display within the screen.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface android.app.Notification.Extender abstract Notification.Builder extend(Notification.Builder builder) Apply this extender to a notification builder.","abstract Notification.Builder extend(Notification.Builder builder) Apply this extender to a notification builder."],"package":"android.app","constants":["int SIZE_DEFAULT Size value for use with setCustomSizePreset(int) to show this notification with default sizing.","int SIZE_FULL_SCREEN Size value for use with setCustomSizePreset(int) to show this notification full screen.","int SIZE_LARGE Size value for use with setCustomSizePreset(int) to show this notification with a large size.","int SIZE_MEDIUM Size value for use with setCustomSizePreset(int) to show this notification with a medium size.","int SIZE_SMALL Size value for use with setCustomSizePreset(int) to show this notification with a small size.","int SIZE_XSMALL Size value for use with setCustomSizePreset(int) to show this notification with an extra small size.","int UNSET_ACTION_INDEX Sentinel value for an action index that is unset."],"class":"Notification.WearableExtender","constructors":[],"fields":[]}