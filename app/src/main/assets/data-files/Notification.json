{"methods":["Notification clone() Creates and returns a copy of this Object.","int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation.","String getGroup() Get the key used to group this notification into a cluster or stack with other notifications on devices which support such rendering.","String getSortKey() Get a sort key that orders this notification among other notifications from the same package.","void setLatestEventInfo(Context context, CharSequence contentTitle, CharSequence contentText, PendingIntent contentIntent) This method was deprecated in API level 11. Use Notification.Builder instead.","String toString() Returns a string containing a concise, human-readable description of this object.","void writeToParcel(Parcel parcel, int flags) Flatten this notification from a parcel.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface android.os.Parcelable abstract int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation. abstract void writeToParcel(Parcel dest, int flags) Flatten this object in to a Parcel.","abstract int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation.","abstract void writeToParcel(Parcel dest, int flags) Flatten this object in to a Parcel."],"package":"android.app","constants":["String CATEGORY_ALARM Notification category: alarm or timer.","String CATEGORY_CALL Notification category: incoming call (voice or video) or similar synchronous communication request.","String CATEGORY_EMAIL Notification category: asynchronous bulk message (email).","String CATEGORY_ERROR Notification category: error in background operation or authentication status.","String CATEGORY_EVENT Notification category: calendar event.","String CATEGORY_MESSAGE Notification category: incoming direct message (SMS, instant message, etc.).","String CATEGORY_PROGRESS Notification category: progress of a long-running background operation.","String CATEGORY_PROMO Notification category: promotion or advertisement.","String CATEGORY_RECOMMENDATION Notification category: a specific, timely recommendation for a single thing.","String CATEGORY_SERVICE Notification category: indication of running background service.","String CATEGORY_SOCIAL Notification category: social network or sharing update.","String CATEGORY_STATUS Notification category: ongoing information about device or contextual status.","String CATEGORY_SYSTEM Notification category: system or device status update.","String CATEGORY_TRANSPORT Notification category: media transport control for playback.","int COLOR_DEFAULT Special value of color telling the system not to decorate this notification with any special color but instead use default colors when presenting this notification.","int DEFAULT_ALL Use all default values (where applicable).","int DEFAULT_LIGHTS Use the default notification lights.","int DEFAULT_SOUND Use the default notification sound.","int DEFAULT_VIBRATE Use the default notification vibrate.","String EXTRA_BACKGROUND_IMAGE_URI extras key: A content URI pointing to an image that can be displayed in the background when the notification is selected.","String EXTRA_BIG_TEXT extras key: this is the longer text shown in the big form of a Notification.BigTextStyle notification, as supplied to bigText(CharSequence).","String EXTRA_COMPACT_ACTIONS extras key: the indices of actions to be shown in the compact view, as supplied to (e.g.) setShowActionsInCompactView(int).","String EXTRA_INFO_TEXT extras key: this is a small piece of additional text as supplied to setContentInfo(CharSequence).","String EXTRA_LARGE_ICON extras key: this is a bitmap to be used instead of the small icon when showing the notification payload, as supplied to setLargeIcon(android.graphics.Bitmap).","String EXTRA_LARGE_ICON_BIG extras key: this is a bitmap to be used instead of the one from setLargeIcon(android.graphics.Bitmap) when the notification is shown in its expanded form, as supplied to bigLargeIcon(android.graphics.Bitmap).","String EXTRA_MEDIA_SESSION extras key: A MediaSession.Token associated with a Notification.MediaStyle notification.","String EXTRA_PEOPLE extras key: A String array containing the people that this notification relates to, each of which was supplied to addPerson(String).","String EXTRA_PICTURE extras key: this is a bitmap to be shown in Notification.BigPictureStyle expanded notifications, supplied to bigPicture(android.graphics.Bitmap).","String EXTRA_PROGRESS extras key: this is the progress value supplied to setProgress(int, int, boolean).","String EXTRA_PROGRESS_INDETERMINATE extras key: whether the progress bar is indeterminate, supplied to setProgress(int, int, boolean).","String EXTRA_PROGRESS_MAX extras key: this is the maximum value supplied to setProgress(int, int, boolean).","String EXTRA_SHOW_CHRONOMETER extras key: whether when should be shown as a count-up timer (specifically a Chronometer) instead of a timestamp, as supplied to setUsesChronometer(boolean).","String EXTRA_SHOW_WHEN extras key: whether when should be shown, as supplied to setShowWhen(boolean).","String EXTRA_SMALL_ICON extras key: this is the resource ID of the notification's main small icon, as supplied to setSmallIcon(int).","String EXTRA_SUB_TEXT extras key: this is a third line of text, as supplied to setSubText(CharSequence).","String EXTRA_SUMMARY_TEXT extras key: this is a line of summary information intended to be shown alongside expanded notifications, as supplied to (e.g.) setSummaryText(CharSequence).","String EXTRA_TEMPLATE extras key: A string representing the name of the specific Notification.Style used to create this notification.","String EXTRA_TEXT extras key: this is the main text payload, as supplied to setContentText(CharSequence).","String EXTRA_TEXT_LINES extras key: An array of CharSequences to show in Notification.InboxStyle expanded notifications, each of which was supplied to addLine(CharSequence).","String EXTRA_TITLE extras key: this is the title of the notification, as supplied to setContentTitle(CharSequence).","String EXTRA_TITLE_BIG extras key: this is the title of the notification when shown in expanded form, e.g.","int FLAG_AUTO_CANCEL Bit to be bitwise-ored into the flags field that should be set if the notification should be canceled when it is clicked by the user.","int FLAG_FOREGROUND_SERVICE Bit to be bitwise-ored into the flags field that should be set if this notification represents a currently running service.","int FLAG_GROUP_SUMMARY Bit to be bitswise-ored into the flags field that should be set if this notification is the group summary for a group of notifications.","int FLAG_HIGH_PRIORITY This constant was deprecated in API level 16. Use priority with a positive value.","int FLAG_INSISTENT Bit to be bitwise-ored into the flags field that if set, the audio will be repeated until the notification is cancelled or the notification window is opened.","int FLAG_LOCAL_ONLY Bit to be bitswise-ored into the flags field that should be set if this notification is relevant to the current device only and it is not recommended that it bridge to other devices.","int FLAG_NO_CLEAR Bit to be bitwise-ored into the flags field that should be set if the notification should not be canceled when the user clicks the Clear all button.","int FLAG_ONGOING_EVENT Bit to be bitwise-ored into the flags field that should be set if this notification is in reference to something that is ongoing, like a phone call.","int FLAG_ONLY_ALERT_ONCE Bit to be bitwise-ored into the flags field that should be set if you would only like the sound, vibrate and ticker to be played if the notification was not already showing.","int FLAG_SHOW_LIGHTS Bit to be bitwise-ored into the flags field that should be set if you want the LED on for this notification.","String INTENT_CATEGORY_NOTIFICATION_PREFERENCES An activity that provides a user interface for adjusting notification preferences for its containing application.","int PRIORITY_DEFAULT Default notification priority.","int PRIORITY_HIGH Higher priority, for more important notifications or alerts.","int PRIORITY_LOW Lower priority, for items that are less important.","int PRIORITY_MAX Highest priority, for your application's most important items that require the user's prompt attention or input.","int PRIORITY_MIN Lowest priority; these items might not be shown to the user except under special circumstances, such as detailed notification logs.","int STREAM_DEFAULT This constant was deprecated in API level 21. Use audioAttributes instead.","int VISIBILITY_PRIVATE Notification visibility: Show this notification on all lockscreens, but conceal sensitive or private information on secure lockscreens.","int VISIBILITY_PUBLIC Notification visibility: Show this notification in its entirety on all lockscreens.","int VISIBILITY_SECRET Notification visibility: Do not reveal any part of this notification on a secure lockscreen.","[Expand] Inherited Constants","From interface android.os.Parcelable int CONTENTS_FILE_DESCRIPTOR Bit masks for use with describeContents(): each bit represents a kind of object considered to have potential special significance when marshalled. int PARCELABLE_WRITE_RETURN_VALUE Flag for use with writeToParcel(Parcel, int): the object being written is a return value, that is the result of a function such as \"Parcelable someFunction()\", \"void someFunction(out Parcelable)\", or \"void someFunction(inout Parcelable)\".","int CONTENTS_FILE_DESCRIPTOR Bit masks for use with describeContents(): each bit represents a kind of object considered to have potential special significance when marshalled.","int PARCELABLE_WRITE_RETURN_VALUE Flag for use with writeToParcel(Parcel, int): the object being written is a return value, that is the result of a function such as \"Parcelable someFunction()\", \"void someFunction(out Parcelable)\", or \"void someFunction(inout Parcelable)\"."],"class":"Notification","constructors":[],"fields":["public static final AudioAttributes AUDIO_ATTRIBUTES_DEFAULT The default value of audioAttributes.","public static final Creator<Notification> CREATOR Parcelable.Creator that instantiates Notification objects","public Action[] actions Array of all Notification.Action structures attached to this notification by addAction(int, CharSequence, PendingIntent).","public AudioAttributes audioAttributes The audio attributes to use when playing the sound.","public int audioStreamType This field was deprecated in API level 21. Use audioAttributes instead.","public RemoteViews bigContentView A large-format version of contentView, giving the Notification an opportunity to show more detail.","public String category One of the predefined notification categories (see the CATEGORY_* constants) that best describes this Notification.","public int color Accent color (an ARGB integer like the constants in Color) to be applied by the standard Style templates when presenting this notification.","public PendingIntent contentIntent The intent to execute when the expanded status entry is clicked.","public RemoteViews contentView The view that will represent this notification in the expanded status bar.","public int defaults Specifies which values should be taken from the defaults.","public PendingIntent deleteIntent The intent to execute when the notification is explicitly dismissed by the user, either with the \"Clear All\" button or by swiping it away individually.","public Bundle extras Additional semantic data to be carried around with this Notification.","public int flags","public PendingIntent fullScreenIntent An intent to launch instead of posting the notification to the status bar.","public RemoteViews headsUpContentView A medium-format version of contentView, providing the Notification an opportunity to add action buttons to contentView.","public int icon The resource id of a drawable to use as the icon in the status bar.","public int iconLevel If the icon in the status bar is to have more than one level, you can set this.","public Bitmap largeIcon The bitmap that may escape the bounds of the panel and bar.","public int ledARGB The color of the led.","public int ledOffMS The number of milliseconds for the LED to be off while it's flashing.","public int ledOnMS The number of milliseconds for the LED to be on while it's flashing.","public int number The number of events that this notification represents.","public int priority Relative priority for this notification.","public Notification publicVersion Replacement version of this notification whose content will be shown in an insecure context such as atop a secure keyguard.","public Uri sound The sound to play.","public CharSequence tickerText Text that summarizes this notification for accessibility services.","public RemoteViews tickerView Formerly, a view showing the tickerText.","public long[] vibrate The pattern with which to vibrate.","public int visibility Sphere of visibility of this notification, which affects how and when the SystemUI reveals the notification's presence and contents in untrusted situations (namely, on the secure lockscreen).","public long when A timestamp related to this notification, in milliseconds since the epoch."]}