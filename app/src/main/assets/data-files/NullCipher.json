{"methods":["[Expand] Inherited Methods","From class javax.crypto.Cipher final int doFinal(byte[] output, int outputOffset) Finishes a multi-part transformation (encryption or decryption). final byte[] doFinal(byte[] input, int inputOffset, int inputLen) Finishes a multi-part transformation (encryption or decryption). final int doFinal(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset) Finishes a multi-part transformation (encryption or decryption). final int doFinal(byte[] input, int inputOffset, int inputLen, byte[] output) Finishes a multi-part transformation (encryption or decryption). final byte[] doFinal(byte[] input) Finishes a multi-part transformation (encryption or decryption). final int doFinal(ByteBuffer input, ByteBuffer output) Finishes a multi-part transformation (encryption or decryption). final byte[] doFinal() Finishes a multi-part transformation (encryption or decryption). final String getAlgorithm() Returns the name of the algorithm of this cipher instance. final int getBlockSize() Returns this ciphers block size (in bytes). final ExemptionMechanism getExemptionMechanism() Returns the exemption mechanism associated with this cipher. final byte[] getIV() Returns the initialization vector for this cipher instance. final static Cipher getInstance(String transformation, String provider) Creates a new cipher for the specified transformation provided by the specified provider. final static Cipher getInstance(String transformation, Provider provider) Creates a new cipher for the specified transformation. final static Cipher getInstance(String transformation) Creates a new Cipher for the specified transformation. final static int getMaxAllowedKeyLength(String transformation) Returns the maximum key length for the specified transformation. final static AlgorithmParameterSpec getMaxAllowedParameterSpec(String transformation) Returns the maximum cipher parameter value for the specified transformation. final int getOutputSize(int inputLen) Returns the length in bytes an output buffer needs to be when this cipher is updated with inputLen bytes. final AlgorithmParameters getParameters() Returns the parameters that where used to create this cipher instance. final Provider getProvider() Returns the provider of this cipher instance. final void init(int opmode, Key key) Initializes this cipher instance with the specified key. final void init(int opmode, Key key, SecureRandom random) Initializes this cipher instance with the specified key and a source of randomness. final void init(int opmode, Key key, AlgorithmParameterSpec params, SecureRandom random) Initializes this cipher instance with the specified key, algorithm parameters and a source of randomness. final void init(int opmode, Key key, AlgorithmParameters params, SecureRandom random) Initializes this cipher instance with the specified key, algorithm parameters and a source of randomness. final void init(int opmode, Key key, AlgorithmParameterSpec params) Initializes this cipher instance with the specified key and algorithm parameters. final void init(int opmode, Certificate certificate, SecureRandom random) Initializes this cipher instance with the public key from the specified certificate and a source of randomness. final void init(int opmode, Certificate certificate) Initializes this cipher instance with the public key from the specified certificate. final void init(int opmode, Key key, AlgorithmParameters params) Initializes this cipher instance with the specified key and algorithm parameters. final Key unwrap(byte[] wrappedKey, String wrappedKeyAlgorithm, int wrappedKeyType) Unwraps a key using this cipher instance. final int update(ByteBuffer input, ByteBuffer output) Continues a multi-part transformation (encryption or decryption). final byte[] update(byte[] input) Continues a multi-part transformation (encryption or decryption). final int update(byte[] input, int inputOffset, int inputLen, byte[] output) Continues a multi-part transformation (encryption or decryption). final byte[] update(byte[] input, int inputOffset, int inputLen) Continues a multi-part transformation (encryption or decryption). final int update(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset) Continues a multi-part transformation (encryption or decryption). final void updateAAD(ByteBuffer input) Continues a multi-part transformation (encryption or decryption) with Authenticated Additional Data (AAD). final void updateAAD(byte[] input, int inputOffset, int inputLen) Continues a multi-part transformation (encryption or decryption) with Authenticated Additional Data (AAD). final void updateAAD(byte[] input) Continues a multi-part transformation (encryption or decryption) with Authenticated Additional Data (AAD). final byte[] wrap(Key key) Wraps a key using this cipher instance.","final int doFinal(byte[] output, int outputOffset) Finishes a multi-part transformation (encryption or decryption).","final byte[] doFinal(byte[] input, int inputOffset, int inputLen) Finishes a multi-part transformation (encryption or decryption).","final int doFinal(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset) Finishes a multi-part transformation (encryption or decryption).","final int doFinal(byte[] input, int inputOffset, int inputLen, byte[] output) Finishes a multi-part transformation (encryption or decryption).","final byte[] doFinal(byte[] input) Finishes a multi-part transformation (encryption or decryption).","final int doFinal(ByteBuffer input, ByteBuffer output) Finishes a multi-part transformation (encryption or decryption).","final byte[] doFinal() Finishes a multi-part transformation (encryption or decryption).","final String getAlgorithm() Returns the name of the algorithm of this cipher instance.","final int getBlockSize() Returns this ciphers block size (in bytes).","final ExemptionMechanism getExemptionMechanism() Returns the exemption mechanism associated with this cipher.","final byte[] getIV() Returns the initialization vector for this cipher instance.","final static Cipher getInstance(String transformation, String provider) Creates a new cipher for the specified transformation provided by the specified provider.","final static Cipher getInstance(String transformation, Provider provider) Creates a new cipher for the specified transformation.","final static Cipher getInstance(String transformation) Creates a new Cipher for the specified transformation.","final static int getMaxAllowedKeyLength(String transformation) Returns the maximum key length for the specified transformation.","final static AlgorithmParameterSpec getMaxAllowedParameterSpec(String transformation) Returns the maximum cipher parameter value for the specified transformation.","final int getOutputSize(int inputLen) Returns the length in bytes an output buffer needs to be when this cipher is updated with inputLen bytes.","final AlgorithmParameters getParameters() Returns the parameters that where used to create this cipher instance.","final Provider getProvider() Returns the provider of this cipher instance.","final void init(int opmode, Key key) Initializes this cipher instance with the specified key.","final void init(int opmode, Key key, SecureRandom random) Initializes this cipher instance with the specified key and a source of randomness.","final void init(int opmode, Key key, AlgorithmParameterSpec params, SecureRandom random) Initializes this cipher instance with the specified key, algorithm parameters and a source of randomness.","final void init(int opmode, Key key, AlgorithmParameters params, SecureRandom random) Initializes this cipher instance with the specified key, algorithm parameters and a source of randomness.","final void init(int opmode, Key key, AlgorithmParameterSpec params) Initializes this cipher instance with the specified key and algorithm parameters.","final void init(int opmode, Certificate certificate, SecureRandom random) Initializes this cipher instance with the public key from the specified certificate and a source of randomness.","final void init(int opmode, Certificate certificate) Initializes this cipher instance with the public key from the specified certificate.","final void init(int opmode, Key key, AlgorithmParameters params) Initializes this cipher instance with the specified key and algorithm parameters.","final Key unwrap(byte[] wrappedKey, String wrappedKeyAlgorithm, int wrappedKeyType) Unwraps a key using this cipher instance.","final int update(ByteBuffer input, ByteBuffer output) Continues a multi-part transformation (encryption or decryption).","final byte[] update(byte[] input) Continues a multi-part transformation (encryption or decryption).","final int update(byte[] input, int inputOffset, int inputLen, byte[] output) Continues a multi-part transformation (encryption or decryption).","final byte[] update(byte[] input, int inputOffset, int inputLen) Continues a multi-part transformation (encryption or decryption).","final int update(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset) Continues a multi-part transformation (encryption or decryption).","final void updateAAD(ByteBuffer input) Continues a multi-part transformation (encryption or decryption) with Authenticated Additional Data (AAD).","final void updateAAD(byte[] input, int inputOffset, int inputLen) Continues a multi-part transformation (encryption or decryption) with Authenticated Additional Data (AAD).","final void updateAAD(byte[] input) Continues a multi-part transformation (encryption or decryption) with Authenticated Additional Data (AAD).","final byte[] wrap(Key key) Wraps a key using this cipher instance.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"javax.crypto","constants":["[Expand] Inherited Constants","From class javax.crypto.Cipher int DECRYPT_MODE Constant for decryption operation mode. int ENCRYPT_MODE Constant for encryption operation mode. int PRIVATE_KEY Constant indicating that the key to be unwrapped is a private key. int PUBLIC_KEY Constant indicating that the key to be unwrapped is a public key. int SECRET_KEY Constant indicating that the key to be unwrapped is a secret key. int UNWRAP_MODE Constant for key unwrapping operation mode. int WRAP_MODE Constant for key wrapping operation mode.","int DECRYPT_MODE Constant for decryption operation mode.","int ENCRYPT_MODE Constant for encryption operation mode.","int PRIVATE_KEY Constant indicating that the key to be unwrapped is a private key.","int PUBLIC_KEY Constant indicating that the key to be unwrapped is a public key.","int SECRET_KEY Constant indicating that the key to be unwrapped is a secret key.","int UNWRAP_MODE Constant for key unwrapping operation mode.","int WRAP_MODE Constant for key wrapping operation mode."],"class":"NullCipher","constructors":[],"fields":[]}