{"methods":["int available() Returns an estimated number of bytes that can be read or skipped without blocking for more input.","void close() Closes this stream.","void defaultReadObject() Default method to read objects from this stream.","int read(byte[] buffer, int byteOffset, int byteCount) Reads up to byteCount bytes from this stream and stores them in the byte array buffer starting at byteOffset.","int read() Reads a single byte from the source stream and returns it as an integer in the range from 0 to 255.","boolean readBoolean() Reads a boolean from the source stream.","byte readByte() Reads a byte (8 bit) from the source stream.","char readChar() Reads a character (16 bit) from the source stream.","double readDouble() Reads a double (64 bit) from the source stream.","ObjectInputStream.GetField readFields() Reads the persistent fields of the object that is currently being read from the source stream.","float readFloat() Reads a float (32 bit) from the source stream.","void readFully(byte[] dst) Reads bytes from the source stream into the byte array dst.","void readFully(byte[] dst, int offset, int byteCount) Reads byteCount bytes from the source stream into the byte array dst.","int readInt() Reads an integer (32 bit) from the source stream.","String readLine() This method was deprecated in API level 1. Use BufferedReader instead.","long readLong() Reads a long (64 bit) from the source stream.","final Object readObject() Reads the next object from the source stream.","short readShort() Reads a short (16 bit) from the source stream.","String readUTF() Reads a string encoded in modified UTF-8 from the source stream.","Object readUnshared() Reads the next unshared object from the source stream.","int readUnsignedByte() Reads an unsigned byte (8 bit) from the source stream.","int readUnsignedShort() Reads an unsigned short (16 bit) from the source stream.","synchronized void registerValidation(ObjectInputValidation object, int priority) Registers a callback for post-deserialization validation of objects.","int skipBytes(int length) Skips length bytes on the source stream.","boolean enableResolveObject(boolean enable) Enables object replacement for this stream.","ObjectStreamClass readClassDescriptor() Reads a class descriptor from the source stream.","Object readObjectOverride() Method to be overridden by subclasses to read the next object from the source stream.","void readStreamHeader() Reads and validates the ObjectInputStream header from the source stream.","Class<?> resolveClass(ObjectStreamClass osClass) Loads the Java class corresponding to the class descriptor osClass that has just been read from the source stream.","Object resolveObject(Object object) Allows trusted subclasses to substitute the specified original object with a new object.","Class<?> resolveProxyClass(String[] interfaceNames) Creates the proxy class that implements the interfaces specified in interfaceNames.","[Expand] Inherited Methods","From class java.io.InputStream int available() Returns an estimated number of bytes that can be read or skipped without blocking for more input. void close() Closes this stream. void mark(int readlimit) Sets a mark position in this InputStream. boolean markSupported() Indicates whether this stream supports the mark() and reset() methods. int read(byte[] buffer) Equivalent to read(buffer, 0, buffer.length). abstract int read() Reads a single byte from this stream and returns it as an integer in the range from 0 to 255. int read(byte[] buffer, int byteOffset, int byteCount) Reads up to byteCount bytes from this stream and stores them in the byte array buffer starting at byteOffset. synchronized void reset() Resets this stream to the last marked location. long skip(long byteCount) Skips at most byteCount bytes in this stream.","int available() Returns an estimated number of bytes that can be read or skipped without blocking for more input.","void close() Closes this stream.","void mark(int readlimit) Sets a mark position in this InputStream.","boolean markSupported() Indicates whether this stream supports the mark() and reset() methods.","int read(byte[] buffer) Equivalent to read(buffer, 0, buffer.length).","abstract int read() Reads a single byte from this stream and returns it as an integer in the range from 0 to 255.","int read(byte[] buffer, int byteOffset, int byteCount) Reads up to byteCount bytes from this stream and stores them in the byte array buffer starting at byteOffset.","synchronized void reset() Resets this stream to the last marked location.","long skip(long byteCount) Skips at most byteCount bytes in this stream.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface java.io.Closeable abstract void close() Closes the object and release any system resources it holds.","abstract void close() Closes the object and release any system resources it holds.","From interface java.io.DataInput abstract boolean readBoolean() Reads a boolean. abstract byte readByte() Reads an 8-bit byte value. abstract char readChar() Reads a big-endian 16-bit character value. abstract double readDouble() Reads a big-endian 64-bit double value. abstract float readFloat() Reads a big-endian 32-bit float value. abstract void readFully(byte[] dst) Equivalent to readFully(dst, 0, dst.length);. abstract void readFully(byte[] dst, int offset, int byteCount) Reads byteCount bytes from this stream and stores them in the byte array dst starting at offset. abstract int readInt() Reads a big-endian 32-bit integer value. abstract String readLine() Returns a string containing the next line of text available from this stream. abstract long readLong() Reads a big-endian 64-bit long value. abstract short readShort() Reads a big-endian 16-bit short value. abstract String readUTF() Reads a string encoded with modified UTF-8. abstract int readUnsignedByte() Reads an unsigned 8-bit byte value and returns it as an int. abstract int readUnsignedShort() Reads a big-endian 16-bit unsigned short value and returns it as an int. abstract int skipBytes(int count) Skips count number of bytes.","abstract boolean readBoolean() Reads a boolean.","abstract byte readByte() Reads an 8-bit byte value.","abstract char readChar() Reads a big-endian 16-bit character value.","abstract double readDouble() Reads a big-endian 64-bit double value.","abstract float readFloat() Reads a big-endian 32-bit float value.","abstract void readFully(byte[] dst) Equivalent to readFully(dst, 0, dst.length);.","abstract void readFully(byte[] dst, int offset, int byteCount) Reads byteCount bytes from this stream and stores them in the byte array dst starting at offset.","abstract int readInt() Reads a big-endian 32-bit integer value.","abstract String readLine() Returns a string containing the next line of text available from this stream.","abstract long readLong() Reads a big-endian 64-bit long value.","abstract short readShort() Reads a big-endian 16-bit short value.","abstract String readUTF() Reads a string encoded with modified UTF-8.","abstract int readUnsignedByte() Reads an unsigned 8-bit byte value and returns it as an int.","abstract int readUnsignedShort() Reads a big-endian 16-bit unsigned short value and returns it as an int.","abstract int skipBytes(int count) Skips count number of bytes.","From interface java.io.ObjectInput abstract int available() Indicates the number of bytes of primitive data that can be read without blocking. abstract void close() Closes this stream. abstract int read(byte[] buffer) Reads bytes from this stream into the byte array buffer. abstract int read() Reads a single byte from this stream and returns it as an integer in the range from 0 to 255. abstract int read(byte[] buffer, int byteOffset, int byteCount) Reads up to byteCount bytes from this stream and stores them in byte array buffer starting at offset byteOffset. abstract Object readObject() Reads the next object from this stream. abstract long skip(long byteCount) Skips byteCount bytes on this stream.","abstract int available() Indicates the number of bytes of primitive data that can be read without blocking.","abstract void close() Closes this stream.","abstract int read(byte[] buffer) Reads bytes from this stream into the byte array buffer.","abstract int read() Reads a single byte from this stream and returns it as an integer in the range from 0 to 255.","abstract int read(byte[] buffer, int byteOffset, int byteCount) Reads up to byteCount bytes from this stream and stores them in byte array buffer starting at offset byteOffset.","abstract Object readObject() Reads the next object from this stream.","abstract long skip(long byteCount) Skips byteCount bytes on this stream.","From interface java.lang.AutoCloseable abstract void close() Closes the object and release any system resources it holds.","abstract void close() Closes the object and release any system resources it holds."],"package":"java.io","constants":["[Expand] Inherited Constants","From interface java.io.ObjectStreamConstants int PROTOCOL_VERSION_1 Stream protocol version 1. int PROTOCOL_VERSION_2 Stream protocol version 2. byte SC_BLOCK_DATA Bit mask for the flag field in ObjectStreamClass. byte SC_ENUM Bit mask for the flag field in ObjectStreamClass. byte SC_EXTERNALIZABLE Bit mask for the flag field in ObjectStreamClass. byte SC_SERIALIZABLE Bit mask for the flag field in ObjectStreamClass. byte SC_WRITE_METHOD Bit mask for the flag field in ObjectStreamClass. short STREAM_MAGIC The stream header's magic number. short STREAM_VERSION The stream header's version number. byte TC_ARRAY Tag to mark a new array. byte TC_BASE The minimum tag value. byte TC_BLOCKDATA Tag to mark a block of optional data. byte TC_BLOCKDATALONG Tag to mark a long block of data. byte TC_CLASS Tag to mark a reference to a class. byte TC_CLASSDESC Tag to mark a new class descriptor. byte TC_ENDBLOCKDATA Tag to mark the end of block data blocks for an object. byte TC_ENUM Tag to mark a new enum. byte TC_EXCEPTION Tag to mark an exception. byte TC_LONGSTRING Tag to mark a long string. byte TC_MAX The maximum tag value. byte TC_NULL Tag to mark a null object reference. byte TC_OBJECT Tag to mark a new object. byte TC_PROXYCLASSDESC Tag to mark a new proxy class descriptor. byte TC_REFERENCE Tag to mark a reference to an object that has already been written to the stream. byte TC_RESET Tag to mark a stream reset. byte TC_STRING Tag to mark a new string. int baseWireHandle Handle for the first object that gets serialized.","int PROTOCOL_VERSION_1 Stream protocol version 1.","int PROTOCOL_VERSION_2 Stream protocol version 2.","byte SC_BLOCK_DATA Bit mask for the flag field in ObjectStreamClass.","byte SC_ENUM Bit mask for the flag field in ObjectStreamClass.","byte SC_EXTERNALIZABLE Bit mask for the flag field in ObjectStreamClass.","byte SC_SERIALIZABLE Bit mask for the flag field in ObjectStreamClass.","byte SC_WRITE_METHOD Bit mask for the flag field in ObjectStreamClass.","short STREAM_MAGIC The stream header's magic number.","short STREAM_VERSION The stream header's version number.","byte TC_ARRAY Tag to mark a new array.","byte TC_BASE The minimum tag value.","byte TC_BLOCKDATA Tag to mark a block of optional data.","byte TC_BLOCKDATALONG Tag to mark a long block of data.","byte TC_CLASS Tag to mark a reference to a class.","byte TC_CLASSDESC Tag to mark a new class descriptor.","byte TC_ENDBLOCKDATA Tag to mark the end of block data blocks for an object.","byte TC_ENUM Tag to mark a new enum.","byte TC_EXCEPTION Tag to mark an exception.","byte TC_LONGSTRING Tag to mark a long string.","byte TC_MAX The maximum tag value.","byte TC_NULL Tag to mark a null object reference.","byte TC_OBJECT Tag to mark a new object.","byte TC_PROXYCLASSDESC Tag to mark a new proxy class descriptor.","byte TC_REFERENCE Tag to mark a reference to an object that has already been written to the stream.","byte TC_RESET Tag to mark a stream reset.","byte TC_STRING Tag to mark a new string.","int baseWireHandle Handle for the first object that gets serialized."],"class":"ObjectInputStream","constructors":[],"fields":[]}