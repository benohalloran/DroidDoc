{"methods":["<A만xtendsㅁnnotation> A getAnnotation(Class<A> annotationType) Returns the annotation associated with the specified annotation type and this package, if present.","Annotation[] getAnnotations() Returns an array of this package's annotations.","Annotation[] getDeclaredAnnotations() Returns an array of this package's declared annotations.","String getImplementationTitle() Returns the title of the implementation of this package, or null if this is unknown.","String getImplementationVendor() Returns the name of the vendor or organization that provides this implementation of the package, or null if this is unknown.","String getImplementationVersion() Returns the version of the implementation of this package, or null if this is unknown.","String getName() Returns the name of this package in the standard dot notation; for example: \"java.lang\".","static Package getPackage(String packageName) Attempts to locate the requested package in the caller's class loader.","static Package[] getPackages() Returns all the packages known to the caller's class loader.","String getSpecificationTitle() Returns the title of the specification this package implements, or null if this is unknown.","String getSpecificationVendor() Returns the name of the vendor or organization that owns and maintains the specification this package implements, or null if this is unknown.","String getSpecificationVersion() Returns the version of the specification this package implements, or null if this is unknown.","int hashCode() Returns an integer hash code for this object.","boolean isAnnotationPresent(Class<?만xtendsㅁnnotation> annotationType) Indicates whether the specified annotation is present.","boolean isCompatibleWith(String version) Indicates whether this package's specification version is compatible with the specified version string.","boolean isSealed(URL url) Indicates whether this package is sealed with respect to the specified URL.","boolean isSealed() Indicates whether this package is sealed.","String toString() Returns a string containing a concise, human-readable description of this object.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface java.lang.reflect.AnnotatedElement abstract <T만xtendsㅁnnotation> T getAnnotation(Class<T> annotationType) Returns, for this element, the annotation with the specified type, or null if no annotation with the specified type is present (including inherited annotations). abstract Annotation[] getAnnotations() Returns, for this element, an array containing all annotations (including inherited annotations). abstract Annotation[] getDeclaredAnnotations() Returns, for this element, all annotations that are explicitly declared (not inherited). abstract boolean isAnnotationPresent(Class<?만xtendsㅁnnotation> annotationType) Indicates whether or not this element has an annotation with the specified annotation type (including inherited annotations).","abstract <T만xtendsㅁnnotation> T getAnnotation(Class<T> annotationType) Returns, for this element, the annotation with the specified type, or null if no annotation with the specified type is present (including inherited annotations).","abstract Annotation[] getAnnotations() Returns, for this element, an array containing all annotations (including inherited annotations).","abstract Annotation[] getDeclaredAnnotations() Returns, for this element, all annotations that are explicitly declared (not inherited).","abstract boolean isAnnotationPresent(Class<?만xtendsㅁnnotation> annotationType) Indicates whether or not this element has an annotation with the specified annotation type (including inherited annotations)."],"package":"java.lang","constants":[],"class":"Package","constructors":[],"fields":[]}