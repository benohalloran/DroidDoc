{"methods":["final void appendFrom(Parcel parcel, int offset, int length)","final IBinder[] createBinderArray()","final ArrayList<IBinder> createBinderArrayList() Read and return a new ArrayList containing IBinder objects from the parcel that was written with writeBinderList(List) at the current dataPosition().","final boolean[] createBooleanArray()","final byte[] createByteArray() Read and return a byte[] object from the parcel.","final char[] createCharArray()","final double[] createDoubleArray()","final float[] createFloatArray()","final int[] createIntArray()","final long[] createLongArray()","final String[] createStringArray()","final ArrayList<String> createStringArrayList() Read and return a new ArrayList containing String objects from the parcel that was written with writeStringList(List) at the current dataPosition().","final <T> T[] createTypedArray(Creator<T> c) Read and return a new array containing a particular object type from the parcel at the current dataPosition().","final <T> ArrayList<T> createTypedArrayList(Creator<T> c) Read and return a new ArrayList containing a particular object type from the parcel that was written with writeTypedList(List) at the current dataPosition().","final int dataAvail() Returns the amount of data remaining to be read from the parcel.","final int dataCapacity() Returns the total amount of space in the parcel.","final int dataPosition() Returns the current position in the parcel data.","final int dataSize() Returns the total amount of data contained in the parcel.","final void enforceInterface(String interfaceName)","final boolean hasFileDescriptors() Report whether the parcel contains any marshalled file descriptors.","final byte[] marshall() Returns the raw bytes of the parcel.","static Parcel obtain() Retrieve a new Parcel object from the pool.","final Object[] readArray(ClassLoader loader) Read and return a new Object array from the parcel at the current dataPosition().","final ArrayList readArrayList(ClassLoader loader) Read and return a new ArrayList object from the parcel at the current dataPosition().","final void readBinderArray(IBinder[] val)","final void readBinderList(List<IBinder> list) Read into the given List items IBinder objects that were written with writeBinderList(List) at the current dataPosition().","final void readBooleanArray(boolean[] val)","final Bundle readBundle(ClassLoader loader) Read and return a new Bundle object from the parcel at the current dataPosition(), using the given class loader to initialize the class loader of the Bundle for later retrieval of Parcelable objects.","final Bundle readBundle() Read and return a new Bundle object from the parcel at the current dataPosition().","final byte readByte() Read a byte value from the parcel at the current dataPosition().","final void readByteArray(byte[] val) Read a byte[] object from the parcel and copy it into the given byte array.","final void readCharArray(char[] val)","final double readDouble() Read a double precision floating point value from the parcel at the current dataPosition().","final void readDoubleArray(double[] val)","final void readException(int code, String msg) Throw an exception with the given message.","final void readException() Special function for reading an exception result from the header of a parcel, to be used after receiving the result of a transaction.","final ParcelFileDescriptor readFileDescriptor() Read a FileDescriptor from the parcel at the current dataPosition().","final float readFloat() Read a floating point value from the parcel at the current dataPosition().","final void readFloatArray(float[] val)","final HashMap readHashMap(ClassLoader loader) Please use readBundle(ClassLoader) instead (whose data must have been written with writeBundle(Bundle).","final int readInt() Read an integer value from the parcel at the current dataPosition().","final void readIntArray(int[] val)","final void readList(List outVal, ClassLoader loader) Read into an existing List object from the parcel at the current dataPosition(), using the given class loader to load any enclosed Parcelables.","final long readLong() Read a long integer value from the parcel at the current dataPosition().","final void readLongArray(long[] val)","final void readMap(Map outVal, ClassLoader loader) Please use readBundle(ClassLoader) instead (whose data must have been written with writeBundle(Bundle).","final <T extends Parcelable> T readParcelable(ClassLoader loader) Read and return a new Parcelable from the parcel.","final Parcelable[] readParcelableArray(ClassLoader loader) Read and return a new Parcelable array from the parcel.","final PersistableBundle readPersistableBundle(ClassLoader loader) Read and return a new Bundle object from the parcel at the current dataPosition(), using the given class loader to initialize the class loader of the Bundle for later retrieval of Parcelable objects.","final PersistableBundle readPersistableBundle() Read and return a new Bundle object from the parcel at the current dataPosition().","final Serializable readSerializable() Read and return a new Serializable object from the parcel.","final Size readSize() Read a Size from the parcel at the current dataPosition().","final SizeF readSizeF() Read a SizeF from the parcel at the current dataPosition().","final SparseArray readSparseArray(ClassLoader loader) Read and return a new SparseArray object from the parcel at the current dataPosition().","final SparseBooleanArray readSparseBooleanArray() Read and return a new SparseBooleanArray object from the parcel at the current dataPosition().","final String readString() Read a string value from the parcel at the current dataPosition().","final void readStringArray(String[] val)","final void readStringList(List<String> list) Read into the given List items String objects that were written with writeStringList(List) at the current dataPosition().","final IBinder readStrongBinder() Read an object from the parcel at the current dataPosition().","final <T> void readTypedArray(T[] val, Creator<T> c)","final <T> void readTypedList(List<T> list, Creator<T> c) Read into the given List items containing a particular object type that were written with writeTypedList(List) at the current dataPosition().","final Object readValue(ClassLoader loader) Read a typed object from a parcel.","final void recycle() Put a Parcel object back into the pool.","final void setDataCapacity(int size) Change the capacity (current available space) of the parcel.","final void setDataPosition(int pos) Move the current read/write position in the parcel.","final void setDataSize(int size) Change the amount of data in the parcel.","final void unmarshall(byte[] data, int offest, int length) Set the bytes in data to be the raw bytes of this Parcel.","final void writeArray(Object[] val) Flatten an Object array into the parcel at the current dataPosition(), growing dataCapacity() if needed.","final void writeBinderArray(IBinder[] val)","final void writeBinderList(List<IBinder> val) Flatten a List containing IBinder objects into the parcel, at the current dataPosition() and growing dataCapacity() if needed.","final void writeBooleanArray(boolean[] val)","final void writeBundle(Bundle val) Flatten a Bundle into the parcel at the current dataPosition(), growing dataCapacity() if needed.","final void writeByte(byte val) Write a byte value into the parcel at the current dataPosition(), growing dataCapacity() if needed.","final void writeByteArray(byte[] b, int offset, int len) Write a byte array into the parcel at the current dataPosition(), growing dataCapacity() if needed.","final void writeByteArray(byte[] b) Write a byte array into the parcel at the current dataPosition(), growing dataCapacity() if needed.","final void writeCharArray(char[] val)","final void writeDouble(double val) Write a double precision floating point value into the parcel at the current dataPosition(), growing dataCapacity() if needed.","final void writeDoubleArray(double[] val)","final void writeException(Exception e) Special function for writing an exception result at the header of a parcel, to be used when returning an exception from a transaction.","final void writeFileDescriptor(FileDescriptor val) Write a FileDescriptor into the parcel at the current dataPosition(), growing dataCapacity() if needed.","final void writeFloat(float val) Write a floating point value into the parcel at the current dataPosition(), growing dataCapacity() if needed.","final void writeFloatArray(float[] val)","final void writeInt(int val) Write an integer value into the parcel at the current dataPosition(), growing dataCapacity() if needed.","final void writeIntArray(int[] val)","final void writeInterfaceToken(String interfaceName) Store or read an IBinder interface token in the parcel at the current dataPosition().","final void writeList(List val) Flatten a List into the parcel at the current dataPosition(), growing dataCapacity() if needed.","final void writeLong(long val) Write a long integer value into the parcel at the current dataPosition(), growing dataCapacity() if needed.","final void writeLongArray(long[] val)","final void writeMap(Map val) Please use writeBundle(Bundle) instead.","final void writeNoException() Special function for writing information at the front of the Parcel indicating that no exception occurred.","final void writeParcelable(Parcelable p, int parcelableFlags) Flatten the name of the class of the Parcelable and its contents into the parcel.","final <T extends Parcelable> void writeParcelableArray(T[] value, int parcelableFlags) Write a heterogeneous array of Parcelable objects into the Parcel.","final void writePersistableBundle(PersistableBundle val) Flatten a PersistableBundle into the parcel at the current dataPosition(), growing dataCapacity() if needed.","final void writeSerializable(Serializable s) Write a generic serializable object in to a Parcel.","final void writeSize(Size val) Flatten a Size into the parcel at the current dataPosition(), growing dataCapacity() if needed.","final void writeSizeF(SizeF val) Flatten a SizeF into the parcel at the current dataPosition(), growing dataCapacity() if needed.","final void writeSparseArray(SparseArray<Object> val) Flatten a generic SparseArray into the parcel at the current dataPosition(), growing dataCapacity() if needed.","final void writeSparseBooleanArray(SparseBooleanArray val)","final void writeString(String val) Write a string value into the parcel at the current dataPosition(), growing dataCapacity() if needed.","final void writeStringArray(String[] val)","final void writeStringList(List<String> val) Flatten a List containing String objects into the parcel, at the current dataPosition() and growing dataCapacity() if needed.","final void writeStrongBinder(IBinder val) Write an object into the parcel at the current dataPosition(), growing dataCapacity() if needed.","final void writeStrongInterface(IInterface val) Write an object into the parcel at the current dataPosition(), growing dataCapacity() if needed.","final <T extends Parcelable> void writeTypedArray(T[] val, int parcelableFlags) Flatten a heterogeneous array containing a particular object type into the parcel, at the current dataPosition() and growing dataCapacity() if needed.","final <T extends Parcelable> void writeTypedList(List<T> val) Flatten a List containing a particular object type into the parcel, at the current dataPosition() and growing dataCapacity() if needed.","final void writeValue(Object v) Flatten a generic object in to a parcel.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.os","constants":[],"class":"Parcel","constructors":[],"fields":["public static final Creator<String> STRING_CREATOR"]}