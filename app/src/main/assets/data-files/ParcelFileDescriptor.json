{"methods":["static ParcelFileDescriptor adoptFd(int fd) Take ownership of a raw native fd in to a new ParcelFileDescriptor.","boolean canDetectErrors() Indicates if this ParcelFileDescriptor can communicate and detect remote errors/crashes.","void checkError() Detect and throw if the other end of a pipe or socket pair encountered an error or crashed.","void close() Close the ParcelFileDescriptor.","void closeWithError(String msg) Close the ParcelFileDescriptor, informing any peer that an error occurred while processing.","static ParcelFileDescriptor[] createPipe() Create two ParcelFileDescriptors structured as a data pipe.","static ParcelFileDescriptor[] createReliablePipe() Create two ParcelFileDescriptors structured as a data pipe.","static ParcelFileDescriptor[] createReliableSocketPair() Create two ParcelFileDescriptors structured as a pair of sockets connected to each other.","static ParcelFileDescriptor[] createSocketPair() Create two ParcelFileDescriptors structured as a pair of sockets connected to each other.","int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation.","int detachFd() Return the native fd int for this ParcelFileDescriptor and detach it from the object here.","static ParcelFileDescriptor dup(FileDescriptor orig) Create a new ParcelFileDescriptor that is a dup of an existing FileDescriptor.","ParcelFileDescriptor dup() Create a new ParcelFileDescriptor that is a dup of the existing FileDescriptor.","static ParcelFileDescriptor fromDatagramSocket(DatagramSocket datagramSocket) Create a new ParcelFileDescriptor from the specified DatagramSocket.","static ParcelFileDescriptor fromFd(int fd) Create a new ParcelFileDescriptor from a raw native fd.","static ParcelFileDescriptor fromSocket(Socket socket) Create a new ParcelFileDescriptor from the specified Socket.","int getFd() Return the native fd int for this ParcelFileDescriptor.","FileDescriptor getFileDescriptor() Retrieve the actual FileDescriptor associated with this object.","long getStatSize() Return the total size of the file representing this fd, as determined by stat().","static ParcelFileDescriptor open(File file, int mode, Handler handler, ParcelFileDescriptor.OnCloseListener listener) Create a new ParcelFileDescriptor accessing a given file.","static ParcelFileDescriptor open(File file, int mode) Create a new ParcelFileDescriptor accessing a given file.","static int parseMode(String mode) Converts a string representing a file mode, such as \"rw\", into a bitmask suitable for use with open(File, int).","String toString() Returns a string containing a concise, human-readable description of this object.","void writeToParcel(Parcel out, int flags) Flatten this object in to a Parcel. If PARCELABLE_WRITE_RETURN_VALUE is set in flags, the file descriptor will be closed after a copy is written to the Parcel.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface android.os.Parcelable abstract int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation. abstract void writeToParcel(Parcel dest, int flags) Flatten this object in to a Parcel.","abstract int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation.","abstract void writeToParcel(Parcel dest, int flags) Flatten this object in to a Parcel.","From interface java.io.Closeable abstract void close() Closes the object and release any system resources it holds.","abstract void close() Closes the object and release any system resources it holds.","From interface java.lang.AutoCloseable abstract void close() Closes the object and release any system resources it holds.","abstract void close() Closes the object and release any system resources it holds."],"package":"android.os","constants":["int MODE_APPEND For use with open(File, int): append to end of file while writing.","int MODE_CREATE For use with open(File, int): create the file if it doesn't already exist.","int MODE_READ_ONLY For use with open(File, int): open the file with read-only access.","int MODE_READ_WRITE For use with open(File, int): open the file with read and write access.","int MODE_TRUNCATE For use with open(File, int): erase contents of file when opening.","int MODE_WORLD_READABLE This constant was deprecated in API level 19. Creating world-readable files is very dangerous, and likely to cause security holes in applications. It is strongly discouraged; instead, applications should use more formal mechanism for interactions such as ContentProvider, BroadcastReceiver, and Service. There are no guarantees that this access mode will remain on a file, such as when it goes through a backup and restore.","int MODE_WORLD_WRITEABLE This constant was deprecated in API level 19. Creating world-writable files is very dangerous, and likely to cause security holes in applications. It is strongly discouraged; instead, applications should use more formal mechanism for interactions such as ContentProvider, BroadcastReceiver, and Service. There are no guarantees that this access mode will remain on a file, such as when it goes through a backup and restore.","int MODE_WRITE_ONLY For use with open(File, int): open the file with write-only access.","[Expand] Inherited Constants","From interface android.os.Parcelable int CONTENTS_FILE_DESCRIPTOR Bit masks for use with describeContents(): each bit represents a kind of object considered to have potential special significance when marshalled. int PARCELABLE_WRITE_RETURN_VALUE Flag for use with writeToParcel(Parcel, int): the object being written is a return value, that is the result of a function such as \"Parcelable someFunction()\", \"void someFunction(out Parcelable)\", or \"void someFunction(inout Parcelable)\".","int CONTENTS_FILE_DESCRIPTOR Bit masks for use with describeContents(): each bit represents a kind of object considered to have potential special significance when marshalled.","int PARCELABLE_WRITE_RETURN_VALUE Flag for use with writeToParcel(Parcel, int): the object being written is a return value, that is the result of a function such as \"Parcelable someFunction()\", \"void someFunction(out Parcelable)\", or \"void someFunction(inout Parcelable)\"."],"class":"ParcelFileDescriptor","constructors":[],"fields":["public static final Creator<ParcelFileDescriptor> CREATOR"]}