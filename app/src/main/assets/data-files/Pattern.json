{"methods":["static Pattern compile(String regularExpression, int flags) Returns a compiled form of the given regularExpression, as modified by the given flags.","static Pattern compile(String pattern) Equivalent to Pattern.compile(pattern, 0).","int flags() Returns the flags supplied to compile.","Matcher matcher(CharSequence input) Returns a Matcher for this pattern applied to the given input.","static boolean matches(String regularExpression, CharSequence input) Tests whether the given regularExpression matches the given input.","String pattern() Returns the regular expression supplied to compile.","static String quote(String string) Quotes the given string using \"\\Q\" and \"\\E\", so that all meta-characters lose their special meaning.","String[] split(CharSequence input) Equivalent to split(input, 0).","String[] split(CharSequence input, int limit) Splits the given input at occurrences of this pattern.","String toString() Returns a string containing a concise, human-readable description of this object.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"java.util.regex","constants":["int CANON_EQ This constant specifies that a character in a Pattern and a character in the input string only match if they are canonically equivalent.","int CASE_INSENSITIVE This constant specifies that a Pattern is matched case-insensitively.","int COMMENTS This constant specifies that a Pattern may contain whitespace or comments.","int DOTALL This constant specifies that the '.' meta character matches arbitrary characters, including line endings, which is normally not the case.","int LITERAL This constant specifies that the whole Pattern is to be taken literally, that is, all meta characters lose their meanings.","int MULTILINE This constant specifies that the meta characters '^' and '$' match only the beginning and end of an input line, respectively.","int UNICODE_CASE This constant specifies that a Pattern that uses case-insensitive matching will use Unicode case folding.","int UNIX_LINES This constant specifies that a pattern matches Unix line endings ('\\n') only against the '.', '^', and '$' meta characters."],"class":"Pattern","constructors":[],"fields":[]}