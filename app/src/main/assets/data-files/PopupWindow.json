{"methods":["void dismiss() Dispose of the popup window.","int getAnimationStyle() Return the animation style to use the popup appears and disappears","Drawable getBackground() Return the drawable used as the popup window's background.","View getContentView() Return the view used as the content of the popup window.","float getElevation()","int getHeight() Return this popup's height MeasureSpec","int getInputMethodMode() Return the current value in setInputMethodMode(int).","int getMaxAvailableHeight(View anchor) Returns the maximum height that is available for the popup to be completely shown.","int getMaxAvailableHeight(View anchor, int yOffset) Returns the maximum height that is available for the popup to be completely shown.","int getSoftInputMode() Returns the current value in setSoftInputMode(int).","int getWidth() Return this popup's width MeasureSpec","boolean isAboveAnchor() Indicates whether the popup is showing above (the y coordinate of the popup's bottom is less than the y coordinate of the anchor) or below the anchor view (the y coordinate of the popup is greater than y coordinate of the anchor's bottom).","boolean isClippingEnabled() Indicates whether clipping of the popup window is enabled.","boolean isFocusable() Indicate whether the popup window can grab the focus.","boolean isOutsideTouchable() Indicates whether the popup window will be informed of touch events outside of its window.","boolean isShowing() Indicate whether this popup window is showing on screen.","boolean isSplitTouchEnabled() Indicates whether the popup window supports splitting touches.","boolean isTouchable() Indicates whether the popup window receives touch events.","void setAnimationStyle(int animationStyle) Change the animation style resource for this popup.","void setBackgroundDrawable(Drawable background) Specifies the background drawable for this popup window.","void setClippingEnabled(boolean enabled) Allows the popup window to extend beyond the bounds of the screen.","void setContentView(View contentView) Change the popup's content.","void setElevation(float elevation) Specifies the elevation for this popup window.","void setFocusable(boolean focusable) Changes the focusability of the popup window.","void setHeight(int height) Change the popup's height MeasureSpec If the popup is showing, calling this method will take effect only the next time the popup is shown.","void setIgnoreCheekPress() Set the flag on popup to ignore cheek press eventt; by default this flag is set to false which means the pop wont ignore cheek press dispatch events.","void setInputMethodMode(int mode) Control how the popup operates with an input method: one of INPUT_METHOD_FROM_FOCUSABLE, INPUT_METHOD_NEEDED, or INPUT_METHOD_NOT_NEEDED.","void setOnDismissListener(PopupWindow.OnDismissListener onDismissListener) Sets the listener to be called when the window is dismissed.","void setOutsideTouchable(boolean touchable) Controls whether the pop-up will be informed of touch events outside of its window.","void setSoftInputMode(int mode) Sets the operating mode for the soft input area.","void setSplitTouchEnabled(boolean enabled) Allows the popup window to split touches across other windows that also support split touch.","void setTouchInterceptor(View.OnTouchListener l) Set a callback for all touch events being dispatched to the popup window.","void setTouchable(boolean touchable) Changes the touchability of the popup window.","void setWidth(int width) Change the popup's width MeasureSpec If the popup is showing, calling this method will take effect only the next time the popup is shown.","void setWindowLayoutMode(int widthSpec, int heightSpec) Change the width and height measure specs that are given to the window manager by the popup.","void showAsDropDown(View anchor, int xoff, int yoff, int gravity) Display the content view in a popup window anchored to the bottom-left corner of the anchor view offset by the specified x and y coordinates.","void showAsDropDown(View anchor, int xoff, int yoff) Display the content view in a popup window anchored to the bottom-left corner of the anchor view offset by the specified x and y coordinates.","void showAsDropDown(View anchor) Display the content view in a popup window anchored to the bottom-left corner of the anchor view.","void showAtLocation(View parent, int gravity, int x, int y) Display the content view in a popup window at the specified location.","void update(View anchor, int width, int height) Updates the position and the dimension of the popup window.","void update(int x, int y, int width, int height) Updates the position and the dimension of the popup window.","void update(View anchor, int xoff, int yoff, int width, int height) Updates the position and the dimension of the popup window.","void update() Updates the state of the popup window, if it is currently being displayed, from the currently set state.","void update(int x, int y, int width, int height, boolean force) Updates the position and the dimension of the popup window.","void update(int width, int height) Updates the dimension of the popup window.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.widget","constants":["int INPUT_METHOD_FROM_FOCUSABLE Mode for setInputMethodMode(int): the requirements for the input method should be based on the focusability of the popup.","int INPUT_METHOD_NEEDED Mode for setInputMethodMode(int): this popup always needs to work with an input method, regardless of whether it is focusable.","int INPUT_METHOD_NOT_NEEDED Mode for setInputMethodMode(int): this popup never needs to work with an input method, regardless of whether it is focusable."],"class":"PopupWindow","constructors":[],"fields":[]}