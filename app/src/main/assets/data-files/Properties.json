{"methods":["String getProperty(String name, String defaultValue) Searches for the property with the specified name.","String getProperty(String name) Searches for the property with the specified name.","void list(PrintStream out) Lists the mappings in this Properties to out in a human-readable form.","void list(PrintWriter out) Lists the mappings in this Properties to out in a human-readable form.","synchronized void load(InputStream in) Loads properties from the specified InputStream, assumed to be ISO-8859-1.","synchronized void load(Reader in) Loads properties from the specified Reader.","synchronized void loadFromXML(InputStream in) Loads the properties from an InputStream containing the properties in XML form.","Enumeration<?> propertyNames() Returns all of the property names (keys) in this Properties object.","void save(OutputStream out, String comment) This method was deprecated in API level 1. This method ignores any IOException thrown while writing \u2014 use store(OutputStream, String) instead for better exception handling.","Object setProperty(String name, String value) Maps the specified key to the specified value.","synchronized void store(OutputStream out, String comment) Stores properties to the specified OutputStream, using ISO-8859-1.","synchronized void store(Writer writer, String comment) Stores the mappings in this Properties object to out, putting the specified comment at the beginning.","synchronized void storeToXML(OutputStream os, String comment, String encoding) Writes all properties stored in this instance into the OutputStream in XML representation.","void storeToXML(OutputStream os, String comment) Writes all properties stored in this instance into the OutputStream in XML representation.","Set<String> stringPropertyNames() Returns those property names (keys) in this Properties object for which both key and value are strings.","[Expand] Inherited Methods","From class java.util.Hashtable synchronized void clear() Removes all key/value pairs from this Hashtable, leaving the size zero and the capacity unchanged. synchronized Object clone() Returns a new Hashtable with the same key/value pairs, capacity and load factor. boolean contains(Object value) Returns true if this Hashtable contains the specified object as the value of at least one of the key/value pairs. synchronized boolean containsKey(Object key) Returns true if this Hashtable contains the specified object as a key of one of the key/value pairs. synchronized boolean containsValue(Object value) Searches this Hashtable for the specified value. synchronized Enumeration<V> elements() Returns an enumeration on the values of this Hashtable. synchronized Set<Entry<K, V>> entrySet() Returns a set of the mappings contained in this Hashtable. synchronized boolean equals(Object object) Compares this Hashtable with the specified object and indicates if they are equal. synchronized V get(Object key) Returns the value associated with the specified key in this Hashtable. synchronized int hashCode() Returns an integer hash code for this object. synchronized boolean isEmpty() Returns true if this Hashtable has no key/value pairs. synchronized Set<K> keySet() Returns a set of the keys contained in this Hashtable. synchronized Enumeration<K> keys() Returns an enumeration on the keys of this Hashtable instance. synchronized V put(K key, V value) Associate the specified value with the specified key in this Hashtable. synchronized void putAll(Map<? extends K, ? extends V> map) Copies every mapping to this Hashtable from the specified map. void rehash() Increases the capacity of this Hashtable. synchronized V remove(Object key) Removes the key/value pair with the specified key from this Hashtable. synchronized int size() Returns the number of key/value pairs in this Hashtable. synchronized String toString() Returns the string representation of this Hashtable. synchronized Collection<V> values() Returns a collection of the values contained in this Hashtable.","synchronized void clear() Removes all key/value pairs from this Hashtable, leaving the size zero and the capacity unchanged.","synchronized Object clone() Returns a new Hashtable with the same key/value pairs, capacity and load factor.","boolean contains(Object value) Returns true if this Hashtable contains the specified object as the value of at least one of the key/value pairs.","synchronized boolean containsKey(Object key) Returns true if this Hashtable contains the specified object as a key of one of the key/value pairs.","synchronized boolean containsValue(Object value) Searches this Hashtable for the specified value.","synchronized Enumeration<V> elements() Returns an enumeration on the values of this Hashtable.","synchronized Set<Entry<K, V>> entrySet() Returns a set of the mappings contained in this Hashtable.","synchronized boolean equals(Object object) Compares this Hashtable with the specified object and indicates if they are equal.","synchronized V get(Object key) Returns the value associated with the specified key in this Hashtable.","synchronized int hashCode() Returns an integer hash code for this object.","synchronized boolean isEmpty() Returns true if this Hashtable has no key/value pairs.","synchronized Set<K> keySet() Returns a set of the keys contained in this Hashtable.","synchronized Enumeration<K> keys() Returns an enumeration on the keys of this Hashtable instance.","synchronized V put(K key, V value) Associate the specified value with the specified key in this Hashtable.","synchronized void putAll(Map<? extends K, ? extends V> map) Copies every mapping to this Hashtable from the specified map.","void rehash() Increases the capacity of this Hashtable.","synchronized V remove(Object key) Removes the key/value pair with the specified key from this Hashtable.","synchronized int size() Returns the number of key/value pairs in this Hashtable.","synchronized String toString() Returns the string representation of this Hashtable.","synchronized Collection<V> values() Returns a collection of the values contained in this Hashtable.","From class java.util.Dictionary abstract Enumeration<V> elements() Returns an enumeration on the elements of this dictionary. abstract V get(Object key) Returns the value which is associated with key. abstract boolean isEmpty() Returns true if this dictionary has no key/value pairs. abstract Enumeration<K> keys() Returns an enumeration on the keys of this dictionary. abstract V put(K key, V value) Associate key with value in this dictionary. abstract V remove(Object key) Removes the key/value pair with the specified key from this dictionary. abstract int size() Returns the number of key/value pairs in this dictionary.","abstract Enumeration<V> elements() Returns an enumeration on the elements of this dictionary.","abstract V get(Object key) Returns the value which is associated with key.","abstract boolean isEmpty() Returns true if this dictionary has no key/value pairs.","abstract Enumeration<K> keys() Returns an enumeration on the keys of this dictionary.","abstract V put(K key, V value) Associate key with value in this dictionary.","abstract V remove(Object key) Removes the key/value pair with the specified key from this dictionary.","abstract int size() Returns the number of key/value pairs in this dictionary.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface java.util.Map abstract void clear() Removes all elements from this Map, leaving it empty. abstract boolean containsKey(Object key) Returns whether this Map contains the specified key. abstract boolean containsValue(Object value) Returns whether this Map contains the specified value. abstract Set<Entry<K, V>> entrySet() Returns a Set containing all of the mappings in this Map. abstract boolean equals(Object object) Compares the argument to the receiver, and returns true if the specified object is a Map and both Maps contain the same mappings. abstract V get(Object key) Returns the value of the mapping with the specified key. abstract int hashCode() Returns an integer hash code for the receiver. abstract boolean isEmpty() Returns whether this map is empty. abstract Set<K> keySet() Returns a set of the keys contained in this Map. abstract V put(K key, V value) Maps the specified key to the specified value. abstract void putAll(Map<? extends K, ? extends V> map) Copies every mapping in the specified Map to this Map. abstract V remove(Object key) Removes a mapping with the specified key from this Map. abstract int size() Returns the number of mappings in this Map. abstract Collection<V> values() Returns a Collection of the values contained in this Map.","abstract void clear() Removes all elements from this Map, leaving it empty.","abstract boolean containsKey(Object key) Returns whether this Map contains the specified key.","abstract boolean containsValue(Object value) Returns whether this Map contains the specified value.","abstract Set<Entry<K, V>> entrySet() Returns a Set containing all of the mappings in this Map.","abstract boolean equals(Object object) Compares the argument to the receiver, and returns true if the specified object is a Map and both Maps contain the same mappings.","abstract V get(Object key) Returns the value of the mapping with the specified key.","abstract int hashCode() Returns an integer hash code for the receiver.","abstract boolean isEmpty() Returns whether this map is empty.","abstract Set<K> keySet() Returns a set of the keys contained in this Map.","abstract V put(K key, V value) Maps the specified key to the specified value.","abstract void putAll(Map<? extends K, ? extends V> map) Copies every mapping in the specified Map to this Map.","abstract V remove(Object key) Removes a mapping with the specified key from this Map.","abstract int size() Returns the number of mappings in this Map.","abstract Collection<V> values() Returns a Collection of the values contained in this Map."],"package":"java.util","constants":[],"class":"Properties","constructors":[],"fields":["protected Properties defaults The default values for keys not found in this Properties instance."]}