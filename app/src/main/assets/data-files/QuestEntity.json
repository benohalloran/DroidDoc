{"methods":["int describeContents()","boolean equals(Object obj)","Quest freeze() Freeze a volatile representation into an immutable representation.","long getAcceptedTimestamp() Retrieves the timestamp (in milliseconds since epoch) at which this quest was accepted by the player.","Uri getBannerImageUri() Retrieves a URI that can be used to load the quest's banner image.","Milestone getCurrentMilestone() Retrieves the latest milestone information associated with this quest.","String getDescription() Retrieves the description for this quest.","void getDescription(CharArrayBuffer dataOut) Loads the quest description into the given CharArrayBuffer.","long getEndTimestamp() Timestamp at which this quest will change to STATE_EXPIRED if not accepted, or change to STATE_FAILED if accepted but not completed.","Game getGame() Retrieves the game metadata associated with this quest.","Uri getIconImageUri() Retrieves a URI that can be used to load the quest's icon image.","long getLastUpdatedTimestamp() Retrieves the timestamp (in milliseconds since epoch) at which this quest was last updated.","void getName(CharArrayBuffer dataOut) Loads the quest name into the given CharArrayBuffer.","String getName() Retrieves the name of this quest.","String getQuestId() Retrieves the ID of this quest.","long getStartTimestamp() Retrieves the timestamp (in milliseconds since epoch) at which this quest will be available for players to accept.","int getState() Retrieves the state of the quest - one of STATE_UPCOMING, STATE_OPEN, STATE_COMPLETED, STATE_EXPIRED, STATE_FAILED, STATE_ACCEPTED.","int hashCode()","boolean isDataValid() Check to see if this object is valid for use.","boolean isEndingSoon() Indicates whether the quest will be expiring soon","String toString()","void writeToParcel(Parcel out, int flags)","[Expand] Inherited Methods","From class java.lang.Object Object clone() boolean equals(Object arg0) void finalize() final Class<?> getClass() int hashCode() final void notify() final void notifyAll() String toString() final void wait() final void wait(long arg0, int arg1) final void wait(long arg0)","Object clone()","boolean equals(Object arg0)","void finalize()","final Class<?> getClass()","int hashCode()","final void notify()","final void notifyAll()","String toString()","final void wait()","final void wait(long arg0, int arg1)","final void wait(long arg0)","From interface android.os.Parcelable abstract int describeContents() abstract void writeToParcel(Parcel arg0, int arg1)","abstract int describeContents()","abstract void writeToParcel(Parcel arg0, int arg1)","From interface com.google.android.gms.common.data.Freezable abstract T freeze() Freeze a volatile representation into an immutable representation. abstract boolean isDataValid() Check to see if this object is valid for use.","abstract T freeze() Freeze a volatile representation into an immutable representation.","abstract boolean isDataValid() Check to see if this object is valid for use.","From interface com.google.android.gms.games.quest.Quest abstract long getAcceptedTimestamp() Retrieves the timestamp (in milliseconds since epoch) at which this quest was accepted by the player. abstract Uri getBannerImageUri() Retrieves a URI that can be used to load the quest's banner image. abstract Milestone getCurrentMilestone() Retrieves the latest milestone information associated with this quest. abstract String getDescription() Retrieves the description for this quest. abstract void getDescription(CharArrayBuffer dataOut) Loads the quest description into the given CharArrayBuffer. abstract long getEndTimestamp() Timestamp at which this quest will change to STATE_EXPIRED if not accepted, or change to STATE_FAILED if accepted but not completed. abstract Game getGame() Retrieves the game metadata associated with this quest. abstract Uri getIconImageUri() Retrieves a URI that can be used to load the quest's icon image. abstract long getLastUpdatedTimestamp() Retrieves the timestamp (in milliseconds since epoch) at which this quest was last updated. abstract void getName(CharArrayBuffer dataOut) Loads the quest name into the given CharArrayBuffer. abstract String getName() Retrieves the name of this quest. abstract String getQuestId() Retrieves the ID of this quest. abstract long getStartTimestamp() Retrieves the timestamp (in milliseconds since epoch) at which this quest will be available for players to accept. abstract int getState() Retrieves the state of the quest - one of STATE_UPCOMING, STATE_OPEN, STATE_COMPLETED, STATE_EXPIRED, STATE_FAILED, STATE_ACCEPTED. abstract boolean isEndingSoon() Indicates whether the quest will be expiring soon","abstract long getAcceptedTimestamp() Retrieves the timestamp (in milliseconds since epoch) at which this quest was accepted by the player.","abstract Uri getBannerImageUri() Retrieves a URI that can be used to load the quest's banner image.","abstract Milestone getCurrentMilestone() Retrieves the latest milestone information associated with this quest.","abstract String getDescription() Retrieves the description for this quest.","abstract void getDescription(CharArrayBuffer dataOut) Loads the quest description into the given CharArrayBuffer.","abstract long getEndTimestamp() Timestamp at which this quest will change to STATE_EXPIRED if not accepted, or change to STATE_FAILED if accepted but not completed.","abstract Game getGame() Retrieves the game metadata associated with this quest.","abstract Uri getIconImageUri() Retrieves a URI that can be used to load the quest's icon image.","abstract long getLastUpdatedTimestamp() Retrieves the timestamp (in milliseconds since epoch) at which this quest was last updated.","abstract void getName(CharArrayBuffer dataOut) Loads the quest name into the given CharArrayBuffer.","abstract String getName() Retrieves the name of this quest.","abstract String getQuestId() Retrieves the ID of this quest.","abstract long getStartTimestamp() Retrieves the timestamp (in milliseconds since epoch) at which this quest will be available for players to accept.","abstract int getState() Retrieves the state of the quest - one of STATE_UPCOMING, STATE_OPEN, STATE_COMPLETED, STATE_EXPIRED, STATE_FAILED, STATE_ACCEPTED.","abstract boolean isEndingSoon() Indicates whether the quest will be expiring soon"],"package":"com.google.android.gms.games.quest","constants":["[Expand] Inherited Constants","From interface android.os.Parcelable int CONTENTS_FILE_DESCRIPTOR int PARCELABLE_WRITE_RETURN_VALUE","int CONTENTS_FILE_DESCRIPTOR","int PARCELABLE_WRITE_RETURN_VALUE","From interface com.google.android.gms.common.internal.safeparcel.SafeParcelable String NULL","String NULL","From interface com.google.android.gms.games.quest.Quest int STATE_ACCEPTED Constant returned by getState() indicating the player has accepted the quest. int STATE_COMPLETED Constant returned by getState() indicating the player has completed the quest. int STATE_EXPIRED Constant returned by getState() indicating the quest is over and this player never accepted the quest. int STATE_FAILED Constant returned by getState() indicating the quest is over and this player did not complete the quest. int STATE_OPEN Constant returned by getState() indicating players can now accept this quest. int STATE_UPCOMING Constant returned by getState() indicating the quest happens in the future, so it is visible to the UI, but players can't accept it yet. long UNSET_QUEST_TIMESTAMP The default value for Quest related timestamps when they aren't set by the server.","int STATE_ACCEPTED Constant returned by getState() indicating the player has accepted the quest.","int STATE_COMPLETED Constant returned by getState() indicating the player has completed the quest.","int STATE_EXPIRED Constant returned by getState() indicating the quest is over and this player never accepted the quest.","int STATE_FAILED Constant returned by getState() indicating the quest is over and this player did not complete the quest.","int STATE_OPEN Constant returned by getState() indicating players can now accept this quest.","int STATE_UPCOMING Constant returned by getState() indicating the quest happens in the future, so it is visible to the UI, but players can't accept it yet.","long UNSET_QUEST_TIMESTAMP The default value for Quest related timestamps when they aren't set by the server."],"class":"QuestEntity","constructors":[],"fields":["public static final QuestEntityCreator CREATOR"]}