{"methods":["abstract boolean add(E e) Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available.","abstract E element() Retrieves, but does not remove, the head of this queue.","abstract boolean offer(E e) Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions.","abstract E peek() Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.","abstract E poll() Retrieves and removes the head of this queue, or returns null if this queue is empty.","abstract E remove() Retrieves and removes the head of this queue.","[Expand] Inherited Methods","From interface java.lang.Iterable abstract Iterator<T> iterator() Returns an Iterator for the elements in this object.","abstract Iterator<T> iterator() Returns an Iterator for the elements in this object.","From interface java.util.Collection abstract boolean add(E object) Attempts to add object to the contents of this Collection (optional). abstract boolean addAll(Collection<? extends E> collection) Attempts to add all of the objects contained in Collection to the contents of this Collection (optional). abstract void clear() Removes all elements from this Collection, leaving it empty (optional). abstract boolean contains(Object object) Tests whether this Collection contains the specified object. abstract boolean containsAll(Collection<?> collection) Tests whether this Collection contains all objects contained in the specified Collection. abstract boolean equals(Object object) Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison. abstract int hashCode() Returns an integer hash code for the receiver. abstract boolean isEmpty() Returns if this Collection contains no elements. abstract Iterator<E> iterator() Returns an instance of Iterator that may be used to access the objects contained by this Collection. abstract boolean remove(Object object) Removes one instance of the specified object from this Collection if one is contained (optional). abstract boolean removeAll(Collection<?> collection) Removes all occurrences in this Collection of each object in the specified Collection (optional). abstract boolean retainAll(Collection<?> collection) Removes all objects from this Collection that are not also found in the Collection passed (optional). abstract int size() Returns a count of how many objects this Collection contains. abstract <T> T[] toArray(T[] array) Returns an array containing all elements contained in this Collection. abstract Object[] toArray() Returns a new array containing all elements contained in this Collection.","abstract boolean add(E object) Attempts to add object to the contents of this Collection (optional).","abstract boolean addAll(Collection<? extends E> collection) Attempts to add all of the objects contained in Collection to the contents of this Collection (optional).","abstract void clear() Removes all elements from this Collection, leaving it empty (optional).","abstract boolean contains(Object object) Tests whether this Collection contains the specified object.","abstract boolean containsAll(Collection<?> collection) Tests whether this Collection contains all objects contained in the specified Collection.","abstract boolean equals(Object object) Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.","abstract int hashCode() Returns an integer hash code for the receiver.","abstract boolean isEmpty() Returns if this Collection contains no elements.","abstract Iterator<E> iterator() Returns an instance of Iterator that may be used to access the objects contained by this Collection.","abstract boolean remove(Object object) Removes one instance of the specified object from this Collection if one is contained (optional).","abstract boolean removeAll(Collection<?> collection) Removes all occurrences in this Collection of each object in the specified Collection (optional).","abstract boolean retainAll(Collection<?> collection) Removes all objects from this Collection that are not also found in the Collection passed (optional).","abstract int size() Returns a count of how many objects this Collection contains.","abstract <T> T[] toArray(T[] array) Returns an array containing all elements contained in this Collection.","abstract Object[] toArray() Returns a new array containing all elements contained in this Collection."],"package":"java.util","constants":[],"class":"Queue","constructors":[],"fields":[]}