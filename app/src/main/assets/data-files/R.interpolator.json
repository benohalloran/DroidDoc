{"methods":["[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android","constants":["int accelerate_cubic Acceleration curve matching a cubic ease out function.","int accelerate_decelerate Acceleration curve matching an ease in + ease out function","int accelerate_quad Acceleration curve matching a quadtratic ease out function.","int accelerate_quint Acceleration curve matching a quint ease out function.","int anticipate An interpolator where the change starts backward then flings forward.","int anticipate_overshoot An interpolator where the change starts backward then flings forward and overshoots the target value and finally goes back to the final value.","int bounce An interpolator where the change bounces at the end.","int cycle Repeats the animation for one cycle.","int decelerate_cubic Acceleration curve matching a cubic ease in function.","int decelerate_quad Acceleration curve matching a quadtratic ease in function.","int decelerate_quint Acceleration curve matching a quint ease in function.","int fast_out_linear_in An interpolator which accelerates fast and keeps accelerating until the end.","int fast_out_slow_in An interpolator which accelerates fast but decelerates slowly.","int linear An interpolator where the rate of change is constant.","int linear_out_slow_in An interpolator which starts with a peak non-zero velocity and decelerates slowly.","int overshoot An interpolator where the change flings forward and overshoots the last value then comes back."],"class":"R.interpolator","constructors":[],"fields":[]}