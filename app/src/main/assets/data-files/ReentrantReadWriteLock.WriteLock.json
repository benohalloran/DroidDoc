{"methods":["int getHoldCount() Queries the number of holds on this write lock by the current thread.","boolean isHeldByCurrentThread() Queries if this write lock is held by the current thread.","void lock() Acquires the write lock.","void lockInterruptibly() Acquires the write lock unless the current thread is interrupted.","Condition newCondition() Returns a Condition instance for use with this Lock instance.","String toString() Returns a string identifying this lock, as well as its lock state.","boolean tryLock() Acquires the write lock only if it is not held by another thread at the time of invocation.","boolean tryLock(long timeout, TimeUnit unit) Acquires the write lock if it is not held by another thread within the given waiting time and the current thread has not been interrupted.","void unlock() Attempts to release this lock.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface java.util.concurrent.locks.Lock abstract void lock() Acquires the lock. abstract void lockInterruptibly() Acquires the lock unless the current thread is interrupted. abstract Condition newCondition() Returns a new Condition instance that is bound to this Lock instance. abstract boolean tryLock() Acquires the lock only if it is free at the time of invocation. abstract boolean tryLock(long time, TimeUnit unit) Acquires the lock if it is free within the given waiting time and the current thread has not been interrupted. abstract void unlock() Releases the lock.","abstract void lock() Acquires the lock.","abstract void lockInterruptibly() Acquires the lock unless the current thread is interrupted.","abstract Condition newCondition() Returns a new Condition instance that is bound to this Lock instance.","abstract boolean tryLock() Acquires the lock only if it is free at the time of invocation.","abstract boolean tryLock(long time, TimeUnit unit) Acquires the lock if it is free within the given waiting time and the current thread has not been interrupted.","abstract void unlock() Releases the lock."],"package":"java.util.concurrent.locks","constants":[],"class":"ReentrantReadWriteLock.WriteLock","constructors":[],"fields":[]}