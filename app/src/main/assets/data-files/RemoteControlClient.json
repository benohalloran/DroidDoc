{"methods":["RemoteControlClient.MetadataEditor editMetadata(boolean startEmpty) Creates a RemoteControlClient.MetadataEditor.","MediaSession getMediaSession() Get a MediaSession associated with this RCC.","void setMetadataUpdateListener(RemoteControlClient.OnMetadataUpdateListener l) Sets the listener to be called whenever the metadata is updated.","void setOnGetPlaybackPositionListener(RemoteControlClient.OnGetPlaybackPositionListener l) Sets the listener to be called whenever the media current playback position is needed.","void setPlaybackPositionUpdateListener(RemoteControlClient.OnPlaybackPositionUpdateListener l) Sets the listener to be called whenever the media playback position is requested to be updated.","void setPlaybackState(int state, long timeInMs, float playbackSpeed) Sets the current playback state and the matching media position for the current playback speed.","void setPlaybackState(int state) Sets the current playback state.","void setTransportControlFlags(int transportControlFlags) Sets the flags for the media transport control buttons that this client supports.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.media","constants":["int FLAG_KEY_MEDIA_FAST_FORWARD Flag indicating a RemoteControlClient makes use of the \"fast forward\" media key.","int FLAG_KEY_MEDIA_NEXT Flag indicating a RemoteControlClient makes use of the \"next\" media key.","int FLAG_KEY_MEDIA_PAUSE Flag indicating a RemoteControlClient makes use of the \"pause\" media key.","int FLAG_KEY_MEDIA_PLAY Flag indicating a RemoteControlClient makes use of the \"play\" media key.","int FLAG_KEY_MEDIA_PLAY_PAUSE Flag indicating a RemoteControlClient makes use of the \"play/pause\" media key.","int FLAG_KEY_MEDIA_POSITION_UPDATE Flag indicating a RemoteControlClient can receive changes in the media playback position through the RemoteControlClient.OnPlaybackPositionUpdateListener interface.","int FLAG_KEY_MEDIA_PREVIOUS Flag indicating a RemoteControlClient makes use of the \"previous\" media key.","int FLAG_KEY_MEDIA_RATING Flag indicating a RemoteControlClient supports ratings.","int FLAG_KEY_MEDIA_REWIND Flag indicating a RemoteControlClient makes use of the \"rewind\" media key.","int FLAG_KEY_MEDIA_STOP Flag indicating a RemoteControlClient makes use of the \"stop\" media key.","int PLAYSTATE_BUFFERING Playback state of a RemoteControlClient which is buffering data to play before it can start or resume playback.","int PLAYSTATE_ERROR Playback state of a RemoteControlClient which cannot perform any playback related operation because of an internal error.","int PLAYSTATE_FAST_FORWARDING Playback state of a RemoteControlClient which is fast forwarding in the media it is currently playing.","int PLAYSTATE_PAUSED Playback state of a RemoteControlClient which is paused.","int PLAYSTATE_PLAYING Playback state of a RemoteControlClient which is playing media.","int PLAYSTATE_REWINDING Playback state of a RemoteControlClient which is fast rewinding in the media it is currently playing.","int PLAYSTATE_SKIPPING_BACKWARDS Playback state of a RemoteControlClient which is skipping back to the previous logical chapter (such as a song in a playlist) in the media it is currently playing.","int PLAYSTATE_SKIPPING_FORWARDS Playback state of a RemoteControlClient which is skipping to the next logical chapter (such as a song in a playlist) in the media it is currently playing.","int PLAYSTATE_STOPPED Playback state of a RemoteControlClient which is stopped."],"class":"RemoteControlClient","constructors":[],"fields":[]}