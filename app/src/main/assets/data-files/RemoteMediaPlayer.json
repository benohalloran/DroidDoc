{"methods":["long getApproximateStreamPosition() Returns the approximate stream position as calculated from the last received stream information and the elapsed wall-time since that update.","MediaInfo getMediaInfo() Returns the current media information, if any.","MediaStatus getMediaStatus() Returns the current media status, if any.","String getNamespace() Returns the media control namespace.","long getStreamDuration() Convenience method for getting the stream duration.","PendingResult<RemoteMediaPlayer.MediaChannelResult> load(GoogleApiClient apiClient, MediaInfo mediaInfo, boolean autoplay) Loads and optionally starts playback of a new media item.","PendingResult<RemoteMediaPlayer.MediaChannelResult> load(GoogleApiClient apiClient, MediaInfo mediaInfo, boolean autoplay, long playPosition, long[] activeTrackIds, JSONObject customData) Loads and optionally starts playback of a new media item.","PendingResult<RemoteMediaPlayer.MediaChannelResult> load(GoogleApiClient apiClient, MediaInfo mediaInfo) Loads and automatically starts playback of a new media item.","PendingResult<RemoteMediaPlayer.MediaChannelResult> load(GoogleApiClient apiClient, MediaInfo mediaInfo, boolean autoplay, long playPosition) Loads and optionally starts playback of a new media item.","PendingResult<RemoteMediaPlayer.MediaChannelResult> load(GoogleApiClient apiClient, MediaInfo mediaInfo, boolean autoplay, long playPosition, JSONObject customData) Loads and optionally starts playback of a new media item.","void onMessageReceived(CastDevice castDevice, String namespace, String message) Called when a message is received from a given CastDevice.","PendingResult<RemoteMediaPlayer.MediaChannelResult> pause(GoogleApiClient apiClient) Pauses playback of the current media item.","PendingResult<RemoteMediaPlayer.MediaChannelResult> pause(GoogleApiClient apiClient, JSONObject customData) Pauses playback of the current media item.","PendingResult<RemoteMediaPlayer.MediaChannelResult> play(GoogleApiClient apiClient, JSONObject customData) Begins (or resumes) playback of the current media item.","PendingResult<RemoteMediaPlayer.MediaChannelResult> play(GoogleApiClient apiClient) Begins (or resumes) playback of the current media item.","PendingResult<RemoteMediaPlayer.MediaChannelResult> requestStatus(GoogleApiClient apiClient) Requests updated media status information from the receiver.","PendingResult<RemoteMediaPlayer.MediaChannelResult> seek(GoogleApiClient apiClient, long position) Seeks to a new position within the current media item.","PendingResult<RemoteMediaPlayer.MediaChannelResult> seek(GoogleApiClient apiClient, long position, int resumeState, JSONObject customData) Seeks to a new position within the current media item.","PendingResult<RemoteMediaPlayer.MediaChannelResult> seek(GoogleApiClient apiClient, long position, int resumeState) Seeks to a new position within the current media item.","PendingResult<RemoteMediaPlayer.MediaChannelResult> setActiveMediaTracks(GoogleApiClient apiClient, long[] trackIds) Sets the active media tracks.","void setOnMetadataUpdatedListener(RemoteMediaPlayer.OnMetadataUpdatedListener listener) Sets the RemoteMediaPlayer.OnMetadataUpdatedListener to get metadata updates.","void setOnStatusUpdatedListener(RemoteMediaPlayer.OnStatusUpdatedListener listener) Sets the RemoteMediaPlayer.OnStatusUpdatedListener to get status updates.","PendingResult<RemoteMediaPlayer.MediaChannelResult> setStreamMute(GoogleApiClient apiClient, boolean muteState, JSONObject customData) Toggles the stream muting.","PendingResult<RemoteMediaPlayer.MediaChannelResult> setStreamMute(GoogleApiClient apiClient, boolean muteState) Toggles the stream muting.","PendingResult<RemoteMediaPlayer.MediaChannelResult> setStreamVolume(GoogleApiClient apiClient, double volume, JSONObject customData) Sets the stream volume.","PendingResult<RemoteMediaPlayer.MediaChannelResult> setStreamVolume(GoogleApiClient apiClient, double volume) Sets the stream volume of the current media item.","PendingResult<RemoteMediaPlayer.MediaChannelResult> setTextTrackStyle(GoogleApiClient apiClient, TextTrackStyle trackStyle) Sets the text track style.","PendingResult<RemoteMediaPlayer.MediaChannelResult> stop(GoogleApiClient apiClient) Stops playback of the current media item.","PendingResult<RemoteMediaPlayer.MediaChannelResult> stop(GoogleApiClient apiClient, JSONObject customData) Stops playback of the current media item.","[Expand] Inherited Methods","From class java.lang.Object Object clone() boolean equals(Object arg0) void finalize() final Class<?> getClass() int hashCode() final void notify() final void notifyAll() String toString() final void wait() final void wait(long arg0, int arg1) final void wait(long arg0)","Object clone()","boolean equals(Object arg0)","void finalize()","final Class<?> getClass()","int hashCode()","final void notify()","final void notifyAll()","String toString()","final void wait()","final void wait(long arg0, int arg1)","final void wait(long arg0)","From interface com.google.android.gms.cast.Cast.MessageReceivedCallback abstract void onMessageReceived(CastDevice castDevice, String namespace, String message) Called when a message is received from a given CastDevice.","abstract void onMessageReceived(CastDevice castDevice, String namespace, String message) Called when a message is received from a given CastDevice."],"package":"com.google.android.gms.cast","constants":["int RESUME_STATE_PAUSE A resume state indicating that the player should be paused, regardless of its current state.","int RESUME_STATE_PLAY A resume state indicating that the player should be playing, regardless of its current state.","int RESUME_STATE_UNCHANGED A resume state indicating that the player state should be left unchanged.","int STATUS_CANCELED A status indicating that a request was canceled.","int STATUS_FAILED A status indicating that a request failed.","int STATUS_REPLACED A status indicating that the request's progress is no longer being tracked because another request of the same type has been made before the first request completed.","int STATUS_SUCCEEDED A status indicating that a request completed successfully.","int STATUS_TIMED_OUT A status indicating that a request has timed out."],"class":"RemoteMediaPlayer","constructors":[],"fields":[]}