{"methods":["void endSession(Bundle extras, RemotePlaybackClient.SessionActionCallback callback) Sends a request to end the media playback session.","void enqueue(Uri contentUri, String mimeType, Bundle metadata, long positionMillis, Bundle extras, RemotePlaybackClient.ItemActionCallback callback) Sends a request to enqueue a media item.","String getSessionId() Gets the current session id if there is one.","void getSessionStatus(Bundle extras, RemotePlaybackClient.SessionActionCallback callback) Sends a request to get the status of the media playback session.","void getStatus(String itemId, Bundle extras, RemotePlaybackClient.ItemActionCallback callback) Sends a request to get the status of a media item.","boolean hasSession() Returns true if the client currently has a session.","boolean isQueuingSupported() Returns true if the route supports queuing features.","boolean isRemotePlaybackSupported() Returns true if the route supports remote playback.","boolean isSessionManagementSupported() Returns true if the route supports session management features.","void pause(Bundle extras, RemotePlaybackClient.SessionActionCallback callback) Sends a request to pause media playback.","void play(Uri contentUri, String mimeType, Bundle metadata, long positionMillis, Bundle extras, RemotePlaybackClient.ItemActionCallback callback) Sends a request to play a media item.","void release() Releases resources owned by the client.","void remove(String itemId, Bundle extras, RemotePlaybackClient.ItemActionCallback callback) Sends a request to remove a media item from the queue.","void resume(Bundle extras, RemotePlaybackClient.SessionActionCallback callback) Sends a request to resume (unpause) media playback.","void seek(String itemId, long positionMillis, Bundle extras, RemotePlaybackClient.ItemActionCallback callback) Sends a request to seek to a new position in a media item.","void setSessionId(String sessionId) Sets the current session id.","void setStatusCallback(RemotePlaybackClient.StatusCallback callback) Sets a callback that should receive status updates when the state of media sessions or media items created by this instance of the remote playback client changes.","void startSession(Bundle extras, RemotePlaybackClient.SessionActionCallback callback) Sends a request to start a new media playback session.","void stop(Bundle extras, RemotePlaybackClient.SessionActionCallback callback) Sends a request to stop media playback and clear the media playback queue.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.support.v7.media","constants":[],"class":"RemotePlaybackClient","constructors":[],"fields":[]}