{"methods":["abstract boolean absolute(int row) Moves the cursor to a specified row number in the ResultSet.","abstract void afterLast() Moves the cursor to the end of the ResultSet, after the last row.","abstract void beforeFirst() Moves the cursor to the start of the ResultSet, before the first row.","abstract void cancelRowUpdates() Cancels any updates made to the current row in the ResultSet.","abstract void clearWarnings() Clears all warnings related to this ResultSet.","abstract void close() Releases this ResultSet's database and JDBC resources.","abstract void deleteRow() Deletes the current row from the ResultSet and from the underlying database.","abstract int findColumn(String columnName) Gets the index number for a column in the ResultSet from the provided column name.","abstract boolean first() Shifts the cursor position to the first row in the ResultSet.","abstract Array getArray(int columnIndex) Gets the content of a column specified by column index in the current row of this ResultSet as a java.sql.Array.","abstract Array getArray(String colName) Gets the value of a column specified by column name as a java.sql.Array.","abstract InputStream getAsciiStream(int columnIndex) Gets the value of a column specified by column index as an ASCII character stream.","abstract InputStream getAsciiStream(String columnName) Gets the value of a column specified by column name as an ASCII character stream.","abstract BigDecimal getBigDecimal(String columnName) Gets the value of a column specified by column name, as a java.math.BigDecimal.","abstract BigDecimal getBigDecimal(int columnIndex, int scale) This method was deprecated in API level 1. Use getBigDecimal(int) or getBigDecimal(String) instead.","abstract BigDecimal getBigDecimal(int columnIndex) Gets the value of a column specified by column index as a java.math.BigDecimal.","abstract BigDecimal getBigDecimal(String columnName, int scale) This method was deprecated in API level 1. Use getBigDecimal(int) or getBigDecimal(String) instead.","abstract InputStream getBinaryStream(int columnIndex) Gets the value of a column specified by column index as a binary stream.","abstract InputStream getBinaryStream(String columnName) Gets the value of a column specified by column name as a binary stream.","abstract Blob getBlob(String columnName) Gets the value of a column specified by column name, as a java.sql.Blob object.","abstract Blob getBlob(int columnIndex) Gets the value of a column specified by column index as a java.sql.Blob object.","abstract boolean getBoolean(int columnIndex) Gets the value of a column specified by column index as a boolean .","abstract boolean getBoolean(String columnName) Gets the value of a column specified by column name, as a boolean .","abstract byte getByte(String columnName) Gets the value of a column specified by column name as a byte.","abstract byte getByte(int columnIndex) Gets the value of a column specified by column index as a byte.","abstract byte[] getBytes(int columnIndex) Gets the value of a column specified by column index as a byte array.","abstract byte[] getBytes(String columnName) Gets the value of a column specified by column name as a byte array.","abstract Reader getCharacterStream(String columnName) Gets the value of a column specified by column name as a java.io.Reader object.","abstract Reader getCharacterStream(int columnIndex) Gets the value of a column specified by column index as a java.io.Reader object.","abstract Clob getClob(int columnIndex) Gets the value of a column specified by column index as a java.sql.Clob.","abstract Clob getClob(String colName) Gets the value of a column specified by column name as a java.sql.Clob.","abstract int getConcurrency() Gets the concurrency mode of this ResultSet.","abstract String getCursorName() Gets the name of the SQL cursor of this ResultSet.","abstract Date getDate(int columnIndex, Calendar cal) Gets the value of a column specified by column index as a java.sql.Date.","abstract Date getDate(int columnIndex) Gets the value of a column specified by column index as a java.sql.Date.","abstract Date getDate(String columnName, Calendar cal) Gets the value of a column specified by column name, as a java.sql.Date object.","abstract Date getDate(String columnName) Gets the value of a column specified by column name as a java.sql.Date.","abstract double getDouble(String columnName) Gets the value of a column specified by column name as a double value.","abstract double getDouble(int columnIndex) Gets the value of a column specified by column index as a double value.","abstract int getFetchDirection() Gets the direction in which rows are fetched for this ResultSet object.","abstract int getFetchSize() Gets the fetch size (in number of rows) for this ResultSet.","abstract float getFloat(int columnIndex) Gets the value of a column specified by column index as a float value.","abstract float getFloat(String columnName) Gets the value of a column specified by column name as a float value.","abstract int getHoldability() Returns the holdability of this result set: HOLD_CURSORS_OVER_COMMIT or CLOSE_CURSORS_AT_COMMIT.","abstract int getInt(String columnName) Gets the value of a column specified by column name, as an int value.","abstract int getInt(int columnIndex) Gets the value of a column specified by column index as an int value.","abstract long getLong(String columnName) Gets the value of a column specified by column name, as a long value.","abstract long getLong(int columnIndex) Gets the value of a column specified by column index as a long value.","abstract ResultSetMetaData getMetaData() Gets the metadata for this ResultSet.","abstract Reader getNCharacterStream(int columnIndex) Returns a Reader corresponding to the value at the 1-based columnIndex.","abstract Reader getNCharacterStream(String columnLabel) Returns a Reader corresponding to the value in the named column.","abstract NClob getNClob(String columnLabel) Returns an NClob corresponding to the value in the named column.","abstract NClob getNClob(int columnIndex) Returns an NClob corresponding to the value at the 1-based columnIndex.","abstract String getNString(String columnLabel) Returns a String corresponding to the value in the named column.","abstract String getNString(int columnIndex) Returns a String corresponding to the value at the 1-based columnIndex.","abstract Object getObject(String columnName, Map<String, Class<?>> map) Gets the value of a column specified by column name as a Java Object.","abstract Object getObject(int columnIndex, Map<String, Class<?>> map) Gets the value of a column specified by column index as a Java Object.","abstract Object getObject(String columnName) Gets the value of a specified column as a Java Object.","abstract Object getObject(int columnIndex) Gets the value of a specified column as a Java Object.","abstract Ref getRef(String colName) Gets the value of a column specified by column name as a Java java.sql.Ref.","abstract Ref getRef(int columnIndex) Gets the value of a column specified by column index as a Java java.sql.Ref.","abstract int getRow() Gets the number of the current row in the ResultSet.","abstract RowId getRowId(String columnLabel) Returns a RowId corresponding to the SQL ROWID at the named column.","abstract RowId getRowId(int columnIndex) Returns a RowId corresponding to the SQL ROWID at the 1-based columnIndex.","abstract SQLXML getSQLXML(String columnLabel) Returns an SQLXML corresponding to the value in the named column.","abstract SQLXML getSQLXML(int columnIndex) Returns an SQLXML corresponding to the value at the 1-based columnIndex.","abstract short getShort(String columnName) Gets the value of a column specified by column name, as a short value.","abstract short getShort(int columnIndex) Gets the value of a column specified by column index as a short value.","abstract Statement getStatement() Gets the statement that produced this ResultSet.","abstract String getString(int columnIndex) Gets the value of a column specified by column index as a String.","abstract String getString(String columnName) Gets the value of a column specified by column name, as a String.","abstract Time getTime(String columnName, Calendar cal) Gets the value of a column specified by column index, as a java.sql.Time value.","abstract Time getTime(String columnName) Gets the value of a column specified by column name, as a java.sql.Time value.","abstract Time getTime(int columnIndex, Calendar cal) Gets the value of a column specified by column index as a java.sql.Time value.","abstract Time getTime(int columnIndex) Gets the value of a column specified by column index as a java.sql.Time value.","abstract Timestamp getTimestamp(int columnIndex, Calendar cal) Gets the value of a column specified by column index, as a java.sql.Timestamp value.","abstract Timestamp getTimestamp(String columnName) Gets the value of a column specified by column name, as a java.sql.Timestamp value.","abstract Timestamp getTimestamp(String columnName, Calendar cal) Gets the value of a column specified by column name, as a java.sql.Timestamp value.","abstract Timestamp getTimestamp(int columnIndex) Gets the value of a column specified by column index as a java.sql.Timestamp value.","abstract int getType() Gets the type of the ResultSet.","abstract URL getURL(int columnIndex) Gets the value of a column specified by column index as a java.net.URL.","abstract URL getURL(String columnName) Gets the value of a column specified by column name as a java.net.URL object.","abstract InputStream getUnicodeStream(int columnIndex) This method was deprecated in API level 1. Use getCharacterStream(int) instead.","abstract InputStream getUnicodeStream(String columnName) This method was deprecated in API level 1. Use getCharacterStream(int) instead.","abstract SQLWarning getWarnings() Gets the first warning generated by calls on this ResultSet.","abstract void insertRow() Insert the insert row into the ResultSet and into the underlying database.","abstract boolean isAfterLast() Gets if the cursor is after the last row of the ResultSet.","abstract boolean isBeforeFirst() Gets if the cursor is before the first row of the ResultSet.","abstract boolean isClosed() Returns true if this result set has been closed, false otherwise.","abstract boolean isFirst() Gets if the cursor is on the first row of the ResultSet.","abstract boolean isLast() Gets if the cursor is on the last row of the ResultSet","abstract boolean last() Shifts the cursor position to the last row of the ResultSet.","abstract void moveToCurrentRow() Moves the cursor to the remembered position, namely the row that was the current row before a call to moveToInsertRow.","abstract void moveToInsertRow() Moves the cursor position to the Insert Row.","abstract boolean next() Shifts the cursor position down one row in this ResultSet object.","abstract boolean previous() Relocates the cursor position to the preceding row in this ResultSet.","abstract void refreshRow() Refreshes the current row with its most up to date value in the database.","abstract boolean relative(int rows) Moves the cursor position up or down by a specified number of rows.","abstract boolean rowDeleted() Indicates whether a row has been deleted.","abstract boolean rowInserted() Indicates whether the current row has had an insertion operation.","abstract boolean rowUpdated() Indicates whether the current row has been updated.","abstract void setFetchDirection(int direction) Indicates which direction (forward/reverse) will be used to process the rows of this ResultSet object.","abstract void setFetchSize(int rows) Indicates the number of rows to fetch from the database when extra rows are required for this ResultSet.","abstract void updateArray(int columnIndex, Array x) Updates a column specified by a column index with a java.sql.Array value.","abstract void updateArray(String columnName, Array x) Updates a column specified by a column name with a java.sql.Array value.","abstract void updateAsciiStream(String columnName, InputStream x, int length) Updates a column specified by a column name with an Ascii stream value.","abstract void updateAsciiStream(int columnIndex, InputStream x, long length) Updates the value at the 1-based columnIndex.","abstract void updateAsciiStream(String columnLabel, InputStream x, long length) Updates the value in the named column.","abstract void updateAsciiStream(String columnLabel, InputStream x) Updates the value in the named column.","abstract void updateAsciiStream(int columnIndex, InputStream x) Updates the value at the 1-based columnIndex.","abstract void updateAsciiStream(int columnIndex, InputStream x, int length) Updates a column specified by a column index with an ASCII stream value.","abstract void updateBigDecimal(int columnIndex, BigDecimal x) Updates a column specified by a column index with a java.sql.BigDecimal value.","abstract void updateBigDecimal(String columnName, BigDecimal x) Updates a column specified by a column name with a java.sql.BigDecimal value.","abstract void updateBinaryStream(int columnIndex, InputStream x) Updates the value at the 1-based columnIndex.","abstract void updateBinaryStream(int columnIndex, InputStream x, long length) Updates the value at the 1-based columnIndex.","abstract void updateBinaryStream(String columnLabel, InputStream x, long length) Updates the value in the named column.","abstract void updateBinaryStream(int columnIndex, InputStream x, int length) Updates a column specified by a column index with a binary stream value.","abstract void updateBinaryStream(String columnLabel, InputStream x) Updates the value in the named column.","abstract void updateBinaryStream(String columnName, InputStream x, int length) Updates a column specified by a column name with a binary stream value.","abstract void updateBlob(int columnIndex, Blob x) Updates a column specified by a column index with a java.sql.Blob value.","abstract void updateBlob(String columnLabel, InputStream inputStream) Updates the value in the named column.","abstract void updateBlob(String columnLabel, InputStream inputStream, long length) Updates the value in the named column.","abstract void updateBlob(int columnIndex, InputStream inputStream) Updates the value at the 1-based columnIndex.","abstract void updateBlob(int columnIndex, InputStream inputStream, long length) Updates the value at the 1-based columnIndex.","abstract void updateBlob(String columnName, Blob x) Updates a column specified by a column name with a java.sql.Blob value.","abstract void updateBoolean(int columnIndex, boolean x) Updates a column specified by a column index with a boolean value.","abstract void updateBoolean(String columnName, boolean x) Updates a column specified by a column name with a boolean value.","abstract void updateByte(String columnName, byte x) Updates a column specified by a column name with a byte value.","abstract void updateByte(int columnIndex, byte x) Updates a column specified by a column index with a byte value.","abstract void updateBytes(int columnIndex, byte[] x) Updates a column specified by a column index with a byte array value.","abstract void updateBytes(String columnName, byte[] x) Updates a column specified by a column name with a byte array value.","abstract void updateCharacterStream(String columnLabel, Reader reader) Updates the value in the named column.","abstract void updateCharacterStream(String columnName, Reader reader, int length) Updates a column specified by a column name with a character stream value.","abstract void updateCharacterStream(int columnIndex, Reader x, long length) Updates the value at the 1-based columnIndex.","abstract void updateCharacterStream(String columnLabel, Reader reader, long length) Updates the value in the named column.","abstract void updateCharacterStream(int columnIndex, Reader x) Updates the value at the 1-based columnIndex.","abstract void updateCharacterStream(int columnIndex, Reader x, int length) Updates a column specified by a column index with a character stream value.","abstract void updateClob(String columnLabel, Reader reader) Updates the value in the named column.","abstract void updateClob(int columnIndex, Clob x) Updates a column specified by a column index with a java.sql.Clob value.","abstract void updateClob(String columnLabel, Reader reader, long length) Updates the value in the named column.","abstract void updateClob(int columnIndex, Reader reader, long length) Updates the value at the 1-based columnIndex.","abstract void updateClob(int columnIndex, Reader reader) Updates the value at the 1-based columnIndex.","abstract void updateClob(String columnName, Clob x) Updates a column specified by a column name with a java.sql.Clob value.","abstract void updateDate(String columnName, Date x) Updates a column specified by a column name with a java.sql.Date value.","abstract void updateDate(int columnIndex, Date x) Updates a column specified by a column index with a java.sql.Date value.","abstract void updateDouble(String columnName, double x) Updates a column specified by a column name with a double value.","abstract void updateDouble(int columnIndex, double x) Updates a column specified by a column index with a double value.","abstract void updateFloat(String columnName, float x) Updates a column specified by a column name with a float value.","abstract void updateFloat(int columnIndex, float x) Updates a column specified by a column index with a float value.","abstract void updateInt(String columnName, int x) Updates a column specified by a column name with an int value.","abstract void updateInt(int columnIndex, int x) Updates a column specified by a column index with an int value.","abstract void updateLong(String columnName, long x) Updates a column specified by a column name with a long value.","abstract void updateLong(int columnIndex, long x) Updates a column specified by a column index with a long value.","abstract void updateNCharacterStream(String columnLabel, Reader reader) Updates the value in the named column.","abstract void updateNCharacterStream(int columnIndex, Reader x) Updates the value at the 1-based columnIndex.","abstract void updateNCharacterStream(String columnLabel, Reader reader, long length) Updates the value in the named column.","abstract void updateNCharacterStream(int columnIndex, Reader x, long length) Updates the value at the 1-based columnIndex.","abstract void updateNClob(int columnIndex, NClob nClob) Updates the value at the 1-based columnIndex.","abstract void updateNClob(String columnLabel, NClob nClob) Updates the value in the named column.","abstract void updateNClob(String columnLabel, Reader reader) Updates the value in the named column.","abstract void updateNClob(int columnIndex, Reader reader) Updates the value at the 1-based columnIndex.","abstract void updateNClob(int columnIndex, Reader reader, long length) Updates the value at the 1-based columnIndex.","abstract void updateNClob(String columnLabel, Reader reader, long length) Updates the value in the named column.","abstract void updateNString(String columnLabel, String nString) Updates the value in the named column.","abstract void updateNString(int columnIndex, String nString) Updates the value at the 1-based columnIndex.","abstract void updateNull(String columnName) Updates a column specified by a column name with a null value.","abstract void updateNull(int columnIndex) Updates a column specified by a column index with a null value.","abstract void updateObject(int columnIndex, Object x) Updates a column specified by a column index with an Object value.","abstract void updateObject(int columnIndex, Object x, int scale) Updates a column specified by a column index with an Object value.","abstract void updateObject(String columnName, Object x, int scale) Updates a column specified by a column name with an Object value.","abstract void updateObject(String columnName, Object x) Updates a column specified by a column name with an Object value.","abstract void updateRef(int columnIndex, Ref x) Updates a column specified by a column index with a java.sql.Ref value.","abstract void updateRef(String columnName, Ref x) Updates a column specified by a column name with a java.sql.Ref value.","abstract void updateRow() Updates the database with the new contents of the current row of this ResultSet object.","abstract void updateRowId(String columnLabel, RowId value) Updates the value in the named column.","abstract void updateRowId(int columnIndex, RowId value) Updates the value at the 1-based columnIndex.","abstract void updateSQLXML(int columnIndex, SQLXML xmlObject) Updates the value at the 1-based columnIndex.","abstract void updateSQLXML(String columnLabel, SQLXML xmlObject) Updates the value in the named column.","abstract void updateShort(int columnIndex, short x) Updates a column specified by a column index with a short value.","abstract void updateShort(String columnName, short x) Updates a column specified by a column name with a short value.","abstract void updateString(int columnIndex, String x) Updates a column specified by a column index with a String value.","abstract void updateString(String columnName, String x) Updates a column specified by a column name with a String value.","abstract void updateTime(int columnIndex, Time x) Updates a column specified by a column index with a Time value.","abstract void updateTime(String columnName, Time x) Updates a column specified by a column name with a Time value.","abstract void updateTimestamp(int columnIndex, Timestamp x) Updates a column specified by a column index with a Timestamp value.","abstract void updateTimestamp(String columnName, Timestamp x) Updates a column specified by column name with a Timestamp value.","abstract boolean wasNull() Determines whether the last column read from this ResultSet contained SQL NULL.","[Expand] Inherited Methods","From interface java.lang.AutoCloseable abstract void close() Closes the object and release any system resources it holds.","abstract void close() Closes the object and release any system resources it holds.","From interface java.sql.Wrapper abstract boolean isWrapperFor(Class<?> iface) If the caller is a wrapper of the class or implements the given interface, the methods return false and vice versa. abstract <T> T unwrap(Class<T> iface) Returns an object that implements the given interface.","abstract boolean isWrapperFor(Class<?> iface) If the caller is a wrapper of the class or implements the given interface, the methods return false and vice versa.","abstract <T> T unwrap(Class<T> iface) Returns an object that implements the given interface."],"package":"java.sql","constants":["int CLOSE_CURSORS_AT_COMMIT A constant used to indicate that a ResultSet object must be closed when the method Connection.commit is invoked.","int CONCUR_READ_ONLY A constant used to indicate the concurrency mode for a ResultSet object that cannot be updated.","int CONCUR_UPDATABLE A constant used to indicate the concurrency mode for a ResultSet object that can be updated.","int FETCH_FORWARD A constant used to indicate processing of the rows of a ResultSet in the forward direction, first to last.","int FETCH_REVERSE A constant used to indicate processing of the rows of a ResultSet in the reverse direction, last to first.","int FETCH_UNKNOWN A constant used to indicate that the order of processing of the rows of a ResultSet is unknown.","int HOLD_CURSORS_OVER_COMMIT A constant used to indicate that a ResultSet object must not be closed when the method Connection.commit is invoked.","int TYPE_FORWARD_ONLY A constant used to indicate a ResultSet object whose cursor can only move forward.","int TYPE_SCROLL_INSENSITIVE A constant used to indicate a ResultSet object which is scrollable but is insensitive to changes made by others.","int TYPE_SCROLL_SENSITIVE A constant used to indicate a ResultSet object which is scrollable and sensitive to changes made by others."],"class":"ResultSet","constructors":[],"fields":[]}