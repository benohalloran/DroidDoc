{"methods":["abstract String getCatalogName(int column) Returns the title of an indexed column's catalog.","abstract String getColumnClassName(int column) Returns the fully-qualified type of the class that is produced when invoking ResultSet.getObject to recover this column's value.","abstract int getColumnCount() Returns number of columns contained in the associated result set.","abstract int getColumnDisplaySize(int column) Returns the indexed column's standard maximum width, expressed in number of characters.","abstract String getColumnLabel(int column) Returns a recommended title for the indexed column, to be used when the title needs to be displayed.","abstract String getColumnName(int column) Returns the title of the indexed column.","abstract int getColumnType(int column) Returns the type of the indexed column as SQL type code.","abstract String getColumnTypeName(int column) Returns the type name of the indexed column.","abstract int getPrecision(int column) Returns the decimal precision of the indexed column.","abstract int getScale(int column) Returns the number of digits to the right of the decimal point of the indexed column.","abstract String getSchemaName(int column) Returns the name of the indexed columns schema.","abstract String getTableName(int column) Returns the title of the indexed columns table.","abstract boolean isAutoIncrement(int column) Returns an indication of whether the indexed column is automatically incremented and is therefore read-only.","abstract boolean isCaseSensitive(int column) Returns an indication of whether the case of the indexed column is important.","abstract boolean isCurrency(int column) Returns whether the indexed column contains a monetary amount.","abstract boolean isDefinitelyWritable(int column) Returns an indication of whether writing to the indexed column is guaranteed to be successful.","abstract int isNullable(int column) Returns whether the indexed column is nullable.","abstract boolean isReadOnly(int column) Returns an indication of whether writing to the indexed column is guaranteed to be unsuccessful.","abstract boolean isSearchable(int column) Returns an indication of whether the indexed column is searchable.","abstract boolean isSigned(int column) Returns an indication of whether the values contained in the indexed column are signed.","abstract boolean isWritable(int column) Returns an indication of whether writing to the indexed column is possible.","[Expand] Inherited Methods","From interface java.sql.Wrapper abstract boolean isWrapperFor(Class<?> iface) If the caller is a wrapper of the class or implements the given interface, the methods return false and vice versa. abstract <T> T unwrap(Class<T> iface) Returns an object that implements the given interface.","abstract boolean isWrapperFor(Class<?> iface) If the caller is a wrapper of the class or implements the given interface, the methods return false and vice versa.","abstract <T> T unwrap(Class<T> iface) Returns an object that implements the given interface."],"package":"java.sql","constants":["int columnNoNulls Indicates that a column cannot contain NULL values.","int columnNullable Indicates that a column can contain NULL values.","int columnNullableUnknown Indicates that it is unknown whether a column can contain NULLs or not."],"class":"ResultSetMetaData","constructors":[],"fields":[]}