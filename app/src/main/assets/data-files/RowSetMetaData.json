{"methods":["abstract void setAutoIncrement(int columnIndex, boolean autoIncrement) Sets automatic numbering for a specified column in the RowSet.","abstract void setCaseSensitive(int columnIndex, boolean caseSensitive) Sets the case sensitive property for a specified column in the RowSet.","abstract void setCatalogName(int columnIndex, String catalogName) Sets the catalog name for a specified column in the RowSet.","abstract void setColumnCount(int columnCount) Sets the number of columns contained in the row set.","abstract void setColumnDisplaySize(int columnIndex, int displaySize) Sets the normal maximum width in characters for a specified column in the RowSet.","abstract void setColumnLabel(int columnIndex, String theLabel) Sets the suggested name as label for the column contained in the RowSet.","abstract void setColumnName(int columnIndex, String theColumnName) Sets the column name for a specified column in the RowSet.","abstract void setColumnType(int columnIndex, int theSQLType) Sets the SQL type for a specified column in the RowSet.","abstract void setColumnTypeName(int columnIndex, String theTypeName) Sets the type name for a specified column in the RowSet, where the data type is specific to the data source.","abstract void setCurrency(int columnIndex, boolean isCurrency) Sets whether a specified column is a currency value.","abstract void setNullable(int columnIndex, int nullability) Sets whether a specified column can contain SQL NULL values.","abstract void setPrecision(int columnIndex, int thePrecision) Sets the number of decimal digits for a specified column in the RowSet.","abstract void setScale(int columnIndex, int theScale) Declares how many decimal digits there should be after a decimal point for the column specified by columnIndex.","abstract void setSchemaName(int columnIndex, String theSchemaName) Sets the schema name for a specified column in the RowSet.","abstract void setSearchable(int columnIndex, boolean isSearchable) Sets whether a specified column can be used in a search involving a WHERE clause.","abstract void setSigned(int columnIndex, boolean isSigned) Sets if a specified column can contain signed numbers.","abstract void setTableName(int columnIndex, String theTableName) Sets the table name for a specified column in the RowSet.","[Expand] Inherited Methods","From interface java.sql.ResultSetMetaData abstract String getCatalogName(int column) Returns the title of an indexed column's catalog. abstract String getColumnClassName(int column) Returns the fully-qualified type of the class that is produced when invoking ResultSet.getObject to recover this column's value. abstract int getColumnCount() Returns number of columns contained in the associated result set. abstract int getColumnDisplaySize(int column) Returns the indexed column's standard maximum width, expressed in number of characters. abstract String getColumnLabel(int column) Returns a recommended title for the indexed column, to be used when the title needs to be displayed. abstract String getColumnName(int column) Returns the title of the indexed column. abstract int getColumnType(int column) Returns the type of the indexed column as SQL type code. abstract String getColumnTypeName(int column) Returns the type name of the indexed column. abstract int getPrecision(int column) Returns the decimal precision of the indexed column. abstract int getScale(int column) Returns the number of digits to the right of the decimal point of the indexed column. abstract String getSchemaName(int column) Returns the name of the indexed columns schema. abstract String getTableName(int column) Returns the title of the indexed columns table. abstract boolean isAutoIncrement(int column) Returns an indication of whether the indexed column is automatically incremented and is therefore read-only. abstract boolean isCaseSensitive(int column) Returns an indication of whether the case of the indexed column is important. abstract boolean isCurrency(int column) Returns whether the indexed column contains a monetary amount. abstract boolean isDefinitelyWritable(int column) Returns an indication of whether writing to the indexed column is guaranteed to be successful. abstract int isNullable(int column) Returns whether the indexed column is nullable. abstract boolean isReadOnly(int column) Returns an indication of whether writing to the indexed column is guaranteed to be unsuccessful. abstract boolean isSearchable(int column) Returns an indication of whether the indexed column is searchable. abstract boolean isSigned(int column) Returns an indication of whether the values contained in the indexed column are signed. abstract boolean isWritable(int column) Returns an indication of whether writing to the indexed column is possible.","abstract String getCatalogName(int column) Returns the title of an indexed column's catalog.","abstract String getColumnClassName(int column) Returns the fully-qualified type of the class that is produced when invoking ResultSet.getObject to recover this column's value.","abstract int getColumnCount() Returns number of columns contained in the associated result set.","abstract int getColumnDisplaySize(int column) Returns the indexed column's standard maximum width, expressed in number of characters.","abstract String getColumnLabel(int column) Returns a recommended title for the indexed column, to be used when the title needs to be displayed.","abstract String getColumnName(int column) Returns the title of the indexed column.","abstract int getColumnType(int column) Returns the type of the indexed column as SQL type code.","abstract String getColumnTypeName(int column) Returns the type name of the indexed column.","abstract int getPrecision(int column) Returns the decimal precision of the indexed column.","abstract int getScale(int column) Returns the number of digits to the right of the decimal point of the indexed column.","abstract String getSchemaName(int column) Returns the name of the indexed columns schema.","abstract String getTableName(int column) Returns the title of the indexed columns table.","abstract boolean isAutoIncrement(int column) Returns an indication of whether the indexed column is automatically incremented and is therefore read-only.","abstract boolean isCaseSensitive(int column) Returns an indication of whether the case of the indexed column is important.","abstract boolean isCurrency(int column) Returns whether the indexed column contains a monetary amount.","abstract boolean isDefinitelyWritable(int column) Returns an indication of whether writing to the indexed column is guaranteed to be successful.","abstract int isNullable(int column) Returns whether the indexed column is nullable.","abstract boolean isReadOnly(int column) Returns an indication of whether writing to the indexed column is guaranteed to be unsuccessful.","abstract boolean isSearchable(int column) Returns an indication of whether the indexed column is searchable.","abstract boolean isSigned(int column) Returns an indication of whether the values contained in the indexed column are signed.","abstract boolean isWritable(int column) Returns an indication of whether writing to the indexed column is possible.","From interface java.sql.Wrapper abstract boolean isWrapperFor(Class<?> iface) If the caller is a wrapper of the class or implements the given interface, the methods return false and vice versa. abstract <T> T unwrap(Class<T> iface) Returns an object that implements the given interface.","abstract boolean isWrapperFor(Class<?> iface) If the caller is a wrapper of the class or implements the given interface, the methods return false and vice versa.","abstract <T> T unwrap(Class<T> iface) Returns an object that implements the given interface."],"package":"javax.sql","constants":["[Expand] Inherited Constants","From interface java.sql.ResultSetMetaData int columnNoNulls Indicates that a column cannot contain NULL values. int columnNullable Indicates that a column can contain NULL values. int columnNullableUnknown Indicates that it is unknown whether a column can contain NULLs or not.","int columnNoNulls Indicates that a column cannot contain NULL values.","int columnNullable Indicates that a column can contain NULL values.","int columnNullableUnknown Indicates that it is unknown whether a column can contain NULLs or not."],"class":"RowSetMetaData","constructors":[],"fields":[]}