{"methods":["abstract void run() Sets this Future to the result of its computation unless it has been cancelled.","[Expand] Inherited Methods","From interface java.lang.Runnable abstract void run() Starts executing the active part of the class' code.","abstract void run() Starts executing the active part of the class' code.","From interface java.util.concurrent.Future abstract boolean cancel(boolean mayInterruptIfRunning) Attempts to cancel execution of this task. abstract V get() Waits if necessary for the computation to complete, and then retrieves its result. abstract V get(long timeout, TimeUnit unit) Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available. abstract boolean isCancelled() Returns true if this task was cancelled before it completed normally. abstract boolean isDone() Returns true if this task completed.","abstract boolean cancel(boolean mayInterruptIfRunning) Attempts to cancel execution of this task.","abstract V get() Waits if necessary for the computation to complete, and then retrieves its result.","abstract V get(long timeout, TimeUnit unit) Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available.","abstract boolean isCancelled() Returns true if this task was cancelled before it completed normally.","abstract boolean isDone() Returns true if this task completed."],"package":"java.util.concurrent","constants":[],"class":"RunnableFuture","constructors":[],"fields":[]}