{"methods":["abstract boolean getEnableSessionCreation() Returns whether new SSL sessions may be established for new connections.","abstract String[] getEnabledCipherSuites() Returns the names of the enabled cipher suites to be used for new connections.","abstract String[] getEnabledProtocols() Returns the names of the enabled protocols to be used for new connections.","abstract boolean getNeedClientAuth() Returns whether server-mode connections will be configured to require client authentication.","abstract String[] getSupportedCipherSuites() Returns the names of the supported cipher suites.","abstract String[] getSupportedProtocols() Returns the names of the supported protocols.","abstract boolean getUseClientMode() Returns whether new connection will act in client mode when handshaking.","abstract boolean getWantClientAuth() Returns whether server-mode connections will be configured to request client authentication.","abstract void setEnableSessionCreation(boolean flag) Sets whether new SSL sessions may be established for new connections.","abstract void setEnabledCipherSuites(String[] suites) Sets the names of the cipher suites to be enabled for new connections.","abstract void setEnabledProtocols(String[] protocols) Sets the names of the protocols to be enabled for new connections.","abstract void setNeedClientAuth(boolean need) Sets whether server-mode connections will be configured to require client authentication.","abstract void setUseClientMode(boolean mode) Sets whether new connections should act in client mode when handshaking.","abstract void setWantClientAuth(boolean want) Sets whether server-mode connections will be configured to request client authentication.","[Expand] Inherited Methods","From class java.net.ServerSocket Socket accept() Waits for an incoming request and blocks until the connection is opened. void bind(SocketAddress localAddr) Binds this server socket to the given local socket address with a maximum backlog of 50 unaccepted connections. void bind(SocketAddress localAddr, int backlog) Binds this server socket to the given local socket address. void close() Closes this server socket and its implementation. ServerSocketChannel getChannel() Returns this socket's ServerSocketChannel, if one exists. InetAddress getInetAddress() Gets the local IP address of this server socket if this socket has ever been bound, null otherwise. int getLocalPort() Gets the local port of this server socket or -1 if the socket is not bound. SocketAddress getLocalSocketAddress() Gets the local socket address of this server socket or null if the socket is unbound. int getReceiveBufferSize() Returns this socket's receive buffer size. boolean getReuseAddress() Gets the value of the socket option SocketOptions.SO_REUSEADDR. synchronized int getSoTimeout() Gets the socket accept timeout. final void implAccept(Socket aSocket) Invokes the server socket implementation to accept a connection on the given socket aSocket. boolean isBound() Returns whether this server socket is bound to a local address and port or not. boolean isClosed() Returns whether this server socket is closed or not. void setPerformancePreferences(int connectionTime, int latency, int bandwidth) Sets performance preferences for connection time, latency and bandwidth. void setReceiveBufferSize(int size) Sets this socket's receive buffer size. void setReuseAddress(boolean reuse) Sets the value for the socket option SocketOptions.SO_REUSEADDR. synchronized void setSoTimeout(int timeout) Sets the accept timeout in milliseconds for this socket. synchronized static void setSocketFactory(SocketImplFactory aFactory) Sets the server socket implementation factory of this instance. String toString() Returns a textual representation of this server socket including the address, port and the state.","Socket accept() Waits for an incoming request and blocks until the connection is opened.","void bind(SocketAddress localAddr) Binds this server socket to the given local socket address with a maximum backlog of 50 unaccepted connections.","void bind(SocketAddress localAddr, int backlog) Binds this server socket to the given local socket address.","void close() Closes this server socket and its implementation.","ServerSocketChannel getChannel() Returns this socket's ServerSocketChannel, if one exists.","InetAddress getInetAddress() Gets the local IP address of this server socket if this socket has ever been bound, null otherwise.","int getLocalPort() Gets the local port of this server socket or -1 if the socket is not bound.","SocketAddress getLocalSocketAddress() Gets the local socket address of this server socket or null if the socket is unbound.","int getReceiveBufferSize() Returns this socket's receive buffer size.","boolean getReuseAddress() Gets the value of the socket option SocketOptions.SO_REUSEADDR.","synchronized int getSoTimeout() Gets the socket accept timeout.","final void implAccept(Socket aSocket) Invokes the server socket implementation to accept a connection on the given socket aSocket.","boolean isBound() Returns whether this server socket is bound to a local address and port or not.","boolean isClosed() Returns whether this server socket is closed or not.","void setPerformancePreferences(int connectionTime, int latency, int bandwidth) Sets performance preferences for connection time, latency and bandwidth.","void setReceiveBufferSize(int size) Sets this socket's receive buffer size.","void setReuseAddress(boolean reuse) Sets the value for the socket option SocketOptions.SO_REUSEADDR.","synchronized void setSoTimeout(int timeout) Sets the accept timeout in milliseconds for this socket.","synchronized static void setSocketFactory(SocketImplFactory aFactory) Sets the server socket implementation factory of this instance.","String toString() Returns a textual representation of this server socket including the address, port and the state.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface java.io.Closeable abstract void close() Closes the object and release any system resources it holds.","abstract void close() Closes the object and release any system resources it holds.","From interface java.lang.AutoCloseable abstract void close() Closes the object and release any system resources it holds.","abstract void close() Closes the object and release any system resources it holds."],"package":"javax.net.ssl","constants":[],"class":"SSLServerSocket","constructors":[],"fields":[]}