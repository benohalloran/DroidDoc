{"methods":["int getFifoMaxEventCount()","int getFifoReservedEventCount()","int getMaxDelay() This value is defined only for continuous and on-change sensors.","float getMaximumRange()","int getMinDelay()","String getName()","float getPower()","int getReportingMode() Each sensor has exactly one reporting mode associated with it.","float getResolution()","String getStringType()","int getType()","String getVendor()","int getVersion()","boolean isWakeUpSensor() Returns whether this sensor is a wake-up sensor.","String toString() Returns a string containing a concise, human-readable description of this object.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.hardware","constants":["int REPORTING_MODE_CONTINUOUS Events are reported at a constant rate which is set by the rate parameter of registerListener(SensorEventListener, Sensor, int).","int REPORTING_MODE_ONE_SHOT Events are reported in one-shot mode.","int REPORTING_MODE_ON_CHANGE Events are reported only when the value changes.","int REPORTING_MODE_SPECIAL_TRIGGER Events are reported as described in the description of the sensor.","String STRING_TYPE_ACCELEROMETER A constant string describing an accelerometer sensor type.","String STRING_TYPE_AMBIENT_TEMPERATURE A constant string describing an ambient temperature sensor type.","String STRING_TYPE_GAME_ROTATION_VECTOR A constant string describing an uncalibrated rotation vector sensor type.","String STRING_TYPE_GEOMAGNETIC_ROTATION_VECTOR A constant string describing a geo-magnetic rotation vector.","String STRING_TYPE_GRAVITY A constant string describing a gravity sensor type.","String STRING_TYPE_GYROSCOPE A constant string describing a gyroscope sensor type.","String STRING_TYPE_GYROSCOPE_UNCALIBRATED A constant string describing an uncalibrated gyroscope sensor type.","String STRING_TYPE_HEART_RATE A constant string describing a heart rate monitor.","String STRING_TYPE_LIGHT A constant string describing a light sensor type.","String STRING_TYPE_LINEAR_ACCELERATION A constant string describing a linear acceleration sensor type.","String STRING_TYPE_MAGNETIC_FIELD A constant string describing a magnetic field sensor type.","String STRING_TYPE_MAGNETIC_FIELD_UNCALIBRATED A constant string describing an uncalibrated magnetic field sensor type.","String STRING_TYPE_ORIENTATION This constant was deprecated in API level 20. use SensorManager.getOrientation() instead.","String STRING_TYPE_PRESSURE A constant string describing a pressure sensor type.","String STRING_TYPE_PROXIMITY A constant string describing a proximity sensor type.","String STRING_TYPE_RELATIVE_HUMIDITY A constant string describing a relative humidity sensor type","String STRING_TYPE_ROTATION_VECTOR A constant string describing a rotation vector sensor type.","String STRING_TYPE_SIGNIFICANT_MOTION A constant string describing a significant motion trigger sensor.","String STRING_TYPE_STEP_COUNTER A constant string describing a step counter sensor.","String STRING_TYPE_STEP_DETECTOR A constant string describing a step detector sensor.","String STRING_TYPE_TEMPERATURE This constant was deprecated in API level 20. use Sensor.STRING_TYPE_AMBIENT_TEMPERATURE instead.","int TYPE_ACCELEROMETER A constant describing an accelerometer sensor type.","int TYPE_ALL A constant describing all sensor types.","int TYPE_AMBIENT_TEMPERATURE A constant describing an ambient temperature sensor type.","int TYPE_GAME_ROTATION_VECTOR A constant describing an uncalibrated rotation vector sensor type.","int TYPE_GEOMAGNETIC_ROTATION_VECTOR A constant describing a geo-magnetic rotation vector.","int TYPE_GRAVITY A constant describing a gravity sensor type.","int TYPE_GYROSCOPE A constant describing a gyroscope sensor type.","int TYPE_GYROSCOPE_UNCALIBRATED A constant describing an uncalibrated gyroscope sensor type.","int TYPE_HEART_RATE A constant describing a heart rate monitor.","int TYPE_LIGHT A constant describing a light sensor type.","int TYPE_LINEAR_ACCELERATION A constant describing a linear acceleration sensor type.","int TYPE_MAGNETIC_FIELD A constant describing a magnetic field sensor type.","int TYPE_MAGNETIC_FIELD_UNCALIBRATED A constant describing an uncalibrated magnetic field sensor type.","int TYPE_ORIENTATION This constant was deprecated in API level 8. use SensorManager.getOrientation() instead.","int TYPE_PRESSURE A constant describing a pressure sensor type.","int TYPE_PROXIMITY A constant describing a proximity sensor type.","int TYPE_RELATIVE_HUMIDITY A constant describing a relative humidity sensor type.","int TYPE_ROTATION_VECTOR A constant describing a rotation vector sensor type.","int TYPE_SIGNIFICANT_MOTION A constant describing a significant motion trigger sensor.","int TYPE_STEP_COUNTER A constant describing a step counter sensor.","int TYPE_STEP_DETECTOR A constant describing a step detector sensor.","int TYPE_TEMPERATURE This constant was deprecated in API level 14. use Sensor.TYPE_AMBIENT_TEMPERATURE instead."],"class":"Sensor","constructors":[],"fields":[]}