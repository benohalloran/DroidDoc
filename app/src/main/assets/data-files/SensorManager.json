{"methods":["boolean cancelTriggerSensor(TriggerEventListener listener, Sensor sensor) Cancels receiving trigger events for a trigger sensor.","boolean flush(SensorEventListener listener) Flushes the batch FIFO of all the sensors registered for this listener.","static float getAltitude(float p0, float p) Computes the Altitude in meters from the atmospheric pressure and the pressure at sea level.","static void getAngleChange(float[] angleChange, float[] R, float[] prevR) Helper function to compute the angle change between two rotation matrices.","Sensor getDefaultSensor(int type) Use this method to get the default sensor for a given type.","Sensor getDefaultSensor(int type, boolean wakeUp) Return a Sensor with the given type and wakeUp properties.","static float getInclination(float[] I) Computes the geomagnetic inclination angle in radians from the inclination matrix I returned by getRotationMatrix(float[], float[], float[], float[]).","static float[] getOrientation(float[] R, float[] values) Computes the device's orientation based on the rotation matrix.","static void getQuaternionFromVector(float[] Q, float[] rv) Helper function to convert a rotation vector to a normalized quaternion.","static boolean getRotationMatrix(float[] R, float[] I, float[] gravity, float[] geomagnetic) Computes the inclination matrix I as well as the rotation matrix R transforming a vector from the device coordinate system to the world's coordinate system which is defined as a direct orthonormal basis, where: X is defined as the vector product Y.Z (It is tangential to the ground at the device's current location and roughly points East).","static void getRotationMatrixFromVector(float[] R, float[] rotationVector) Helper function to convert a rotation vector to a rotation matrix.","List<Sensor> getSensorList(int type) Use this method to get the list of available sensors of a certain type.","int getSensors() This method was deprecated in API level 3. This method is deprecated, use getSensorList(int) instead","boolean registerListener(SensorListener listener, int sensors, int rate) This method was deprecated in API level 3. This method is deprecated, use registerListener(SensorEventListener, Sensor, int) instead.","boolean registerListener(SensorListener listener, int sensors) This method was deprecated in API level 3. This method is deprecated, use registerListener(SensorEventListener, Sensor, int) instead.","boolean registerListener(SensorEventListener listener, Sensor sensor, int rateUs, int maxBatchReportLatencyUs) Enables batch mode for a sensor with the given rate and maxBatchReportLatency.","boolean registerListener(SensorEventListener listener, Sensor sensor, int rateUs, int maxBatchReportLatencyUs, Handler handler) Enables batch mode for a sensor with the given rate and maxBatchReportLatency.","boolean registerListener(SensorEventListener listener, Sensor sensor, int rateUs, Handler handler) Registers a SensorEventListener for the given sensor.","boolean registerListener(SensorEventListener listener, Sensor sensor, int rateUs) Registers a SensorEventListener for the given sensor.","static boolean remapCoordinateSystem(float[] inR, int X, int Y, float[] outR) Rotates the supplied rotation matrix so it is expressed in a different coordinate system.","boolean requestTriggerSensor(TriggerEventListener listener, Sensor sensor) Requests receiving trigger events for a trigger sensor.","void unregisterListener(SensorListener listener) This method was deprecated in API level 3. This method is deprecated, use unregisterListener(SensorEventListener) instead.","void unregisterListener(SensorListener listener, int sensors) This method was deprecated in API level 3. This method is deprecated, use unregisterListener(SensorEventListener, Sensor) instead.","void unregisterListener(SensorEventListener listener, Sensor sensor) Unregisters a listener for the sensors with which it is registered.","void unregisterListener(SensorEventListener listener) Unregisters a listener for all sensors.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.hardware","constants":["int AXIS_MINUS_X see remapCoordinateSystem(float[], int, int, float[])","int AXIS_MINUS_Y see remapCoordinateSystem(float[], int, int, float[])","int AXIS_MINUS_Z see remapCoordinateSystem(float[], int, int, float[])","int AXIS_X see remapCoordinateSystem(float[], int, int, float[])","int AXIS_Y see remapCoordinateSystem(float[], int, int, float[])","int AXIS_Z see remapCoordinateSystem(float[], int, int, float[])","int DATA_X This constant was deprecated in API level 3. use Sensor instead.","int DATA_Y This constant was deprecated in API level 3. use Sensor instead.","int DATA_Z This constant was deprecated in API level 3. use Sensor instead.","float GRAVITY_DEATH_STAR_I Gravity (estimate) on the first Death Star in Empire units (m/s^2)","float GRAVITY_EARTH Earth's gravity in SI units (m/s^2)","float GRAVITY_JUPITER Jupiter's gravity in SI units (m/s^2)","float GRAVITY_MARS Mars' gravity in SI units (m/s^2)","float GRAVITY_MERCURY Mercury's gravity in SI units (m/s^2)","float GRAVITY_MOON The Moon's gravity in SI units (m/s^2)","float GRAVITY_NEPTUNE Neptune's gravity in SI units (m/s^2)","float GRAVITY_PLUTO Pluto's gravity in SI units (m/s^2)","float GRAVITY_SATURN Saturn's gravity in SI units (m/s^2)","float GRAVITY_SUN Sun's gravity in SI units (m/s^2)","float GRAVITY_THE_ISLAND Gravity on the island","float GRAVITY_URANUS Uranus' gravity in SI units (m/s^2)","float GRAVITY_VENUS Venus' gravity in SI units (m/s^2)","float LIGHT_CLOUDY luminance under a cloudy sky in lux","float LIGHT_FULLMOON luminance at night with full moon in lux","float LIGHT_NO_MOON luminance at night with no moon in lux","float LIGHT_OVERCAST luminance under an overcast sky in lux","float LIGHT_SHADE luminance in shade in lux","float LIGHT_SUNLIGHT luminance of sunlight in lux","float LIGHT_SUNLIGHT_MAX Maximum luminance of sunlight in lux","float LIGHT_SUNRISE luminance at sunrise in lux","float MAGNETIC_FIELD_EARTH_MAX Maximum magnetic field on Earth's surface","float MAGNETIC_FIELD_EARTH_MIN Minimum magnetic field on Earth's surface","float PRESSURE_STANDARD_ATMOSPHERE Standard atmosphere, or average sea-level pressure in hPa (millibar)","int RAW_DATA_INDEX This constant was deprecated in API level 3. use Sensor instead.","int RAW_DATA_X This constant was deprecated in API level 3. use Sensor instead.","int RAW_DATA_Y This constant was deprecated in API level 3. use Sensor instead.","int RAW_DATA_Z This constant was deprecated in API level 3. use Sensor instead.","int SENSOR_ACCELEROMETER This constant was deprecated in API level 3. use Sensor instead.","int SENSOR_ALL This constant was deprecated in API level 3. use Sensor instead.","int SENSOR_DELAY_FASTEST get sensor data as fast as possible","int SENSOR_DELAY_GAME rate suitable for games","int SENSOR_DELAY_NORMAL rate (default) suitable for screen orientation changes","int SENSOR_DELAY_UI rate suitable for the user interface","int SENSOR_LIGHT This constant was deprecated in API level 3. use Sensor instead.","int SENSOR_MAGNETIC_FIELD This constant was deprecated in API level 3. use Sensor instead.","int SENSOR_MAX This constant was deprecated in API level 3. use Sensor instead.","int SENSOR_MIN This constant was deprecated in API level 3. use Sensor instead.","int SENSOR_ORIENTATION This constant was deprecated in API level 3. use Sensor instead.","int SENSOR_ORIENTATION_RAW This constant was deprecated in API level 3. use Sensor instead.","int SENSOR_PROXIMITY This constant was deprecated in API level 3. use Sensor instead.","int SENSOR_STATUS_ACCURACY_HIGH This sensor is reporting data with maximum accuracy","int SENSOR_STATUS_ACCURACY_LOW This sensor is reporting data with low accuracy, calibration with the environment is needed","int SENSOR_STATUS_ACCURACY_MEDIUM This sensor is reporting data with an average level of accuracy, calibration with the environment may improve the readings","int SENSOR_STATUS_NO_CONTACT The values returned by this sensor cannot be trusted because the sensor had no contact with what it was measuring (for example, the heart rate monitor is not in contact with the user).","int SENSOR_STATUS_UNRELIABLE The values returned by this sensor cannot be trusted, calibration is needed or the environment doesn't allow readings","int SENSOR_TEMPERATURE This constant was deprecated in API level 3. use Sensor instead.","int SENSOR_TRICORDER This constant was deprecated in API level 3. use Sensor instead.","float STANDARD_GRAVITY Standard gravity (g) on Earth."],"class":"SensorManager","constructors":[],"fields":[]}