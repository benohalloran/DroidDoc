{"methods":["abstract void setCommentURL(String commentURL) If a user agent (web browser) presents this cookie to a user, the cookie's purpose will be described by the information at this URL.","abstract void setDiscard(boolean discard) Set the Discard attribute.","abstract void setPorts(int[] ports) Sets the Port attribute.","[Expand] Inherited Methods","From interface org.apache.http.cookie.Cookie abstract String getComment() Returns the comment describing the purpose of this cookie, or null if no such comment has been defined. abstract String getCommentURL() If a user agent (web browser) presents this cookie to a user, the cookie's purpose will be described by the information at this URL. abstract String getDomain() Returns domain attribute of the cookie. abstract Date getExpiryDate() Returns the expiration Date of the cookie, or null if none exists. abstract String getName() Returns the name. abstract String getPath() Returns the path attribute of the cookie abstract int[] getPorts() Get the Port attribute. abstract String getValue() Returns the value. abstract int getVersion() Returns the version of the cookie specification to which this cookie conforms. abstract boolean isExpired(Date date) Returns true if this cookie has expired. abstract boolean isPersistent() Returns false if the cookie should be discarded at the end of the \"session\"; true otherwise. abstract boolean isSecure() Indicates whether this cookie requires a secure connection.","abstract String getComment() Returns the comment describing the purpose of this cookie, or null if no such comment has been defined.","abstract String getCommentURL() If a user agent (web browser) presents this cookie to a user, the cookie's purpose will be described by the information at this URL.","abstract String getDomain() Returns domain attribute of the cookie.","abstract Date getExpiryDate() Returns the expiration Date of the cookie, or null if none exists.","abstract String getName() Returns the name.","abstract String getPath() Returns the path attribute of the cookie","abstract int[] getPorts() Get the Port attribute.","abstract String getValue() Returns the value.","abstract int getVersion() Returns the version of the cookie specification to which this cookie conforms.","abstract boolean isExpired(Date date) Returns true if this cookie has expired.","abstract boolean isPersistent() Returns false if the cookie should be discarded at the end of the \"session\"; true otherwise.","abstract boolean isSecure() Indicates whether this cookie requires a secure connection.","From interface org.apache.http.cookie.SetCookie abstract void setComment(String comment) If a user agent (web browser) presents this cookie to a user, the cookie's purpose will be described using this comment. abstract void setDomain(String domain) Sets the domain attribute. abstract void setExpiryDate(Date expiryDate) Sets expiration date. abstract void setPath(String path) Sets the path attribute. abstract void setSecure(boolean secure) Sets the secure attribute of the cookie. abstract void setValue(String value) abstract void setVersion(int version) Sets the version of the cookie specification to which this cookie conforms.","abstract void setComment(String comment) If a user agent (web browser) presents this cookie to a user, the cookie's purpose will be described using this comment.","abstract void setDomain(String domain) Sets the domain attribute.","abstract void setExpiryDate(Date expiryDate) Sets expiration date.","abstract void setPath(String path) Sets the path attribute.","abstract void setSecure(boolean secure) Sets the secure attribute of the cookie.","abstract void setValue(String value)","abstract void setVersion(int version) Sets the version of the cookie specification to which this cookie conforms."],"package":"org.apache.http.cookie","constants":[],"class":"SetCookie2","constructors":[],"fields":[]}