{"methods":["static float getFloat(ContentResolver cr, String name, float def) Convenience function for retrieving a single secure settings value as a floating point number.","static float getFloat(ContentResolver cr, String name) Convenience function for retrieving a single secure settings value as a float.","static int getInt(ContentResolver cr, String name, int def) Convenience function for retrieving a single secure settings value as an integer.","static int getInt(ContentResolver cr, String name) Convenience function for retrieving a single secure settings value as an integer.","static long getLong(ContentResolver cr, String name, long def) Convenience function for retrieving a single secure settings value as a long.","static long getLong(ContentResolver cr, String name) Convenience function for retrieving a single secure settings value as a long.","static String getString(ContentResolver resolver, String name) Look up a name in the database.","static Uri getUriFor(String name) Construct the content URI for a particular name/value pair, useful for monitoring changes with a ContentObserver.","static boolean putFloat(ContentResolver cr, String name, float value) Convenience function for updating a single settings value as a floating point number.","static boolean putInt(ContentResolver cr, String name, int value) Convenience function for updating a single settings value as an integer.","static boolean putLong(ContentResolver cr, String name, long value) Convenience function for updating a secure settings value as a long integer.","static boolean putString(ContentResolver resolver, String name, String value) Store a name/value pair into the database.","[Expand] Inherited Methods","From class android.provider.Settings.NameValueTable static Uri getUriFor(Uri uri, String name) static boolean putString(ContentResolver resolver, Uri uri, String name, String value)","static Uri getUriFor(Uri uri, String name)","static boolean putString(ContentResolver resolver, Uri uri, String name, String value)","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.provider","constants":["String ADB_ENABLED Whether ADB is enabled.","String AIRPLANE_MODE_ON Whether Airplane Mode is on.","String AIRPLANE_MODE_RADIOS A comma separated list of radios that need to be disabled when airplane mode is on.","String ALWAYS_FINISH_ACTIVITIES If 1, the activity manager will aggressively finish activities and processes as soon as they are no longer needed.","String ANIMATOR_DURATION_SCALE Scaling factor for Animator-based animations.","String AUTO_TIME Value to specify if the user prefers the date, time and time zone to be automatically fetched from the network (NITZ).","String AUTO_TIME_ZONE Value to specify if the user prefers the time zone to be automatically fetched from the network (NITZ).","String BLUETOOTH_ON Whether bluetooth is enabled/disabled 0=disabled.","String DATA_ROAMING Whether or not data roaming is enabled.","String DEBUG_APP Name of an application package to be debugged.","String DEVELOPMENT_SETTINGS_ENABLED Whether user has enabled development settings.","String DEVICE_PROVISIONED Whether the device has been provisioned (0 = false, 1 = true)","String HTTP_PROXY Host name and port for global http proxy.","String INSTALL_NON_MARKET_APPS This constant was deprecated in API level 21. Use INSTALL_NON_MARKET_APPS instead","String MODE_RINGER Ringer mode.","String NETWORK_PREFERENCE User preference for which network(s) should be used.","String RADIO_BLUETOOTH Constant for use in AIRPLANE_MODE_RADIOS to specify Bluetooth radio.","String RADIO_CELL Constant for use in AIRPLANE_MODE_RADIOS to specify Cellular radio.","String RADIO_NFC Constant for use in AIRPLANE_MODE_RADIOS to specify NFC radio.","String RADIO_WIFI Constant for use in AIRPLANE_MODE_RADIOS to specify Wi-Fi radio.","String SHOW_PROCESSES Control whether the process CPU usage meter should be shown.","String STAY_ON_WHILE_PLUGGED_IN Whether we keep the device on while the device is plugged in.","String SYS_PROP_SETTING_VERSION","String TRANSITION_ANIMATION_SCALE Scaling factor for activity transition animations.","String USB_MASS_STORAGE_ENABLED USB Mass Storage Enabled","String USE_GOOGLE_MAIL If this setting is set (to anything), then all references to Gmail on the device must change to Google Mail.","String WAIT_FOR_DEBUGGER If 1, when launching DEBUG_APP it will wait for the debugger before starting user code.","String WIFI_MAX_DHCP_RETRY_COUNT The maximum number of times we will retry a connection to an access point for which we have failed in acquiring an IP address from DHCP.","String WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS Maximum amount of time in milliseconds to hold a wakelock while waiting for mobile data connectivity to be established after a disconnect from Wi-Fi.","String WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON Whether to notify the user of open networks.","String WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY Delay (in seconds) before repeating the Wi-Fi networks available notification.","String WIFI_NUM_OPEN_NETWORKS_KEPT When the number of open networks exceeds this number, the least-recently-used excess networks will be removed.","String WIFI_ON Whether the Wi-Fi should be on.","String WIFI_SLEEP_POLICY The policy for deciding when Wi-Fi should go to sleep (which will in turn switch to using the mobile data as an Internet connection).","int WIFI_SLEEP_POLICY_DEFAULT Value for WIFI_SLEEP_POLICY to use the default Wi-Fi sleep policy, which is to sleep shortly after the turning off according to the STAY_ON_WHILE_PLUGGED_IN setting.","int WIFI_SLEEP_POLICY_NEVER Value for WIFI_SLEEP_POLICY to never go to sleep.","int WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED Value for WIFI_SLEEP_POLICY to use the default policy when the device is on battery, and never go to sleep when the device is plugged in.","String WIFI_WATCHDOG_ON Whether the Wi-Fi watchdog is enabled.","String WINDOW_ANIMATION_SCALE Scaling factor for normal window animations.","[Expand] Inherited Constants","From class android.provider.Settings.NameValueTable String NAME String VALUE","String NAME","String VALUE","From interface android.provider.BaseColumns String _COUNT The count of rows in a directory. String _ID The unique ID for a row.","String _COUNT The count of rows in a directory.","String _ID The unique ID for a row."],"class":"Settings.Global","constructors":[],"fields":["public static final Uri CONTENT_URI The content:// style URL for global secure settings items."]}