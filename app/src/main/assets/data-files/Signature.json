{"methods":["final String getAlgorithm() Returns the name of the algorithm of this Signature.","static Signature getInstance(String algorithm, String provider) Returns a new instance of Signature that utilizes the specified algorithm from the specified provider.","static Signature getInstance(String algorithm, Provider provider) Returns a new instance of Signature that utilizes the specified algorithm from the specified provider.","static Signature getInstance(String algorithm) Returns a new instance of Signature that utilizes the specified algorithm.","final Object getParameter(String param) This method was deprecated in API level 1. There is no generally accepted parameter naming convention.","final AlgorithmParameters getParameters() Returns the AlgorithmParameters of this Signature instance.","final Provider getProvider() Returns the provider associated with this Signature.","final void initSign(PrivateKey privateKey) Initializes this Signature instance for signing, using the private key of the identity whose signature is going to be generated.","final void initSign(PrivateKey privateKey, SecureRandom random) Initializes this Signature instance for signing, using the private key of the identity whose signature is going to be generated and the specified source of randomness.","final void initVerify(Certificate certificate) Initializes this Signature instance for signature verification, using the certificate of the identity whose signature is going to be verified.","final void initVerify(PublicKey publicKey) Initializes this Signature instance for signature verification, using the public key of the identity whose signature is going to be verified.","final void setParameter(String param, Object value) This method was deprecated in API level 1. Use setParameter(AlgorithmParameterSpec) instead.","final void setParameter(AlgorithmParameterSpec params) Sets the specified AlgorithmParameterSpec.","final byte[] sign() Generates and returns the signature of all updated data.","final int sign(byte[] outbuf, int offset, int len) Generates and stores the signature of all updated data in the provided byte[] at the specified position with the specified length.","String toString() Returns a string containing a concise, human-readable description of this Signature including its algorithm and its state.","final void update(ByteBuffer data) Updates the data to be verified or to be signed, using the specified ByteBuffer.","final void update(byte[] data, int off, int len) Updates the data to be verified or to be signed, using the given byte[], starting form the specified index for the specified length.","final void update(byte b) Updates the data to be verified or to be signed, using the specified byte.","final void update(byte[] data) Updates the data to be verified or to be signed, using the specified byte[].","final boolean verify(byte[] signature) Indicates whether the given signature can be verified using the public key or a certificate of the signer.","final boolean verify(byte[] signature, int offset, int length) Indicates whether the given signature starting at index offset with length bytes can be verified using the public key or a certificate of the signer.","[Expand] Inherited Methods","From class java.security.SignatureSpi Object clone() Creates and returns a copy of this Object. abstract Object engineGetParameter(String param) This method was deprecated in API level 1. There is no generally accepted parameter naming convention. AlgorithmParameters engineGetParameters() Returns the AlgorithmParameters of this SignatureSpi instance. void engineInitSign(PrivateKey privateKey, SecureRandom random) Initializes this SignatureSpi instance for signing, using the private key of the identity whose signature is going to be generated and the specified source of randomness. abstract void engineInitSign(PrivateKey privateKey) Initializes this SignatureSpi instance for signing, using the private key of the identity whose signature is going to be generated. abstract void engineInitVerify(PublicKey publicKey) Initializes this SignatureSpi instance for signature verification, using the public key of the identity whose signature is going to be verified. abstract void engineSetParameter(String param, Object value) This method was deprecated in API level 1. Use engineSetParameter(AlgorithmParameterSpec) void engineSetParameter(AlgorithmParameterSpec params) Sets the specified AlgorithmParameterSpec. int engineSign(byte[] outbuf, int offset, int len) Generates and stores the signature of all updated data in the provided byte[] at the specified position with the specified length. abstract byte[] engineSign() Generates and returns the signature of all updated data. abstract void engineUpdate(byte b) Updates the data to be verified or to be signed, using the specified byte. void engineUpdate(ByteBuffer input) Updates the data to be verified or to be signed, using the specified ByteBuffer. abstract void engineUpdate(byte[] b, int off, int len) Updates the data to be verified or to be signed, using the given byte[], starting form the specified index for the specified length. boolean engineVerify(byte[] sigBytes, int offset, int length) Indicates whether the given sigBytes starting at index offset with length bytes can be verified using the public key or a certificate of the signer. abstract boolean engineVerify(byte[] sigBytes) Indicates whether the given sigBytes can be verified using the public key or a certificate of the signer.","Object clone() Creates and returns a copy of this Object.","abstract Object engineGetParameter(String param) This method was deprecated in API level 1. There is no generally accepted parameter naming convention.","AlgorithmParameters engineGetParameters() Returns the AlgorithmParameters of this SignatureSpi instance.","void engineInitSign(PrivateKey privateKey, SecureRandom random) Initializes this SignatureSpi instance for signing, using the private key of the identity whose signature is going to be generated and the specified source of randomness.","abstract void engineInitSign(PrivateKey privateKey) Initializes this SignatureSpi instance for signing, using the private key of the identity whose signature is going to be generated.","abstract void engineInitVerify(PublicKey publicKey) Initializes this SignatureSpi instance for signature verification, using the public key of the identity whose signature is going to be verified.","abstract void engineSetParameter(String param, Object value) This method was deprecated in API level 1. Use engineSetParameter(AlgorithmParameterSpec)","void engineSetParameter(AlgorithmParameterSpec params) Sets the specified AlgorithmParameterSpec.","int engineSign(byte[] outbuf, int offset, int len) Generates and stores the signature of all updated data in the provided byte[] at the specified position with the specified length.","abstract byte[] engineSign() Generates and returns the signature of all updated data.","abstract void engineUpdate(byte b) Updates the data to be verified or to be signed, using the specified byte.","void engineUpdate(ByteBuffer input) Updates the data to be verified or to be signed, using the specified ByteBuffer.","abstract void engineUpdate(byte[] b, int off, int len) Updates the data to be verified or to be signed, using the given byte[], starting form the specified index for the specified length.","boolean engineVerify(byte[] sigBytes, int offset, int length) Indicates whether the given sigBytes starting at index offset with length bytes can be verified using the public key or a certificate of the signer.","abstract boolean engineVerify(byte[] sigBytes) Indicates whether the given sigBytes can be verified using the public key or a certificate of the signer.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"java.security","constants":["int SIGN Constant that indicates that this Signature instance has been initialized for signing.","int UNINITIALIZED Constant that indicates that this Signature instance has not yet been initialized.","int VERIFY Constant that indicates that this Signature instance has been initialized for verification."],"class":"Signature","constructors":[],"fields":["protected int state Represents the current state of this Signature."]}