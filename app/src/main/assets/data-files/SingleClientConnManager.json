{"methods":["void closeExpiredConnections() Closes all expired connections in the pool.","void closeIdleConnections(long idletime, TimeUnit tunit) Closes idle connections in the pool.","ManagedClientConnection getConnection(HttpRoute route, Object state) Obtains a connection.","SchemeRegistry getSchemeRegistry() Obtains the scheme registry used by this manager.","void releaseConnection(ManagedClientConnection conn, long validDuration, TimeUnit timeUnit) Releases a connection for use by others.","final ClientConnectionRequest requestConnection(HttpRoute route, Object state) Returns a new ClientConnectionRequest, from which a ManagedClientConnection can be obtained or the request can be aborted.","void shutdown() Shuts down this connection manager and releases allocated resources.","final void assertStillUp() Asserts that this manager is not shut down.","ClientConnectionOperator createConnectionOperator(SchemeRegistry schreg) Hook for creating the connection operator.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","void revokeConnection() Revokes the currently issued connection.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface org.apache.http.conn.ClientConnectionManager abstract void closeExpiredConnections() Closes all expired connections in the pool. abstract void closeIdleConnections(long idletime, TimeUnit tunit) Closes idle connections in the pool. abstract SchemeRegistry getSchemeRegistry() Obtains the scheme registry used by this manager. abstract void releaseConnection(ManagedClientConnection conn, long validDuration, TimeUnit timeUnit) Releases a connection for use by others. abstract ClientConnectionRequest requestConnection(HttpRoute route, Object state) Returns a new ClientConnectionRequest, from which a ManagedClientConnection can be obtained or the request can be aborted. abstract void shutdown() Shuts down this connection manager and releases allocated resources.","abstract void closeExpiredConnections() Closes all expired connections in the pool.","abstract void closeIdleConnections(long idletime, TimeUnit tunit) Closes idle connections in the pool.","abstract SchemeRegistry getSchemeRegistry() Obtains the scheme registry used by this manager.","abstract void releaseConnection(ManagedClientConnection conn, long validDuration, TimeUnit timeUnit) Releases a connection for use by others.","abstract ClientConnectionRequest requestConnection(HttpRoute route, Object state) Returns a new ClientConnectionRequest, from which a ManagedClientConnection can be obtained or the request can be aborted.","abstract void shutdown() Shuts down this connection manager and releases allocated resources."],"package":"org.apache.http.impl.conn","constants":["String MISUSE_MESSAGE The message to be logged on multiple allocation."],"class":"SingleClientConnManager","constructors":[],"fields":["protected boolean alwaysShutDown Whether the connection should be shut down on release.","protected ClientConnectionOperator connOperator The operator for opening and updating connections.","protected long connectionExpiresTime The time the last released connection expires and shouldn't be reused.","protected boolean isShutDown Indicates whether this connection manager is shut down.","protected long lastReleaseTime The time of the last connection release, or -1.","protected SingleClientConnManager.ConnAdapter managedConn The currently issued managed connection, if any.","protected SchemeRegistry schemeRegistry The schemes supported by this connection manager.","protected SingleClientConnManager.PoolEntry uniquePoolEntry The one and only entry in this pool."]}