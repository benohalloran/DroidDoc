{"methods":["void close() Closes this connection gracefully.","InetAddress getLocalAddress()","int getLocalPort()","InetAddress getRemoteAddress()","int getRemotePort()","int getSocketTimeout() Returns the socket timeout value.","boolean isOpen() Checks if this connection is open.","void setSocketTimeout(int timeout) Sets the socket timeout value.","void shutdown() Force-closes this connection.","void assertNotOpen()","void assertOpen()","void bind(Socket socket, HttpParams params)","SessionInputBuffer createHttpDataReceiver(Socket socket, int buffersize, HttpParams params)","SessionOutputBuffer createHttpDataTransmitter(Socket socket, int buffersize, HttpParams params)","Socket getSocket()","[Expand] Inherited Methods","From class org.apache.http.impl.AbstractHttpServerConnection abstract void assertOpen() EntityDeserializer createEntityDeserializer() EntitySerializer createEntitySerializer() HttpRequestFactory createHttpRequestFactory() HttpMessageParser createRequestParser(SessionInputBuffer buffer, HttpRequestFactory requestFactory, HttpParams params) HttpMessageWriter createResponseWriter(SessionOutputBuffer buffer, HttpParams params) void doFlush() void flush() Sends all pending buffered data over this connection. HttpConnectionMetrics getMetrics() Returns a collection of connection metrcis void init(SessionInputBuffer inbuffer, SessionOutputBuffer outbuffer, HttpParams params) boolean isStale() Checks whether this connection has gone down. void receiveRequestEntity(HttpEntityEnclosingRequest request) Receives the next request entity available from this connection and attaches it to an existing request. HttpRequest receiveRequestHeader() Receives the request line and all headers available from this connection. void sendResponseEntity(HttpResponse response) Sends the response entity of a response over this connection. void sendResponseHeader(HttpResponse response) Sends the response line and headers of a response over this connection.","abstract void assertOpen()","EntityDeserializer createEntityDeserializer()","EntitySerializer createEntitySerializer()","HttpRequestFactory createHttpRequestFactory()","HttpMessageParser createRequestParser(SessionInputBuffer buffer, HttpRequestFactory requestFactory, HttpParams params)","HttpMessageWriter createResponseWriter(SessionOutputBuffer buffer, HttpParams params)","void doFlush()","void flush() Sends all pending buffered data over this connection.","HttpConnectionMetrics getMetrics() Returns a collection of connection metrcis","void init(SessionInputBuffer inbuffer, SessionOutputBuffer outbuffer, HttpParams params)","boolean isStale() Checks whether this connection has gone down.","void receiveRequestEntity(HttpEntityEnclosingRequest request) Receives the next request entity available from this connection and attaches it to an existing request.","HttpRequest receiveRequestHeader() Receives the request line and all headers available from this connection.","void sendResponseEntity(HttpResponse response) Sends the response entity of a response over this connection.","void sendResponseHeader(HttpResponse response) Sends the response line and headers of a response over this connection.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface org.apache.http.HttpConnection abstract void close() Closes this connection gracefully. abstract HttpConnectionMetrics getMetrics() Returns a collection of connection metrcis abstract int getSocketTimeout() Returns the socket timeout value. abstract boolean isOpen() Checks if this connection is open. abstract boolean isStale() Checks whether this connection has gone down. abstract void setSocketTimeout(int timeout) Sets the socket timeout value. abstract void shutdown() Force-closes this connection.","abstract void close() Closes this connection gracefully.","abstract HttpConnectionMetrics getMetrics() Returns a collection of connection metrcis","abstract int getSocketTimeout() Returns the socket timeout value.","abstract boolean isOpen() Checks if this connection is open.","abstract boolean isStale() Checks whether this connection has gone down.","abstract void setSocketTimeout(int timeout) Sets the socket timeout value.","abstract void shutdown() Force-closes this connection.","From interface org.apache.http.HttpInetConnection abstract InetAddress getLocalAddress() abstract int getLocalPort() abstract InetAddress getRemoteAddress() abstract int getRemotePort()","abstract InetAddress getLocalAddress()","abstract int getLocalPort()","abstract InetAddress getRemoteAddress()","abstract int getRemotePort()","From interface org.apache.http.HttpServerConnection abstract void flush() Sends all pending buffered data over this connection. abstract void receiveRequestEntity(HttpEntityEnclosingRequest request) Receives the next request entity available from this connection and attaches it to an existing request. abstract HttpRequest receiveRequestHeader() Receives the request line and all headers available from this connection. abstract void sendResponseEntity(HttpResponse response) Sends the response entity of a response over this connection. abstract void sendResponseHeader(HttpResponse response) Sends the response line and headers of a response over this connection.","abstract void flush() Sends all pending buffered data over this connection.","abstract void receiveRequestEntity(HttpEntityEnclosingRequest request) Receives the next request entity available from this connection and attaches it to an existing request.","abstract HttpRequest receiveRequestHeader() Receives the request line and all headers available from this connection.","abstract void sendResponseEntity(HttpResponse response) Sends the response entity of a response over this connection.","abstract void sendResponseHeader(HttpResponse response) Sends the response line and headers of a response over this connection."],"package":"org.apache.http.impl","constants":[],"class":"SocketHttpServerConnection","constructors":[],"fields":[]}