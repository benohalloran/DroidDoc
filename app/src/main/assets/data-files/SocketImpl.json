{"methods":["String toString() Returns a string containing a concise, human-readable description of the socket.","abstract void accept(SocketImpl newSocket) Waits for an incoming request and blocks until the connection is opened on the given socket.","abstract int available() Returns the available number of bytes which are readable from this socket without blocking.","abstract void bind(InetAddress address, int port) Binds this socket to the specified local host address and port number.","abstract void close() Closes this socket.","abstract void connect(InetAddress address, int port) Connects this socket to the specified remote host address and port number.","abstract void connect(SocketAddress remoteAddr, int timeout) Connects this socket to the remote host address and port number specified by the SocketAddress object with the given timeout.","abstract void connect(String host, int port) Connects this socket to the specified remote host and port number.","abstract void create(boolean isStreaming) Creates a new unconnected socket.","FileDescriptor getFileDescriptor() Gets the file descriptor of this socket.","InetAddress getInetAddress() Gets the remote address this socket is connected to.","abstract InputStream getInputStream() Gets the input stream of this socket.","int getLocalPort() Gets the local port number of this socket.","abstract OutputStream getOutputStream() Gets the output stream of this socket.","int getPort() Gets the remote port number of this socket.","abstract void listen(int backlog) Listens for connection requests on this streaming socket.","abstract void sendUrgentData(int value) Sends the single byte of urgent data on the socket.","void setPerformancePreferences(int connectionTime, int latency, int bandwidth) Sets performance preference for connection time, latency and bandwidth.","void shutdownInput() Closes the input channel of this socket.","void shutdownOutput() Closes the output channel of this socket.","boolean supportsUrgentData() Returns whether the socket supports urgent data or not.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface java.net.SocketOptions abstract Object getOption(int optID) Gets the value for the specified socket option. abstract void setOption(int optID, Object val) Sets the value of the specified socket option.","abstract Object getOption(int optID) Gets the value for the specified socket option.","abstract void setOption(int optID, Object val) Sets the value of the specified socket option."],"package":"java.net","constants":["[Expand] Inherited Constants","From interface java.net.SocketOptions int IP_MULTICAST_IF This is an IPv4-only socket option whose functionality is subsumed by IP_MULTICAST_IF2 and not implemented on Android. int IP_MULTICAST_IF2 This integer option sets the outgoing interface for multicast packets using an interface index. int IP_MULTICAST_LOOP This boolean option specifies whether the local loopback of multicast packets is enabled or disabled. int IP_TOS This integer option specifies the value for the type-of-service field of the IPv4 header, or the traffic class field of the IPv6 header. int SO_BINDADDR This option does not correspond to any Unix socket option and is not implemented on Android. int SO_BROADCAST This boolean option can be used to enable or disable broadcasting on datagram sockets. int SO_KEEPALIVE This boolean option specifies whether the kernel sends keepalive messages on connection-oriented sockets. int SO_LINGER Number of seconds to wait when closing a socket if there is still some buffered data to be sent. int SO_OOBINLINE This boolean option specifies whether sending TCP urgent data is supported on this socket or not. int SO_RCVBUF The size in bytes of a socket's receive buffer. int SO_REUSEADDR This boolean option specifies whether a reuse of a local address is allowed when another socket has not yet been removed by the operating system. int SO_SNDBUF The size in bytes of a socket's send buffer. int SO_TIMEOUT Integer timeout in milliseconds for blocking accept or read/receive operations (but not write/send operations). int TCP_NODELAY This boolean option specifies whether data is sent immediately on this socket or buffered.","int IP_MULTICAST_IF This is an IPv4-only socket option whose functionality is subsumed by IP_MULTICAST_IF2 and not implemented on Android.","int IP_MULTICAST_IF2 This integer option sets the outgoing interface for multicast packets using an interface index.","int IP_MULTICAST_LOOP This boolean option specifies whether the local loopback of multicast packets is enabled or disabled.","int IP_TOS This integer option specifies the value for the type-of-service field of the IPv4 header, or the traffic class field of the IPv6 header.","int SO_BINDADDR This option does not correspond to any Unix socket option and is not implemented on Android.","int SO_BROADCAST This boolean option can be used to enable or disable broadcasting on datagram sockets.","int SO_KEEPALIVE This boolean option specifies whether the kernel sends keepalive messages on connection-oriented sockets.","int SO_LINGER Number of seconds to wait when closing a socket if there is still some buffered data to be sent.","int SO_OOBINLINE This boolean option specifies whether sending TCP urgent data is supported on this socket or not.","int SO_RCVBUF The size in bytes of a socket's receive buffer.","int SO_REUSEADDR This boolean option specifies whether a reuse of a local address is allowed when another socket has not yet been removed by the operating system.","int SO_SNDBUF The size in bytes of a socket's send buffer.","int SO_TIMEOUT Integer timeout in milliseconds for blocking accept or read/receive operations (but not write/send operations).","int TCP_NODELAY This boolean option specifies whether data is sent immediately on this socket or buffered."],"class":"SocketImpl","constructors":[],"fields":["protected InetAddress address The remote address this socket is connected to.","protected FileDescriptor fd The file descriptor of this socket.","protected int localport The local port this socket is connected to.","protected int port The remote port this socket is connected to."]}