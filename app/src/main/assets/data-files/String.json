{"methods":["char charAt(int index) Returns the char at index.","int codePointAt(int index) Returns the Unicode code point at the given index.","int codePointBefore(int index) Returns the Unicode code point that precedes the given index.","int codePointCount(int start, int end) Calculates the number of Unicode code points between start and end.","int compareTo(String string) Compares this string to the given string.","int compareToIgnoreCase(String string) Compares this string to the given string, ignoring case differences.","String concat(String string) Concatenates this string and the specified string.","boolean contains(CharSequence cs) Returns true if this string contains the charss from the given CharSequence.","boolean contentEquals(CharSequence cs) Returns true if the chars in the given CharSequence are the same as those in this string.","boolean contentEquals(StringBuffer sb) Returns true if the chars in the given StringBuffer are the same as those in this string.","static String copyValueOf(char[] data, int start, int length) Creates a new string by copying the given subsequence of the given char[].","static String copyValueOf(char[] data) Creates a new string by copying the given char[].","boolean endsWith(String suffix) Compares the specified string to this string to determine if the specified string is a suffix.","boolean equals(Object other) Compares the given object to this string and returns true if they are equal.","boolean equalsIgnoreCase(String string) Compares the given string to this string ignoring case.","static String format(Locale locale, String format, Object... args) Returns a formatted string, using the supplied format and arguments, localized to the given locale.","static String format(String format, Object... args) Returns a localized formatted string, using the supplied format and arguments, using the user's default locale.","void getBytes(int start, int end, byte[] data, int index) This method was deprecated in API level 1. Use getBytes() or getBytes(String)","byte[] getBytes(String charsetName) Returns a new byte array containing the code points of this string encoded using the named charset.","byte[] getBytes(Charset charset) Returns a new byte array containing the code points of this string encoded using the given charset.","byte[] getBytes() Returns a new byte array containing the code points in this string encoded using the system's default charset.","void getChars(int start, int end, char[] buffer, int index) Copies the given subsequence of this string to the given array starting at the given offset.","int hashCode() Returns an integer hash code for this object.","int indexOf(int c) Returns the first index of the given code point, or -1.","int indexOf(int c, int start) Returns the next index of the given code point, or -1.","int indexOf(String subString, int start) Returns the next index of the given string in this string, or -1.","int indexOf(String string) Returns the first index of the given string, or -1.","String intern() Returns an interned string equal to this string.","boolean isEmpty() Returns true if the length of this string is 0.","int lastIndexOf(String string) Returns the index of the start of the last match for the given string in this string, or -1.","int lastIndexOf(int c, int start) Returns the last index of the code point c, or -1.","int lastIndexOf(int c) Returns the last index of the code point c, or -1.","int lastIndexOf(String subString, int start) Returns the index of the start of the previous match for the given string in this string, or -1.","int length() Returns the number of chars in this string.","boolean matches(String regularExpression) Tests whether this string matches the given regularExpression.","int offsetByCodePoints(int index, int codePointOffset) Returns the index within this object that is offset from index by codePointOffset code points.","boolean regionMatches(boolean ignoreCase, int thisStart, String string, int start, int length) Returns true if the given subsequence of the given string matches this string starting at the given offset.","boolean regionMatches(int thisStart, String string, int start, int length) Returns true if the given subsequence of the given string matches this string starting at the given offset.","String replace(CharSequence target, CharSequence replacement) Returns a copy of this string after replacing occurrences of target replaced with replacement.","String replace(char oldChar, char newChar) Returns a copy of this string after replacing occurrences of the given char with another.","String replaceAll(String regularExpression, String replacement) Replaces all matches for regularExpression within this string with the given replacement.","String replaceFirst(String regularExpression, String replacement) Replaces the first match for regularExpression within this string with the given replacement.","String[] split(String regularExpression) Splits this string using the supplied regularExpression.","String[] split(String regularExpression, int limit) Splits this string using the supplied regularExpression.","boolean startsWith(String prefix) Compares the specified string to this string to determine if the specified string is a prefix.","boolean startsWith(String prefix, int start) Compares the specified string to this string, starting at the specified offset, to determine if the specified string is a prefix.","CharSequence subSequence(int start, int end) Equivalent to substring(int, int) but needed to implement CharSequence.","String substring(int start) Returns a string containing a suffix of this string starting at start.","String substring(int start, int end) Returns a string containing the given subsequence of this string.","char[] toCharArray() Returns a new char array containing a copy of the chars in this string.","String toLowerCase(Locale locale) Converts this string to lower case, using the rules of locale.","String toLowerCase() Converts this string to lower case, using the rules of the user's default locale.","String toString() Returns this string.","String toUpperCase(Locale locale) Converts this this string to upper case, using the rules of locale.","String toUpperCase() Converts this this string to upper case, using the rules of the user's default locale.","String trim() Returns a string with no code points <= \\\\u0020 at the beginning or end.","static String valueOf(long value) Returns the string representation of the given long.","static String valueOf(Object value) Converts the specified object to its string representation.","static String valueOf(char[] data) Returns a new string containing the same chars as the given array.","static String valueOf(double value) Returns the string representation of the given double.","static String valueOf(int value) Returns the string representation of the given int.","static String valueOf(float value) Returns the string representation of the given float.","static String valueOf(char[] data, int start, int length) Returns a new string containing the same chars as the given subset of the given array.","static String valueOf(boolean value) Converts the specified boolean to its string representation.","static String valueOf(char value) Returns a new string of just the given char.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface java.lang.CharSequence abstract char charAt(int index) Returns the character at index. abstract int length() Returns the number of characters in this sequence. abstract CharSequence subSequence(int start, int end) Returns a CharSequence from the start index (inclusive) to the end index (exclusive) of this sequence. abstract String toString() Returns a string with the same characters in the same order as in this sequence.","abstract char charAt(int index) Returns the character at index.","abstract int length() Returns the number of characters in this sequence.","abstract CharSequence subSequence(int start, int end) Returns a CharSequence from the start index (inclusive) to the end index (exclusive) of this sequence.","abstract String toString() Returns a string with the same characters in the same order as in this sequence.","From interface java.lang.Comparable abstract int compareTo(T another) Compares this object to the specified object to determine their relative order.","abstract int compareTo(T another) Compares this object to the specified object to determine their relative order."],"package":"java.lang","constants":[],"class":"String","constructors":[],"fields":["public static final Comparator<String> CASE_INSENSITIVE_ORDER Compares strings using compareToIgnoreCase(String)."]}