{"methods":["void clear() Does nothing.","boolean contains(Object o) Always returns false.","boolean containsAll(Collection<?> c) Returns false unless the given collection is empty.","int drainTo(Collection<? super E> c, int maxElements) Removes at most the given number of available elements from this queue and adds them to the given collection.","int drainTo(Collection<? super E> c) Removes all available elements from this queue and adds them to the given collection.","boolean isEmpty() Always returns true.","Iterator<E> iterator() Returns an empty iterator in which hasNext always returns false.","boolean offer(E e) Inserts the specified element into this queue, if another thread is waiting to receive it.","boolean offer(E e, long timeout, TimeUnit unit) Inserts the specified element into this queue, waiting if necessary up to the specified wait time for another thread to receive it.","E peek() Always returns null.","E poll() Retrieves and removes the head of this queue, if another thread is currently making an element available.","E poll(long timeout, TimeUnit unit) Retrieves and removes the head of this queue, waiting if necessary up to the specified wait time, for another thread to insert it.","void put(E e) Adds the specified element to this queue, waiting if necessary for another thread to receive it.","int remainingCapacity() Always returns zero.","boolean remove(Object o) Always returns false.","boolean removeAll(Collection<?> c) Always returns false.","boolean retainAll(Collection<?> c) Always returns false.","int size() Always returns zero.","E take() Retrieves and removes the head of this queue, waiting if necessary for another thread to insert it.","<T> T[] toArray(T[] a) Sets the zeroeth element of the specified array to null (if the array has non-zero length) and returns it.","Object[] toArray() Returns a zero-length array.","[Expand] Inherited Methods","From class java.util.AbstractQueue boolean add(E e) Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available. boolean addAll(Collection<? extends E> c) Adds all of the elements in the specified collection to this queue. void clear() Removes all of the elements from this queue. E element() Retrieves, but does not remove, the head of this queue. E remove() Retrieves and removes the head of this queue.","boolean add(E e) Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available.","boolean addAll(Collection<? extends E> c) Adds all of the elements in the specified collection to this queue.","void clear() Removes all of the elements from this queue.","E element() Retrieves, but does not remove, the head of this queue.","E remove() Retrieves and removes the head of this queue.","From class java.util.AbstractCollection boolean add(E object) Attempts to add object to the contents of this Collection (optional). boolean addAll(Collection<? extends E> collection) Attempts to add all of the objects contained in collection to the contents of this Collection (optional). void clear() Removes all elements from this Collection, leaving it empty (optional). boolean contains(Object object) Tests whether this Collection contains the specified object. boolean containsAll(Collection<?> collection) Tests whether this Collection contains all objects contained in the specified Collection. boolean isEmpty() Returns if this Collection contains no elements. abstract Iterator<E> iterator() Returns an instance of Iterator that may be used to access the objects contained by this Collection. boolean remove(Object object) Removes one instance of the specified object from this Collection if one is contained (optional). boolean removeAll(Collection<?> collection) Removes all occurrences in this Collection of each object in the specified Collection (optional). boolean retainAll(Collection<?> collection) Removes all objects from this Collection that are not also found in the Collection passed (optional). abstract int size() Returns a count of how many objects this Collection contains. <T> T[] toArray(T[] contents) Returns an array containing all elements contained in this Collection. Object[] toArray() Returns a new array containing all elements contained in this Collection. String toString() Returns the string representation of this Collection.","boolean add(E object) Attempts to add object to the contents of this Collection (optional).","boolean addAll(Collection<? extends E> collection) Attempts to add all of the objects contained in collection to the contents of this Collection (optional).","void clear() Removes all elements from this Collection, leaving it empty (optional).","boolean contains(Object object) Tests whether this Collection contains the specified object.","boolean containsAll(Collection<?> collection) Tests whether this Collection contains all objects contained in the specified Collection.","boolean isEmpty() Returns if this Collection contains no elements.","abstract Iterator<E> iterator() Returns an instance of Iterator that may be used to access the objects contained by this Collection.","boolean remove(Object object) Removes one instance of the specified object from this Collection if one is contained (optional).","boolean removeAll(Collection<?> collection) Removes all occurrences in this Collection of each object in the specified Collection (optional).","boolean retainAll(Collection<?> collection) Removes all objects from this Collection that are not also found in the Collection passed (optional).","abstract int size() Returns a count of how many objects this Collection contains.","<T> T[] toArray(T[] contents) Returns an array containing all elements contained in this Collection.","Object[] toArray() Returns a new array containing all elements contained in this Collection.","String toString() Returns the string representation of this Collection.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface java.lang.Iterable abstract Iterator<T> iterator() Returns an Iterator for the elements in this object.","abstract Iterator<T> iterator() Returns an Iterator for the elements in this object.","From interface java.util.Collection abstract boolean add(E object) Attempts to add object to the contents of this Collection (optional). abstract boolean addAll(Collection<? extends E> collection) Attempts to add all of the objects contained in Collection to the contents of this Collection (optional). abstract void clear() Removes all elements from this Collection, leaving it empty (optional). abstract boolean contains(Object object) Tests whether this Collection contains the specified object. abstract boolean containsAll(Collection<?> collection) Tests whether this Collection contains all objects contained in the specified Collection. abstract boolean equals(Object object) Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison. abstract int hashCode() Returns an integer hash code for the receiver. abstract boolean isEmpty() Returns if this Collection contains no elements. abstract Iterator<E> iterator() Returns an instance of Iterator that may be used to access the objects contained by this Collection. abstract boolean remove(Object object) Removes one instance of the specified object from this Collection if one is contained (optional). abstract boolean removeAll(Collection<?> collection) Removes all occurrences in this Collection of each object in the specified Collection (optional). abstract boolean retainAll(Collection<?> collection) Removes all objects from this Collection that are not also found in the Collection passed (optional). abstract int size() Returns a count of how many objects this Collection contains. abstract <T> T[] toArray(T[] array) Returns an array containing all elements contained in this Collection. abstract Object[] toArray() Returns a new array containing all elements contained in this Collection.","abstract boolean add(E object) Attempts to add object to the contents of this Collection (optional).","abstract boolean addAll(Collection<? extends E> collection) Attempts to add all of the objects contained in Collection to the contents of this Collection (optional).","abstract void clear() Removes all elements from this Collection, leaving it empty (optional).","abstract boolean contains(Object object) Tests whether this Collection contains the specified object.","abstract boolean containsAll(Collection<?> collection) Tests whether this Collection contains all objects contained in the specified Collection.","abstract boolean equals(Object object) Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.","abstract int hashCode() Returns an integer hash code for the receiver.","abstract boolean isEmpty() Returns if this Collection contains no elements.","abstract Iterator<E> iterator() Returns an instance of Iterator that may be used to access the objects contained by this Collection.","abstract boolean remove(Object object) Removes one instance of the specified object from this Collection if one is contained (optional).","abstract boolean removeAll(Collection<?> collection) Removes all occurrences in this Collection of each object in the specified Collection (optional).","abstract boolean retainAll(Collection<?> collection) Removes all objects from this Collection that are not also found in the Collection passed (optional).","abstract int size() Returns a count of how many objects this Collection contains.","abstract <T> T[] toArray(T[] array) Returns an array containing all elements contained in this Collection.","abstract Object[] toArray() Returns a new array containing all elements contained in this Collection.","From interface java.util.Queue abstract boolean add(E e) Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available. abstract E element() Retrieves, but does not remove, the head of this queue. abstract boolean offer(E e) Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions. abstract E peek() Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty. abstract E poll() Retrieves and removes the head of this queue, or returns null if this queue is empty. abstract E remove() Retrieves and removes the head of this queue.","abstract boolean add(E e) Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available.","abstract E element() Retrieves, but does not remove, the head of this queue.","abstract boolean offer(E e) Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions.","abstract E peek() Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.","abstract E poll() Retrieves and removes the head of this queue, or returns null if this queue is empty.","abstract E remove() Retrieves and removes the head of this queue.","From interface java.util.concurrent.BlockingQueue abstract boolean add(E e) Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available. abstract boolean contains(Object o) Returns true if this queue contains the specified element. abstract int drainTo(Collection<? super E> c) Removes all available elements from this queue and adds them to the given collection. abstract int drainTo(Collection<? super E> c, int maxElements) Removes at most the given number of available elements from this queue and adds them to the given collection. abstract boolean offer(E e, long timeout, TimeUnit unit) Inserts the specified element into this queue, waiting up to the specified wait time if necessary for space to become available. abstract boolean offer(E e) Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available. abstract E poll(long timeout, TimeUnit unit) Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available. abstract void put(E e) Inserts the specified element into this queue, waiting if necessary for space to become available. abstract int remainingCapacity() Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking, or Integer.MAX_VALUE if there is no intrinsic limit. abstract boolean remove(Object o) Removes a single instance of the specified element from this queue, if it is present. abstract E take() Retrieves and removes the head of this queue, waiting if necessary until an element becomes available.","abstract boolean add(E e) Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available.","abstract boolean contains(Object o) Returns true if this queue contains the specified element.","abstract int drainTo(Collection<? super E> c) Removes all available elements from this queue and adds them to the given collection.","abstract int drainTo(Collection<? super E> c, int maxElements) Removes at most the given number of available elements from this queue and adds them to the given collection.","abstract boolean offer(E e, long timeout, TimeUnit unit) Inserts the specified element into this queue, waiting up to the specified wait time if necessary for space to become available.","abstract boolean offer(E e) Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available.","abstract E poll(long timeout, TimeUnit unit) Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available.","abstract void put(E e) Inserts the specified element into this queue, waiting if necessary for space to become available.","abstract int remainingCapacity() Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking, or Integer.MAX_VALUE if there is no intrinsic limit.","abstract boolean remove(Object o) Removes a single instance of the specified element from this queue, if it is present.","abstract E take() Retrieves and removes the head of this queue, waiting if necessary until an element becomes available."],"package":"java.util.concurrent","constants":[],"class":"SynchronousQueue","constructors":[],"fields":[]}