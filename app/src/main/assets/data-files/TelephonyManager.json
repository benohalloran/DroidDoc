{"methods":["List<CellInfo> getAllCellInfo() Returns all observed cell information from all radios on the device including the primary and neighboring cells.","int getCallState() Returns a constant indicating the call state (cellular) on the device.","CellLocation getCellLocation() Returns the current location of the device.","int getDataActivity() Returns a constant indicating the type of activity on a data connection (cellular).","int getDataState() Returns a constant indicating the current data connection state (cellular).","String getDeviceId() Returns the unique device ID, for example, the IMEI for GSM and the MEID or ESN for CDMA phones.","String getDeviceSoftwareVersion() Returns the software version number for the device, for example, the IMEI/SV for GSM phones.","String getGroupIdLevel1() Returns the Group Identifier Level1 for a GSM phone.","String getLine1Number() Returns the phone number string for line 1, for example, the MSISDN for a GSM phone.","String getMmsUAProfUrl() Returns the MMS user agent profile URL.","String getMmsUserAgent() Returns the MMS user agent.","List<NeighboringCellInfo> getNeighboringCellInfo() Returns the neighboring cell information of the device.","String getNetworkCountryIso() Returns the ISO country code equivalent of the current registered operator's MCC (Mobile Country Code).","String getNetworkOperator() Returns the numeric name (MCC+MNC) of current registered operator.","String getNetworkOperatorName() Returns the alphabetic name of current registered operator.","int getNetworkType()","int getPhoneType() Returns a constant indicating the device phone type.","String getSimCountryIso() Returns the ISO country code equivalent for the SIM provider's country code.","String getSimOperator() Returns the MCC+MNC (mobile country code + mobile network code) of the provider of the SIM.","String getSimOperatorName() Returns the Service Provider Name (SPN).","String getSimSerialNumber() Returns the serial number of the SIM, if applicable.","int getSimState() Returns a constant indicating the state of the device SIM card.","String getSubscriberId() Returns the unique subscriber ID, for example, the IMSI for a GSM phone.","String getVoiceMailAlphaTag() Retrieves the alphabetic identifier associated with the voice mail number.","String getVoiceMailNumber() Returns the voice mail number.","boolean hasIccCard()","boolean iccCloseLogicalChannel(int channel) Closes a previously opened logical channel to the ICC card.","byte[] iccExchangeSimIO(int fileID, int command, int p1, int p2, int p3, String filePath) Returns the response APDU for a command APDU sent through SIM_IO.","IccOpenLogicalChannelResponse iccOpenLogicalChannel(String AID) Opens a logical channel to the ICC card.","String iccTransmitApduBasicChannel(int cla, int instruction, int p1, int p2, int p3, String data) Transmit an APDU to the ICC card over the basic channel.","String iccTransmitApduLogicalChannel(int channel, int cla, int instruction, int p1, int p2, int p3, String data) Transmit an APDU to the ICC card over a logical channel.","boolean isNetworkRoaming() Returns true if the device is considered roaming on the current network, for GSM purposes.","boolean isSmsCapable()","void listen(PhoneStateListener listener, int events) Registers a listener object to receive notification of changes in specified telephony states.","String sendEnvelopeWithStatus(String content) Send ENVELOPE to the SIM and return the response.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.telephony","constants":["String ACTION_PHONE_STATE_CHANGED Broadcast intent action indicating that the call state (cellular) on the device has changed.","String ACTION_RESPOND_VIA_MESSAGE The Phone app sends this intent when a user opts to respond-via-message during an incoming call.","int CALL_STATE_IDLE Device call state: No activity.","int CALL_STATE_OFFHOOK Device call state: Off-hook.","int CALL_STATE_RINGING Device call state: Ringing.","int DATA_ACTIVITY_DORMANT Data connection is active, but physical link is down","int DATA_ACTIVITY_IN Data connection activity: Currently receiving IP PPP traffic.","int DATA_ACTIVITY_INOUT Data connection activity: Currently both sending and receiving IP PPP traffic.","int DATA_ACTIVITY_NONE Data connection activity: No traffic.","int DATA_ACTIVITY_OUT Data connection activity: Currently sending IP PPP traffic.","int DATA_CONNECTED Data connection state: Connected.","int DATA_CONNECTING Data connection state: Currently setting up a data connection.","int DATA_DISCONNECTED Data connection state: Disconnected.","int DATA_SUSPENDED Data connection state: Suspended.","String EXTRA_INCOMING_NUMBER The lookup key used with the ACTION_PHONE_STATE_CHANGED broadcast for a String containing the incoming phone number.","String EXTRA_STATE The lookup key used with the ACTION_PHONE_STATE_CHANGED broadcast for a String containing the new call state.","int NETWORK_TYPE_1xRTT Current network is 1xRTT","int NETWORK_TYPE_CDMA Current network is CDMA: Either IS95A or IS95B","int NETWORK_TYPE_EDGE Current network is EDGE","int NETWORK_TYPE_EHRPD Current network is eHRPD","int NETWORK_TYPE_EVDO_0 Current network is EVDO revision 0","int NETWORK_TYPE_EVDO_A Current network is EVDO revision A","int NETWORK_TYPE_EVDO_B Current network is EVDO revision B","int NETWORK_TYPE_GPRS Current network is GPRS","int NETWORK_TYPE_HSDPA Current network is HSDPA","int NETWORK_TYPE_HSPA Current network is HSPA","int NETWORK_TYPE_HSPAP Current network is HSPA+","int NETWORK_TYPE_HSUPA Current network is HSUPA","int NETWORK_TYPE_IDEN Current network is iDen","int NETWORK_TYPE_LTE Current network is LTE","int NETWORK_TYPE_UMTS Current network is UMTS","int NETWORK_TYPE_UNKNOWN Network type is unknown","int PHONE_TYPE_CDMA Phone radio is CDMA.","int PHONE_TYPE_GSM Phone radio is GSM.","int PHONE_TYPE_NONE No phone radio.","int PHONE_TYPE_SIP Phone is via SIP.","int SIM_STATE_ABSENT SIM card state: no SIM card is available in the device","int SIM_STATE_NETWORK_LOCKED SIM card state: Locked: requries a network PIN to unlock","int SIM_STATE_PIN_REQUIRED SIM card state: Locked: requires the user's SIM PIN to unlock","int SIM_STATE_PUK_REQUIRED SIM card state: Locked: requires the user's SIM PUK to unlock","int SIM_STATE_READY SIM card state: Ready","int SIM_STATE_UNKNOWN SIM card state: Unknown."],"class":"TelephonyManager","constructors":[],"fields":["public static final String EXTRA_STATE_IDLE Value used with EXTRA_STATE corresponding to CALL_STATE_IDLE.","public static final String EXTRA_STATE_OFFHOOK Value used with EXTRA_STATE corresponding to CALL_STATE_OFFHOOK.","public static final String EXTRA_STATE_RINGING Value used with EXTRA_STATE corresponding to CALL_STATE_RINGING."]}