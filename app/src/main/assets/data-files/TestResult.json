{"methods":["synchronized void addError(Test test, Throwable t) Adds an error to the list of errors.","synchronized void addFailure(Test test, AssertionFailedError t) Adds a failure to the list of failures.","synchronized void addListener(TestListener listener) Registers a TestListener","void endTest(Test test) Informs the result that a test was completed.","synchronized int errorCount() Gets the number of detected errors.","synchronized Enumeration<TestFailure> errors() Returns an Enumeration for the errors","synchronized int failureCount() Gets the number of detected failures.","synchronized Enumeration<TestFailure> failures() Returns an Enumeration for the failures","synchronized void removeListener(TestListener listener) Unregisters a TestListener","synchronized int runCount() Gets the number of run tests.","void runProtected(Test test, Protectable p) Runs a TestCase.","synchronized boolean shouldStop() Checks whether the test run should stop","void startTest(Test test) Informs the result that a test will be started.","synchronized void stop() Marks that the test run should stop.","synchronized boolean wasSuccessful() Returns whether the entire test was successful or not.","void run(TestCase test) Runs a TestCase.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"junit.framework","constants":[],"class":"TestResult","constructors":[],"fields":["protected Vector<TestFailure> fErrors","protected Vector<TestFailure> fFailures","protected Vector<TestListener> fListeners","protected int fRunTests"]}