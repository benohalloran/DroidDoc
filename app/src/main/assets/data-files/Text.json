{"methods":["abstract String getWholeText() Returns all text of Text nodes logically-adjacent text nodes to this node, concatenated in document order.","abstract boolean isElementContentWhitespace() Returns whether this text node contains element content whitespace, often abusively called \"ignorable whitespace\".","abstract Text replaceWholeText(String content) Replaces the text of the current node and all logically-adjacent text nodes with the specified text.","abstract Text splitText(int offset) Breaks this node into two nodes at the specified offset, keeping both in the tree as siblings.","[Expand] Inherited Methods","From interface org.w3c.dom.CharacterData abstract void appendData(String arg) Append the string to the end of the character data of the node. abstract void deleteData(int offset, int count) Remove a range of 16-bit units from the node. abstract String getData() The character data of the node that implements this interface. abstract int getLength() The number of 16-bit units that are available through data and the substringData method below. abstract void insertData(int offset, String arg) Insert a string at the specified 16-bit unit offset. abstract void replaceData(int offset, int count, String arg) Replace the characters starting at the specified 16-bit unit offset with the specified string. abstract void setData(String data) The character data of the node that implements this interface. abstract String substringData(int offset, int count) Extracts a range of data from the node.","abstract void appendData(String arg) Append the string to the end of the character data of the node.","abstract void deleteData(int offset, int count) Remove a range of 16-bit units from the node.","abstract String getData() The character data of the node that implements this interface.","abstract int getLength() The number of 16-bit units that are available through data and the substringData method below.","abstract void insertData(int offset, String arg) Insert a string at the specified 16-bit unit offset.","abstract void replaceData(int offset, int count, String arg) Replace the characters starting at the specified 16-bit unit offset with the specified string.","abstract void setData(String data) The character data of the node that implements this interface.","abstract String substringData(int offset, int count) Extracts a range of data from the node.","From interface org.w3c.dom.Node abstract Node appendChild(Node newChild) Adds the node newChild to the end of the list of children of this node. abstract Node cloneNode(boolean deep) Returns a duplicate of this node, i.e., serves as a generic copy constructor for nodes. abstract short compareDocumentPosition(Node other) Compares the reference node, i.e. abstract NamedNodeMap getAttributes() A NamedNodeMap containing the attributes of this node (if it is an Element) or null otherwise. abstract String getBaseURI() The absolute base URI of this node or null if the implementation wasn't able to obtain an absolute URI. abstract NodeList getChildNodes() A NodeList that contains all children of this node. abstract Object getFeature(String feature, String version) This method returns a specialized object which implements the specialized APIs of the specified feature and version, as specified in . abstract Node getFirstChild() The first child of this node. abstract Node getLastChild() The last child of this node. abstract String getLocalName() Returns the local part of the qualified name of this node. abstract String getNamespaceURI() The namespace URI of this node, or null if it is unspecified (see ). abstract Node getNextSibling() The node immediately following this node. abstract String getNodeName() The name of this node, depending on its type; see the table above. abstract short getNodeType() A code representing the type of the underlying object, as defined above. abstract String getNodeValue() The value of this node, depending on its type; see the table above. abstract Document getOwnerDocument() The Document object associated with this node. abstract Node getParentNode() The parent of this node. abstract String getPrefix() The namespace prefix of this node, or null if it is unspecified. abstract Node getPreviousSibling() The node immediately preceding this node. abstract String getTextContent() This attribute returns the text content of this node and its descendants. abstract Object getUserData(String key) Retrieves the object associated to a key on a this node. abstract boolean hasAttributes() Returns whether this node (if it is an element) has any attributes. abstract boolean hasChildNodes() Returns whether this node has any children. abstract Node insertBefore(Node newChild, Node refChild) Inserts the node newChild before the existing child node refChild. abstract boolean isDefaultNamespace(String namespaceURI) This method checks if the specified namespaceURI is the default namespace or not. abstract boolean isEqualNode(Node arg) Tests whether two nodes are equal. abstract boolean isSameNode(Node other) Returns whether this node is the same node as the given one. abstract boolean isSupported(String feature, String version) Tests whether the DOM implementation implements a specific feature and that feature is supported by this node, as specified in . abstract String lookupNamespaceURI(String prefix) Look up the namespace URI associated to the given prefix, starting from this node. abstract String lookupPrefix(String namespaceURI) Look up the prefix associated to the given namespace URI, starting from this node. abstract void normalize() Puts all Text nodes in the full depth of the sub-tree underneath this Node, including attribute nodes, into a \"normal\" form where only structure (e.g., elements, comments, processing instructions, CDATA sections, and entity references) separates Text nodes, i.e., there are neither adjacent Text nodes nor empty Text nodes. abstract Node removeChild(Node oldChild) Removes the child node indicated by oldChild from the list of children, and returns it. abstract Node replaceChild(Node newChild, Node oldChild) Replaces the child node oldChild with newChild in the list of children, and returns the oldChild node. abstract void setNodeValue(String nodeValue) The value of this node, depending on its type; see the table above. abstract void setPrefix(String prefix) The namespace prefix of this node, or null if it is unspecified. abstract void setTextContent(String textContent) This attribute returns the text content of this node and its descendants. abstract Object setUserData(String key, Object data, UserDataHandler handler) Associate an object to a key on this node.","abstract Node appendChild(Node newChild) Adds the node newChild to the end of the list of children of this node.","abstract Node cloneNode(boolean deep) Returns a duplicate of this node, i.e., serves as a generic copy constructor for nodes.","abstract short compareDocumentPosition(Node other) Compares the reference node, i.e.","abstract NamedNodeMap getAttributes() A NamedNodeMap containing the attributes of this node (if it is an Element) or null otherwise.","abstract String getBaseURI() The absolute base URI of this node or null if the implementation wasn't able to obtain an absolute URI.","abstract NodeList getChildNodes() A NodeList that contains all children of this node.","abstract Object getFeature(String feature, String version) This method returns a specialized object which implements the specialized APIs of the specified feature and version, as specified in .","abstract Node getFirstChild() The first child of this node.","abstract Node getLastChild() The last child of this node.","abstract String getLocalName() Returns the local part of the qualified name of this node.","abstract String getNamespaceURI() The namespace URI of this node, or null if it is unspecified (see ).","abstract Node getNextSibling() The node immediately following this node.","abstract String getNodeName() The name of this node, depending on its type; see the table above.","abstract short getNodeType() A code representing the type of the underlying object, as defined above.","abstract String getNodeValue() The value of this node, depending on its type; see the table above.","abstract Document getOwnerDocument() The Document object associated with this node.","abstract Node getParentNode() The parent of this node.","abstract String getPrefix() The namespace prefix of this node, or null if it is unspecified.","abstract Node getPreviousSibling() The node immediately preceding this node.","abstract String getTextContent() This attribute returns the text content of this node and its descendants.","abstract Object getUserData(String key) Retrieves the object associated to a key on a this node.","abstract boolean hasAttributes() Returns whether this node (if it is an element) has any attributes.","abstract boolean hasChildNodes() Returns whether this node has any children.","abstract Node insertBefore(Node newChild, Node refChild) Inserts the node newChild before the existing child node refChild.","abstract boolean isDefaultNamespace(String namespaceURI) This method checks if the specified namespaceURI is the default namespace or not.","abstract boolean isEqualNode(Node arg) Tests whether two nodes are equal.","abstract boolean isSameNode(Node other) Returns whether this node is the same node as the given one.","abstract boolean isSupported(String feature, String version) Tests whether the DOM implementation implements a specific feature and that feature is supported by this node, as specified in .","abstract String lookupNamespaceURI(String prefix) Look up the namespace URI associated to the given prefix, starting from this node.","abstract String lookupPrefix(String namespaceURI) Look up the prefix associated to the given namespace URI, starting from this node.","abstract void normalize() Puts all Text nodes in the full depth of the sub-tree underneath this Node, including attribute nodes, into a \"normal\" form where only structure (e.g., elements, comments, processing instructions, CDATA sections, and entity references) separates Text nodes, i.e., there are neither adjacent Text nodes nor empty Text nodes.","abstract Node removeChild(Node oldChild) Removes the child node indicated by oldChild from the list of children, and returns it.","abstract Node replaceChild(Node newChild, Node oldChild) Replaces the child node oldChild with newChild in the list of children, and returns the oldChild node.","abstract void setNodeValue(String nodeValue) The value of this node, depending on its type; see the table above.","abstract void setPrefix(String prefix) The namespace prefix of this node, or null if it is unspecified.","abstract void setTextContent(String textContent) This attribute returns the text content of this node and its descendants.","abstract Object setUserData(String key, Object data, UserDataHandler handler) Associate an object to a key on this node."],"package":"org.w3c.dom","constants":["[Expand] Inherited Constants","From interface org.w3c.dom.Node short ATTRIBUTE_NODE The node is an Attr. short CDATA_SECTION_NODE The node is a CDATASection. short COMMENT_NODE The node is a Comment. short DOCUMENT_FRAGMENT_NODE The node is a DocumentFragment. short DOCUMENT_NODE The node is a Document. short DOCUMENT_POSITION_CONTAINED_BY The node is contained by the reference node. short DOCUMENT_POSITION_CONTAINS The node contains the reference node. short DOCUMENT_POSITION_DISCONNECTED The two nodes are disconnected. short DOCUMENT_POSITION_FOLLOWING The node follows the reference node. short DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC The determination of preceding versus following is implementation-specific. short DOCUMENT_POSITION_PRECEDING The second node precedes the reference node. short DOCUMENT_TYPE_NODE The node is a DocumentType. short ELEMENT_NODE The node is an Element. short ENTITY_NODE The node is an Entity. short ENTITY_REFERENCE_NODE The node is an EntityReference. short NOTATION_NODE The node is a Notation. short PROCESSING_INSTRUCTION_NODE The node is a ProcessingInstruction. short TEXT_NODE The node is a Text node.","short ATTRIBUTE_NODE The node is an Attr.","short CDATA_SECTION_NODE The node is a CDATASection.","short COMMENT_NODE The node is a Comment.","short DOCUMENT_FRAGMENT_NODE The node is a DocumentFragment.","short DOCUMENT_NODE The node is a Document.","short DOCUMENT_POSITION_CONTAINED_BY The node is contained by the reference node.","short DOCUMENT_POSITION_CONTAINS The node contains the reference node.","short DOCUMENT_POSITION_DISCONNECTED The two nodes are disconnected.","short DOCUMENT_POSITION_FOLLOWING The node follows the reference node.","short DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC The determination of preceding versus following is implementation-specific.","short DOCUMENT_POSITION_PRECEDING The second node precedes the reference node.","short DOCUMENT_TYPE_NODE The node is a DocumentType.","short ELEMENT_NODE The node is an Element.","short ENTITY_NODE The node is an Entity.","short ENTITY_REFERENCE_NODE The node is an EntityReference.","short NOTATION_NODE The node is a Notation.","short PROCESSING_INSTRUCTION_NODE The node is a ProcessingInstruction.","short TEXT_NODE The node is a Text node."],"class":"Text","constructors":[],"fields":[]}