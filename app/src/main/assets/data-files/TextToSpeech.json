{"methods":["int addEarcon(String earcon, String filename) This method was deprecated in API level 21. As of API level 21, replaced by addEarcon(String, File).","int addEarcon(String earcon, File file) Adds a mapping between a string of text and a sound file.","int addEarcon(String earcon, String packagename, int resourceId) Adds a mapping between a string of text and a sound resource in a package.","int addSpeech(String text, String packagename, int resourceId) Adds a mapping between a string of text and a sound resource in a package.","int addSpeech(String text, String filename) Adds a mapping between a string of text and a sound file.","int addSpeech(CharSequence text, File file) Adds a mapping between a CharSequence (may be spanned with TtsSpans and a sound file.","int addSpeech(CharSequence text, String packagename, int resourceId) Adds a mapping between a CharSequence (may be spanned with TtsSpans) of text and a sound resource in a package.","boolean areDefaultsEnforced() Checks whether the user's settings should override settings requested by the calling application.","Set<Locale> getAvailableLanguages() Query the engine about the set of available languages.","String getDefaultEngine() Gets the package name of the default speech synthesis engine.","Locale getDefaultLanguage() This method was deprecated in API level 21. As of API level 21, use getDefaultVoice().getLocale() (getDefaultVoice())","Voice getDefaultVoice() Returns a Voice instance that's the default voice for the default Text-to-speech language.","List<TextToSpeech.EngineInfo> getEngines() Gets a list of all installed TTS engines.","Set<String> getFeatures(Locale locale) This method was deprecated in API level 21. As of API level 21, please use voices. In order to query features of the voice, call getVoices() to retrieve the list of available voices and getFeatures() to retrieve the set of features.","Locale getLanguage() This method was deprecated in API level 21. As of API level 21, please use getVoice().getLocale() (getVoice()).","static int getMaxSpeechInputLength() Limit of length of input string passed to speak and synthesizeToFile.","Voice getVoice() Returns a Voice instance describing the voice currently being used for synthesis requests sent to the TextToSpeech engine.","Set<Voice> getVoices() Query the engine about the set of available voices.","int isLanguageAvailable(Locale loc) Checks if the specified language as represented by the Locale is available and supported.","boolean isSpeaking() Checks whether the TTS engine is busy speaking.","int playEarcon(String earcon, int queueMode, Bundle params, String utteranceId) Plays the earcon using the specified queueing mode and parameters.","int playEarcon(String earcon, int queueMode, HashMap<String, String> params) This method was deprecated in API level 21. As of API level 21, replaced by playEarcon(String, int, Bundle, String).","int playSilence(long durationInMs, int queueMode, HashMap<String, String> params) This method was deprecated in API level 21. As of API level 21, replaced by playSilentUtterance(long, int, String).","int playSilentUtterance(long durationInMs, int queueMode, String utteranceId) Plays silence for the specified amount of time using the specified queue mode.","int setAudioAttributes(AudioAttributes audioAttributes) Sets the audio attributes to be used when speaking text or playing back a file.","int setEngineByPackageName(String enginePackageName) This method was deprecated in API level 14. This doesn't inform callers when the TTS engine has been initialized. TextToSpeech(Context, OnInitListener, String) can be used with the appropriate engine name. Also, there is no guarantee that the engine specified will be loaded. If it isn't installed or disabled, the user / system wide defaults will apply.","int setLanguage(Locale loc) Sets the text-to-speech language.","int setOnUtteranceCompletedListener(TextToSpeech.OnUtteranceCompletedListener listener) This method was deprecated in API level 15. Use setOnUtteranceProgressListener(UtteranceProgressListener) instead.","int setOnUtteranceProgressListener(UtteranceProgressListener listener) Sets the listener that will be notified of various events related to the synthesis of a given utterance.","int setPitch(float pitch) Sets the speech pitch for the TextToSpeech engine.","int setSpeechRate(float speechRate) Sets the speech rate.","int setVoice(Voice voice) Sets the text-to-speech voice.","void shutdown() Releases the resources used by the TextToSpeech engine.","int speak(CharSequence text, int queueMode, Bundle params, String utteranceId) Speaks the text using the specified queuing strategy and speech parameters, the text may be spanned with TtsSpans.","int speak(String text, int queueMode, HashMap<String, String> params) This method was deprecated in API level 21. As of API level 21, replaced by speak(CharSequence, int, Bundle, String).","int stop() Interrupts the current utterance (whether played or rendered to file) and discards other utterances in the queue.","int synthesizeToFile(String text, HashMap<String, String> params, String filename) This method was deprecated in API level 21. As of API level 21, replaced by synthesizeToFile(CharSequence, Bundle, File, String).","int synthesizeToFile(CharSequence text, Bundle params, File file, String utteranceId) Synthesizes the given text to a file using the specified parameters.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.speech.tts","constants":["String ACTION_TTS_QUEUE_PROCESSING_COMPLETED Broadcast Action: The TextToSpeech synthesizer has completed processing of all the text in the speech queue.","int ERROR Denotes a generic operation failure.","int ERROR_INVALID_REQUEST Denotes a failure caused by an invalid request.","int ERROR_NETWORK Denotes a failure caused by a network connectivity problems.","int ERROR_NETWORK_TIMEOUT Denotes a failure caused by network timeout.","int ERROR_NOT_INSTALLED_YET Denotes a failure caused by an unfinished download of the voice data.","int ERROR_OUTPUT Denotes a failure related to the output (audio device or a file).","int ERROR_SERVICE Denotes a failure of a TTS service.","int ERROR_SYNTHESIS Denotes a failure of a TTS engine to synthesize the given input.","int LANG_AVAILABLE Denotes the language is available for the language by the locale, but not the country and variant.","int LANG_COUNTRY_AVAILABLE Denotes the language is available for the language and country specified by the locale, but not the variant.","int LANG_COUNTRY_VAR_AVAILABLE Denotes the language is available exactly as specified by the locale.","int LANG_MISSING_DATA Denotes the language data is missing.","int LANG_NOT_SUPPORTED Denotes the language is not supported.","int QUEUE_ADD Queue mode where the new entry is added at the end of the playback queue.","int QUEUE_FLUSH Queue mode where all entries in the playback queue (media to be played and text to be synthesized) are dropped and replaced by the new entry.","int STOPPED Denotes a stop requested by a client.","int SUCCESS Denotes a successful operation."],"class":"TextToSpeech","constructors":[],"fields":[]}