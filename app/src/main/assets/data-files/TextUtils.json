{"methods":["static CharSequence commaEllipsize(CharSequence text, TextPaint p, float avail, String oneMore, String more) Converts a CharSequence of the comma-separated form \"Andy, Bob, Charles, David\" that is too wide to fit into the specified width into one like \"Andy, Bob, 2 more\".","static CharSequence concat(CharSequence... text) Returns a CharSequence concatenating the specified CharSequences, retaining their spans if any.","static void copySpansFrom(Spanned source, int start, int end, Class kind, Spannable dest, int destoff) Copies the spans from the region start...end in source to the region destoff...destoff+end-start in dest.","static void dumpSpans(CharSequence cs, Printer printer, String prefix) Debugging tool to print the spans in a CharSequence.","static CharSequence ellipsize(CharSequence text, TextPaint p, float avail, TextUtils.TruncateAt where) Returns the original text if it fits in the specified width given the properties of the specified Paint, or, if it does not fit, a truncated copy with ellipsis character added at the specified edge or center.","static CharSequence ellipsize(CharSequence text, TextPaint paint, float avail, TextUtils.TruncateAt where, boolean preserveLength, TextUtils.EllipsizeCallback callback) Returns the original text if it fits in the specified width given the properties of the specified Paint, or, if it does not fit, a copy with ellipsis character added at the specified edge or center.","static boolean equals(CharSequence a, CharSequence b) Returns true if a and b are equal, including if they are both null.","static CharSequence expandTemplate(CharSequence template, CharSequence... values) Replace instances of \"^1\", \"^2\", etc.","static int getCapsMode(CharSequence cs, int off, int reqModes) Determine what caps mode should be in effect at the current offset in the text.","static void getChars(CharSequence s, int start, int end, char[] dest, int destoff)","static int getLayoutDirectionFromLocale(Locale locale) Return the layout direction for a given Locale","static int getOffsetAfter(CharSequence text, int offset)","static int getOffsetBefore(CharSequence text, int offset)","static CharSequence getReverse(CharSequence source, int start, int end)","static int getTrimmedLength(CharSequence s) Returns the length that the specified CharSequence would have if spaces and control characters were trimmed from the start and end, as by trim().","static String htmlEncode(String s) Html-encode the string.","static int indexOf(CharSequence s, char ch)","static int indexOf(CharSequence s, CharSequence needle)","static int indexOf(CharSequence s, CharSequence needle, int start)","static int indexOf(CharSequence s, char ch, int start, int end)","static int indexOf(CharSequence s, char ch, int start)","static int indexOf(CharSequence s, CharSequence needle, int start, int end)","static boolean isDigitsOnly(CharSequence str) Returns whether the given CharSequence contains only digits.","static boolean isEmpty(CharSequence str) Returns true if the string is null or 0-length.","static boolean isGraphic(CharSequence str) Returns whether the given CharSequence contains any printable characters.","static boolean isGraphic(char c) Returns whether this character is a printable character.","static String join(CharSequence delimiter, Iterable tokens) Returns a string containing the tokens joined by delimiters.","static String join(CharSequence delimiter, Object[] tokens) Returns a string containing the tokens joined by delimiters.","static int lastIndexOf(CharSequence s, char ch, int start, int last)","static int lastIndexOf(CharSequence s, char ch)","static int lastIndexOf(CharSequence s, char ch, int last)","static boolean regionMatches(CharSequence one, int toffset, CharSequence two, int ooffset, int len)","static CharSequence replace(CharSequence template, String[] sources, CharSequence[] destinations) Return a new CharSequence in which each of the source strings is replaced by the corresponding element of the destinations.","static String[] split(String text, Pattern pattern) Splits a string on a pattern.","static String[] split(String text, String expression) String.split() returns [''] when the string to be split is empty.","static CharSequence stringOrSpannedString(CharSequence source)","static String substring(CharSequence source, int start, int end) Create a new String object containing the given range of characters from the source string.","static void writeToParcel(CharSequence cs, Parcel p, int parcelableFlags) Flatten a CharSequence and whatever styles can be copied across processes into the parcel.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.text","constants":["int CAP_MODE_CHARACTERS Capitalization mode for getCapsMode(CharSequence, int, int): capitalize all characters.","int CAP_MODE_SENTENCES Capitalization mode for getCapsMode(CharSequence, int, int): capitalize the first character of each sentence.","int CAP_MODE_WORDS Capitalization mode for getCapsMode(CharSequence, int, int): capitalize the first character of all words."],"class":"TextUtils","constructors":[],"fields":["public static final Creator<CharSequence> CHAR_SEQUENCE_CREATOR"]}