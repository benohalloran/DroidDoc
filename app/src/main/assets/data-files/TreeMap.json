{"methods":["Entry<K, V> ceilingEntry(K key) Returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such key.","K ceilingKey(K key) Returns the least key greater than or equal to the given key, or null if there is no such key.","void clear() Removes all elements from this Map, leaving it empty. This implementation calls entrySet().clear().","Object clone() Creates and returns a copy of this Object.","Comparator<? super K> comparator() Returns the comparator used to compare keys in this sorted map, or null if the natural ordering is in use.","boolean containsKey(Object key) Returns whether this Map contains the specified key. This implementation iterates its key set, looking for a key that key equals.","NavigableSet<K> descendingKeySet() Returns a reverse order NavigableSet view of the keys contained in this map.","NavigableMap<K, V> descendingMap() Returns a reverse order view of the mappings contained in this map.","Set<Entry<K, V>> entrySet() Returns a Set containing all of the mappings in this Map.","Entry<K, V> firstEntry() Returns a key-value mapping associated with the least key in this map, or null if the map is empty.","K firstKey() Returns the least key in this sorted map.","Entry<K, V> floorEntry(K key) Returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key.","K floorKey(K key) Returns the greatest key less than or equal to the given key, or null if there is no such key.","V get(Object key) Returns the value of the mapping with the specified key. This implementation iterates its entry set, looking for an entry with a key that key equals.","NavigableMap<K, V> headMap(K to, boolean inclusive) Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey.","SortedMap<K, V> headMap(K toExclusive) Returns a sorted map over a range of this sorted map with all keys that are less than the specified endKey. Equivalent to headMap(toKey, false).","Entry<K, V> higherEntry(K key) Returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key.","K higherKey(K key) Returns the least key strictly greater than the given key, or null if there is no such key.","boolean isEmpty() Returns whether this map is empty. This implementation compares size() to 0.","Set<K> keySet() Returns a set of the keys contained in this Map. This implementation returns a view that calls through this to map.","Entry<K, V> lastEntry() Returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.","K lastKey() Returns the greatest key in this sorted map.","Entry<K, V> lowerEntry(K key) Returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key.","K lowerKey(K key) Returns the greatest key strictly less than the given key, or null if there is no such key.","NavigableSet<K> navigableKeySet() Returns a NavigableSet view of the keys contained in this map.","Entry<K, V> pollFirstEntry() Removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty.","Entry<K, V> pollLastEntry() Removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.","V put(K key, V value) Maps the specified key to the specified value. This base implementation throws UnsupportedOperationException.","V remove(Object key) Removes a mapping with the specified key from this Map. This implementation iterates its entry set, removing the entry with a key that key equals.","int size() Returns the number of mappings in this Map. This implementation returns its entry set's size.","SortedMap<K, V> subMap(K fromInclusive, K toExclusive) Returns a sorted map over a range of this sorted map with all keys greater than or equal to the specified startKey and less than the specified endKey. Equivalent to subMap(fromKey, true, toKey, false).","NavigableMap<K, V> subMap(K from, boolean fromInclusive, K to, boolean toInclusive) Returns a view of the portion of this map whose keys range from fromKey to toKey.","NavigableMap<K, V> tailMap(K from, boolean inclusive) Returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey.","SortedMap<K, V> tailMap(K fromInclusive) Returns a sorted map over a range of this sorted map with all keys that are greater than or equal to the specified startKey. Equivalent to tailMap(fromKey, true).","[Expand] Inherited Methods","From class java.util.AbstractMap void clear() Removes all elements from this Map, leaving it empty. This implementation calls entrySet().clear(). Object clone() Creates and returns a copy of this Object. boolean containsKey(Object key) Returns whether this Map contains the specified key. This implementation iterates its key set, looking for a key that key equals. boolean containsValue(Object value) Returns whether this Map contains the specified value. This implementation iterates its entry set, looking for an entry with a value that value equals. abstract Set<Entry<K, V>> entrySet() Returns a Set containing all of the mappings in this Map. boolean equals(Object object) Compares this instance with the specified object and indicates if they are equal. This implementation first checks the structure of object. V get(Object key) Returns the value of the mapping with the specified key. This implementation iterates its entry set, looking for an entry with a key that key equals. int hashCode() Returns an integer hash code for this object. This implementation iterates its entry set, summing the hashcodes of its entries. boolean isEmpty() Returns whether this map is empty. This implementation compares size() to 0. Set<K> keySet() Returns a set of the keys contained in this Map. This implementation returns a view that calls through this to map. V put(K key, V value) Maps the specified key to the specified value. This base implementation throws UnsupportedOperationException. void putAll(Map<? extends K, ? extends V> map) Copies every mapping in the specified Map to this Map. This implementation iterates through map's entry set, calling put() for each. V remove(Object key) Removes a mapping with the specified key from this Map. This implementation iterates its entry set, removing the entry with a key that key equals. int size() Returns the number of mappings in this Map. This implementation returns its entry set's size. String toString() Returns a string containing a concise, human-readable description of this object. This implementation composes a string by iterating its entry set. Collection<V> values() Returns a Collection of the values contained in this Map. This implementation returns a view that calls through this to map.","void clear() Removes all elements from this Map, leaving it empty. This implementation calls entrySet().clear().","Object clone() Creates and returns a copy of this Object.","boolean containsKey(Object key) Returns whether this Map contains the specified key. This implementation iterates its key set, looking for a key that key equals.","boolean containsValue(Object value) Returns whether this Map contains the specified value. This implementation iterates its entry set, looking for an entry with a value that value equals.","abstract Set<Entry<K, V>> entrySet() Returns a Set containing all of the mappings in this Map.","boolean equals(Object object) Compares this instance with the specified object and indicates if they are equal. This implementation first checks the structure of object.","V get(Object key) Returns the value of the mapping with the specified key. This implementation iterates its entry set, looking for an entry with a key that key equals.","int hashCode() Returns an integer hash code for this object. This implementation iterates its entry set, summing the hashcodes of its entries.","boolean isEmpty() Returns whether this map is empty. This implementation compares size() to 0.","Set<K> keySet() Returns a set of the keys contained in this Map. This implementation returns a view that calls through this to map.","V put(K key, V value) Maps the specified key to the specified value. This base implementation throws UnsupportedOperationException.","void putAll(Map<? extends K, ? extends V> map) Copies every mapping in the specified Map to this Map. This implementation iterates through map's entry set, calling put() for each.","V remove(Object key) Removes a mapping with the specified key from this Map. This implementation iterates its entry set, removing the entry with a key that key equals.","int size() Returns the number of mappings in this Map. This implementation returns its entry set's size.","String toString() Returns a string containing a concise, human-readable description of this object. This implementation composes a string by iterating its entry set.","Collection<V> values() Returns a Collection of the values contained in this Map. This implementation returns a view that calls through this to map.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface java.util.Map abstract void clear() Removes all elements from this Map, leaving it empty. abstract boolean containsKey(Object key) Returns whether this Map contains the specified key. abstract boolean containsValue(Object value) Returns whether this Map contains the specified value. abstract Set<Entry<K, V>> entrySet() Returns a Set containing all of the mappings in this Map. abstract boolean equals(Object object) Compares the argument to the receiver, and returns true if the specified object is a Map and both Maps contain the same mappings. abstract V get(Object key) Returns the value of the mapping with the specified key. abstract int hashCode() Returns an integer hash code for the receiver. abstract boolean isEmpty() Returns whether this map is empty. abstract Set<K> keySet() Returns a set of the keys contained in this Map. abstract V put(K key, V value) Maps the specified key to the specified value. abstract void putAll(Map<? extends K, ? extends V> map) Copies every mapping in the specified Map to this Map. abstract V remove(Object key) Removes a mapping with the specified key from this Map. abstract int size() Returns the number of mappings in this Map. abstract Collection<V> values() Returns a Collection of the values contained in this Map.","abstract void clear() Removes all elements from this Map, leaving it empty.","abstract boolean containsKey(Object key) Returns whether this Map contains the specified key.","abstract boolean containsValue(Object value) Returns whether this Map contains the specified value.","abstract Set<Entry<K, V>> entrySet() Returns a Set containing all of the mappings in this Map.","abstract boolean equals(Object object) Compares the argument to the receiver, and returns true if the specified object is a Map and both Maps contain the same mappings.","abstract V get(Object key) Returns the value of the mapping with the specified key.","abstract int hashCode() Returns an integer hash code for the receiver.","abstract boolean isEmpty() Returns whether this map is empty.","abstract Set<K> keySet() Returns a set of the keys contained in this Map.","abstract V put(K key, V value) Maps the specified key to the specified value.","abstract void putAll(Map<? extends K, ? extends V> map) Copies every mapping in the specified Map to this Map.","abstract V remove(Object key) Removes a mapping with the specified key from this Map.","abstract int size() Returns the number of mappings in this Map.","abstract Collection<V> values() Returns a Collection of the values contained in this Map.","From interface java.util.NavigableMap abstract Entry<K, V> ceilingEntry(K key) Returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such key. abstract K ceilingKey(K key) Returns the least key greater than or equal to the given key, or null if there is no such key. abstract NavigableSet<K> descendingKeySet() Returns a reverse order NavigableSet view of the keys contained in this map. abstract NavigableMap<K, V> descendingMap() Returns a reverse order view of the mappings contained in this map. abstract Entry<K, V> firstEntry() Returns a key-value mapping associated with the least key in this map, or null if the map is empty. abstract Entry<K, V> floorEntry(K key) Returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key. abstract K floorKey(K key) Returns the greatest key less than or equal to the given key, or null if there is no such key. abstract NavigableMap<K, V> headMap(K toKey, boolean inclusive) Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey. abstract SortedMap<K, V> headMap(K toKey) Returns a sorted map over a range of this sorted map with all keys that are less than the specified endKey. Equivalent to headMap(toKey, false). abstract Entry<K, V> higherEntry(K key) Returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key. abstract K higherKey(K key) Returns the least key strictly greater than the given key, or null if there is no such key. abstract Entry<K, V> lastEntry() Returns a key-value mapping associated with the greatest key in this map, or null if the map is empty. abstract Entry<K, V> lowerEntry(K key) Returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key. abstract K lowerKey(K key) Returns the greatest key strictly less than the given key, or null if there is no such key. abstract NavigableSet<K> navigableKeySet() Returns a NavigableSet view of the keys contained in this map. abstract Entry<K, V> pollFirstEntry() Removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty. abstract Entry<K, V> pollLastEntry() Removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty. abstract SortedMap<K, V> subMap(K fromKey, K toKey) Returns a sorted map over a range of this sorted map with all keys greater than or equal to the specified startKey and less than the specified endKey. Equivalent to subMap(fromKey, true, toKey, false). abstract NavigableMap<K, V> subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive) Returns a view of the portion of this map whose keys range from fromKey to toKey. abstract SortedMap<K, V> tailMap(K fromKey) Returns a sorted map over a range of this sorted map with all keys that are greater than or equal to the specified startKey. Equivalent to tailMap(fromKey, true). abstract NavigableMap<K, V> tailMap(K fromKey, boolean inclusive) Returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey.","abstract Entry<K, V> ceilingEntry(K key) Returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such key.","abstract K ceilingKey(K key) Returns the least key greater than or equal to the given key, or null if there is no such key.","abstract NavigableSet<K> descendingKeySet() Returns a reverse order NavigableSet view of the keys contained in this map.","abstract NavigableMap<K, V> descendingMap() Returns a reverse order view of the mappings contained in this map.","abstract Entry<K, V> firstEntry() Returns a key-value mapping associated with the least key in this map, or null if the map is empty.","abstract Entry<K, V> floorEntry(K key) Returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key.","abstract K floorKey(K key) Returns the greatest key less than or equal to the given key, or null if there is no such key.","abstract NavigableMap<K, V> headMap(K toKey, boolean inclusive) Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey.","abstract SortedMap<K, V> headMap(K toKey) Returns a sorted map over a range of this sorted map with all keys that are less than the specified endKey. Equivalent to headMap(toKey, false).","abstract Entry<K, V> higherEntry(K key) Returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key.","abstract K higherKey(K key) Returns the least key strictly greater than the given key, or null if there is no such key.","abstract Entry<K, V> lastEntry() Returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.","abstract Entry<K, V> lowerEntry(K key) Returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key.","abstract K lowerKey(K key) Returns the greatest key strictly less than the given key, or null if there is no such key.","abstract NavigableSet<K> navigableKeySet() Returns a NavigableSet view of the keys contained in this map.","abstract Entry<K, V> pollFirstEntry() Removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty.","abstract Entry<K, V> pollLastEntry() Removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.","abstract SortedMap<K, V> subMap(K fromKey, K toKey) Returns a sorted map over a range of this sorted map with all keys greater than or equal to the specified startKey and less than the specified endKey. Equivalent to subMap(fromKey, true, toKey, false).","abstract NavigableMap<K, V> subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive) Returns a view of the portion of this map whose keys range from fromKey to toKey.","abstract SortedMap<K, V> tailMap(K fromKey) Returns a sorted map over a range of this sorted map with all keys that are greater than or equal to the specified startKey. Equivalent to tailMap(fromKey, true).","abstract NavigableMap<K, V> tailMap(K fromKey, boolean inclusive) Returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey.","From interface java.util.SortedMap abstract Comparator<? super K> comparator() Returns the comparator used to compare keys in this sorted map, or null if the natural ordering is in use. abstract K firstKey() Returns the least key in this sorted map. abstract SortedMap<K, V> headMap(K endKey) Returns a sorted map over a range of this sorted map with all keys that are less than the specified endKey. abstract K lastKey() Returns the greatest key in this sorted map. abstract SortedMap<K, V> subMap(K startKey, K endKey) Returns a sorted map over a range of this sorted map with all keys greater than or equal to the specified startKey and less than the specified endKey. abstract SortedMap<K, V> tailMap(K startKey) Returns a sorted map over a range of this sorted map with all keys that are greater than or equal to the specified startKey.","abstract Comparator<? super K> comparator() Returns the comparator used to compare keys in this sorted map, or null if the natural ordering is in use.","abstract K firstKey() Returns the least key in this sorted map.","abstract SortedMap<K, V> headMap(K endKey) Returns a sorted map over a range of this sorted map with all keys that are less than the specified endKey.","abstract K lastKey() Returns the greatest key in this sorted map.","abstract SortedMap<K, V> subMap(K startKey, K endKey) Returns a sorted map over a range of this sorted map with all keys greater than or equal to the specified startKey and less than the specified endKey.","abstract SortedMap<K, V> tailMap(K startKey) Returns a sorted map over a range of this sorted map with all keys that are greater than or equal to the specified startKey."],"package":"java.util","constants":[],"class":"TreeMap","constructors":[],"fields":[]}