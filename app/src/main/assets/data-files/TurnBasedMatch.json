{"methods":["abstract boolean canRematch() Return whether or not this match can be rematched.","abstract Bundle getAutoMatchCriteria() Retrieves the automatch criteria used to create or join this match, if any.","abstract int getAvailableAutoMatchSlots() Return the maximum number of available automatch slots for this match.","abstract long getCreationTimestamp()","abstract String getCreatorId()","abstract byte[] getData() Return the current (game-specific) data for this match.","abstract String getDescription()","abstract void getDescription(CharArrayBuffer dataOut) Loads the match description into the given CharArrayBuffer.","abstract Participant getDescriptionParticipant() Get the participant representing the primary opponent in the match.","abstract String getDescriptionParticipantId() Get the ID of another participant in the match that can be used when describing the participants the user is playing with.","abstract Game getGame()","abstract long getLastUpdatedTimestamp() Return the timestamp at which the match was last modified.","abstract String getLastUpdaterId() Return the ID of the participant who updated the match most recently.","abstract String getMatchId()","abstract int getMatchNumber() Return the match sequence number for this match.","abstract Participant getParticipant(String participantId) Get a participant in a match by its ID.","abstract String getParticipantId(String playerId) Get the participant ID for a given player.","abstract ArrayList<String> getParticipantIds() Get the IDs of the participants of the given match.","abstract int getParticipantStatus(String participantId) Get the status of a participant in a match.","abstract String getPendingParticipantId() Return the ID of the participant that is considered pending.","abstract byte[] getPreviousMatchData() Return the match data from the previous match, if available.","abstract String getRematchId() Return the match ID of the rematch that was created from this match, if any.","abstract int getStatus()","abstract int getTurnStatus()","abstract int getVariant()","abstract int getVersion() Return the current version of the match.","abstract boolean isLocallyModified() Return whether or not this match has been locally modified.","[Expand] Inherited Methods","From interface android.os.Parcelable abstract int describeContents() abstract void writeToParcel(Parcel arg0, int arg1)","abstract int describeContents()","abstract void writeToParcel(Parcel arg0, int arg1)","From interface com.google.android.gms.common.data.Freezable abstract T freeze() Freeze a volatile representation into an immutable representation. abstract boolean isDataValid() Check to see if this object is valid for use.","abstract T freeze() Freeze a volatile representation into an immutable representation.","abstract boolean isDataValid() Check to see if this object is valid for use.","From interface com.google.android.gms.games.multiplayer.Participatable abstract ArrayList<Participant> getParticipants() Retrieve the Participants for this object.","abstract ArrayList<Participant> getParticipants() Retrieve the Participants for this object."],"package":"com.google.android.gms.games.multiplayer.turnbased","constants":["int MATCH_STATUS_ACTIVE Constant returned by getStatus() indicating that the match has started.","int MATCH_STATUS_AUTO_MATCHING Constant returned by getStatus() indicating that one or more slots are waiting to be filled by auto-matching.","int MATCH_STATUS_CANCELED Constant returned by getStatus() indicating that the match was canceled by one of the participants.","int MATCH_STATUS_COMPLETE Constant returned by getStatus() indicating that the match has finished.","int MATCH_STATUS_EXPIRED Constant returned by getStatus() indicating that the match expired.","int MATCH_TURN_STATUS_COMPLETE Turn status constant for matches which have been completed.","int MATCH_TURN_STATUS_INVITED Turn status constant for matches which the current player has been invited to.","int MATCH_TURN_STATUS_MY_TURN Turn status constant for matches where it is the current player's turn.","int MATCH_TURN_STATUS_THEIR_TURN Turn status constant for matches where it is not the current player's turn.","int MATCH_VARIANT_DEFAULT Constant used to indicate that the variant for a match is unspecified.","[Expand] Inherited Constants","From interface android.os.Parcelable int CONTENTS_FILE_DESCRIPTOR int PARCELABLE_WRITE_RETURN_VALUE","int CONTENTS_FILE_DESCRIPTOR","int PARCELABLE_WRITE_RETURN_VALUE"],"class":"TurnBasedMatch","constructors":[],"fields":["public static final int[] MATCH_TURN_STATUS_ALL Array of all the turn status constants."]}