{"methods":["UsbAccessory[] getAccessoryList() Returns a list of currently attached USB accessories.","HashMap<String, UsbDevice> getDeviceList() Returns a HashMap containing all USB devices currently attached.","boolean hasPermission(UsbDevice device) Returns true if the caller has permission to access the device.","boolean hasPermission(UsbAccessory accessory) Returns true if the caller has permission to access the accessory.","ParcelFileDescriptor openAccessory(UsbAccessory accessory) Opens a file descriptor for reading and writing data to the USB accessory.","UsbDeviceConnection openDevice(UsbDevice device) Opens the device so it can be used to send and receive data using UsbRequest.","void requestPermission(UsbAccessory accessory, PendingIntent pi) Requests temporary permission for the given package to access the accessory.","void requestPermission(UsbDevice device, PendingIntent pi) Requests temporary permission for the given package to access the device.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.hardware.usb","constants":["String ACTION_USB_ACCESSORY_ATTACHED Broadcast Action: A broadcast for USB accessory attached event.","String ACTION_USB_ACCESSORY_DETACHED Broadcast Action: A broadcast for USB accessory detached event.","String ACTION_USB_DEVICE_ATTACHED Broadcast Action: A broadcast for USB device attached event.","String ACTION_USB_DEVICE_DETACHED Broadcast Action: A broadcast for USB device detached event.","String EXTRA_ACCESSORY Name of extra for ACTION_USB_ACCESSORY_ATTACHED and ACTION_USB_ACCESSORY_DETACHED broadcasts containing the UsbAccessory object for the accessory.","String EXTRA_DEVICE Name of extra for ACTION_USB_DEVICE_ATTACHED and ACTION_USB_DEVICE_DETACHED broadcasts containing the UsbDevice object for the device.","String EXTRA_PERMISSION_GRANTED Name of extra added to the PendingIntent passed into requestPermission(UsbDevice, PendingIntent) or requestPermission(UsbAccessory, PendingIntent) containing a boolean value indicating whether the user granted permission or not."],"class":"UsbManager","constructors":[],"fields":[]}