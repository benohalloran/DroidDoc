{"methods":["void addUpdateListener(ValueAnimator.AnimatorUpdateListener listener) Adds a listener to the set of listeners that are sent update events through the life of an animation.","void cancel() Cancels the animation.","ValueAnimator clone() Creates and returns a copy of this Object.","void end() Ends the animation.","float getAnimatedFraction() Returns the current animation fraction, which is the elapsed/interpolated fraction used in the most recent frame update on the animation.","Object getAnimatedValue() The most recent value calculated by this ValueAnimator when there is just one property being animated.","Object getAnimatedValue(String propertyName) The most recent value calculated by this ValueAnimator for propertyName.","long getCurrentPlayTime() Gets the current position of the animation in time, which is equal to the current time minus the time that the animation started.","long getDuration() Gets the length of the animation.","static long getFrameDelay() The amount of time, in milliseconds, between each frame of the animation.","TimeInterpolator getInterpolator() Returns the timing interpolator that this ValueAnimator uses.","int getRepeatCount() Defines how many times the animation should repeat.","int getRepeatMode() Defines what this animation should do when it reaches the end.","long getStartDelay() The amount of time, in milliseconds, to delay starting the animation after start() is called.","PropertyValuesHolder[] getValues() Returns the values that this ValueAnimator animates between.","boolean isRunning() Returns whether this Animator is currently running (having been started and gone past any initial startDelay period and not yet ended).","boolean isStarted() Returns whether this Animator has been started and not yet ended.","static ValueAnimator ofArgb(int... values) Constructs and returns a ValueAnimator that animates between color values.","static ValueAnimator ofFloat(float... values) Constructs and returns a ValueAnimator that animates between float values.","static ValueAnimator ofInt(int... values) Constructs and returns a ValueAnimator that animates between int values.","static ValueAnimator ofObject(TypeEvaluator evaluator, Object... values) Constructs and returns a ValueAnimator that animates between Object values.","static ValueAnimator ofPropertyValuesHolder(PropertyValuesHolder... values) Constructs and returns a ValueAnimator that animates between the values specified in the PropertyValuesHolder objects.","void pause() Pauses a running animation.","void removeAllUpdateListeners() Removes all listeners from the set listening to frame updates for this animation.","void removeUpdateListener(ValueAnimator.AnimatorUpdateListener listener) Removes a listener from the set listening to frame updates for this animation.","void resume() Resumes a paused animation, causing the animator to pick up where it left off when it was paused.","void reverse() Plays the ValueAnimator in reverse.","void setCurrentPlayTime(long playTime) Sets the position of the animation to the specified point in time.","ValueAnimator setDuration(long duration) Sets the length of the animation.","void setEvaluator(TypeEvaluator value) The type evaluator to be used when calculating the animated values of this animation.","void setFloatValues(float... values) Sets float values that will be animated between.","static void setFrameDelay(long frameDelay) The amount of time, in milliseconds, between each frame of the animation.","void setIntValues(int... values) Sets int values that will be animated between.","void setInterpolator(TimeInterpolator value) The time interpolator used in calculating the elapsed fraction of this animation.","void setObjectValues(Object... values) Sets the values to animate between for this animation.","void setRepeatCount(int value) Sets how many times the animation should be repeated.","void setRepeatMode(int value) Defines what this animation should do when it reaches the end.","void setStartDelay(long startDelay) The amount of time, in milliseconds, to delay starting the animation after start() is called.","void setValues(PropertyValuesHolder... values) Sets the values, per property, being animated between.","void start() Starts this animation.","String toString() Returns a string containing a concise, human-readable description of this object.","[Expand] Inherited Methods","From class android.animation.Animator void addListener(Animator.AnimatorListener listener) Adds a listener to the set of listeners that are sent events through the life of an animation, such as start, repeat, and end. void addPauseListener(Animator.AnimatorPauseListener listener) Adds a pause listener to this animator. void cancel() Cancels the animation. Animator clone() Creates and returns a copy of this Object. void end() Ends the animation. abstract long getDuration() Gets the duration of the animation. TimeInterpolator getInterpolator() Returns the timing interpolator that this animation uses. ArrayList<Animator.AnimatorListener> getListeners() Gets the set of Animator.AnimatorListener objects that are currently listening for events on this Animator object. abstract long getStartDelay() The amount of time, in milliseconds, to delay processing the animation after start() is called. boolean isPaused() Returns whether this animator is currently in a paused state. abstract boolean isRunning() Returns whether this Animator is currently running (having been started and gone past any initial startDelay period and not yet ended). boolean isStarted() Returns whether this Animator has been started and not yet ended. void pause() Pauses a running animation. void removeAllListeners() Removes all listeners and pauseListeners from this object. void removeListener(Animator.AnimatorListener listener) Removes a listener from the set listening to this animation. void removePauseListener(Animator.AnimatorPauseListener listener) Removes a pause listener from the set listening to this animation. void resume() Resumes a paused animation, causing the animator to pick up where it left off when it was paused. abstract Animator setDuration(long duration) Sets the duration of the animation. abstract void setInterpolator(TimeInterpolator value) The time interpolator used in calculating the elapsed fraction of the animation. abstract void setStartDelay(long startDelay) The amount of time, in milliseconds, to delay processing the animation after start() is called. void setTarget(Object target) Sets the target object whose property will be animated by this animation. void setupEndValues() This method tells the object to use appropriate information to extract ending values for the animation. void setupStartValues() This method tells the object to use appropriate information to extract starting values for the animation. void start() Starts this animation.","void addListener(Animator.AnimatorListener listener) Adds a listener to the set of listeners that are sent events through the life of an animation, such as start, repeat, and end.","void addPauseListener(Animator.AnimatorPauseListener listener) Adds a pause listener to this animator.","void cancel() Cancels the animation.","Animator clone() Creates and returns a copy of this Object.","void end() Ends the animation.","abstract long getDuration() Gets the duration of the animation.","TimeInterpolator getInterpolator() Returns the timing interpolator that this animation uses.","ArrayList<Animator.AnimatorListener> getListeners() Gets the set of Animator.AnimatorListener objects that are currently listening for events on this Animator object.","abstract long getStartDelay() The amount of time, in milliseconds, to delay processing the animation after start() is called.","boolean isPaused() Returns whether this animator is currently in a paused state.","abstract boolean isRunning() Returns whether this Animator is currently running (having been started and gone past any initial startDelay period and not yet ended).","boolean isStarted() Returns whether this Animator has been started and not yet ended.","void pause() Pauses a running animation.","void removeAllListeners() Removes all listeners and pauseListeners from this object.","void removeListener(Animator.AnimatorListener listener) Removes a listener from the set listening to this animation.","void removePauseListener(Animator.AnimatorPauseListener listener) Removes a pause listener from the set listening to this animation.","void resume() Resumes a paused animation, causing the animator to pick up where it left off when it was paused.","abstract Animator setDuration(long duration) Sets the duration of the animation.","abstract void setInterpolator(TimeInterpolator value) The time interpolator used in calculating the elapsed fraction of the animation.","abstract void setStartDelay(long startDelay) The amount of time, in milliseconds, to delay processing the animation after start() is called.","void setTarget(Object target) Sets the target object whose property will be animated by this animation.","void setupEndValues() This method tells the object to use appropriate information to extract ending values for the animation.","void setupStartValues() This method tells the object to use appropriate information to extract starting values for the animation.","void start() Starts this animation.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.animation","constants":["int INFINITE This value used used with the setRepeatCount(int) property to repeat the animation indefinitely.","int RESTART When the animation reaches the end and repeatCount is INFINITE or a positive value, the animation restarts from the beginning.","int REVERSE When the animation reaches the end and repeatCount is INFINITE or a positive value, the animation reverses direction on every iteration."],"class":"ValueAnimator","constructors":[],"fields":[]}