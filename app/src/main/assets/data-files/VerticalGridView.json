{"methods":["boolean dispatchGenericFocusedEvent(MotionEvent event) Dispatch a generic motion event to the currently focused view.","boolean dispatchKeyEvent(KeyEvent event) Dispatch a key event to the next view on the focus path.","boolean dispatchTouchEvent(MotionEvent event) Pass the touch screen motion event down to the target view, or this view if it is the target.","int getChildDrawingOrder(int childCount, int i) Returns the index of the child to draw for this iteration.","int getFocusScrollStrategy() Returns the strategy used to scroll in response to item focus changing.","int getHorizontalMargin() Get the margin in pixels between two child items horizontally.","int getItemAlignmentOffset() Get the absolute offset in pixels for item alignment.","float getItemAlignmentOffsetPercent() Get offset percent for item alignment in addition to getItemAlignmentOffset().","int getItemAlignmentViewId() Get the id of the view to align with, or zero for the item view itself.","final int getSaveChildrenLimitNumber()","final int getSaveChildrenPolicy()","int getSelectedPosition() Get the selected item position.","int getVerticalMargin() Get the margin in pixels between two child items vertically.","void getViewSelectedOffsets(View view, int[] offsets) Get the x/y offsets to final position from current position if the view is selected.","int getWindowAlignment() Get how the focused item gets aligned in the view.","int getWindowAlignmentOffset() Get the absolute offset in pixels for window alignment.","float getWindowAlignmentOffsetPercent() Get offset percent for window alignment in addition to getWindowAlignmentOffset().","boolean hasOverlappingRendering() Returns whether this View has content which overlaps.","boolean hasPreviousViewInSameRow(int position) Returns true if the view at the given position has a same row sibling in front of it.","boolean isChildLayoutAnimated() Return true if an animation will run when a child changes size or when adding or removing a child.","boolean isFocusDrawingOrderEnabled() Returns true if default \"focus draw at last\" order rule is enabled.","final boolean isFocusSearchDisabled() Return true if focus search is disabled.","boolean isItemAlignmentOffsetWithPadding() Returns true if include padding in calculating item align offset.","boolean isScrollEnabled() Returns true if scrolling is enabled.","boolean onRequestFocusInDescendants(int direction, Rect previouslyFocusedRect) Look for a descendant to call requestFocus() on.","void setAnimateChildLayout(boolean animateChildLayout) Set if an animation should run when a child changes size or when adding or removing a child.","void setChildrenVisibility(int visibility) Change and override children's visibility.","void setColumnWidth(int width) Set the column width.","void setFocusDrawingOrderEnabled(boolean enabled) Enable or disable the default \"focus draw at last\" order rule.","void setFocusScrollStrategy(int scrollStrategy) Set the strategy used to scroll in response to item focus changing: FOCUS_SCROLL_ALIGNED (default) FOCUS_SCROLL_ITEM FOCUS_SCROLL_PAGE","final void setFocusSearchDisabled(boolean disabled) Disable or enable focus search.","void setGravity(int gravity) Describes how the child views are positioned.","void setHasOverlappingRendering(boolean hasOverlapping)","void setHorizontalMargin(int margin) Set the margin in pixels between two child items horizontally.","void setItemAlignmentOffset(int offset) Set the absolute offset in pixels for item alignment.","void setItemAlignmentOffsetPercent(float offsetPercent) Set offset percent for item alignment in addition to getItemAlignmentOffset().","void setItemAlignmentOffsetWithPadding(boolean withPadding) Set to true if include padding in calculating item align offset.","void setItemAlignmentViewId(int viewId) Set the id of the view to align with.","void setItemMargin(int margin) Set the margin in pixels between two child items.","void setLayoutEnabled(boolean layoutEnabled) Enable or disable layout.","void setNumColumns(int numColumns) Set the number of columns.","void setOnChildSelectedListener(OnChildSelectedListener listener) Register a callback to be invoked when an item in BaseGridView has been selected.","void setOnKeyInterceptListener(BaseGridView.OnKeyInterceptListener listener) Sets the key intercept listener.","void setOnMotionInterceptListener(BaseGridView.OnMotionInterceptListener listener) Sets the generic motion intercept listener.","void setOnTouchInterceptListener(BaseGridView.OnTouchInterceptListener listener) Sets the touch intercept listener.","final void setPrimaryOverReach(float fraction) Set the factor by which children should be laid out beyond the view bounds in the direction of orientation.","void setPruneChild(boolean pruneChild) Enable or disable pruning child.","final void setSaveChildrenLimitNumber(int limitNumber) Set limit number when getSaveChildrenPolicy() is SAVE_LIMITED_CHILD.","final void setSaveChildrenPolicy(int savePolicy) Set policy for saving children.","void setScrollEnabled(boolean scrollEnabled) Enable or disable scrolling.","void setSelectedPosition(int position) Change the selected item immediately without animation.","void setSelectedPositionSmooth(int position) Change the selected item and run an animation to scroll to the target position.","void setVerticalMargin(int margin) Set the margin in pixels between two child items vertically.","void setWindowAlignment(int windowAlignment) Set how the focused item gets aligned in the view.","void setWindowAlignmentOffset(int offset) Set the absolute offset in pixels for window alignment.","void setWindowAlignmentOffsetPercent(float offsetPercent) Set offset percent for window alignment in addition to getWindowAlignmentOffset().","void initAttributes(Context context, AttributeSet attrs)","void initBaseGridViewAttributes(Context context, AttributeSet attrs)","[Expand] Inherited Methods","From class android.support.v7.widget.RecyclerView void addFocusables(ArrayList<View> views, int direction, int focusableMode) Adds any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views. void addItemDecoration(RecyclerView.ItemDecoration decor) Add an RecyclerView.ItemDecoration to this RecyclerView. void addItemDecoration(RecyclerView.ItemDecoration decor, int index) Add an RecyclerView.ItemDecoration to this RecyclerView. void addOnItemTouchListener(RecyclerView.OnItemTouchListener listener) Add an RecyclerView.OnItemTouchListener to intercept touch events before they are dispatched to child views or this view's standard scrolling behavior. boolean checkLayoutParams(ViewGroup.LayoutParams p) int computeHorizontalScrollExtent() Compute the horizontal extent of the horizontal scrollbar's thumb within the horizontal range. int computeHorizontalScrollOffset() Compute the horizontal offset of the horizontal scrollbar's thumb within the horizontal range. int computeHorizontalScrollRange() Compute the horizontal range that the horizontal scrollbar represents. int computeVerticalScrollExtent() Compute the vertical extent of the vertical scrollbar's thumb within the vertical range. int computeVerticalScrollOffset() Compute the vertical offset of the vertical scrollbar's thumb within the vertical range. int computeVerticalScrollRange() Compute the vertical range that the vertical scrollbar represents. void draw(Canvas c) Manually render this view (and all of its children) to the given Canvas. View findChildViewUnder(float x, float y) Find the topmost view under the given point. RecyclerView.ViewHolder findViewHolderForItemId(long id) Return the ViewHolder for the item with the given id. RecyclerView.ViewHolder findViewHolderForPosition(int position) Return the ViewHolder for the item in the given position of the data set. boolean fling(int velocityX, int velocityY) Begin a standard fling with an initial velocity along each axis in pixels per second. View focusSearch(View focused, int direction) Find the nearest view in the specified direction that wants to take focus. ViewGroup.LayoutParams generateDefaultLayoutParams() Returns a set of default layout parameters. ViewGroup.LayoutParams generateLayoutParams(AttributeSet attrs) Returns a new set of layout parameters based on the supplied attributes set. ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams p) Returns a safe set of layout parameters based on the supplied layout params. Adapter getAdapter() Retrieves the previously set adapter or null if no adapter is set. long getChildItemId(View child) Return the stable item id that the given child view corresponds to. int getChildPosition(View child) Return the adapter position that the given child view corresponds to. RecyclerView.ViewHolder getChildViewHolder(View child) Retrieve the RecyclerView.ViewHolder for the given child view. RecyclerViewAccessibilityDelegate getCompatAccessibilityDelegate() Returns the accessibility delegate compatibility implementation used by the RecyclerView. RecyclerView.ItemAnimator getItemAnimator() Gets the current ItemAnimator for this RecyclerView. RecyclerView.LayoutManager getLayoutManager() Return the RecyclerView.LayoutManager currently responsible for layout policy for this RecyclerView. RecyclerView.RecycledViewPool getRecycledViewPool() Retrieve this RecyclerView's RecyclerView.RecycledViewPool. int getScrollState() Return the current scrolling state of the RecyclerView. boolean hasFixedSize() void invalidateItemDecorations() Invalidates all ItemDecorations. void offsetChildrenHorizontal(int dx) Offset the bounds of all child views by dx pixels. void offsetChildrenVertical(int dy) Offset the bounds of all child views by dy pixels. void onAttachedToWindow() This is called when the view is attached to a window. void onChildAttachedToWindow(View child) Called when an item view is attached to this RecyclerView. void onChildDetachedFromWindow(View child) Called when an item view is detached from this RecyclerView. void onDetachedFromWindow() This is called when the view is detached from a window. void onDraw(Canvas c) Implement this to do your drawing. boolean onInterceptTouchEvent(MotionEvent e) Implement this method to intercept all touch screen motion events. void onLayout(boolean changed, int l, int t, int r, int b) Called from layout when this view should assign a size and position to each of its children. void onMeasure(int widthSpec, int heightSpec) Measure the view and its content to determine the measured width and the measured height. void onRestoreInstanceState(Parcelable state) Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState(). Parcelable onSaveInstanceState() Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. void onSizeChanged(int w, int h, int oldw, int oldh) This is called during layout when the size of this view has changed. boolean onTouchEvent(MotionEvent e) Implement this method to handle touch screen motion events. void removeItemDecoration(RecyclerView.ItemDecoration decor) Remove an RecyclerView.ItemDecoration from this RecyclerView. void removeOnItemTouchListener(RecyclerView.OnItemTouchListener listener) Remove an RecyclerView.OnItemTouchListener. void requestChildFocus(View child, View focused) Called when a child of this parent wants focus boolean requestChildRectangleOnScreen(View child, Rect rect, boolean immediate) Called when a child of this group wants a particular rectangle to be positioned onto the screen. void requestLayout() Call this when something has changed which has invalidated the layout of this view. void scrollBy(int x, int y) Move the scrolled position of your view. void scrollTo(int x, int y) Set the scrolled position of your view. void scrollToPosition(int position) Convenience method to scroll to a certain position. void setAccessibilityDelegateCompat(RecyclerViewAccessibilityDelegate accessibilityDelegate) Sets the accessibility delegate compatibility implementation used by RecyclerView. void setAdapter(Adapter adapter) Set a new adapter to provide child views on demand. void setClipToPadding(boolean clipToPadding) By default, children are clipped to the padding of the ViewGroup. void setHasFixedSize(boolean hasFixedSize) RecyclerView can perform several optimizations if it can know in advance that changes in adapter content cannot change the size of the RecyclerView itself. void setItemAnimator(RecyclerView.ItemAnimator animator) Sets the RecyclerView.ItemAnimator that will handle animations involving changes to the items in this RecyclerView. void setItemViewCacheSize(int size) Set the number of offscreen views to retain before adding them to the potentially shared recycled view pool. void setLayoutManager(RecyclerView.LayoutManager layout) Set the RecyclerView.LayoutManager that this RecyclerView will use. void setOnScrollListener(RecyclerView.OnScrollListener listener) Set a listener that will be notified of any changes in scroll state or position. void setRecycledViewPool(RecyclerView.RecycledViewPool pool) Recycled view pools allow multiple RecyclerViews to share a common pool of scrap views. void setRecyclerListener(RecyclerView.RecyclerListener listener) Register a listener that will be notified whenever a child view is recycled. void setViewCacheExtension(RecyclerView.ViewCacheExtension extension) Sets a new RecyclerView.ViewCacheExtension to be used by the Recycler. void smoothScrollBy(int dx, int dy) Animate a scroll by the given amount of pixels along either axis. void smoothScrollToPosition(int position) Starts a smooth scroll to an adapter position. void stopScroll() Stop any current scroll in progress, such as one started by smoothScrollBy(int, int), fling(int, int) or a touch-initiated fling. void swapAdapter(Adapter adapter, boolean removeAndRecycleExistingViews) Swaps the current adapter with the provided one.","void addFocusables(ArrayList<View> views, int direction, int focusableMode) Adds any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views.","void addItemDecoration(RecyclerView.ItemDecoration decor) Add an RecyclerView.ItemDecoration to this RecyclerView.","void addItemDecoration(RecyclerView.ItemDecoration decor, int index) Add an RecyclerView.ItemDecoration to this RecyclerView.","void addOnItemTouchListener(RecyclerView.OnItemTouchListener listener) Add an RecyclerView.OnItemTouchListener to intercept touch events before they are dispatched to child views or this view's standard scrolling behavior.","boolean checkLayoutParams(ViewGroup.LayoutParams p)","int computeHorizontalScrollExtent() Compute the horizontal extent of the horizontal scrollbar's thumb within the horizontal range.","int computeHorizontalScrollOffset() Compute the horizontal offset of the horizontal scrollbar's thumb within the horizontal range.","int computeHorizontalScrollRange() Compute the horizontal range that the horizontal scrollbar represents.","int computeVerticalScrollExtent() Compute the vertical extent of the vertical scrollbar's thumb within the vertical range.","int computeVerticalScrollOffset() Compute the vertical offset of the vertical scrollbar's thumb within the vertical range.","int computeVerticalScrollRange() Compute the vertical range that the vertical scrollbar represents.","void draw(Canvas c) Manually render this view (and all of its children) to the given Canvas.","View findChildViewUnder(float x, float y) Find the topmost view under the given point.","RecyclerView.ViewHolder findViewHolderForItemId(long id) Return the ViewHolder for the item with the given id.","RecyclerView.ViewHolder findViewHolderForPosition(int position) Return the ViewHolder for the item in the given position of the data set.","boolean fling(int velocityX, int velocityY) Begin a standard fling with an initial velocity along each axis in pixels per second.","View focusSearch(View focused, int direction) Find the nearest view in the specified direction that wants to take focus.","ViewGroup.LayoutParams generateDefaultLayoutParams() Returns a set of default layout parameters.","ViewGroup.LayoutParams generateLayoutParams(AttributeSet attrs) Returns a new set of layout parameters based on the supplied attributes set.","ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams p) Returns a safe set of layout parameters based on the supplied layout params.","Adapter getAdapter() Retrieves the previously set adapter or null if no adapter is set.","long getChildItemId(View child) Return the stable item id that the given child view corresponds to.","int getChildPosition(View child) Return the adapter position that the given child view corresponds to.","RecyclerView.ViewHolder getChildViewHolder(View child) Retrieve the RecyclerView.ViewHolder for the given child view.","RecyclerViewAccessibilityDelegate getCompatAccessibilityDelegate() Returns the accessibility delegate compatibility implementation used by the RecyclerView.","RecyclerView.ItemAnimator getItemAnimator() Gets the current ItemAnimator for this RecyclerView.","RecyclerView.LayoutManager getLayoutManager() Return the RecyclerView.LayoutManager currently responsible for layout policy for this RecyclerView.","RecyclerView.RecycledViewPool getRecycledViewPool() Retrieve this RecyclerView's RecyclerView.RecycledViewPool.","int getScrollState() Return the current scrolling state of the RecyclerView.","boolean hasFixedSize()","void invalidateItemDecorations() Invalidates all ItemDecorations.","void offsetChildrenHorizontal(int dx) Offset the bounds of all child views by dx pixels.","void offsetChildrenVertical(int dy) Offset the bounds of all child views by dy pixels.","void onAttachedToWindow() This is called when the view is attached to a window.","void onChildAttachedToWindow(View child) Called when an item view is attached to this RecyclerView.","void onChildDetachedFromWindow(View child) Called when an item view is detached from this RecyclerView.","void onDetachedFromWindow() This is called when the view is detached from a window.","void onDraw(Canvas c) Implement this to do your drawing.","boolean onInterceptTouchEvent(MotionEvent e) Implement this method to intercept all touch screen motion events.","void onLayout(boolean changed, int l, int t, int r, int b) Called from layout when this view should assign a size and position to each of its children.","void onMeasure(int widthSpec, int heightSpec) Measure the view and its content to determine the measured width and the measured height.","void onRestoreInstanceState(Parcelable state) Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState().","Parcelable onSaveInstanceState() Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state.","void onSizeChanged(int w, int h, int oldw, int oldh) This is called during layout when the size of this view has changed.","boolean onTouchEvent(MotionEvent e) Implement this method to handle touch screen motion events.","void removeItemDecoration(RecyclerView.ItemDecoration decor) Remove an RecyclerView.ItemDecoration from this RecyclerView.","void removeOnItemTouchListener(RecyclerView.OnItemTouchListener listener) Remove an RecyclerView.OnItemTouchListener.","void requestChildFocus(View child, View focused) Called when a child of this parent wants focus","boolean requestChildRectangleOnScreen(View child, Rect rect, boolean immediate) Called when a child of this group wants a particular rectangle to be positioned onto the screen.","void requestLayout() Call this when something has changed which has invalidated the layout of this view.","void scrollBy(int x, int y) Move the scrolled position of your view.","void scrollTo(int x, int y) Set the scrolled position of your view.","void scrollToPosition(int position) Convenience method to scroll to a certain position.","void setAccessibilityDelegateCompat(RecyclerViewAccessibilityDelegate accessibilityDelegate) Sets the accessibility delegate compatibility implementation used by RecyclerView.","void setAdapter(Adapter adapter) Set a new adapter to provide child views on demand.","void setClipToPadding(boolean clipToPadding) By default, children are clipped to the padding of the ViewGroup.","void setHasFixedSize(boolean hasFixedSize) RecyclerView can perform several optimizations if it can know in advance that changes in adapter content cannot change the size of the RecyclerView itself.","void setItemAnimator(RecyclerView.ItemAnimator animator) Sets the RecyclerView.ItemAnimator that will handle animations involving changes to the items in this RecyclerView.","void setItemViewCacheSize(int size) Set the number of offscreen views to retain before adding them to the potentially shared recycled view pool.","void setLayoutManager(RecyclerView.LayoutManager layout) Set the RecyclerView.LayoutManager that this RecyclerView will use.","void setOnScrollListener(RecyclerView.OnScrollListener listener) Set a listener that will be notified of any changes in scroll state or position.","void setRecycledViewPool(RecyclerView.RecycledViewPool pool) Recycled view pools allow multiple RecyclerViews to share a common pool of scrap views.","void setRecyclerListener(RecyclerView.RecyclerListener listener) Register a listener that will be notified whenever a child view is recycled.","void setViewCacheExtension(RecyclerView.ViewCacheExtension extension) Sets a new RecyclerView.ViewCacheExtension to be used by the Recycler.","void smoothScrollBy(int dx, int dy) Animate a scroll by the given amount of pixels along either axis.","void smoothScrollToPosition(int position) Starts a smooth scroll to an adapter position.","void stopScroll() Stop any current scroll in progress, such as one started by smoothScrollBy(int, int), fling(int, int) or a touch-initiated fling.","void swapAdapter(Adapter adapter, boolean removeAndRecycleExistingViews) Swaps the current adapter with the provided one.","From class android.view.ViewGroup void addChildrenForAccessibility(ArrayList<View> childrenForAccessibility) Adds the children of a given View for accessibility. void addFocusables(ArrayList<View> views, int direction, int focusableMode) Adds any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views. boolean addStatesFromChildren() Returns whether this ViewGroup's drawable states also include its children's drawable states. void addTouchables(ArrayList<View> views) Add any touchable views that are descendants of this view (possibly including this view if it is touchable itself) to views. void addView(View child, int index, ViewGroup.LayoutParams params) Adds a child view with the specified layout parameters. void addView(View child, ViewGroup.LayoutParams params) Adds a child view with the specified layout parameters. void addView(View child, int index) Adds a child view. void addView(View child) Adds a child view. void addView(View child, int width, int height) Adds a child view with this ViewGroup's default layout parameters and the specified width and height. boolean addViewInLayout(View child, int index, ViewGroup.LayoutParams params, boolean preventRequestLayout) Adds a view during layout. boolean addViewInLayout(View child, int index, ViewGroup.LayoutParams params) Adds a view during layout. void attachLayoutAnimationParameters(View child, ViewGroup.LayoutParams params, int index, int count) Subclasses should override this method to set layout animation parameters on the supplied child. void attachViewToParent(View child, int index, ViewGroup.LayoutParams params) Attaches a view to this view group. void bringChildToFront(View child) Change the z order of the child so it's on top of all other children. boolean canAnimate() Indicates whether the view group has the ability to animate its children after the first layout. boolean checkLayoutParams(ViewGroup.LayoutParams p) void childDrawableStateChanged(View child) If addStatesFromChildren() is true, refreshes this group's drawable state (to include the states from its children). void childHasTransientStateChanged(View child, boolean childHasTransientState) Called when a child view has changed whether or not it is tracking transient state. void cleanupLayoutState(View child) Prevents the specified child to be laid out during the next layout pass. void clearChildFocus(View child) Called when a child of this parent is giving up focus void clearDisappearingChildren() Removes any pending animations for views that have been removed. void clearFocus() Called when this view wants to give up focus. void debug(int depth) Prints information about this view in the log output, with the tag VIEW_LOG_TAG. void detachAllViewsFromParent() Detaches all views from the parent. void detachViewFromParent(View child) Detaches a view from its parent. void detachViewFromParent(int index) Detaches a view from its parent. void detachViewsFromParent(int start, int count) Detaches a range of views from their parents. WindowInsets dispatchApplyWindowInsets(WindowInsets insets) Request to apply the given window insets to this view or another view in its subtree. void dispatchConfigurationChanged(Configuration newConfig) Dispatch a notification about a resource configuration change down the view hierarchy. void dispatchDisplayHint(int hint) Dispatch a hint about whether this view is displayed. boolean dispatchDragEvent(DragEvent event) Detects if this View is enabled and has a drag event listener. void dispatchDraw(Canvas canvas) Called by draw to draw the child views. void dispatchFreezeSelfOnly(SparseArray<Parcelable> container) Perform dispatching of a saveHierarchyState(android.util.SparseArray) freeze()} to only this view, not to its children. boolean dispatchGenericFocusedEvent(MotionEvent event) Dispatch a generic motion event to the currently focused view. boolean dispatchGenericPointerEvent(MotionEvent event) Dispatch a generic motion event to the view under the first pointer. boolean dispatchHoverEvent(MotionEvent event) Dispatch a hover event. boolean dispatchKeyEvent(KeyEvent event) Dispatch a key event to the next view on the focus path. boolean dispatchKeyEventPreIme(KeyEvent event) Dispatch a key event before it is processed by any input method associated with the view hierarchy. boolean dispatchKeyShortcutEvent(KeyEvent event) Dispatches a key shortcut event. void dispatchRestoreInstanceState(SparseArray<Parcelable> container) Called by restoreHierarchyState(android.util.SparseArray) to retrieve the state for this view and its children. void dispatchSaveInstanceState(SparseArray<Parcelable> container) Called by saveHierarchyState(android.util.SparseArray) to store the state for this view and its children. void dispatchSetActivated(boolean activated) Dispatch setActivated to all of this View's children. void dispatchSetPressed(boolean pressed) Dispatch setPressed to all of this View's children. void dispatchSetSelected(boolean selected) Dispatch setSelected to all of this View's children. void dispatchSystemUiVisibilityChanged(int visible) Dispatch callbacks to setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener) down the view hierarchy. void dispatchThawSelfOnly(SparseArray<Parcelable> container) Perform dispatching of a restoreHierarchyState(android.util.SparseArray) to only this view, not to its children. boolean dispatchTouchEvent(MotionEvent ev) Pass the touch screen motion event down to the target view, or this view if it is the target. boolean dispatchTrackballEvent(MotionEvent event) Pass a trackball motion event down to the focused view. boolean dispatchUnhandledMove(View focused, int direction) This method is the last chance for the focused view and its ancestors to respond to an arrow key. void dispatchVisibilityChanged(View changedView, int visibility) Dispatch a view visibility change down the view hierarchy. void dispatchWindowFocusChanged(boolean hasFocus) Called when the window containing this view gains or loses window focus. void dispatchWindowSystemUiVisiblityChanged(int visible) Dispatch callbacks to onWindowSystemUiVisibilityChanged(int) down the view hierarchy. void dispatchWindowVisibilityChanged(int visibility) Dispatch a window visibility change down the view hierarchy. boolean drawChild(Canvas canvas, View child, long drawingTime) Draw one child of this View Group. void drawableHotspotChanged(float x, float y) This function is called whenever the view hotspot changes and needs to be propagated to drawables managed by the view. void drawableStateChanged() This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown. void endViewTransition(View view) This method should always be called following an earlier call to startViewTransition(View). View findFocus() Find the view in the hierarchy rooted at this view that currently has focus. void findViewsWithText(ArrayList<View> outViews, CharSequence text, int flags) Finds the Views that contain given text. View focusSearch(View focused, int direction) Find the nearest view in the specified direction that wants to take focus. void focusableViewAvailable(View v) Tells the parent that a new focusable view has become available. boolean gatherTransparentRegion(Region region) This is used by the RootView to perform an optimization when the view hierarchy contains one or several SurfaceView. ViewGroup.LayoutParams generateDefaultLayoutParams() Returns a set of default layout parameters. ViewGroup.LayoutParams generateLayoutParams(AttributeSet attrs) Returns a new set of layout parameters based on the supplied attributes set. ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams p) Returns a safe set of layout parameters based on the supplied layout params. View getChildAt(int index) Returns the view at the specified position in the group. int getChildCount() Returns the number of children in the group. int getChildDrawingOrder(int childCount, int i) Returns the index of the child to draw for this iteration. static int getChildMeasureSpec(int spec, int padding, int childDimension) Does the hard part of measureChildren: figuring out the MeasureSpec to pass to a particular child. boolean getChildStaticTransformation(View child, Transformation t) Sets t to be the static transformation of the child, if set, returning a boolean to indicate whether a static transform was set. boolean getChildVisibleRect(View child, Rect r, Point offset) Compute the visible part of a rectangular region defined in terms of a child view's coordinates. boolean getClipChildren() Returns whether this group's children are clipped to their bounds before drawing. boolean getClipToPadding() Check if this ViewGroup is configured to clip child views to its padding. int getDescendantFocusability() Gets the descendant focusability of this view group. View getFocusedChild() Returns the focused child of this view, if any. LayoutAnimationController getLayoutAnimation() Returns the layout animation controller used to animate the group's children. Animation.AnimationListener getLayoutAnimationListener() Returns the animation listener to which layout animation events are sent. int getLayoutMode() Returns the basis of alignment during layout operations on this ViewGroup: either LAYOUT_MODE_CLIP_BOUNDS or LAYOUT_MODE_OPTICAL_BOUNDS. LayoutTransition getLayoutTransition() Gets the LayoutTransition object for this ViewGroup. int getNestedScrollAxes() Return the current axes of nested scrolling for this ViewGroup. ViewGroupOverlay getOverlay() Returns the ViewGroupOverlay for this view group, creating it if it does not yet exist. int getPersistentDrawingCache() Returns an integer indicating what types of drawing caches are kept in memory. boolean getTouchscreenBlocksFocus() Check whether this ViewGroup should ignore focus requests for itself and its children. boolean hasFocus() Returns true if this view has or contains focus boolean hasFocusable() Returns true if this view is focusable or if it contains a reachable View for which hasFocusable() returns true. boolean hasTransientState() Indicates whether the view is currently tracking transient state that the app should not need to concern itself with saving and restoring, but that the framework should take special note to preserve when possible. int indexOfChild(View child) Returns the position in the group of the specified child view. final void invalidateChild(View child, Rect dirty) Don't call or override this method. ViewParent invalidateChildInParent(int[] location, Rect dirty) Don't call or override this method. boolean isAlwaysDrawnWithCacheEnabled() Indicates whether this ViewGroup will always try to draw its children using their drawing cache. boolean isAnimationCacheEnabled() Indicates whether the children's drawing cache is used during a layout animation. boolean isChildrenDrawingOrderEnabled() Indicates whether the ViewGroup is drawing its children in the order defined by getChildDrawingOrder(int, int). boolean isChildrenDrawnWithCacheEnabled() Indicates whether the ViewGroup is currently drawing its children using their drawing cache. boolean isMotionEventSplittingEnabled() Returns true if MotionEvents dispatched to this ViewGroup can be split to multiple children. boolean isTransitionGroup() Returns true if this ViewGroup should be considered as a single entity for removal when executing an Activity transition. void jumpDrawablesToCurrentState() Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view. final void layout(int l, int t, int r, int b) Assign a size and position to a view and all of its descendants This is the second phase of the layout mechanism. void measureChild(View child, int parentWidthMeasureSpec, int parentHeightMeasureSpec) Ask one of the children of this view to measure itself, taking into account both the MeasureSpec requirements for this view and its padding. void measureChildWithMargins(View child, int parentWidthMeasureSpec, int widthUsed, int parentHeightMeasureSpec, int heightUsed) Ask one of the children of this view to measure itself, taking into account both the MeasureSpec requirements for this view and its padding and margins. void measureChildren(int widthMeasureSpec, int heightMeasureSpec) Ask all of the children of this view to measure themselves, taking into account both the MeasureSpec requirements for this view and its padding. void notifySubtreeAccessibilityStateChanged(View child, View source, int changeType) Notifies a view parent that the accessibility state of one of its descendants has changed and that the structure of the subtree is different. final void offsetDescendantRectToMyCoords(View descendant, Rect rect) Offset a rectangle that is in a descendant's coordinate space into our coordinate space. final void offsetRectIntoDescendantCoords(View descendant, Rect rect) Offset a rectangle that is in our coordinate space into an ancestor's coordinate space. void onAnimationEnd() Invoked by a parent ViewGroup to notify the end of the animation currently associated with this view. void onAnimationStart() Invoked by a parent ViewGroup to notify the start of the animation currently associated with this view. void onAttachedToWindow() This is called when the view is attached to a window. int[] onCreateDrawableState(int extraSpace) Generate the new Drawable state for this view. void onDetachedFromWindow() This is called when the view is detached from a window. boolean onInterceptHoverEvent(MotionEvent event) Implement this method to intercept hover events before they are handled by child views. boolean onInterceptTouchEvent(MotionEvent ev) Implement this method to intercept all touch screen motion events. abstract void onLayout(boolean changed, int l, int t, int r, int b) Called from layout when this view should assign a size and position to each of its children. boolean onNestedFling(View target, float velocityX, float velocityY, boolean consumed) Request a fling from a nested scroll. boolean onNestedPreFling(View target, float velocityX, float velocityY) React to a nested fling before the target view consumes it. void onNestedPreScroll(View target, int dx, int dy, int[] consumed) React to a nested scroll in progress before the target view consumes a portion of the scroll. void onNestedScroll(View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) React to a nested scroll in progress. void onNestedScrollAccepted(View child, View target, int axes) React to the successful claiming of a nested scroll operation. boolean onRequestFocusInDescendants(int direction, Rect previouslyFocusedRect) Look for a descendant to call requestFocus() on. boolean onRequestSendAccessibilityEvent(View child, AccessibilityEvent event) Called when a child has requested sending an AccessibilityEvent and gives an opportunity to its parent to augment the event. boolean onStartNestedScroll(View child, View target, int nestedScrollAxes) React to a descendant view initiating a nestable scroll operation, claiming the nested scroll operation if appropriate. void onStopNestedScroll(View child) React to a nested scroll operation ending. void recomputeViewAttributes(View child) Tell view hierarchy that the global view attributes need to be re-evaluated. void removeAllViews() Call this method to remove all child views from the ViewGroup. void removeAllViewsInLayout() Called by a ViewGroup subclass to remove child views from itself, when it must first know its size on screen before it can calculate how many child views it will render. void removeDetachedView(View child, boolean animate) Finishes the removal of a detached view. void removeView(View view) Note: do not invoke this method from draw(android.graphics.Canvas), onDraw(android.graphics.Canvas), dispatchDraw(android.graphics.Canvas) or any related method. void removeViewAt(int index) Removes the view at the specified position in the group. void removeViewInLayout(View view) Removes a view during layout. void removeViews(int start, int count) Removes the specified range of views from the group. void removeViewsInLayout(int start, int count) Removes a range of views during layout. void requestChildFocus(View child, View focused) Called when a child of this parent wants focus boolean requestChildRectangleOnScreen(View child, Rect rectangle, boolean immediate) Called when a child of this group wants a particular rectangle to be positioned onto the screen. void requestDisallowInterceptTouchEvent(boolean disallowIntercept) Called when a child does not want this parent and its ancestors to intercept touch events with onInterceptTouchEvent(MotionEvent). boolean requestFocus(int direction, Rect previouslyFocusedRect) Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from. Looks for a view to give focus to respecting the setting specified by getDescendantFocusability(). boolean requestSendAccessibilityEvent(View child, AccessibilityEvent event) Called by a child to request from its parent to send an AccessibilityEvent. void requestTransparentRegion(View child) Called when a child wants the view hierarchy to gather and report transparent regions to the window compositor. void scheduleLayoutAnimation() Schedules the layout animation to be played after the next layout pass of this view group. void setAddStatesFromChildren(boolean addsStates) Sets whether this ViewGroup's drawable states also include its children's drawable states. void setAlwaysDrawnWithCacheEnabled(boolean always) Indicates whether this ViewGroup will always try to draw its children using their drawing cache. void setAnimationCacheEnabled(boolean enabled) Enables or disables the children's drawing cache during a layout animation. void setChildrenDrawingCacheEnabled(boolean enabled) Enables or disables the drawing cache for each child of this view group. void setChildrenDrawingOrderEnabled(boolean enabled) Tells the ViewGroup whether to draw its children in the order defined by the method getChildDrawingOrder(int, int). void setChildrenDrawnWithCacheEnabled(boolean enabled) Tells the ViewGroup to draw its children using their drawing cache. void setClipChildren(boolean clipChildren) By default, children are clipped to their bounds before drawing. void setClipToPadding(boolean clipToPadding) By default, children are clipped to the padding of the ViewGroup. void setDescendantFocusability(int focusability) Set the descendant focusability of this view group. void setLayoutAnimation(LayoutAnimationController controller) Sets the layout animation controller used to animate the group's children after the first layout. void setLayoutAnimationListener(Animation.AnimationListener animationListener) Specifies the animation listener to which layout animation events must be sent. void setLayoutMode(int layoutMode) Sets the basis of alignment during the layout of this ViewGroup. void setLayoutTransition(LayoutTransition transition) Sets the LayoutTransition object for this ViewGroup. void setMotionEventSplittingEnabled(boolean split) Enable or disable the splitting of MotionEvents to multiple children during touch event dispatch. void setOnHierarchyChangeListener(ViewGroup.OnHierarchyChangeListener listener) Register a callback to be invoked when a child is added to or removed from this view. void setPersistentDrawingCache(int drawingCacheToKeep) Indicates what types of drawing caches should be kept in memory after they have been created. void setStaticTransformationsEnabled(boolean enabled) When this property is set to true, this ViewGroup supports static transformations on children; this causes getChildStaticTransformation(View, android.view.animation.Transformation) to be invoked when a child is drawn. void setTouchscreenBlocksFocus(boolean touchscreenBlocksFocus) Set whether this ViewGroup should ignore focus requests for itself and its children. void setTransitionGroup(boolean isTransitionGroup) Changes whether or not this ViewGroup should be treated as a single entity during Activity Transitions. boolean shouldDelayChildPressedState() Return true if the pressed state should be delayed for children or descendants of this ViewGroup. boolean showContextMenuForChild(View originalView) Bring up a context menu for the specified view or its ancestors. ActionMode startActionModeForChild(View originalView, ActionMode.Callback callback) Start an action mode for the specified view. void startLayoutAnimation() Runs the layout animation. void startViewTransition(View view) This method tells the ViewGroup that the given View object, which should have this ViewGroup as its parent, should be kept around (re-displayed when the ViewGroup draws its children) even if it is removed from its parent. void updateViewLayout(View view, ViewGroup.LayoutParams params)","void addChildrenForAccessibility(ArrayList<View> childrenForAccessibility) Adds the children of a given View for accessibility.","void addFocusables(ArrayList<View> views, int direction, int focusableMode) Adds any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views.","boolean addStatesFromChildren() Returns whether this ViewGroup's drawable states also include its children's drawable states.","void addTouchables(ArrayList<View> views) Add any touchable views that are descendants of this view (possibly including this view if it is touchable itself) to views.","void addView(View child, int index, ViewGroup.LayoutParams params) Adds a child view with the specified layout parameters.","void addView(View child, ViewGroup.LayoutParams params) Adds a child view with the specified layout parameters.","void addView(View child, int index) Adds a child view.","void addView(View child) Adds a child view.","void addView(View child, int width, int height) Adds a child view with this ViewGroup's default layout parameters and the specified width and height.","boolean addViewInLayout(View child, int index, ViewGroup.LayoutParams params, boolean preventRequestLayout) Adds a view during layout.","boolean addViewInLayout(View child, int index, ViewGroup.LayoutParams params) Adds a view during layout.","void attachLayoutAnimationParameters(View child, ViewGroup.LayoutParams params, int index, int count) Subclasses should override this method to set layout animation parameters on the supplied child.","void attachViewToParent(View child, int index, ViewGroup.LayoutParams params) Attaches a view to this view group.","void bringChildToFront(View child) Change the z order of the child so it's on top of all other children.","boolean canAnimate() Indicates whether the view group has the ability to animate its children after the first layout.","boolean checkLayoutParams(ViewGroup.LayoutParams p)","void childDrawableStateChanged(View child) If addStatesFromChildren() is true, refreshes this group's drawable state (to include the states from its children).","void childHasTransientStateChanged(View child, boolean childHasTransientState) Called when a child view has changed whether or not it is tracking transient state.","void cleanupLayoutState(View child) Prevents the specified child to be laid out during the next layout pass.","void clearChildFocus(View child) Called when a child of this parent is giving up focus","void clearDisappearingChildren() Removes any pending animations for views that have been removed.","void clearFocus() Called when this view wants to give up focus.","void debug(int depth) Prints information about this view in the log output, with the tag VIEW_LOG_TAG.","void detachAllViewsFromParent() Detaches all views from the parent.","void detachViewFromParent(View child) Detaches a view from its parent.","void detachViewFromParent(int index) Detaches a view from its parent.","void detachViewsFromParent(int start, int count) Detaches a range of views from their parents.","WindowInsets dispatchApplyWindowInsets(WindowInsets insets) Request to apply the given window insets to this view or another view in its subtree.","void dispatchConfigurationChanged(Configuration newConfig) Dispatch a notification about a resource configuration change down the view hierarchy.","void dispatchDisplayHint(int hint) Dispatch a hint about whether this view is displayed.","boolean dispatchDragEvent(DragEvent event) Detects if this View is enabled and has a drag event listener.","void dispatchDraw(Canvas canvas) Called by draw to draw the child views.","void dispatchFreezeSelfOnly(SparseArray<Parcelable> container) Perform dispatching of a saveHierarchyState(android.util.SparseArray) freeze()} to only this view, not to its children.","boolean dispatchGenericFocusedEvent(MotionEvent event) Dispatch a generic motion event to the currently focused view.","boolean dispatchGenericPointerEvent(MotionEvent event) Dispatch a generic motion event to the view under the first pointer.","boolean dispatchHoverEvent(MotionEvent event) Dispatch a hover event.","boolean dispatchKeyEvent(KeyEvent event) Dispatch a key event to the next view on the focus path.","boolean dispatchKeyEventPreIme(KeyEvent event) Dispatch a key event before it is processed by any input method associated with the view hierarchy.","boolean dispatchKeyShortcutEvent(KeyEvent event) Dispatches a key shortcut event.","void dispatchRestoreInstanceState(SparseArray<Parcelable> container) Called by restoreHierarchyState(android.util.SparseArray) to retrieve the state for this view and its children.","void dispatchSaveInstanceState(SparseArray<Parcelable> container) Called by saveHierarchyState(android.util.SparseArray) to store the state for this view and its children.","void dispatchSetActivated(boolean activated) Dispatch setActivated to all of this View's children.","void dispatchSetPressed(boolean pressed) Dispatch setPressed to all of this View's children.","void dispatchSetSelected(boolean selected) Dispatch setSelected to all of this View's children.","void dispatchSystemUiVisibilityChanged(int visible) Dispatch callbacks to setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener) down the view hierarchy.","void dispatchThawSelfOnly(SparseArray<Parcelable> container) Perform dispatching of a restoreHierarchyState(android.util.SparseArray) to only this view, not to its children.","boolean dispatchTouchEvent(MotionEvent ev) Pass the touch screen motion event down to the target view, or this view if it is the target.","boolean dispatchTrackballEvent(MotionEvent event) Pass a trackball motion event down to the focused view.","boolean dispatchUnhandledMove(View focused, int direction) This method is the last chance for the focused view and its ancestors to respond to an arrow key.","void dispatchVisibilityChanged(View changedView, int visibility) Dispatch a view visibility change down the view hierarchy.","void dispatchWindowFocusChanged(boolean hasFocus) Called when the window containing this view gains or loses window focus.","void dispatchWindowSystemUiVisiblityChanged(int visible) Dispatch callbacks to onWindowSystemUiVisibilityChanged(int) down the view hierarchy.","void dispatchWindowVisibilityChanged(int visibility) Dispatch a window visibility change down the view hierarchy.","boolean drawChild(Canvas canvas, View child, long drawingTime) Draw one child of this View Group.","void drawableHotspotChanged(float x, float y) This function is called whenever the view hotspot changes and needs to be propagated to drawables managed by the view.","void drawableStateChanged() This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown.","void endViewTransition(View view) This method should always be called following an earlier call to startViewTransition(View).","View findFocus() Find the view in the hierarchy rooted at this view that currently has focus.","void findViewsWithText(ArrayList<View> outViews, CharSequence text, int flags) Finds the Views that contain given text.","View focusSearch(View focused, int direction) Find the nearest view in the specified direction that wants to take focus.","void focusableViewAvailable(View v) Tells the parent that a new focusable view has become available.","boolean gatherTransparentRegion(Region region) This is used by the RootView to perform an optimization when the view hierarchy contains one or several SurfaceView.","ViewGroup.LayoutParams generateDefaultLayoutParams() Returns a set of default layout parameters.","ViewGroup.LayoutParams generateLayoutParams(AttributeSet attrs) Returns a new set of layout parameters based on the supplied attributes set.","ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams p) Returns a safe set of layout parameters based on the supplied layout params.","View getChildAt(int index) Returns the view at the specified position in the group.","int getChildCount() Returns the number of children in the group.","int getChildDrawingOrder(int childCount, int i) Returns the index of the child to draw for this iteration.","static int getChildMeasureSpec(int spec, int padding, int childDimension) Does the hard part of measureChildren: figuring out the MeasureSpec to pass to a particular child.","boolean getChildStaticTransformation(View child, Transformation t) Sets t to be the static transformation of the child, if set, returning a boolean to indicate whether a static transform was set.","boolean getChildVisibleRect(View child, Rect r, Point offset) Compute the visible part of a rectangular region defined in terms of a child view's coordinates.","boolean getClipChildren() Returns whether this group's children are clipped to their bounds before drawing.","boolean getClipToPadding() Check if this ViewGroup is configured to clip child views to its padding.","int getDescendantFocusability() Gets the descendant focusability of this view group.","View getFocusedChild() Returns the focused child of this view, if any.","LayoutAnimationController getLayoutAnimation() Returns the layout animation controller used to animate the group's children.","Animation.AnimationListener getLayoutAnimationListener() Returns the animation listener to which layout animation events are sent.","int getLayoutMode() Returns the basis of alignment during layout operations on this ViewGroup: either LAYOUT_MODE_CLIP_BOUNDS or LAYOUT_MODE_OPTICAL_BOUNDS.","LayoutTransition getLayoutTransition() Gets the LayoutTransition object for this ViewGroup.","int getNestedScrollAxes() Return the current axes of nested scrolling for this ViewGroup.","ViewGroupOverlay getOverlay() Returns the ViewGroupOverlay for this view group, creating it if it does not yet exist.","int getPersistentDrawingCache() Returns an integer indicating what types of drawing caches are kept in memory.","boolean getTouchscreenBlocksFocus() Check whether this ViewGroup should ignore focus requests for itself and its children.","boolean hasFocus() Returns true if this view has or contains focus","boolean hasFocusable() Returns true if this view is focusable or if it contains a reachable View for which hasFocusable() returns true.","boolean hasTransientState() Indicates whether the view is currently tracking transient state that the app should not need to concern itself with saving and restoring, but that the framework should take special note to preserve when possible.","int indexOfChild(View child) Returns the position in the group of the specified child view.","final void invalidateChild(View child, Rect dirty) Don't call or override this method.","ViewParent invalidateChildInParent(int[] location, Rect dirty) Don't call or override this method.","boolean isAlwaysDrawnWithCacheEnabled() Indicates whether this ViewGroup will always try to draw its children using their drawing cache.","boolean isAnimationCacheEnabled() Indicates whether the children's drawing cache is used during a layout animation.","boolean isChildrenDrawingOrderEnabled() Indicates whether the ViewGroup is drawing its children in the order defined by getChildDrawingOrder(int, int).","boolean isChildrenDrawnWithCacheEnabled() Indicates whether the ViewGroup is currently drawing its children using their drawing cache.","boolean isMotionEventSplittingEnabled() Returns true if MotionEvents dispatched to this ViewGroup can be split to multiple children.","boolean isTransitionGroup() Returns true if this ViewGroup should be considered as a single entity for removal when executing an Activity transition.","void jumpDrawablesToCurrentState() Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view.","final void layout(int l, int t, int r, int b) Assign a size and position to a view and all of its descendants This is the second phase of the layout mechanism.","void measureChild(View child, int parentWidthMeasureSpec, int parentHeightMeasureSpec) Ask one of the children of this view to measure itself, taking into account both the MeasureSpec requirements for this view and its padding.","void measureChildWithMargins(View child, int parentWidthMeasureSpec, int widthUsed, int parentHeightMeasureSpec, int heightUsed) Ask one of the children of this view to measure itself, taking into account both the MeasureSpec requirements for this view and its padding and margins.","void measureChildren(int widthMeasureSpec, int heightMeasureSpec) Ask all of the children of this view to measure themselves, taking into account both the MeasureSpec requirements for this view and its padding.","void notifySubtreeAccessibilityStateChanged(View child, View source, int changeType) Notifies a view parent that the accessibility state of one of its descendants has changed and that the structure of the subtree is different.","final void offsetDescendantRectToMyCoords(View descendant, Rect rect) Offset a rectangle that is in a descendant's coordinate space into our coordinate space.","final void offsetRectIntoDescendantCoords(View descendant, Rect rect) Offset a rectangle that is in our coordinate space into an ancestor's coordinate space.","void onAnimationEnd() Invoked by a parent ViewGroup to notify the end of the animation currently associated with this view.","void onAnimationStart() Invoked by a parent ViewGroup to notify the start of the animation currently associated with this view.","void onAttachedToWindow() This is called when the view is attached to a window.","int[] onCreateDrawableState(int extraSpace) Generate the new Drawable state for this view.","void onDetachedFromWindow() This is called when the view is detached from a window.","boolean onInterceptHoverEvent(MotionEvent event) Implement this method to intercept hover events before they are handled by child views.","boolean onInterceptTouchEvent(MotionEvent ev) Implement this method to intercept all touch screen motion events.","abstract void onLayout(boolean changed, int l, int t, int r, int b) Called from layout when this view should assign a size and position to each of its children.","boolean onNestedFling(View target, float velocityX, float velocityY, boolean consumed) Request a fling from a nested scroll.","boolean onNestedPreFling(View target, float velocityX, float velocityY) React to a nested fling before the target view consumes it.","void onNestedPreScroll(View target, int dx, int dy, int[] consumed) React to a nested scroll in progress before the target view consumes a portion of the scroll.","void onNestedScroll(View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) React to a nested scroll in progress.","void onNestedScrollAccepted(View child, View target, int axes) React to the successful claiming of a nested scroll operation.","boolean onRequestFocusInDescendants(int direction, Rect previouslyFocusedRect) Look for a descendant to call requestFocus() on.","boolean onRequestSendAccessibilityEvent(View child, AccessibilityEvent event) Called when a child has requested sending an AccessibilityEvent and gives an opportunity to its parent to augment the event.","boolean onStartNestedScroll(View child, View target, int nestedScrollAxes) React to a descendant view initiating a nestable scroll operation, claiming the nested scroll operation if appropriate.","void onStopNestedScroll(View child) React to a nested scroll operation ending.","void recomputeViewAttributes(View child) Tell view hierarchy that the global view attributes need to be re-evaluated.","void removeAllViews() Call this method to remove all child views from the ViewGroup.","void removeAllViewsInLayout() Called by a ViewGroup subclass to remove child views from itself, when it must first know its size on screen before it can calculate how many child views it will render.","void removeDetachedView(View child, boolean animate) Finishes the removal of a detached view.","void removeView(View view) Note: do not invoke this method from draw(android.graphics.Canvas), onDraw(android.graphics.Canvas), dispatchDraw(android.graphics.Canvas) or any related method.","void removeViewAt(int index) Removes the view at the specified position in the group.","void removeViewInLayout(View view) Removes a view during layout.","void removeViews(int start, int count) Removes the specified range of views from the group.","void removeViewsInLayout(int start, int count) Removes a range of views during layout.","void requestChildFocus(View child, View focused) Called when a child of this parent wants focus","boolean requestChildRectangleOnScreen(View child, Rect rectangle, boolean immediate) Called when a child of this group wants a particular rectangle to be positioned onto the screen.","void requestDisallowInterceptTouchEvent(boolean disallowIntercept) Called when a child does not want this parent and its ancestors to intercept touch events with onInterceptTouchEvent(MotionEvent).","boolean requestFocus(int direction, Rect previouslyFocusedRect) Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from. Looks for a view to give focus to respecting the setting specified by getDescendantFocusability().","boolean requestSendAccessibilityEvent(View child, AccessibilityEvent event) Called by a child to request from its parent to send an AccessibilityEvent.","void requestTransparentRegion(View child) Called when a child wants the view hierarchy to gather and report transparent regions to the window compositor.","void scheduleLayoutAnimation() Schedules the layout animation to be played after the next layout pass of this view group.","void setAddStatesFromChildren(boolean addsStates) Sets whether this ViewGroup's drawable states also include its children's drawable states.","void setAlwaysDrawnWithCacheEnabled(boolean always) Indicates whether this ViewGroup will always try to draw its children using their drawing cache.","void setAnimationCacheEnabled(boolean enabled) Enables or disables the children's drawing cache during a layout animation.","void setChildrenDrawingCacheEnabled(boolean enabled) Enables or disables the drawing cache for each child of this view group.","void setChildrenDrawingOrderEnabled(boolean enabled) Tells the ViewGroup whether to draw its children in the order defined by the method getChildDrawingOrder(int, int).","void setChildrenDrawnWithCacheEnabled(boolean enabled) Tells the ViewGroup to draw its children using their drawing cache.","void setClipChildren(boolean clipChildren) By default, children are clipped to their bounds before drawing.","void setClipToPadding(boolean clipToPadding) By default, children are clipped to the padding of the ViewGroup.","void setDescendantFocusability(int focusability) Set the descendant focusability of this view group.","void setLayoutAnimation(LayoutAnimationController controller) Sets the layout animation controller used to animate the group's children after the first layout.","void setLayoutAnimationListener(Animation.AnimationListener animationListener) Specifies the animation listener to which layout animation events must be sent.","void setLayoutMode(int layoutMode) Sets the basis of alignment during the layout of this ViewGroup.","void setLayoutTransition(LayoutTransition transition) Sets the LayoutTransition object for this ViewGroup.","void setMotionEventSplittingEnabled(boolean split) Enable or disable the splitting of MotionEvents to multiple children during touch event dispatch.","void setOnHierarchyChangeListener(ViewGroup.OnHierarchyChangeListener listener) Register a callback to be invoked when a child is added to or removed from this view.","void setPersistentDrawingCache(int drawingCacheToKeep) Indicates what types of drawing caches should be kept in memory after they have been created.","void setStaticTransformationsEnabled(boolean enabled) When this property is set to true, this ViewGroup supports static transformations on children; this causes getChildStaticTransformation(View, android.view.animation.Transformation) to be invoked when a child is drawn.","void setTouchscreenBlocksFocus(boolean touchscreenBlocksFocus) Set whether this ViewGroup should ignore focus requests for itself and its children.","void setTransitionGroup(boolean isTransitionGroup) Changes whether or not this ViewGroup should be treated as a single entity during Activity Transitions.","boolean shouldDelayChildPressedState() Return true if the pressed state should be delayed for children or descendants of this ViewGroup.","boolean showContextMenuForChild(View originalView) Bring up a context menu for the specified view or its ancestors.","ActionMode startActionModeForChild(View originalView, ActionMode.Callback callback) Start an action mode for the specified view.","void startLayoutAnimation() Runs the layout animation.","void startViewTransition(View view) This method tells the ViewGroup that the given View object, which should have this ViewGroup as its parent, should be kept around (re-displayed when the ViewGroup draws its children) even if it is removed from its parent.","void updateViewLayout(View view, ViewGroup.LayoutParams params)","From class android.view.View void addChildrenForAccessibility(ArrayList<View> children) Adds the children of a given View for accessibility. void addFocusables(ArrayList<View> views, int direction, int focusableMode) Adds any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views. void addFocusables(ArrayList<View> views, int direction) Add any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views. void addOnAttachStateChangeListener(View.OnAttachStateChangeListener listener) Add a listener for attach state changes. void addOnLayoutChangeListener(View.OnLayoutChangeListener listener) Add a listener that will be called when the bounds of the view change due to layout processing. void addTouchables(ArrayList<View> views) Add any touchable views that are descendants of this view (possibly including this view if it is touchable itself) to views. ViewPropertyAnimator animate() This method returns a ViewPropertyAnimator object, which can be used to animate specific properties on this View. void announceForAccessibility(CharSequence text) Convenience method for sending a TYPE_ANNOUNCEMENT AccessibilityEvent to make an announcement which is related to some sort of a context change for which none of the events representing UI transitions is a good fit. boolean awakenScrollBars(int startDelay) Trigger the scrollbars to draw. boolean awakenScrollBars(int startDelay, boolean invalidate) Trigger the scrollbars to draw. boolean awakenScrollBars() Trigger the scrollbars to draw. void bringToFront() Change the view's z order in the tree, so it's on top of other sibling views. void buildDrawingCache() Calling this method is equivalent to calling buildDrawingCache(false). void buildDrawingCache(boolean autoScale) Forces the drawing cache to be built if the drawing cache is invalid. void buildLayer() Forces this view's layer to be created and this view to be rendered into its layer. boolean callOnClick() Directly call any attached OnClickListener. boolean canResolveLayoutDirection() Check if layout direction resolution can be done. boolean canResolveTextAlignment() Check if text alignment resolution can be done. boolean canResolveTextDirection() Check if text direction resolution can be done. boolean canScrollHorizontally(int direction) Check if this view can be scrolled horizontally in a certain direction. boolean canScrollVertically(int direction) Check if this view can be scrolled vertically in a certain direction. void cancelLongPress() Cancels a pending long press. final void cancelPendingInputEvents() Cancel any deferred high-level input events that were previously posted to the event queue. boolean checkInputConnectionProxy(View view) Called by the InputMethodManager when a view who is not the current input connection target is trying to make a call on the manager. void clearAnimation() Cancels any animations for this view. void clearFocus() Called when this view wants to give up focus. static int combineMeasuredStates(int curState, int newState) Merge two states as returned by getMeasuredState(). int computeHorizontalScrollExtent() Compute the horizontal extent of the horizontal scrollbar's thumb within the horizontal range. int computeHorizontalScrollOffset() Compute the horizontal offset of the horizontal scrollbar's thumb within the horizontal range. int computeHorizontalScrollRange() Compute the horizontal range that the horizontal scrollbar represents. void computeScroll() Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary. WindowInsets computeSystemWindowInsets(WindowInsets in, Rect outLocalInsets) Compute insets that should be consumed by this view and the ones that should propagate to those under it. int computeVerticalScrollExtent() Compute the vertical extent of the vertical scrollbar's thumb within the vertical range. int computeVerticalScrollOffset() Compute the vertical offset of the vertical scrollbar's thumb within the horizontal range. int computeVerticalScrollRange() Compute the vertical range that the vertical scrollbar represents. AccessibilityNodeInfo createAccessibilityNodeInfo() Returns an AccessibilityNodeInfo representing this view from the point of view of an AccessibilityService. void createContextMenu(ContextMenu menu) Show the context menu for this view. void destroyDrawingCache() Frees the resources used by the drawing cache. WindowInsets dispatchApplyWindowInsets(WindowInsets insets) Request to apply the given window insets to this view or another view in its subtree. void dispatchConfigurationChanged(Configuration newConfig) Dispatch a notification about a resource configuration change down the view hierarchy. void dispatchDisplayHint(int hint) Dispatch a hint about whether this view is displayed. boolean dispatchDragEvent(DragEvent event) Detects if this View is enabled and has a drag event listener. void dispatchDraw(Canvas canvas) Called by draw to draw the child views. boolean dispatchGenericFocusedEvent(MotionEvent event) Dispatch a generic motion event to the currently focused view. boolean dispatchGenericMotionEvent(MotionEvent event) Dispatch a generic motion event. boolean dispatchGenericPointerEvent(MotionEvent event) Dispatch a generic motion event to the view under the first pointer. boolean dispatchHoverEvent(MotionEvent event) Dispatch a hover event. boolean dispatchKeyEvent(KeyEvent event) Dispatch a key event to the next view on the focus path. boolean dispatchKeyEventPreIme(KeyEvent event) Dispatch a key event before it is processed by any input method associated with the view hierarchy. boolean dispatchKeyShortcutEvent(KeyEvent event) Dispatches a key shortcut event. boolean dispatchNestedFling(float velocityX, float velocityY, boolean consumed) Dispatch a fling to a nested scrolling parent. boolean dispatchNestedPreFling(float velocityX, float velocityY) Dispatch a fling to a nested scrolling parent before it is processed by this view. boolean dispatchNestedPreScroll(int dx, int dy, int[] consumed, int[] offsetInWindow) Dispatch one step of a nested scroll in progress before this view consumes any portion of it. boolean dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[] offsetInWindow) Dispatch one step of a nested scroll in progress. boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) Dispatches an AccessibilityEvent to the View first and then to its children for adding their text content to the event. void dispatchRestoreInstanceState(SparseArray<Parcelable> container) Called by restoreHierarchyState(android.util.SparseArray) to retrieve the state for this view and its children. void dispatchSaveInstanceState(SparseArray<Parcelable> container) Called by saveHierarchyState(android.util.SparseArray) to store the state for this view and its children. void dispatchSetActivated(boolean activated) Dispatch setActivated to all of this View's children. void dispatchSetPressed(boolean pressed) Dispatch setPressed to all of this View's children. void dispatchSetSelected(boolean selected) Dispatch setSelected to all of this View's children. void dispatchSystemUiVisibilityChanged(int visibility) Dispatch callbacks to setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener) down the view hierarchy. boolean dispatchTouchEvent(MotionEvent event) Pass the touch screen motion event down to the target view, or this view if it is the target. boolean dispatchTrackballEvent(MotionEvent event) Pass a trackball motion event down to the focused view. boolean dispatchUnhandledMove(View focused, int direction) This method is the last chance for the focused view and its ancestors to respond to an arrow key. void dispatchVisibilityChanged(View changedView, int visibility) Dispatch a view visibility change down the view hierarchy. void dispatchWindowFocusChanged(boolean hasFocus) Called when the window containing this view gains or loses window focus. void dispatchWindowSystemUiVisiblityChanged(int visible) Dispatch callbacks to onWindowSystemUiVisibilityChanged(int) down the view hierarchy. void dispatchWindowVisibilityChanged(int visibility) Dispatch a window visibility change down the view hierarchy. void draw(Canvas canvas) Manually render this view (and all of its children) to the given Canvas. void drawableHotspotChanged(float x, float y) This function is called whenever the view hotspot changes and needs to be propagated to drawables managed by the view. void drawableStateChanged() This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown. View findFocus() Find the view in the hierarchy rooted at this view that currently has focus. final View findViewById(int id) Look for a child view with the given id. final View findViewWithTag(Object tag) Look for a child view with the given tag. void findViewsWithText(ArrayList<View> outViews, CharSequence searched, int flags) Finds the Views that contain given text. boolean fitSystemWindows(Rect insets) This method was deprecated in API level 20. As of API 20 use dispatchApplyWindowInsets(WindowInsets) to apply insets to views. Views should override onApplyWindowInsets(WindowInsets) or use setOnApplyWindowInsetsListener(android.view.View.OnApplyWindowInsetsListener) to implement handling their own insets. View focusSearch(int direction) Find the nearest view in the specified direction that can take focus. void forceLayout() Forces this view to be laid out during the next layout pass. static int generateViewId() Generate a value suitable for use in setId(int). int getAccessibilityLiveRegion() Gets the live region mode for this View. AccessibilityNodeProvider getAccessibilityNodeProvider() Gets the provider for managing a virtual view hierarchy rooted at this View and reported to AccessibilityServices that explore the window content. float getAlpha() The opacity of the view. Animation getAnimation() Get the animation currently associated with this view. IBinder getApplicationWindowToken() Retrieve a unique token identifying the top-level \"real\" window of the window that this view is attached to. Drawable getBackground() Gets the background drawable ColorStateList getBackgroundTintList() Return the tint applied to the background drawable, if specified. PorterDuff.Mode getBackgroundTintMode() Return the blending mode used to apply the tint to the background drawable, if specified. int getBaseline() Return the offset of the widget's text baseline from the widget's top boundary. final int getBottom() Bottom position of this view relative to its parent. float getBottomFadingEdgeStrength() Returns the strength, or intensity, of the bottom faded edge. int getBottomPaddingOffset() Amount by which to extend the bottom fading region. float getCameraDistance() Gets the distance along the Z axis from the camera to this view. Rect getClipBounds() Returns a copy of the current clipBounds. final boolean getClipToOutline() Returns whether the Outline should be used to clip the contents of the View. CharSequence getContentDescription() Gets the View description. final Context getContext() Returns the context the view is running in, through which it can access the current theme, resources, etc. ContextMenu.ContextMenuInfo getContextMenuInfo() Views should implement this if they have extra information to associate with the context menu. static int getDefaultSize(int size, int measureSpec) Utility to return a default size. Display getDisplay() Gets the logical display to which the view's window has been attached. final int[] getDrawableState() Return an array of resource IDs of the drawable states representing the current state of the view. Bitmap getDrawingCache(boolean autoScale) Returns the bitmap in which this view drawing is cached. Bitmap getDrawingCache() Calling this method is equivalent to calling getDrawingCache(false). int getDrawingCacheBackgroundColor() int getDrawingCacheQuality() Returns the quality of the drawing cache. void getDrawingRect(Rect outRect) Return the visible drawing bounds of your view. long getDrawingTime() Return the time at which the drawing of the view hierarchy started. float getElevation() The base elevation of this view relative to its parent, in pixels. boolean getFilterTouchesWhenObscured() Gets whether the framework should discard touches when the view's window is obscured by another visible window. boolean getFitsSystemWindows() Check for state of setFitsSystemWindows(boolean). ArrayList<View> getFocusables(int direction) Find and return all focusable views that are descendants of this view, possibly including this view if it is focusable itself. void getFocusedRect(Rect r) When a view has focus and the user navigates away from it, the next view is searched for starting from the rectangle filled in by this method. boolean getGlobalVisibleRect(Rect r, Point globalOffset) If some part of this view is not clipped by any of its parents, then return that area in r in global (root) coordinates. final boolean getGlobalVisibleRect(Rect r) Handler getHandler() final int getHeight() Return the height of your view. void getHitRect(Rect outRect) Hit rectangle in parent's coordinates int getHorizontalFadingEdgeLength() Returns the size of the horizontal faded edges used to indicate that more content in this view is visible. int getHorizontalScrollbarHeight() Returns the height of the horizontal scrollbar. int getId() Returns this view's identifier. int getImportantForAccessibility() Gets the mode for determining whether this View is important for accessibility which is if it fires accessibility events and if it is reported to accessibility services that query the screen. boolean getKeepScreenOn() Returns whether the screen should remain on, corresponding to the current value of KEEP_SCREEN_ON. KeyEvent.DispatcherState getKeyDispatcherState() Return the global KeyEvent.DispatcherState for this view's window. int getLabelFor() Gets the id of a view for which this view serves as a label for accessibility purposes. int getLayerType() Indicates what type of layer is currently associated with this view. int getLayoutDirection() Returns the resolved layout direction for this view. ViewGroup.LayoutParams getLayoutParams() Get the LayoutParams associated with this view. final int getLeft() Left position of this view relative to its parent. float getLeftFadingEdgeStrength() Returns the strength, or intensity, of the left faded edge. int getLeftPaddingOffset() Amount by which to extend the left fading region. final boolean getLocalVisibleRect(Rect r) void getLocationInWindow(int[] location) Computes the coordinates of this view in its window. void getLocationOnScreen(int[] location) Computes the coordinates of this view on the screen. Matrix getMatrix() The transform matrix of this view, which is calculated based on the current rotation, scale, and pivot properties. final int getMeasuredHeight() Like getMeasuredHeightAndState(), but only returns the raw width component (that is the result is masked by MEASURED_SIZE_MASK). final int getMeasuredHeightAndState() Return the full height measurement information for this view as computed by the most recent call to measure(int, int). final int getMeasuredState() Return only the state bits of getMeasuredWidthAndState() and getMeasuredHeightAndState(), combined into one integer. final int getMeasuredWidth() Like getMeasuredWidthAndState(), but only returns the raw width component (that is the result is masked by MEASURED_SIZE_MASK). final int getMeasuredWidthAndState() Return the full width measurement information for this view as computed by the most recent call to measure(int, int). int getMinimumHeight() Returns the minimum height of the view. int getMinimumWidth() Returns the minimum width of the view. int getNextFocusDownId() Gets the id of the view to use when the next focus is FOCUS_DOWN. int getNextFocusForwardId() Gets the id of the view to use when the next focus is FOCUS_FORWARD. int getNextFocusLeftId() Gets the id of the view to use when the next focus is FOCUS_LEFT. int getNextFocusRightId() Gets the id of the view to use when the next focus is FOCUS_RIGHT. int getNextFocusUpId() Gets the id of the view to use when the next focus is FOCUS_UP. View.OnFocusChangeListener getOnFocusChangeListener() Returns the focus-change callback registered for this view. ViewOutlineProvider getOutlineProvider() Returns the current ViewOutlineProvider of the view, which generates the Outline that defines the shape of the shadow it casts, and enables outline clipping. int getOverScrollMode() Returns the over-scroll mode for this view. ViewOverlay getOverlay() Returns the overlay for this view, creating it if it does not yet exist. int getPaddingBottom() Returns the bottom padding of this view. int getPaddingEnd() Returns the end padding of this view depending on its resolved layout direction. int getPaddingLeft() Returns the left padding of this view. int getPaddingRight() Returns the right padding of this view. int getPaddingStart() Returns the start padding of this view depending on its resolved layout direction. int getPaddingTop() Returns the top padding of this view. final ViewParent getParent() Gets the parent of this view. ViewParent getParentForAccessibility() Gets the parent for accessibility purposes. float getPivotX() The x location of the point around which the view is rotated and scaled. float getPivotY() The y location of the point around which the view is rotated and scaled. Resources getResources() Returns the resources associated with this view. final int getRight() Right position of this view relative to its parent. float getRightFadingEdgeStrength() Returns the strength, or intensity, of the right faded edge. int getRightPaddingOffset() Amount by which to extend the right fading region. View getRootView() Finds the topmost view in the current view hierarchy. float getRotation() The degrees that the view is rotated around the pivot point. float getRotationX() The degrees that the view is rotated around the horizontal axis through the pivot point. float getRotationY() The degrees that the view is rotated around the vertical axis through the pivot point. float getScaleX() The amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width. float getScaleY() The amount that the view is scaled in y around the pivot point, as a proportion of the view's unscaled height. int getScrollBarDefaultDelayBeforeFade() Returns the delay before scrollbars fade. int getScrollBarFadeDuration() Returns the scrollbar fade duration. int getScrollBarSize() Returns the scrollbar size. int getScrollBarStyle() Returns the current scrollbar style. final int getScrollX() Return the scrolled left position of this view. final int getScrollY() Return the scrolled top position of this view. int getSolidColor() Override this if your view is known to always be drawn on top of a solid color background, and needs to draw fading edges. StateListAnimator getStateListAnimator() Returns the current StateListAnimator if exists. int getSuggestedMinimumHeight() Returns the suggested minimum height that the view should use. int getSuggestedMinimumWidth() Returns the suggested minimum width that the view should use. int getSystemUiVisibility() Returns the last setSystemUiVisibility(int) that this view has requested. Object getTag(int key) Returns the tag associated with this view and the specified key. Object getTag() Returns this view's tag. int getTextAlignment() Return the resolved text alignment. int getTextDirection() Return the resolved text direction. final int getTop() Top position of this view relative to its parent. float getTopFadingEdgeStrength() Returns the strength, or intensity, of the top faded edge. int getTopPaddingOffset() Amount by which to extend the top fading region. TouchDelegate getTouchDelegate() Gets the TouchDelegate for this View. ArrayList<View> getTouchables() Find and return all touchable views that are descendants of this view, possibly including this view if it is touchable itself. String getTransitionName() Returns the name of the View to be used to identify Views in Transitions. float getTranslationX() The horizontal location of this view relative to its left position. float getTranslationY() The vertical location of this view relative to its top position. float getTranslationZ() The depth location of this view relative to its elevation. int getVerticalFadingEdgeLength() Returns the size of the vertical faded edges used to indicate that more content in this view is visible. int getVerticalScrollbarPosition() int getVerticalScrollbarWidth() Returns the width of the vertical scrollbar. ViewTreeObserver getViewTreeObserver() Returns the ViewTreeObserver for this view's hierarchy. int getVisibility() Returns the visibility status for this view. final int getWidth() Return the width of the your view. int getWindowAttachCount() WindowId getWindowId() Retrieve the WindowId for the window this view is currently attached to. int getWindowSystemUiVisibility() Returns the current system UI visibility that is currently set for the entire window. IBinder getWindowToken() Retrieve a unique token identifying the window this view is attached to. int getWindowVisibility() Returns the current visibility of the window this view is attached to (either GONE, INVISIBLE, or VISIBLE). void getWindowVisibleDisplayFrame(Rect outRect) Retrieve the overall visible display size in which the window this view is attached to has been positioned in. float getX() The visual x position of this view, in pixels. float getY() The visual y position of this view, in pixels. float getZ() The visual z position of this view, in pixels. boolean hasFocus() Returns true if this view has focus iteself, or is the ancestor of the view that has focus. boolean hasFocusable() Returns true if this view is focusable or if it contains a reachable View for which hasFocusable() returns true. boolean hasNestedScrollingParent() Returns true if this view has a nested scrolling parent. boolean hasOnClickListeners() Return whether this view has an attached OnClickListener. boolean hasOverlappingRendering() Returns whether this View has content which overlaps. boolean hasTransientState() Indicates whether the view is currently tracking transient state that the app should not need to concern itself with saving and restoring, but that the framework should take special note to preserve when possible. boolean hasWindowFocus() Returns true if this view is in a window that currently has window focus. static View inflate(Context context, int resource, ViewGroup root) Inflate a view from an XML resource. void invalidate(Rect dirty) Mark the area defined by dirty as needing to be drawn. void invalidate(int l, int t, int r, int b) Mark the area defined by the rect (l,t,r,b) as needing to be drawn. void invalidate() Invalidate the whole view. void invalidateDrawable(Drawable drawable) Invalidates the specified Drawable. void invalidateOutline() Called to rebuild this View's Outline from its outline provider boolean isAccessibilityFocused() Returns whether this View is accessibility focused. boolean isActivated() Indicates the activation state of this view. boolean isAttachedToWindow() Returns true if this view is currently attached to a window. boolean isClickable() Indicates whether this view reacts to click events or not. boolean isDirty() True if this view has changed since the last time being drawn. boolean isDrawingCacheEnabled() Indicates whether the drawing cache is enabled for this view. boolean isDuplicateParentStateEnabled() Indicates whether this duplicates its drawable state from its parent. boolean isEnabled() Returns the enabled status for this view. final boolean isFocusable() Returns whether this View is able to take focus. final boolean isFocusableInTouchMode() When a view is focusable, it may not want to take focus when in touch mode. boolean isFocused() Returns true if this view has focus boolean isHapticFeedbackEnabled() boolean isHardwareAccelerated() Indicates whether this view is attached to a hardware accelerated window or not. boolean isHorizontalFadingEdgeEnabled() Indicate whether the horizontal edges are faded when the view is scrolled horizontally. boolean isHorizontalScrollBarEnabled() Indicate whether the horizontal scrollbar should be drawn or not. boolean isHovered() Returns true if the view is currently hovered. boolean isImportantForAccessibility() Computes whether this view should be exposed for accessibility. boolean isInEditMode() Indicates whether this View is currently in edit mode. boolean isInLayout() Returns whether the view hierarchy is currently undergoing a layout pass. boolean isInTouchMode() Returns whether the device is currently in touch mode. boolean isLaidOut() Returns true if this view has been through at least one layout since it was last attached to or detached from a window. boolean isLayoutDirectionResolved() boolean isLayoutRequested() Indicates whether or not this view's layout will be requested during the next hierarchy layout pass. boolean isLongClickable() Indicates whether this view reacts to long click events or not. boolean isNestedScrollingEnabled() Returns true if nested scrolling is enabled for this view. boolean isOpaque() Indicates whether this View is opaque. boolean isPaddingOffsetRequired() If the View draws content inside its padding and enables fading edges, it needs to support padding offsets. boolean isPaddingRelative() Return if the padding as been set thru relative values setPaddingRelative(int, int, int, int) or thru boolean isPressed() Indicates whether the view is currently in pressed state. boolean isSaveEnabled() Indicates whether this view will save its state (that is, whether its onSaveInstanceState() method will be called). boolean isSaveFromParentEnabled() Indicates whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent. boolean isScrollContainer() Indicates whether this view is one of the set of scrollable containers in its window. boolean isScrollbarFadingEnabled() Returns true if scrollbars will fade when this view is not scrolling boolean isSelected() Indicates the selection state of this view. boolean isShown() Returns the visibility of this view and all of its ancestors boolean isSoundEffectsEnabled() boolean isTextAlignmentResolved() boolean isTextDirectionResolved() boolean isVerticalFadingEdgeEnabled() Indicate whether the vertical edges are faded when the view is scrolled horizontally. boolean isVerticalScrollBarEnabled() Indicate whether the vertical scrollbar should be drawn or not. void jumpDrawablesToCurrentState() Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view. void layout(int l, int t, int r, int b) Assign a size and position to a view and all of its descendants This is the second phase of the layout mechanism. final void measure(int widthMeasureSpec, int heightMeasureSpec) This is called to find out how big a view should be. static int[] mergeDrawableStates(int[] baseState, int[] additionalState) Merge your own state values in additionalState into the base state values baseState that were returned by onCreateDrawableState(int). void offsetLeftAndRight(int offset) Offset this view's horizontal location by the specified amount of pixels. void offsetTopAndBottom(int offset) Offset this view's vertical location by the specified number of pixels. void onAnimationEnd() Invoked by a parent ViewGroup to notify the end of the animation currently associated with this view. void onAnimationStart() Invoked by a parent ViewGroup to notify the start of the animation currently associated with this view. WindowInsets onApplyWindowInsets(WindowInsets insets) Called when the view should apply WindowInsets according to its internal policy. void onAttachedToWindow() This is called when the view is attached to a window. void onCancelPendingInputEvents() Called as the result of a call to cancelPendingInputEvents() on this view or a parent view. boolean onCheckIsTextEditor() Check whether the called view is a text editor, in which case it would make sense to automatically display a soft input window for it. void onConfigurationChanged(Configuration newConfig) Called when the current configuration of the resources being used by the application have changed. void onCreateContextMenu(ContextMenu menu) Views should implement this if the view itself is going to add items to the context menu. int[] onCreateDrawableState(int extraSpace) Generate the new Drawable state for this view. InputConnection onCreateInputConnection(EditorInfo outAttrs) Create a new InputConnection for an InputMethod to interact with the view. void onDetachedFromWindow() This is called when the view is detached from a window. void onDisplayHint(int hint) Gives this view a hint about whether is displayed or not. boolean onDragEvent(DragEvent event) Handles drag events sent by the system following a call to startDrag(). void onDraw(Canvas canvas) Implement this to do your drawing. final void onDrawScrollBars(Canvas canvas) Request the drawing of the horizontal and the vertical scrollbar. boolean onFilterTouchEventForSecurity(MotionEvent event) Filter the touch event to apply security policies. void onFinishInflate() Finalize inflating a view from XML. void onFinishTemporaryDetach() Called after onStartTemporaryDetach() when the container is done changing the view. void onFocusChanged(boolean gainFocus, int direction, Rect previouslyFocusedRect) Called by the view system when the focus state of this view changes. boolean onGenericMotionEvent(MotionEvent event) Implement this method to handle generic motion events. void onHoverChanged(boolean hovered) Implement this method to handle hover state changes. boolean onHoverEvent(MotionEvent event) Implement this method to handle hover events. void onInitializeAccessibilityEvent(AccessibilityEvent event) Initializes an AccessibilityEvent with information about this View which is the event source. void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info) Initializes an AccessibilityNodeInfo with information about this view. boolean onKeyDown(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyDown(): perform press of the view when KEYCODE_DPAD_CENTER or KEYCODE_ENTER is released, if the view is enabled and clickable. boolean onKeyLongPress(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyLongPress(): always returns false (doesn't handle the event). boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event). boolean onKeyPreIme(int keyCode, KeyEvent event) Handle a key event before it is processed by any input method associated with the view hierarchy. boolean onKeyShortcut(int keyCode, KeyEvent event) Called on the focused view when a key shortcut event is not handled. boolean onKeyUp(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyUp(): perform clicking of the view when KEYCODE_DPAD_CENTER or KEYCODE_ENTER is released. void onLayout(boolean changed, int left, int top, int right, int bottom) Called from layout when this view should assign a size and position to each of its children. void onMeasure(int widthMeasureSpec, int heightMeasureSpec) Measure the view and its content to determine the measured width and the measured height. void onOverScrolled(int scrollX, int scrollY, boolean clampedX, boolean clampedY) Called by overScrollBy(int, int, int, int, int, int, int, int, boolean) to respond to the results of an over-scroll operation. void onPopulateAccessibilityEvent(AccessibilityEvent event) Called from dispatchPopulateAccessibilityEvent(AccessibilityEvent) giving a chance to this View to populate the accessibility event with its text content. void onRestoreInstanceState(Parcelable state) Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState(). void onRtlPropertiesChanged(int layoutDirection) Called when any RTL property (layout direction or text direction or text alignment) has been changed. Parcelable onSaveInstanceState() Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. void onScreenStateChanged(int screenState) This method is called whenever the state of the screen this view is attached to changes. void onScrollChanged(int l, int t, int oldl, int oldt) This is called in response to an internal scroll in this view (i.e., the view scrolled its own contents). boolean onSetAlpha(int alpha) Invoked if there is a Transform that involves alpha. void onSizeChanged(int w, int h, int oldw, int oldh) This is called during layout when the size of this view has changed. void onStartTemporaryDetach() This is called when a container is going to temporarily detach a child, with ViewGroup.detachViewFromParent. boolean onTouchEvent(MotionEvent event) Implement this method to handle touch screen motion events. boolean onTrackballEvent(MotionEvent event) Implement this method to handle trackball motion events. void onVisibilityChanged(View changedView, int visibility) Called when the visibility of the view or an ancestor of the view is changed. void onWindowFocusChanged(boolean hasWindowFocus) Called when the window containing this view gains or loses focus. void onWindowSystemUiVisibilityChanged(int visible) Override to find out when the window's requested system UI visibility has changed, that is the value returned by getWindowSystemUiVisibility(). void onWindowVisibilityChanged(int visibility) Called when the window containing has change its visibility (between GONE, INVISIBLE, and VISIBLE). boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX, int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) Scroll the view with standard behavior for scrolling beyond the normal content boundaries. boolean performAccessibilityAction(int action, Bundle arguments) Performs the specified accessibility action on the view. boolean performClick() Call this view's OnClickListener, if it is defined. boolean performHapticFeedback(int feedbackConstant) BZZZTT!!1! Provide haptic feedback to the user for this view. boolean performHapticFeedback(int feedbackConstant, int flags) BZZZTT!!1! Like performHapticFeedback(int), with additional options. boolean performLongClick() Call this view's OnLongClickListener, if it is defined. void playSoundEffect(int soundConstant) Play a sound effect for this view. boolean post(Runnable action) Causes the Runnable to be added to the message queue. boolean postDelayed(Runnable action, long delayMillis) Causes the Runnable to be added to the message queue, to be run after the specified amount of time elapses. void postInvalidate(int left, int top, int right, int bottom) Cause an invalidate of the specified area to happen on a subsequent cycle through the event loop. void postInvalidate() Cause an invalidate to happen on a subsequent cycle through the event loop. void postInvalidateDelayed(long delayMilliseconds, int left, int top, int right, int bottom) Cause an invalidate of the specified area to happen on a subsequent cycle through the event loop. void postInvalidateDelayed(long delayMilliseconds) Cause an invalidate to happen on a subsequent cycle through the event loop. void postInvalidateOnAnimation(int left, int top, int right, int bottom) Cause an invalidate of the specified area to happen on the next animation time step, typically the next display frame. void postInvalidateOnAnimation() Cause an invalidate to happen on the next animation time step, typically the next display frame. void postOnAnimation(Runnable action) Causes the Runnable to execute on the next animation time step. void postOnAnimationDelayed(Runnable action, long delayMillis) Causes the Runnable to execute on the next animation time step, after the specified amount of time elapses. void refreshDrawableState() Call this to force a view to update its drawable state. boolean removeCallbacks(Runnable action) Removes the specified Runnable from the message queue. void removeOnAttachStateChangeListener(View.OnAttachStateChangeListener listener) Remove a listener for attach state changes. void removeOnLayoutChangeListener(View.OnLayoutChangeListener listener) Remove a listener for layout changes. void requestApplyInsets() Ask that a new dispatch of onApplyWindowInsets(WindowInsets) be performed. void requestFitSystemWindows() This method was deprecated in API level 20. Use requestApplyInsets() for newer platform versions. boolean requestFocus(int direction, Rect previouslyFocusedRect) Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from. final boolean requestFocus(int direction) Call this to try to give focus to a specific view or to one of its descendants and give it a hint about what direction focus is heading. final boolean requestFocus() Call this to try to give focus to a specific view or to one of its descendants. final boolean requestFocusFromTouch() Call this to try to give focus to a specific view or to one of its descendants. void requestLayout() Call this when something has changed which has invalidated the layout of this view. boolean requestRectangleOnScreen(Rect rectangle) Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough. boolean requestRectangleOnScreen(Rect rectangle, boolean immediate) Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough. final void requestUnbufferedDispatch(MotionEvent event) Request unbuffered dispatch of the given stream of MotionEvents to this View. static int resolveSize(int size, int measureSpec) Version of resolveSizeAndState(int, int, int) returning only the MEASURED_SIZE_MASK bits of the result. static int resolveSizeAndState(int size, int measureSpec, int childMeasuredState) Utility to reconcile a desired size and state, with constraints imposed by a MeasureSpec. void restoreHierarchyState(SparseArray<Parcelable> container) Restore this view hierarchy's frozen state from the given container. void saveHierarchyState(SparseArray<Parcelable> container) Store this view hierarchy's frozen state into the given container. void scheduleDrawable(Drawable who, Runnable what, long when) Schedules an action on a drawable to occur at a specified time. void scrollBy(int x, int y) Move the scrolled position of your view. void scrollTo(int x, int y) Set the scrolled position of your view. void sendAccessibilityEvent(int eventType) Sends an accessibility event of the given type. void sendAccessibilityEventUnchecked(AccessibilityEvent event) This method behaves exactly as sendAccessibilityEvent(int) but takes as an argument an empty AccessibilityEvent and does not perform a check whether accessibility is enabled. void setAccessibilityDelegate(View.AccessibilityDelegate delegate) Sets a delegate for implementing accessibility support via composition as opposed to inheritance. void setAccessibilityLiveRegion(int mode) Sets the live region mode for this view. void setActivated(boolean activated) Changes the activated state of this view. void setAlpha(float alpha) Sets the opacity of the view. void setAnimation(Animation animation) Sets the next animation to play for this view. void setBackground(Drawable background) Set the background to a given Drawable, or remove the background. void setBackgroundColor(int color) Sets the background color for this view. void setBackgroundDrawable(Drawable background) This method was deprecated in API level 16. use setBackground(Drawable) instead void setBackgroundResource(int resid) Set the background to a given resource. void setBackgroundTintList(ColorStateList tint) Applies a tint to the background drawable. void setBackgroundTintMode(PorterDuff.Mode tintMode) Specifies the blending mode used to apply the tint specified by setBackgroundTintList(ColorStateList)} to the background drawable. final void setBottom(int bottom) Sets the bottom position of this view relative to its parent. void setCameraDistance(float distance) Sets the distance along the Z axis (orthogonal to the X/Y plane on which views are drawn) from the camera to this view. void setClickable(boolean clickable) Enables or disables click events for this view. void setClipBounds(Rect clipBounds) Sets a rectangular area on this view to which the view will be clipped when it is drawn. void setClipToOutline(boolean clipToOutline) Sets whether the View's Outline should be used to clip the contents of the View. void setContentDescription(CharSequence contentDescription) Sets the View description. void setDrawingCacheBackgroundColor(int color) Setting a solid background color for the drawing cache's bitmaps will improve performance and memory usage. void setDrawingCacheEnabled(boolean enabled) Enables or disables the drawing cache. void setDrawingCacheQuality(int quality) Set the drawing cache quality of this view. void setDuplicateParentStateEnabled(boolean enabled) Enables or disables the duplication of the parent's state into this view. void setElevation(float elevation) Sets the base elevation of this view, in pixels. void setEnabled(boolean enabled) Set the enabled state of this view. void setFadingEdgeLength(int length) Set the size of the faded edge used to indicate that more content in this view is available. void setFilterTouchesWhenObscured(boolean enabled) Sets whether the framework should discard touches when the view's window is obscured by another visible window. void setFitsSystemWindows(boolean fitSystemWindows) Sets whether or not this view should account for system screen decorations such as the status bar and inset its content; that is, controlling whether the default implementation of fitSystemWindows(Rect) will be executed. void setFocusable(boolean focusable) Set whether this view can receive the focus. void setFocusableInTouchMode(boolean focusableInTouchMode) Set whether this view can receive focus while in touch mode. void setHapticFeedbackEnabled(boolean hapticFeedbackEnabled) Set whether this view should have haptic feedback for events such as long presses. void setHasTransientState(boolean hasTransientState) Set whether this view is currently tracking transient state that the framework should attempt to preserve when possible. void setHorizontalFadingEdgeEnabled(boolean horizontalFadingEdgeEnabled) Define whether the horizontal edges should be faded when this view is scrolled horizontally. void setHorizontalScrollBarEnabled(boolean horizontalScrollBarEnabled) Define whether the horizontal scrollbar should be drawn or not. void setHovered(boolean hovered) Sets whether the view is currently hovered. void setId(int id) Sets the identifier for this view. void setImportantForAccessibility(int mode) Sets how to determine whether this view is important for accessibility which is if it fires accessibility events and if it is reported to accessibility services that query the screen. void setKeepScreenOn(boolean keepScreenOn) Controls whether the screen should remain on, modifying the value of KEEP_SCREEN_ON. void setLabelFor(int id) Sets the id of a view for which this view serves as a label for accessibility purposes. void setLayerPaint(Paint paint) Updates the Paint object used with the current layer (used only if the current layer type is not set to LAYER_TYPE_NONE). void setLayerType(int layerType, Paint paint) Specifies the type of layer backing this view. void setLayoutDirection(int layoutDirection) Set the layout direction for this view. void setLayoutParams(ViewGroup.LayoutParams params) Set the layout parameters associated with this view. final void setLeft(int left) Sets the left position of this view relative to its parent. void setLongClickable(boolean longClickable) Enables or disables long click events for this view. final void setMeasuredDimension(int measuredWidth, int measuredHeight) This method must be called by onMeasure(int, int) to store the measured width and measured height. void setMinimumHeight(int minHeight) Sets the minimum height of the view. void setMinimumWidth(int minWidth) Sets the minimum width of the view. void setNestedScrollingEnabled(boolean enabled) Enable or disable nested scrolling for this view. void setNextFocusDownId(int nextFocusDownId) Sets the id of the view to use when the next focus is FOCUS_DOWN. void setNextFocusForwardId(int nextFocusForwardId) Sets the id of the view to use when the next focus is FOCUS_FORWARD. void setNextFocusLeftId(int nextFocusLeftId) Sets the id of the view to use when the next focus is FOCUS_LEFT. void setNextFocusRightId(int nextFocusRightId) Sets the id of the view to use when the next focus is FOCUS_RIGHT. void setNextFocusUpId(int nextFocusUpId) Sets the id of the view to use when the next focus is FOCUS_UP. void setOnApplyWindowInsetsListener(View.OnApplyWindowInsetsListener listener) Set an View.OnApplyWindowInsetsListener to take over the policy for applying window insets to this view. void setOnClickListener(View.OnClickListener l) Register a callback to be invoked when this view is clicked. void setOnCreateContextMenuListener(View.OnCreateContextMenuListener l) Register a callback to be invoked when the context menu for this view is being built. void setOnDragListener(View.OnDragListener l) Register a drag event listener callback object for this View. void setOnFocusChangeListener(View.OnFocusChangeListener l) Register a callback to be invoked when focus of this view changed. void setOnGenericMotionListener(View.OnGenericMotionListener l) Register a callback to be invoked when a generic motion event is sent to this view. void setOnHoverListener(View.OnHoverListener l) Register a callback to be invoked when a hover event is sent to this view. void setOnKeyListener(View.OnKeyListener l) Register a callback to be invoked when a hardware key is pressed in this view. void setOnLongClickListener(View.OnLongClickListener l) Register a callback to be invoked when this view is clicked and held. void setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener l) Set a listener to receive callbacks when the visibility of the system bar changes. void setOnTouchListener(View.OnTouchListener l) Register a callback to be invoked when a touch event is sent to this view. void setOutlineProvider(ViewOutlineProvider provider) Sets the ViewOutlineProvider of the view, which generates the Outline that defines the shape of the shadow it casts, and enables outline clipping. void setOverScrollMode(int overScrollMode) Set the over-scroll mode for this view. void setPadding(int left, int top, int right, int bottom) Sets the padding. void setPaddingRelative(int start, int top, int end, int bottom) Sets the relative padding. void setPivotX(float pivotX) Sets the x location of the point around which the view is rotated and scaled. void setPivotY(float pivotY) Sets the y location of the point around which the view is rotated and scaled. void setPressed(boolean pressed) Sets the pressed state for this view. final void setRight(int right) Sets the right position of this view relative to its parent. void setRotation(float rotation) Sets the degrees that the view is rotated around the pivot point. void setRotationX(float rotationX) Sets the degrees that the view is rotated around the horizontal axis through the pivot point. void setRotationY(float rotationY) Sets the degrees that the view is rotated around the vertical axis through the pivot point. void setSaveEnabled(boolean enabled) Controls whether the saving of this view's state is enabled (that is, whether its onSaveInstanceState() method will be called). void setSaveFromParentEnabled(boolean enabled) Controls whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent. void setScaleX(float scaleX) Sets the amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width. void setScaleY(float scaleY) Sets the amount that the view is scaled in Y around the pivot point, as a proportion of the view's unscaled width. void setScrollBarDefaultDelayBeforeFade(int scrollBarDefaultDelayBeforeFade) Define the delay before scrollbars fade. void setScrollBarFadeDuration(int scrollBarFadeDuration) Define the scrollbar fade duration. void setScrollBarSize(int scrollBarSize) Define the scrollbar size. void setScrollBarStyle(int style) Specify the style of the scrollbars. void setScrollContainer(boolean isScrollContainer) Change whether this view is one of the set of scrollable containers in its window. void setScrollX(int value) Set the horizontal scrolled position of your view. void setScrollY(int value) Set the vertical scrolled position of your view. void setScrollbarFadingEnabled(boolean fadeScrollbars) Define whether scrollbars will fade when the view is not scrolling. void setSelected(boolean selected) Changes the selection state of this view. void setSoundEffectsEnabled(boolean soundEffectsEnabled) Set whether this view should have sound effects enabled for events such as clicking and touching. void setStateListAnimator(StateListAnimator stateListAnimator) Attaches the provided StateListAnimator to this View. void setSystemUiVisibility(int visibility) Request that the visibility of the status bar or other screen/window decorations be changed. void setTag(int key, Object tag) Sets a tag associated with this view and a key. void setTag(Object tag) Sets the tag associated with this view. void setTextAlignment(int textAlignment) Set the text alignment. void setTextDirection(int textDirection) Set the text direction. final void setTop(int top) Sets the top position of this view relative to its parent. void setTouchDelegate(TouchDelegate delegate) Sets the TouchDelegate for this View. final void setTransitionName(String transitionName) Sets the name of the View to be used to identify Views in Transitions. void setTranslationX(float translationX) Sets the horizontal location of this view relative to its left position. void setTranslationY(float translationY) Sets the vertical location of this view relative to its top position. void setTranslationZ(float translationZ) Sets the depth location of this view relative to its elevation. void setVerticalFadingEdgeEnabled(boolean verticalFadingEdgeEnabled) Define whether the vertical edges should be faded when this view is scrolled vertically. void setVerticalScrollBarEnabled(boolean verticalScrollBarEnabled) Define whether the vertical scrollbar should be drawn or not. void setVerticalScrollbarPosition(int position) Set the position of the vertical scroll bar. void setVisibility(int visibility) Set the enabled state of this view. void setWillNotCacheDrawing(boolean willNotCacheDrawing) When a View's drawing cache is enabled, drawing is redirected to an offscreen bitmap. void setWillNotDraw(boolean willNotDraw) If this view doesn't do any drawing on its own, set this flag to allow further optimizations. void setX(float x) Sets the visual x position of this view, in pixels. void setY(float y) Sets the visual y position of this view, in pixels. void setZ(float z) Sets the visual z position of this view, in pixels. boolean showContextMenu() Bring up the context menu for this view. ActionMode startActionMode(ActionMode.Callback callback) Start an action mode. void startAnimation(Animation animation) Start the specified animation now. final boolean startDrag(ClipData data, View.DragShadowBuilder shadowBuilder, Object myLocalState, int flags) Starts a drag and drop operation. boolean startNestedScroll(int axes) Begin a nestable scroll operation along the given axes. void stopNestedScroll() Stop a nested scroll in progress. String toString() Returns a string containing a concise, human-readable description of this object. void unscheduleDrawable(Drawable who) Unschedule any events associated with the given Drawable. void unscheduleDrawable(Drawable who, Runnable what) Cancels a scheduled action on a drawable. boolean verifyDrawable(Drawable who) If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying. boolean willNotCacheDrawing() Returns whether or not this View can cache its drawing or not. boolean willNotDraw() Returns whether or not this View draws on its own.","void addChildrenForAccessibility(ArrayList<View> children) Adds the children of a given View for accessibility.","void addFocusables(ArrayList<View> views, int direction, int focusableMode) Adds any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views.","void addFocusables(ArrayList<View> views, int direction) Add any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views.","void addOnAttachStateChangeListener(View.OnAttachStateChangeListener listener) Add a listener for attach state changes.","void addOnLayoutChangeListener(View.OnLayoutChangeListener listener) Add a listener that will be called when the bounds of the view change due to layout processing.","void addTouchables(ArrayList<View> views) Add any touchable views that are descendants of this view (possibly including this view if it is touchable itself) to views.","ViewPropertyAnimator animate() This method returns a ViewPropertyAnimator object, which can be used to animate specific properties on this View.","void announceForAccessibility(CharSequence text) Convenience method for sending a TYPE_ANNOUNCEMENT AccessibilityEvent to make an announcement which is related to some sort of a context change for which none of the events representing UI transitions is a good fit.","boolean awakenScrollBars(int startDelay) Trigger the scrollbars to draw.","boolean awakenScrollBars(int startDelay, boolean invalidate) Trigger the scrollbars to draw.","boolean awakenScrollBars() Trigger the scrollbars to draw.","void bringToFront() Change the view's z order in the tree, so it's on top of other sibling views.","void buildDrawingCache() Calling this method is equivalent to calling buildDrawingCache(false).","void buildDrawingCache(boolean autoScale) Forces the drawing cache to be built if the drawing cache is invalid.","void buildLayer() Forces this view's layer to be created and this view to be rendered into its layer.","boolean callOnClick() Directly call any attached OnClickListener.","boolean canResolveLayoutDirection() Check if layout direction resolution can be done.","boolean canResolveTextAlignment() Check if text alignment resolution can be done.","boolean canResolveTextDirection() Check if text direction resolution can be done.","boolean canScrollHorizontally(int direction) Check if this view can be scrolled horizontally in a certain direction.","boolean canScrollVertically(int direction) Check if this view can be scrolled vertically in a certain direction.","void cancelLongPress() Cancels a pending long press.","final void cancelPendingInputEvents() Cancel any deferred high-level input events that were previously posted to the event queue.","boolean checkInputConnectionProxy(View view) Called by the InputMethodManager when a view who is not the current input connection target is trying to make a call on the manager.","void clearAnimation() Cancels any animations for this view.","void clearFocus() Called when this view wants to give up focus.","static int combineMeasuredStates(int curState, int newState) Merge two states as returned by getMeasuredState().","int computeHorizontalScrollExtent() Compute the horizontal extent of the horizontal scrollbar's thumb within the horizontal range.","int computeHorizontalScrollOffset() Compute the horizontal offset of the horizontal scrollbar's thumb within the horizontal range.","int computeHorizontalScrollRange() Compute the horizontal range that the horizontal scrollbar represents.","void computeScroll() Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary.","WindowInsets computeSystemWindowInsets(WindowInsets in, Rect outLocalInsets) Compute insets that should be consumed by this view and the ones that should propagate to those under it.","int computeVerticalScrollExtent() Compute the vertical extent of the vertical scrollbar's thumb within the vertical range.","int computeVerticalScrollOffset() Compute the vertical offset of the vertical scrollbar's thumb within the horizontal range.","int computeVerticalScrollRange() Compute the vertical range that the vertical scrollbar represents.","AccessibilityNodeInfo createAccessibilityNodeInfo() Returns an AccessibilityNodeInfo representing this view from the point of view of an AccessibilityService.","void createContextMenu(ContextMenu menu) Show the context menu for this view.","void destroyDrawingCache() Frees the resources used by the drawing cache.","WindowInsets dispatchApplyWindowInsets(WindowInsets insets) Request to apply the given window insets to this view or another view in its subtree.","void dispatchConfigurationChanged(Configuration newConfig) Dispatch a notification about a resource configuration change down the view hierarchy.","void dispatchDisplayHint(int hint) Dispatch a hint about whether this view is displayed.","boolean dispatchDragEvent(DragEvent event) Detects if this View is enabled and has a drag event listener.","void dispatchDraw(Canvas canvas) Called by draw to draw the child views.","boolean dispatchGenericFocusedEvent(MotionEvent event) Dispatch a generic motion event to the currently focused view.","boolean dispatchGenericMotionEvent(MotionEvent event) Dispatch a generic motion event.","boolean dispatchGenericPointerEvent(MotionEvent event) Dispatch a generic motion event to the view under the first pointer.","boolean dispatchHoverEvent(MotionEvent event) Dispatch a hover event.","boolean dispatchKeyEvent(KeyEvent event) Dispatch a key event to the next view on the focus path.","boolean dispatchKeyEventPreIme(KeyEvent event) Dispatch a key event before it is processed by any input method associated with the view hierarchy.","boolean dispatchKeyShortcutEvent(KeyEvent event) Dispatches a key shortcut event.","boolean dispatchNestedFling(float velocityX, float velocityY, boolean consumed) Dispatch a fling to a nested scrolling parent.","boolean dispatchNestedPreFling(float velocityX, float velocityY) Dispatch a fling to a nested scrolling parent before it is processed by this view.","boolean dispatchNestedPreScroll(int dx, int dy, int[] consumed, int[] offsetInWindow) Dispatch one step of a nested scroll in progress before this view consumes any portion of it.","boolean dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[] offsetInWindow) Dispatch one step of a nested scroll in progress.","boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) Dispatches an AccessibilityEvent to the View first and then to its children for adding their text content to the event.","void dispatchRestoreInstanceState(SparseArray<Parcelable> container) Called by restoreHierarchyState(android.util.SparseArray) to retrieve the state for this view and its children.","void dispatchSaveInstanceState(SparseArray<Parcelable> container) Called by saveHierarchyState(android.util.SparseArray) to store the state for this view and its children.","void dispatchSetActivated(boolean activated) Dispatch setActivated to all of this View's children.","void dispatchSetPressed(boolean pressed) Dispatch setPressed to all of this View's children.","void dispatchSetSelected(boolean selected) Dispatch setSelected to all of this View's children.","void dispatchSystemUiVisibilityChanged(int visibility) Dispatch callbacks to setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener) down the view hierarchy.","boolean dispatchTouchEvent(MotionEvent event) Pass the touch screen motion event down to the target view, or this view if it is the target.","boolean dispatchTrackballEvent(MotionEvent event) Pass a trackball motion event down to the focused view.","boolean dispatchUnhandledMove(View focused, int direction) This method is the last chance for the focused view and its ancestors to respond to an arrow key.","void dispatchVisibilityChanged(View changedView, int visibility) Dispatch a view visibility change down the view hierarchy.","void dispatchWindowFocusChanged(boolean hasFocus) Called when the window containing this view gains or loses window focus.","void dispatchWindowSystemUiVisiblityChanged(int visible) Dispatch callbacks to onWindowSystemUiVisibilityChanged(int) down the view hierarchy.","void dispatchWindowVisibilityChanged(int visibility) Dispatch a window visibility change down the view hierarchy.","void draw(Canvas canvas) Manually render this view (and all of its children) to the given Canvas.","void drawableHotspotChanged(float x, float y) This function is called whenever the view hotspot changes and needs to be propagated to drawables managed by the view.","void drawableStateChanged() This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown.","View findFocus() Find the view in the hierarchy rooted at this view that currently has focus.","final View findViewById(int id) Look for a child view with the given id.","final View findViewWithTag(Object tag) Look for a child view with the given tag.","void findViewsWithText(ArrayList<View> outViews, CharSequence searched, int flags) Finds the Views that contain given text.","boolean fitSystemWindows(Rect insets) This method was deprecated in API level 20. As of API 20 use dispatchApplyWindowInsets(WindowInsets) to apply insets to views. Views should override onApplyWindowInsets(WindowInsets) or use setOnApplyWindowInsetsListener(android.view.View.OnApplyWindowInsetsListener) to implement handling their own insets.","View focusSearch(int direction) Find the nearest view in the specified direction that can take focus.","void forceLayout() Forces this view to be laid out during the next layout pass.","static int generateViewId() Generate a value suitable for use in setId(int).","int getAccessibilityLiveRegion() Gets the live region mode for this View.","AccessibilityNodeProvider getAccessibilityNodeProvider() Gets the provider for managing a virtual view hierarchy rooted at this View and reported to AccessibilityServices that explore the window content.","float getAlpha() The opacity of the view.","Animation getAnimation() Get the animation currently associated with this view.","IBinder getApplicationWindowToken() Retrieve a unique token identifying the top-level \"real\" window of the window that this view is attached to.","Drawable getBackground() Gets the background drawable","ColorStateList getBackgroundTintList() Return the tint applied to the background drawable, if specified.","PorterDuff.Mode getBackgroundTintMode() Return the blending mode used to apply the tint to the background drawable, if specified.","int getBaseline() Return the offset of the widget's text baseline from the widget's top boundary.","final int getBottom() Bottom position of this view relative to its parent.","float getBottomFadingEdgeStrength() Returns the strength, or intensity, of the bottom faded edge.","int getBottomPaddingOffset() Amount by which to extend the bottom fading region.","float getCameraDistance() Gets the distance along the Z axis from the camera to this view.","Rect getClipBounds() Returns a copy of the current clipBounds.","final boolean getClipToOutline() Returns whether the Outline should be used to clip the contents of the View.","CharSequence getContentDescription() Gets the View description.","final Context getContext() Returns the context the view is running in, through which it can access the current theme, resources, etc.","ContextMenu.ContextMenuInfo getContextMenuInfo() Views should implement this if they have extra information to associate with the context menu.","static int getDefaultSize(int size, int measureSpec) Utility to return a default size.","Display getDisplay() Gets the logical display to which the view's window has been attached.","final int[] getDrawableState() Return an array of resource IDs of the drawable states representing the current state of the view.","Bitmap getDrawingCache(boolean autoScale) Returns the bitmap in which this view drawing is cached.","Bitmap getDrawingCache() Calling this method is equivalent to calling getDrawingCache(false).","int getDrawingCacheBackgroundColor()","int getDrawingCacheQuality() Returns the quality of the drawing cache.","void getDrawingRect(Rect outRect) Return the visible drawing bounds of your view.","long getDrawingTime() Return the time at which the drawing of the view hierarchy started.","float getElevation() The base elevation of this view relative to its parent, in pixels.","boolean getFilterTouchesWhenObscured() Gets whether the framework should discard touches when the view's window is obscured by another visible window.","boolean getFitsSystemWindows() Check for state of setFitsSystemWindows(boolean).","ArrayList<View> getFocusables(int direction) Find and return all focusable views that are descendants of this view, possibly including this view if it is focusable itself.","void getFocusedRect(Rect r) When a view has focus and the user navigates away from it, the next view is searched for starting from the rectangle filled in by this method.","boolean getGlobalVisibleRect(Rect r, Point globalOffset) If some part of this view is not clipped by any of its parents, then return that area in r in global (root) coordinates.","final boolean getGlobalVisibleRect(Rect r)","Handler getHandler()","final int getHeight() Return the height of your view.","void getHitRect(Rect outRect) Hit rectangle in parent's coordinates","int getHorizontalFadingEdgeLength() Returns the size of the horizontal faded edges used to indicate that more content in this view is visible.","int getHorizontalScrollbarHeight() Returns the height of the horizontal scrollbar.","int getId() Returns this view's identifier.","int getImportantForAccessibility() Gets the mode for determining whether this View is important for accessibility which is if it fires accessibility events and if it is reported to accessibility services that query the screen.","boolean getKeepScreenOn() Returns whether the screen should remain on, corresponding to the current value of KEEP_SCREEN_ON.","KeyEvent.DispatcherState getKeyDispatcherState() Return the global KeyEvent.DispatcherState for this view's window.","int getLabelFor() Gets the id of a view for which this view serves as a label for accessibility purposes.","int getLayerType() Indicates what type of layer is currently associated with this view.","int getLayoutDirection() Returns the resolved layout direction for this view.","ViewGroup.LayoutParams getLayoutParams() Get the LayoutParams associated with this view.","final int getLeft() Left position of this view relative to its parent.","float getLeftFadingEdgeStrength() Returns the strength, or intensity, of the left faded edge.","int getLeftPaddingOffset() Amount by which to extend the left fading region.","final boolean getLocalVisibleRect(Rect r)","void getLocationInWindow(int[] location) Computes the coordinates of this view in its window.","void getLocationOnScreen(int[] location) Computes the coordinates of this view on the screen.","Matrix getMatrix() The transform matrix of this view, which is calculated based on the current rotation, scale, and pivot properties.","final int getMeasuredHeight() Like getMeasuredHeightAndState(), but only returns the raw width component (that is the result is masked by MEASURED_SIZE_MASK).","final int getMeasuredHeightAndState() Return the full height measurement information for this view as computed by the most recent call to measure(int, int).","final int getMeasuredState() Return only the state bits of getMeasuredWidthAndState() and getMeasuredHeightAndState(), combined into one integer.","final int getMeasuredWidth() Like getMeasuredWidthAndState(), but only returns the raw width component (that is the result is masked by MEASURED_SIZE_MASK).","final int getMeasuredWidthAndState() Return the full width measurement information for this view as computed by the most recent call to measure(int, int).","int getMinimumHeight() Returns the minimum height of the view.","int getMinimumWidth() Returns the minimum width of the view.","int getNextFocusDownId() Gets the id of the view to use when the next focus is FOCUS_DOWN.","int getNextFocusForwardId() Gets the id of the view to use when the next focus is FOCUS_FORWARD.","int getNextFocusLeftId() Gets the id of the view to use when the next focus is FOCUS_LEFT.","int getNextFocusRightId() Gets the id of the view to use when the next focus is FOCUS_RIGHT.","int getNextFocusUpId() Gets the id of the view to use when the next focus is FOCUS_UP.","View.OnFocusChangeListener getOnFocusChangeListener() Returns the focus-change callback registered for this view.","ViewOutlineProvider getOutlineProvider() Returns the current ViewOutlineProvider of the view, which generates the Outline that defines the shape of the shadow it casts, and enables outline clipping.","int getOverScrollMode() Returns the over-scroll mode for this view.","ViewOverlay getOverlay() Returns the overlay for this view, creating it if it does not yet exist.","int getPaddingBottom() Returns the bottom padding of this view.","int getPaddingEnd() Returns the end padding of this view depending on its resolved layout direction.","int getPaddingLeft() Returns the left padding of this view.","int getPaddingRight() Returns the right padding of this view.","int getPaddingStart() Returns the start padding of this view depending on its resolved layout direction.","int getPaddingTop() Returns the top padding of this view.","final ViewParent getParent() Gets the parent of this view.","ViewParent getParentForAccessibility() Gets the parent for accessibility purposes.","float getPivotX() The x location of the point around which the view is rotated and scaled.","float getPivotY() The y location of the point around which the view is rotated and scaled.","Resources getResources() Returns the resources associated with this view.","final int getRight() Right position of this view relative to its parent.","float getRightFadingEdgeStrength() Returns the strength, or intensity, of the right faded edge.","int getRightPaddingOffset() Amount by which to extend the right fading region.","View getRootView() Finds the topmost view in the current view hierarchy.","float getRotation() The degrees that the view is rotated around the pivot point.","float getRotationX() The degrees that the view is rotated around the horizontal axis through the pivot point.","float getRotationY() The degrees that the view is rotated around the vertical axis through the pivot point.","float getScaleX() The amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width.","float getScaleY() The amount that the view is scaled in y around the pivot point, as a proportion of the view's unscaled height.","int getScrollBarDefaultDelayBeforeFade() Returns the delay before scrollbars fade.","int getScrollBarFadeDuration() Returns the scrollbar fade duration.","int getScrollBarSize() Returns the scrollbar size.","int getScrollBarStyle() Returns the current scrollbar style.","final int getScrollX() Return the scrolled left position of this view.","final int getScrollY() Return the scrolled top position of this view.","int getSolidColor() Override this if your view is known to always be drawn on top of a solid color background, and needs to draw fading edges.","StateListAnimator getStateListAnimator() Returns the current StateListAnimator if exists.","int getSuggestedMinimumHeight() Returns the suggested minimum height that the view should use.","int getSuggestedMinimumWidth() Returns the suggested minimum width that the view should use.","int getSystemUiVisibility() Returns the last setSystemUiVisibility(int) that this view has requested.","Object getTag(int key) Returns the tag associated with this view and the specified key.","Object getTag() Returns this view's tag.","int getTextAlignment() Return the resolved text alignment.","int getTextDirection() Return the resolved text direction.","final int getTop() Top position of this view relative to its parent.","float getTopFadingEdgeStrength() Returns the strength, or intensity, of the top faded edge.","int getTopPaddingOffset() Amount by which to extend the top fading region.","TouchDelegate getTouchDelegate() Gets the TouchDelegate for this View.","ArrayList<View> getTouchables() Find and return all touchable views that are descendants of this view, possibly including this view if it is touchable itself.","String getTransitionName() Returns the name of the View to be used to identify Views in Transitions.","float getTranslationX() The horizontal location of this view relative to its left position.","float getTranslationY() The vertical location of this view relative to its top position.","float getTranslationZ() The depth location of this view relative to its elevation.","int getVerticalFadingEdgeLength() Returns the size of the vertical faded edges used to indicate that more content in this view is visible.","int getVerticalScrollbarPosition()","int getVerticalScrollbarWidth() Returns the width of the vertical scrollbar.","ViewTreeObserver getViewTreeObserver() Returns the ViewTreeObserver for this view's hierarchy.","int getVisibility() Returns the visibility status for this view.","final int getWidth() Return the width of the your view.","int getWindowAttachCount()","WindowId getWindowId() Retrieve the WindowId for the window this view is currently attached to.","int getWindowSystemUiVisibility() Returns the current system UI visibility that is currently set for the entire window.","IBinder getWindowToken() Retrieve a unique token identifying the window this view is attached to.","int getWindowVisibility() Returns the current visibility of the window this view is attached to (either GONE, INVISIBLE, or VISIBLE).","void getWindowVisibleDisplayFrame(Rect outRect) Retrieve the overall visible display size in which the window this view is attached to has been positioned in.","float getX() The visual x position of this view, in pixels.","float getY() The visual y position of this view, in pixels.","float getZ() The visual z position of this view, in pixels.","boolean hasFocus() Returns true if this view has focus iteself, or is the ancestor of the view that has focus.","boolean hasFocusable() Returns true if this view is focusable or if it contains a reachable View for which hasFocusable() returns true.","boolean hasNestedScrollingParent() Returns true if this view has a nested scrolling parent.","boolean hasOnClickListeners() Return whether this view has an attached OnClickListener.","boolean hasOverlappingRendering() Returns whether this View has content which overlaps.","boolean hasTransientState() Indicates whether the view is currently tracking transient state that the app should not need to concern itself with saving and restoring, but that the framework should take special note to preserve when possible.","boolean hasWindowFocus() Returns true if this view is in a window that currently has window focus.","static View inflate(Context context, int resource, ViewGroup root) Inflate a view from an XML resource.","void invalidate(Rect dirty) Mark the area defined by dirty as needing to be drawn.","void invalidate(int l, int t, int r, int b) Mark the area defined by the rect (l,t,r,b) as needing to be drawn.","void invalidate() Invalidate the whole view.","void invalidateDrawable(Drawable drawable) Invalidates the specified Drawable.","void invalidateOutline() Called to rebuild this View's Outline from its outline provider","boolean isAccessibilityFocused() Returns whether this View is accessibility focused.","boolean isActivated() Indicates the activation state of this view.","boolean isAttachedToWindow() Returns true if this view is currently attached to a window.","boolean isClickable() Indicates whether this view reacts to click events or not.","boolean isDirty() True if this view has changed since the last time being drawn.","boolean isDrawingCacheEnabled() Indicates whether the drawing cache is enabled for this view.","boolean isDuplicateParentStateEnabled() Indicates whether this duplicates its drawable state from its parent.","boolean isEnabled() Returns the enabled status for this view.","final boolean isFocusable() Returns whether this View is able to take focus.","final boolean isFocusableInTouchMode() When a view is focusable, it may not want to take focus when in touch mode.","boolean isFocused() Returns true if this view has focus","boolean isHapticFeedbackEnabled()","boolean isHardwareAccelerated() Indicates whether this view is attached to a hardware accelerated window or not.","boolean isHorizontalFadingEdgeEnabled() Indicate whether the horizontal edges are faded when the view is scrolled horizontally.","boolean isHorizontalScrollBarEnabled() Indicate whether the horizontal scrollbar should be drawn or not.","boolean isHovered() Returns true if the view is currently hovered.","boolean isImportantForAccessibility() Computes whether this view should be exposed for accessibility.","boolean isInEditMode() Indicates whether this View is currently in edit mode.","boolean isInLayout() Returns whether the view hierarchy is currently undergoing a layout pass.","boolean isInTouchMode() Returns whether the device is currently in touch mode.","boolean isLaidOut() Returns true if this view has been through at least one layout since it was last attached to or detached from a window.","boolean isLayoutDirectionResolved()","boolean isLayoutRequested() Indicates whether or not this view's layout will be requested during the next hierarchy layout pass.","boolean isLongClickable() Indicates whether this view reacts to long click events or not.","boolean isNestedScrollingEnabled() Returns true if nested scrolling is enabled for this view.","boolean isOpaque() Indicates whether this View is opaque.","boolean isPaddingOffsetRequired() If the View draws content inside its padding and enables fading edges, it needs to support padding offsets.","boolean isPaddingRelative() Return if the padding as been set thru relative values setPaddingRelative(int, int, int, int) or thru","boolean isPressed() Indicates whether the view is currently in pressed state.","boolean isSaveEnabled() Indicates whether this view will save its state (that is, whether its onSaveInstanceState() method will be called).","boolean isSaveFromParentEnabled() Indicates whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent.","boolean isScrollContainer() Indicates whether this view is one of the set of scrollable containers in its window.","boolean isScrollbarFadingEnabled() Returns true if scrollbars will fade when this view is not scrolling","boolean isSelected() Indicates the selection state of this view.","boolean isShown() Returns the visibility of this view and all of its ancestors","boolean isSoundEffectsEnabled()","boolean isTextAlignmentResolved()","boolean isTextDirectionResolved()","boolean isVerticalFadingEdgeEnabled() Indicate whether the vertical edges are faded when the view is scrolled horizontally.","boolean isVerticalScrollBarEnabled() Indicate whether the vertical scrollbar should be drawn or not.","void jumpDrawablesToCurrentState() Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view.","void layout(int l, int t, int r, int b) Assign a size and position to a view and all of its descendants This is the second phase of the layout mechanism.","final void measure(int widthMeasureSpec, int heightMeasureSpec) This is called to find out how big a view should be.","static int[] mergeDrawableStates(int[] baseState, int[] additionalState) Merge your own state values in additionalState into the base state values baseState that were returned by onCreateDrawableState(int).","void offsetLeftAndRight(int offset) Offset this view's horizontal location by the specified amount of pixels.","void offsetTopAndBottom(int offset) Offset this view's vertical location by the specified number of pixels.","void onAnimationEnd() Invoked by a parent ViewGroup to notify the end of the animation currently associated with this view.","void onAnimationStart() Invoked by a parent ViewGroup to notify the start of the animation currently associated with this view.","WindowInsets onApplyWindowInsets(WindowInsets insets) Called when the view should apply WindowInsets according to its internal policy.","void onAttachedToWindow() This is called when the view is attached to a window.","void onCancelPendingInputEvents() Called as the result of a call to cancelPendingInputEvents() on this view or a parent view.","boolean onCheckIsTextEditor() Check whether the called view is a text editor, in which case it would make sense to automatically display a soft input window for it.","void onConfigurationChanged(Configuration newConfig) Called when the current configuration of the resources being used by the application have changed.","void onCreateContextMenu(ContextMenu menu) Views should implement this if the view itself is going to add items to the context menu.","int[] onCreateDrawableState(int extraSpace) Generate the new Drawable state for this view.","InputConnection onCreateInputConnection(EditorInfo outAttrs) Create a new InputConnection for an InputMethod to interact with the view.","void onDetachedFromWindow() This is called when the view is detached from a window.","void onDisplayHint(int hint) Gives this view a hint about whether is displayed or not.","boolean onDragEvent(DragEvent event) Handles drag events sent by the system following a call to startDrag().","void onDraw(Canvas canvas) Implement this to do your drawing.","final void onDrawScrollBars(Canvas canvas) Request the drawing of the horizontal and the vertical scrollbar.","boolean onFilterTouchEventForSecurity(MotionEvent event) Filter the touch event to apply security policies.","void onFinishInflate() Finalize inflating a view from XML.","void onFinishTemporaryDetach() Called after onStartTemporaryDetach() when the container is done changing the view.","void onFocusChanged(boolean gainFocus, int direction, Rect previouslyFocusedRect) Called by the view system when the focus state of this view changes.","boolean onGenericMotionEvent(MotionEvent event) Implement this method to handle generic motion events.","void onHoverChanged(boolean hovered) Implement this method to handle hover state changes.","boolean onHoverEvent(MotionEvent event) Implement this method to handle hover events.","void onInitializeAccessibilityEvent(AccessibilityEvent event) Initializes an AccessibilityEvent with information about this View which is the event source.","void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info) Initializes an AccessibilityNodeInfo with information about this view.","boolean onKeyDown(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyDown(): perform press of the view when KEYCODE_DPAD_CENTER or KEYCODE_ENTER is released, if the view is enabled and clickable.","boolean onKeyLongPress(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyLongPress(): always returns false (doesn't handle the event).","boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event).","boolean onKeyPreIme(int keyCode, KeyEvent event) Handle a key event before it is processed by any input method associated with the view hierarchy.","boolean onKeyShortcut(int keyCode, KeyEvent event) Called on the focused view when a key shortcut event is not handled.","boolean onKeyUp(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyUp(): perform clicking of the view when KEYCODE_DPAD_CENTER or KEYCODE_ENTER is released.","void onLayout(boolean changed, int left, int top, int right, int bottom) Called from layout when this view should assign a size and position to each of its children.","void onMeasure(int widthMeasureSpec, int heightMeasureSpec) Measure the view and its content to determine the measured width and the measured height.","void onOverScrolled(int scrollX, int scrollY, boolean clampedX, boolean clampedY) Called by overScrollBy(int, int, int, int, int, int, int, int, boolean) to respond to the results of an over-scroll operation.","void onPopulateAccessibilityEvent(AccessibilityEvent event) Called from dispatchPopulateAccessibilityEvent(AccessibilityEvent) giving a chance to this View to populate the accessibility event with its text content.","void onRestoreInstanceState(Parcelable state) Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState().","void onRtlPropertiesChanged(int layoutDirection) Called when any RTL property (layout direction or text direction or text alignment) has been changed.","Parcelable onSaveInstanceState() Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state.","void onScreenStateChanged(int screenState) This method is called whenever the state of the screen this view is attached to changes.","void onScrollChanged(int l, int t, int oldl, int oldt) This is called in response to an internal scroll in this view (i.e., the view scrolled its own contents).","boolean onSetAlpha(int alpha) Invoked if there is a Transform that involves alpha.","void onSizeChanged(int w, int h, int oldw, int oldh) This is called during layout when the size of this view has changed.","void onStartTemporaryDetach() This is called when a container is going to temporarily detach a child, with ViewGroup.detachViewFromParent.","boolean onTouchEvent(MotionEvent event) Implement this method to handle touch screen motion events.","boolean onTrackballEvent(MotionEvent event) Implement this method to handle trackball motion events.","void onVisibilityChanged(View changedView, int visibility) Called when the visibility of the view or an ancestor of the view is changed.","void onWindowFocusChanged(boolean hasWindowFocus) Called when the window containing this view gains or loses focus.","void onWindowSystemUiVisibilityChanged(int visible) Override to find out when the window's requested system UI visibility has changed, that is the value returned by getWindowSystemUiVisibility().","void onWindowVisibilityChanged(int visibility) Called when the window containing has change its visibility (between GONE, INVISIBLE, and VISIBLE).","boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX, int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) Scroll the view with standard behavior for scrolling beyond the normal content boundaries.","boolean performAccessibilityAction(int action, Bundle arguments) Performs the specified accessibility action on the view.","boolean performClick() Call this view's OnClickListener, if it is defined.","boolean performHapticFeedback(int feedbackConstant) BZZZTT!!1! Provide haptic feedback to the user for this view.","boolean performHapticFeedback(int feedbackConstant, int flags) BZZZTT!!1! Like performHapticFeedback(int), with additional options.","boolean performLongClick() Call this view's OnLongClickListener, if it is defined.","void playSoundEffect(int soundConstant) Play a sound effect for this view.","boolean post(Runnable action) Causes the Runnable to be added to the message queue.","boolean postDelayed(Runnable action, long delayMillis) Causes the Runnable to be added to the message queue, to be run after the specified amount of time elapses.","void postInvalidate(int left, int top, int right, int bottom) Cause an invalidate of the specified area to happen on a subsequent cycle through the event loop.","void postInvalidate() Cause an invalidate to happen on a subsequent cycle through the event loop.","void postInvalidateDelayed(long delayMilliseconds, int left, int top, int right, int bottom) Cause an invalidate of the specified area to happen on a subsequent cycle through the event loop.","void postInvalidateDelayed(long delayMilliseconds) Cause an invalidate to happen on a subsequent cycle through the event loop.","void postInvalidateOnAnimation(int left, int top, int right, int bottom) Cause an invalidate of the specified area to happen on the next animation time step, typically the next display frame.","void postInvalidateOnAnimation() Cause an invalidate to happen on the next animation time step, typically the next display frame.","void postOnAnimation(Runnable action) Causes the Runnable to execute on the next animation time step.","void postOnAnimationDelayed(Runnable action, long delayMillis) Causes the Runnable to execute on the next animation time step, after the specified amount of time elapses.","void refreshDrawableState() Call this to force a view to update its drawable state.","boolean removeCallbacks(Runnable action) Removes the specified Runnable from the message queue.","void removeOnAttachStateChangeListener(View.OnAttachStateChangeListener listener) Remove a listener for attach state changes.","void removeOnLayoutChangeListener(View.OnLayoutChangeListener listener) Remove a listener for layout changes.","void requestApplyInsets() Ask that a new dispatch of onApplyWindowInsets(WindowInsets) be performed.","void requestFitSystemWindows() This method was deprecated in API level 20. Use requestApplyInsets() for newer platform versions.","boolean requestFocus(int direction, Rect previouslyFocusedRect) Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from.","final boolean requestFocus(int direction) Call this to try to give focus to a specific view or to one of its descendants and give it a hint about what direction focus is heading.","final boolean requestFocus() Call this to try to give focus to a specific view or to one of its descendants.","final boolean requestFocusFromTouch() Call this to try to give focus to a specific view or to one of its descendants.","void requestLayout() Call this when something has changed which has invalidated the layout of this view.","boolean requestRectangleOnScreen(Rect rectangle) Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough.","boolean requestRectangleOnScreen(Rect rectangle, boolean immediate) Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough.","final void requestUnbufferedDispatch(MotionEvent event) Request unbuffered dispatch of the given stream of MotionEvents to this View.","static int resolveSize(int size, int measureSpec) Version of resolveSizeAndState(int, int, int) returning only the MEASURED_SIZE_MASK bits of the result.","static int resolveSizeAndState(int size, int measureSpec, int childMeasuredState) Utility to reconcile a desired size and state, with constraints imposed by a MeasureSpec.","void restoreHierarchyState(SparseArray<Parcelable> container) Restore this view hierarchy's frozen state from the given container.","void saveHierarchyState(SparseArray<Parcelable> container) Store this view hierarchy's frozen state into the given container.","void scheduleDrawable(Drawable who, Runnable what, long when) Schedules an action on a drawable to occur at a specified time.","void scrollBy(int x, int y) Move the scrolled position of your view.","void scrollTo(int x, int y) Set the scrolled position of your view.","void sendAccessibilityEvent(int eventType) Sends an accessibility event of the given type.","void sendAccessibilityEventUnchecked(AccessibilityEvent event) This method behaves exactly as sendAccessibilityEvent(int) but takes as an argument an empty AccessibilityEvent and does not perform a check whether accessibility is enabled.","void setAccessibilityDelegate(View.AccessibilityDelegate delegate) Sets a delegate for implementing accessibility support via composition as opposed to inheritance.","void setAccessibilityLiveRegion(int mode) Sets the live region mode for this view.","void setActivated(boolean activated) Changes the activated state of this view.","void setAlpha(float alpha) Sets the opacity of the view.","void setAnimation(Animation animation) Sets the next animation to play for this view.","void setBackground(Drawable background) Set the background to a given Drawable, or remove the background.","void setBackgroundColor(int color) Sets the background color for this view.","void setBackgroundDrawable(Drawable background) This method was deprecated in API level 16. use setBackground(Drawable) instead","void setBackgroundResource(int resid) Set the background to a given resource.","void setBackgroundTintList(ColorStateList tint) Applies a tint to the background drawable.","void setBackgroundTintMode(PorterDuff.Mode tintMode) Specifies the blending mode used to apply the tint specified by setBackgroundTintList(ColorStateList)} to the background drawable.","final void setBottom(int bottom) Sets the bottom position of this view relative to its parent.","void setCameraDistance(float distance) Sets the distance along the Z axis (orthogonal to the X/Y plane on which views are drawn) from the camera to this view.","void setClickable(boolean clickable) Enables or disables click events for this view.","void setClipBounds(Rect clipBounds) Sets a rectangular area on this view to which the view will be clipped when it is drawn.","void setClipToOutline(boolean clipToOutline) Sets whether the View's Outline should be used to clip the contents of the View.","void setContentDescription(CharSequence contentDescription) Sets the View description.","void setDrawingCacheBackgroundColor(int color) Setting a solid background color for the drawing cache's bitmaps will improve performance and memory usage.","void setDrawingCacheEnabled(boolean enabled) Enables or disables the drawing cache.","void setDrawingCacheQuality(int quality) Set the drawing cache quality of this view.","void setDuplicateParentStateEnabled(boolean enabled) Enables or disables the duplication of the parent's state into this view.","void setElevation(float elevation) Sets the base elevation of this view, in pixels.","void setEnabled(boolean enabled) Set the enabled state of this view.","void setFadingEdgeLength(int length) Set the size of the faded edge used to indicate that more content in this view is available.","void setFilterTouchesWhenObscured(boolean enabled) Sets whether the framework should discard touches when the view's window is obscured by another visible window.","void setFitsSystemWindows(boolean fitSystemWindows) Sets whether or not this view should account for system screen decorations such as the status bar and inset its content; that is, controlling whether the default implementation of fitSystemWindows(Rect) will be executed.","void setFocusable(boolean focusable) Set whether this view can receive the focus.","void setFocusableInTouchMode(boolean focusableInTouchMode) Set whether this view can receive focus while in touch mode.","void setHapticFeedbackEnabled(boolean hapticFeedbackEnabled) Set whether this view should have haptic feedback for events such as long presses.","void setHasTransientState(boolean hasTransientState) Set whether this view is currently tracking transient state that the framework should attempt to preserve when possible.","void setHorizontalFadingEdgeEnabled(boolean horizontalFadingEdgeEnabled) Define whether the horizontal edges should be faded when this view is scrolled horizontally.","void setHorizontalScrollBarEnabled(boolean horizontalScrollBarEnabled) Define whether the horizontal scrollbar should be drawn or not.","void setHovered(boolean hovered) Sets whether the view is currently hovered.","void setId(int id) Sets the identifier for this view.","void setImportantForAccessibility(int mode) Sets how to determine whether this view is important for accessibility which is if it fires accessibility events and if it is reported to accessibility services that query the screen.","void setKeepScreenOn(boolean keepScreenOn) Controls whether the screen should remain on, modifying the value of KEEP_SCREEN_ON.","void setLabelFor(int id) Sets the id of a view for which this view serves as a label for accessibility purposes.","void setLayerPaint(Paint paint) Updates the Paint object used with the current layer (used only if the current layer type is not set to LAYER_TYPE_NONE).","void setLayerType(int layerType, Paint paint) Specifies the type of layer backing this view.","void setLayoutDirection(int layoutDirection) Set the layout direction for this view.","void setLayoutParams(ViewGroup.LayoutParams params) Set the layout parameters associated with this view.","final void setLeft(int left) Sets the left position of this view relative to its parent.","void setLongClickable(boolean longClickable) Enables or disables long click events for this view.","final void setMeasuredDimension(int measuredWidth, int measuredHeight) This method must be called by onMeasure(int, int) to store the measured width and measured height.","void setMinimumHeight(int minHeight) Sets the minimum height of the view.","void setMinimumWidth(int minWidth) Sets the minimum width of the view.","void setNestedScrollingEnabled(boolean enabled) Enable or disable nested scrolling for this view.","void setNextFocusDownId(int nextFocusDownId) Sets the id of the view to use when the next focus is FOCUS_DOWN.","void setNextFocusForwardId(int nextFocusForwardId) Sets the id of the view to use when the next focus is FOCUS_FORWARD.","void setNextFocusLeftId(int nextFocusLeftId) Sets the id of the view to use when the next focus is FOCUS_LEFT.","void setNextFocusRightId(int nextFocusRightId) Sets the id of the view to use when the next focus is FOCUS_RIGHT.","void setNextFocusUpId(int nextFocusUpId) Sets the id of the view to use when the next focus is FOCUS_UP.","void setOnApplyWindowInsetsListener(View.OnApplyWindowInsetsListener listener) Set an View.OnApplyWindowInsetsListener to take over the policy for applying window insets to this view.","void setOnClickListener(View.OnClickListener l) Register a callback to be invoked when this view is clicked.","void setOnCreateContextMenuListener(View.OnCreateContextMenuListener l) Register a callback to be invoked when the context menu for this view is being built.","void setOnDragListener(View.OnDragListener l) Register a drag event listener callback object for this View.","void setOnFocusChangeListener(View.OnFocusChangeListener l) Register a callback to be invoked when focus of this view changed.","void setOnGenericMotionListener(View.OnGenericMotionListener l) Register a callback to be invoked when a generic motion event is sent to this view.","void setOnHoverListener(View.OnHoverListener l) Register a callback to be invoked when a hover event is sent to this view.","void setOnKeyListener(View.OnKeyListener l) Register a callback to be invoked when a hardware key is pressed in this view.","void setOnLongClickListener(View.OnLongClickListener l) Register a callback to be invoked when this view is clicked and held.","void setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener l) Set a listener to receive callbacks when the visibility of the system bar changes.","void setOnTouchListener(View.OnTouchListener l) Register a callback to be invoked when a touch event is sent to this view.","void setOutlineProvider(ViewOutlineProvider provider) Sets the ViewOutlineProvider of the view, which generates the Outline that defines the shape of the shadow it casts, and enables outline clipping.","void setOverScrollMode(int overScrollMode) Set the over-scroll mode for this view.","void setPadding(int left, int top, int right, int bottom) Sets the padding.","void setPaddingRelative(int start, int top, int end, int bottom) Sets the relative padding.","void setPivotX(float pivotX) Sets the x location of the point around which the view is rotated and scaled.","void setPivotY(float pivotY) Sets the y location of the point around which the view is rotated and scaled.","void setPressed(boolean pressed) Sets the pressed state for this view.","final void setRight(int right) Sets the right position of this view relative to its parent.","void setRotation(float rotation) Sets the degrees that the view is rotated around the pivot point.","void setRotationX(float rotationX) Sets the degrees that the view is rotated around the horizontal axis through the pivot point.","void setRotationY(float rotationY) Sets the degrees that the view is rotated around the vertical axis through the pivot point.","void setSaveEnabled(boolean enabled) Controls whether the saving of this view's state is enabled (that is, whether its onSaveInstanceState() method will be called).","void setSaveFromParentEnabled(boolean enabled) Controls whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent.","void setScaleX(float scaleX) Sets the amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width.","void setScaleY(float scaleY) Sets the amount that the view is scaled in Y around the pivot point, as a proportion of the view's unscaled width.","void setScrollBarDefaultDelayBeforeFade(int scrollBarDefaultDelayBeforeFade) Define the delay before scrollbars fade.","void setScrollBarFadeDuration(int scrollBarFadeDuration) Define the scrollbar fade duration.","void setScrollBarSize(int scrollBarSize) Define the scrollbar size.","void setScrollBarStyle(int style) Specify the style of the scrollbars.","void setScrollContainer(boolean isScrollContainer) Change whether this view is one of the set of scrollable containers in its window.","void setScrollX(int value) Set the horizontal scrolled position of your view.","void setScrollY(int value) Set the vertical scrolled position of your view.","void setScrollbarFadingEnabled(boolean fadeScrollbars) Define whether scrollbars will fade when the view is not scrolling.","void setSelected(boolean selected) Changes the selection state of this view.","void setSoundEffectsEnabled(boolean soundEffectsEnabled) Set whether this view should have sound effects enabled for events such as clicking and touching.","void setStateListAnimator(StateListAnimator stateListAnimator) Attaches the provided StateListAnimator to this View.","void setSystemUiVisibility(int visibility) Request that the visibility of the status bar or other screen/window decorations be changed.","void setTag(int key, Object tag) Sets a tag associated with this view and a key.","void setTag(Object tag) Sets the tag associated with this view.","void setTextAlignment(int textAlignment) Set the text alignment.","void setTextDirection(int textDirection) Set the text direction.","final void setTop(int top) Sets the top position of this view relative to its parent.","void setTouchDelegate(TouchDelegate delegate) Sets the TouchDelegate for this View.","final void setTransitionName(String transitionName) Sets the name of the View to be used to identify Views in Transitions.","void setTranslationX(float translationX) Sets the horizontal location of this view relative to its left position.","void setTranslationY(float translationY) Sets the vertical location of this view relative to its top position.","void setTranslationZ(float translationZ) Sets the depth location of this view relative to its elevation.","void setVerticalFadingEdgeEnabled(boolean verticalFadingEdgeEnabled) Define whether the vertical edges should be faded when this view is scrolled vertically.","void setVerticalScrollBarEnabled(boolean verticalScrollBarEnabled) Define whether the vertical scrollbar should be drawn or not.","void setVerticalScrollbarPosition(int position) Set the position of the vertical scroll bar.","void setVisibility(int visibility) Set the enabled state of this view.","void setWillNotCacheDrawing(boolean willNotCacheDrawing) When a View's drawing cache is enabled, drawing is redirected to an offscreen bitmap.","void setWillNotDraw(boolean willNotDraw) If this view doesn't do any drawing on its own, set this flag to allow further optimizations.","void setX(float x) Sets the visual x position of this view, in pixels.","void setY(float y) Sets the visual y position of this view, in pixels.","void setZ(float z) Sets the visual z position of this view, in pixels.","boolean showContextMenu() Bring up the context menu for this view.","ActionMode startActionMode(ActionMode.Callback callback) Start an action mode.","void startAnimation(Animation animation) Start the specified animation now.","final boolean startDrag(ClipData data, View.DragShadowBuilder shadowBuilder, Object myLocalState, int flags) Starts a drag and drop operation.","boolean startNestedScroll(int axes) Begin a nestable scroll operation along the given axes.","void stopNestedScroll() Stop a nested scroll in progress.","String toString() Returns a string containing a concise, human-readable description of this object.","void unscheduleDrawable(Drawable who) Unschedule any events associated with the given Drawable.","void unscheduleDrawable(Drawable who, Runnable what) Cancels a scheduled action on a drawable.","boolean verifyDrawable(Drawable who) If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying.","boolean willNotCacheDrawing() Returns whether or not this View can cache its drawing or not.","boolean willNotDraw() Returns whether or not this View draws on its own.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface android.graphics.drawable.Drawable.Callback abstract void invalidateDrawable(Drawable who) Called when the drawable needs to be redrawn. abstract void scheduleDrawable(Drawable who, Runnable what, long when) A Drawable can call this to schedule the next frame of its animation. abstract void unscheduleDrawable(Drawable who, Runnable what) A Drawable can call this to unschedule an action previously scheduled with scheduleDrawable(Drawable, Runnable, long).","abstract void invalidateDrawable(Drawable who) Called when the drawable needs to be redrawn.","abstract void scheduleDrawable(Drawable who, Runnable what, long when) A Drawable can call this to schedule the next frame of its animation.","abstract void unscheduleDrawable(Drawable who, Runnable what) A Drawable can call this to unschedule an action previously scheduled with scheduleDrawable(Drawable, Runnable, long).","From interface android.view.KeyEvent.Callback abstract boolean onKeyDown(int keyCode, KeyEvent event) Called when a key down event has occurred. abstract boolean onKeyLongPress(int keyCode, KeyEvent event) Called when a long press has occurred. abstract boolean onKeyMultiple(int keyCode, int count, KeyEvent event) Called when multiple down/up pairs of the same key have occurred in a row. abstract boolean onKeyUp(int keyCode, KeyEvent event) Called when a key up event has occurred.","abstract boolean onKeyDown(int keyCode, KeyEvent event) Called when a key down event has occurred.","abstract boolean onKeyLongPress(int keyCode, KeyEvent event) Called when a long press has occurred.","abstract boolean onKeyMultiple(int keyCode, int count, KeyEvent event) Called when multiple down/up pairs of the same key have occurred in a row.","abstract boolean onKeyUp(int keyCode, KeyEvent event) Called when a key up event has occurred.","From interface android.view.ViewManager abstract void addView(View view, ViewGroup.LayoutParams params) Assign the passed LayoutParams to the passed View and add the view to the window. abstract void removeView(View view) abstract void updateViewLayout(View view, ViewGroup.LayoutParams params)","abstract void addView(View view, ViewGroup.LayoutParams params) Assign the passed LayoutParams to the passed View and add the view to the window.","abstract void removeView(View view)","abstract void updateViewLayout(View view, ViewGroup.LayoutParams params)","From interface android.view.ViewParent abstract void bringChildToFront(View child) Change the z order of the child so it's on top of all other children. abstract boolean canResolveLayoutDirection() Tells if this view parent can resolve the layout direction. abstract boolean canResolveTextAlignment() Tells if this view parent can resolve the text alignment. abstract boolean canResolveTextDirection() Tells if this view parent can resolve the text direction. abstract void childDrawableStateChanged(View child) This method is called on the parent when a child's drawable state has changed. abstract void childHasTransientStateChanged(View child, boolean hasTransientState) Called when a child view now has or no longer is tracking transient state. abstract void clearChildFocus(View child) Called when a child of this parent is giving up focus abstract void createContextMenu(ContextMenu menu) Have the parent populate the specified context menu if it has anything to add (and then recurse on its parent). abstract View focusSearch(View v, int direction) Find the nearest view in the specified direction that wants to take focus abstract void focusableViewAvailable(View v) Tells the parent that a new focusable view has become available. abstract boolean getChildVisibleRect(View child, Rect r, Point offset) Compute the visible part of a rectangular region defined in terms of a child view's coordinates. abstract int getLayoutDirection() Return this view parent layout direction. abstract ViewParent getParent() Returns the parent if it exists, or null. abstract ViewParent getParentForAccessibility() Gets the parent of a given View for accessibility. abstract int getTextAlignment() Return this view parent text alignment. abstract int getTextDirection() Return this view parent text direction. abstract void invalidateChild(View child, Rect r) All or part of a child is dirty and needs to be redrawn. abstract ViewParent invalidateChildInParent(int[] location, Rect r) All or part of a child is dirty and needs to be redrawn. abstract boolean isLayoutDirectionResolved() Tells if this view parent layout direction is resolved. abstract boolean isLayoutRequested() Indicates whether layout was requested on this view parent. abstract boolean isTextAlignmentResolved() Tells if this view parent text alignment is resolved. abstract boolean isTextDirectionResolved() Tells if this view parent text direction is resolved. abstract void notifySubtreeAccessibilityStateChanged(View child, View source, int changeType) Notifies a view parent that the accessibility state of one of its descendants has changed and that the structure of the subtree is different. abstract boolean onNestedFling(View target, float velocityX, float velocityY, boolean consumed) Request a fling from a nested scroll. abstract boolean onNestedPreFling(View target, float velocityX, float velocityY) React to a nested fling before the target view consumes it. abstract void onNestedPreScroll(View target, int dx, int dy, int[] consumed) React to a nested scroll in progress before the target view consumes a portion of the scroll. abstract void onNestedScroll(View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) React to a nested scroll in progress. abstract void onNestedScrollAccepted(View child, View target, int nestedScrollAxes) React to the successful claiming of a nested scroll operation. abstract boolean onStartNestedScroll(View child, View target, int nestedScrollAxes) React to a descendant view initiating a nestable scroll operation, claiming the nested scroll operation if appropriate. abstract void onStopNestedScroll(View target) React to a nested scroll operation ending. abstract void recomputeViewAttributes(View child) Tell view hierarchy that the global view attributes need to be re-evaluated. abstract void requestChildFocus(View child, View focused) Called when a child of this parent wants focus abstract boolean requestChildRectangleOnScreen(View child, Rect rectangle, boolean immediate) Called when a child of this group wants a particular rectangle to be positioned onto the screen. abstract void requestDisallowInterceptTouchEvent(boolean disallowIntercept) Called when a child does not want this parent and its ancestors to intercept touch events with onInterceptTouchEvent(MotionEvent). abstract void requestFitSystemWindows() Ask that a new dispatch of View.fitSystemWindows(Rect) be performed. abstract void requestLayout() Called when something has changed which has invalidated the layout of a child of this view parent. abstract boolean requestSendAccessibilityEvent(View child, AccessibilityEvent event) Called by a child to request from its parent to send an AccessibilityEvent. abstract void requestTransparentRegion(View child) Called when a child wants the view hierarchy to gather and report transparent regions to the window compositor. abstract boolean showContextMenuForChild(View originalView) Bring up a context menu for the specified view or its ancestors. abstract ActionMode startActionModeForChild(View originalView, ActionMode.Callback callback) Start an action mode for the specified view.","abstract void bringChildToFront(View child) Change the z order of the child so it's on top of all other children.","abstract boolean canResolveLayoutDirection() Tells if this view parent can resolve the layout direction.","abstract boolean canResolveTextAlignment() Tells if this view parent can resolve the text alignment.","abstract boolean canResolveTextDirection() Tells if this view parent can resolve the text direction.","abstract void childDrawableStateChanged(View child) This method is called on the parent when a child's drawable state has changed.","abstract void childHasTransientStateChanged(View child, boolean hasTransientState) Called when a child view now has or no longer is tracking transient state.","abstract void clearChildFocus(View child) Called when a child of this parent is giving up focus","abstract void createContextMenu(ContextMenu menu) Have the parent populate the specified context menu if it has anything to add (and then recurse on its parent).","abstract View focusSearch(View v, int direction) Find the nearest view in the specified direction that wants to take focus","abstract void focusableViewAvailable(View v) Tells the parent that a new focusable view has become available.","abstract boolean getChildVisibleRect(View child, Rect r, Point offset) Compute the visible part of a rectangular region defined in terms of a child view's coordinates.","abstract int getLayoutDirection() Return this view parent layout direction.","abstract ViewParent getParent() Returns the parent if it exists, or null.","abstract ViewParent getParentForAccessibility() Gets the parent of a given View for accessibility.","abstract int getTextAlignment() Return this view parent text alignment.","abstract int getTextDirection() Return this view parent text direction.","abstract void invalidateChild(View child, Rect r) All or part of a child is dirty and needs to be redrawn.","abstract ViewParent invalidateChildInParent(int[] location, Rect r) All or part of a child is dirty and needs to be redrawn.","abstract boolean isLayoutDirectionResolved() Tells if this view parent layout direction is resolved.","abstract boolean isLayoutRequested() Indicates whether layout was requested on this view parent.","abstract boolean isTextAlignmentResolved() Tells if this view parent text alignment is resolved.","abstract boolean isTextDirectionResolved() Tells if this view parent text direction is resolved.","abstract void notifySubtreeAccessibilityStateChanged(View child, View source, int changeType) Notifies a view parent that the accessibility state of one of its descendants has changed and that the structure of the subtree is different.","abstract boolean onNestedFling(View target, float velocityX, float velocityY, boolean consumed) Request a fling from a nested scroll.","abstract boolean onNestedPreFling(View target, float velocityX, float velocityY) React to a nested fling before the target view consumes it.","abstract void onNestedPreScroll(View target, int dx, int dy, int[] consumed) React to a nested scroll in progress before the target view consumes a portion of the scroll.","abstract void onNestedScroll(View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) React to a nested scroll in progress.","abstract void onNestedScrollAccepted(View child, View target, int nestedScrollAxes) React to the successful claiming of a nested scroll operation.","abstract boolean onStartNestedScroll(View child, View target, int nestedScrollAxes) React to a descendant view initiating a nestable scroll operation, claiming the nested scroll operation if appropriate.","abstract void onStopNestedScroll(View target) React to a nested scroll operation ending.","abstract void recomputeViewAttributes(View child) Tell view hierarchy that the global view attributes need to be re-evaluated.","abstract void requestChildFocus(View child, View focused) Called when a child of this parent wants focus","abstract boolean requestChildRectangleOnScreen(View child, Rect rectangle, boolean immediate) Called when a child of this group wants a particular rectangle to be positioned onto the screen.","abstract void requestDisallowInterceptTouchEvent(boolean disallowIntercept) Called when a child does not want this parent and its ancestors to intercept touch events with onInterceptTouchEvent(MotionEvent).","abstract void requestFitSystemWindows() Ask that a new dispatch of View.fitSystemWindows(Rect) be performed.","abstract void requestLayout() Called when something has changed which has invalidated the layout of a child of this view parent.","abstract boolean requestSendAccessibilityEvent(View child, AccessibilityEvent event) Called by a child to request from its parent to send an AccessibilityEvent.","abstract void requestTransparentRegion(View child) Called when a child wants the view hierarchy to gather and report transparent regions to the window compositor.","abstract boolean showContextMenuForChild(View originalView) Bring up a context menu for the specified view or its ancestors.","abstract ActionMode startActionModeForChild(View originalView, ActionMode.Callback callback) Start an action mode for the specified view.","From interface android.view.accessibility.AccessibilityEventSource abstract void sendAccessibilityEvent(int eventType) Handles the request for sending an AccessibilityEvent given the event type. abstract void sendAccessibilityEventUnchecked(AccessibilityEvent event) Handles the request for sending an AccessibilityEvent.","abstract void sendAccessibilityEvent(int eventType) Handles the request for sending an AccessibilityEvent given the event type.","abstract void sendAccessibilityEventUnchecked(AccessibilityEvent event) Handles the request for sending an AccessibilityEvent."],"package":"android.support.v17.leanback.widget","constants":["int FOCUS_SCROLL_ALIGNED Always keep focused item at a aligned position.","int FOCUS_SCROLL_ITEM Scroll to make the focused item inside client area.","int FOCUS_SCROLL_PAGE Scroll a page of items when focusing to item outside the client area.","float ITEM_ALIGN_OFFSET_PERCENT_DISABLED Value indicates that percent is not used.","int SAVE_ALL_CHILD Save on screen views plus save off screen child views without any limitation.","int SAVE_LIMITED_CHILD Save on screen views plus save off screen child views states up to getSaveChildrenLimitNumber().","int SAVE_NO_CHILD Dont save states of any child views.","int SAVE_ON_SCREEN_CHILD Only save on screen child views, the states are lost when they become off screen.","int WINDOW_ALIGN_BOTH_EDGE The first item and last item are aligned with the two edges of the viewport.","int WINDOW_ALIGN_HIGH_EDGE The last item is aligned with the high edge of the viewport when navigating to the end of list.","int WINDOW_ALIGN_LOW_EDGE The first item is aligned with the low edge of the viewport.","int WINDOW_ALIGN_NO_EDGE The focused item always stays in a middle location.","float WINDOW_ALIGN_OFFSET_PERCENT_DISABLED Value indicates that percent is not used.","[Expand] Inherited Constants","From class android.support.v7.widget.RecyclerView int HORIZONTAL int INVALID_TYPE long NO_ID int NO_POSITION int SCROLL_STATE_DRAGGING The RecyclerView is currently being dragged by outside input such as user touch input. int SCROLL_STATE_IDLE The RecyclerView is not currently scrolling. int SCROLL_STATE_SETTLING The RecyclerView is currently animating to a final position while not under outside control. int VERTICAL","int HORIZONTAL","int INVALID_TYPE","long NO_ID","int NO_POSITION","int SCROLL_STATE_DRAGGING The RecyclerView is currently being dragged by outside input such as user touch input.","int SCROLL_STATE_IDLE The RecyclerView is not currently scrolling.","int SCROLL_STATE_SETTLING The RecyclerView is currently animating to a final position while not under outside control.","int VERTICAL","From class android.view.ViewGroup int CLIP_TO_PADDING_MASK We clip to padding when FLAG_CLIP_TO_PADDING and FLAG_PADDING_NOT_NULL are set at the same time. int FOCUS_AFTER_DESCENDANTS This view will get focus only if none of its descendants want it. int FOCUS_BEFORE_DESCENDANTS This view will get focus before any of its descendants. int FOCUS_BLOCK_DESCENDANTS This view will block any of its descendants from getting focus, even if they are focusable. int LAYOUT_MODE_CLIP_BOUNDS This constant is a layoutMode. int LAYOUT_MODE_OPTICAL_BOUNDS This constant is a layoutMode. int PERSISTENT_ALL_CACHES Used to indicate that all drawing caches should be kept in memory. int PERSISTENT_ANIMATION_CACHE Used to indicate that the animation drawing cache should be kept in memory. int PERSISTENT_NO_CACHE Used to indicate that no drawing cache should be kept in memory. int PERSISTENT_SCROLLING_CACHE Used to indicate that the scrolling drawing cache should be kept in memory.","int CLIP_TO_PADDING_MASK We clip to padding when FLAG_CLIP_TO_PADDING and FLAG_PADDING_NOT_NULL are set at the same time.","int FOCUS_AFTER_DESCENDANTS This view will get focus only if none of its descendants want it.","int FOCUS_BEFORE_DESCENDANTS This view will get focus before any of its descendants.","int FOCUS_BLOCK_DESCENDANTS This view will block any of its descendants from getting focus, even if they are focusable.","int LAYOUT_MODE_CLIP_BOUNDS This constant is a layoutMode.","int LAYOUT_MODE_OPTICAL_BOUNDS This constant is a layoutMode.","int PERSISTENT_ALL_CACHES Used to indicate that all drawing caches should be kept in memory.","int PERSISTENT_ANIMATION_CACHE Used to indicate that the animation drawing cache should be kept in memory.","int PERSISTENT_NO_CACHE Used to indicate that no drawing cache should be kept in memory.","int PERSISTENT_SCROLLING_CACHE Used to indicate that the scrolling drawing cache should be kept in memory.","From class android.view.View int ACCESSIBILITY_LIVE_REGION_ASSERTIVE Live region mode specifying that accessibility services should interrupt ongoing speech to immediately announce changes to this view. int ACCESSIBILITY_LIVE_REGION_NONE Live region mode specifying that accessibility services should not automatically announce changes to this view. int ACCESSIBILITY_LIVE_REGION_POLITE Live region mode specifying that accessibility services should announce changes to this view. int DRAWING_CACHE_QUALITY_AUTO Enables automatic quality mode for the drawing cache. int DRAWING_CACHE_QUALITY_HIGH Enables high quality mode for the drawing cache. int DRAWING_CACHE_QUALITY_LOW Enables low quality mode for the drawing cache. int FIND_VIEWS_WITH_CONTENT_DESCRIPTION Find find views that contain the specified content description. int FIND_VIEWS_WITH_TEXT Find views that render the specified text. int FOCUSABLES_ALL View flag indicating whether addFocusables(ArrayList, int, int) should add all focusable Views regardless if they are focusable in touch mode. int FOCUSABLES_TOUCH_MODE View flag indicating whether addFocusables(ArrayList, int, int) should add only Views focusable in touch mode. int FOCUS_BACKWARD Use with focusSearch(int). int FOCUS_DOWN Use with focusSearch(int). int FOCUS_FORWARD Use with focusSearch(int). int FOCUS_LEFT Use with focusSearch(int). int FOCUS_RIGHT Use with focusSearch(int). int FOCUS_UP Use with focusSearch(int). int GONE This view is invisible, and it doesn't take any space for layout purposes. int HAPTIC_FEEDBACK_ENABLED View flag indicating whether this view should have haptic feedback enabled for events such as long presses. int IMPORTANT_FOR_ACCESSIBILITY_AUTO Automatically determine whether a view is important for accessibility. int IMPORTANT_FOR_ACCESSIBILITY_NO The view is not important for accessibility. int IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS The view is not important for accessibility, nor are any of its descendant views. int IMPORTANT_FOR_ACCESSIBILITY_YES The view is important for accessibility. int INVISIBLE This view is invisible, but it still takes up space for layout purposes. int KEEP_SCREEN_ON View flag indicating that the screen should remain on while the window containing this view is visible to the user. int LAYER_TYPE_HARDWARE Indicates that the view has a hardware layer. int LAYER_TYPE_NONE Indicates that the view does not have a layer. int LAYER_TYPE_SOFTWARE Indicates that the view has a software layer. int LAYOUT_DIRECTION_INHERIT Horizontal layout direction of this view is inherited from its parent. int LAYOUT_DIRECTION_LOCALE Horizontal layout direction of this view is from deduced from the default language script for the locale. int LAYOUT_DIRECTION_LTR Horizontal layout direction of this view is from Left to Right. int LAYOUT_DIRECTION_RTL Horizontal layout direction of this view is from Right to Left. int MEASURED_HEIGHT_STATE_SHIFT Bit shift of MEASURED_STATE_MASK to get to the height bits for functions that combine both width and height into a single int, such as getMeasuredState() and the childState argument of resolveSizeAndState(int, int, int). int MEASURED_SIZE_MASK Bits of getMeasuredWidthAndState() and getMeasuredWidthAndState() that provide the actual measured size. int MEASURED_STATE_MASK Bits of getMeasuredWidthAndState() and getMeasuredWidthAndState() that provide the additional state bits. int MEASURED_STATE_TOO_SMALL Bit of getMeasuredWidthAndState() and getMeasuredWidthAndState() that indicates the measured size is smaller that the space the view would like to have. int NO_ID Used to mark a View that has no ID. int OVER_SCROLL_ALWAYS Always allow a user to over-scroll this view, provided it is a view that can scroll. int OVER_SCROLL_IF_CONTENT_SCROLLS Allow a user to over-scroll this view only if the content is large enough to meaningfully scroll, provided it is a view that can scroll. int OVER_SCROLL_NEVER Never allow a user to over-scroll this view. int SCREEN_STATE_OFF Indicates that the screen has changed state and is now off. int SCREEN_STATE_ON Indicates that the screen has changed state and is now on. int SCROLLBARS_INSIDE_INSET The scrollbar style to display the scrollbars inside the padded area, increasing the padding of the view. int SCROLLBARS_INSIDE_OVERLAY The scrollbar style to display the scrollbars inside the content area, without increasing the padding. int SCROLLBARS_OUTSIDE_INSET The scrollbar style to display the scrollbars at the edge of the view, increasing the padding of the view. int SCROLLBARS_OUTSIDE_OVERLAY The scrollbar style to display the scrollbars at the edge of the view, without increasing the padding. int SCROLLBAR_POSITION_DEFAULT Position the scroll bar at the default position as determined by the system. int SCROLLBAR_POSITION_LEFT Position the scroll bar along the left edge. int SCROLLBAR_POSITION_RIGHT Position the scroll bar along the right edge. int SCROLL_AXIS_HORIZONTAL Indicates scrolling along the horizontal axis. int SCROLL_AXIS_NONE Indicates no axis of view scrolling. int SCROLL_AXIS_VERTICAL Indicates scrolling along the vertical axis. int SOUND_EFFECTS_ENABLED View flag indicating whether this view should have sound effects enabled for events such as clicking and touching. int STATUS_BAR_HIDDEN This constant was deprecated in API level 14. Use SYSTEM_UI_FLAG_LOW_PROFILE instead. int STATUS_BAR_VISIBLE This constant was deprecated in API level 14. Use SYSTEM_UI_FLAG_VISIBLE instead. int SYSTEM_UI_FLAG_FULLSCREEN Flag for setSystemUiVisibility(int): View has requested to go into the normal fullscreen mode so that its content can take over the screen while still allowing the user to interact with the application. int SYSTEM_UI_FLAG_HIDE_NAVIGATION Flag for setSystemUiVisibility(int): View has requested that the system navigation be temporarily hidden. int SYSTEM_UI_FLAG_IMMERSIVE Flag for setSystemUiVisibility(int): View would like to remain interactive when hiding the navigation bar with SYSTEM_UI_FLAG_HIDE_NAVIGATION. int SYSTEM_UI_FLAG_IMMERSIVE_STICKY Flag for setSystemUiVisibility(int): View would like to remain interactive when hiding the status bar with SYSTEM_UI_FLAG_FULLSCREEN and/or hiding the navigation bar with SYSTEM_UI_FLAG_HIDE_NAVIGATION. int SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN Flag for setSystemUiVisibility(int): View would like its window to be layed out as if it has requested SYSTEM_UI_FLAG_FULLSCREEN, even if it currently hasn't. int SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION Flag for setSystemUiVisibility(int): View would like its window to be layed out as if it has requested SYSTEM_UI_FLAG_HIDE_NAVIGATION, even if it currently hasn't. int SYSTEM_UI_FLAG_LAYOUT_STABLE Flag for setSystemUiVisibility(int): When using other layout flags, we would like a stable view of the content insets given to fitSystemWindows(Rect). int SYSTEM_UI_FLAG_LOW_PROFILE Flag for setSystemUiVisibility(int): View has requested the system UI to enter an unobtrusive \"low profile\" mode. int SYSTEM_UI_FLAG_VISIBLE Special constant for setSystemUiVisibility(int): View has requested the system UI (status bar) to be visible (the default). int SYSTEM_UI_LAYOUT_FLAGS Flags that can impact the layout in relation to system UI. int TEXT_ALIGNMENT_CENTER Center the paragraph, e.g. int TEXT_ALIGNMENT_GRAVITY Default for the root view. int TEXT_ALIGNMENT_INHERIT Default text alignment. int TEXT_ALIGNMENT_TEXT_END Align to the end of the paragraph, e.g. int TEXT_ALIGNMENT_TEXT_START Align to the start of the paragraph, e.g. int TEXT_ALIGNMENT_VIEW_END Align to the end of the view, which is ALIGN_RIGHT if the view\u2019s resolved layoutDirection is LTR, and ALIGN_LEFT otherwise. int TEXT_ALIGNMENT_VIEW_START Align to the start of the view, which is ALIGN_LEFT if the view\u2019s resolved layoutDirection is LTR, and ALIGN_RIGHT otherwise. int TEXT_DIRECTION_ANY_RTL Text direction is using \"any-RTL\" algorithm. int TEXT_DIRECTION_FIRST_STRONG Text direction is using \"first strong algorithm\". int TEXT_DIRECTION_INHERIT Text direction is inherited thru ViewGroup int TEXT_DIRECTION_LOCALE Text direction is coming from the system Locale. int TEXT_DIRECTION_LTR Text direction is forced to LTR. int TEXT_DIRECTION_RTL Text direction is forced to RTL. String VIEW_LOG_TAG The logging tag used by this class with android.util.Log. int VISIBLE This view is visible.","int ACCESSIBILITY_LIVE_REGION_ASSERTIVE Live region mode specifying that accessibility services should interrupt ongoing speech to immediately announce changes to this view.","int ACCESSIBILITY_LIVE_REGION_NONE Live region mode specifying that accessibility services should not automatically announce changes to this view.","int ACCESSIBILITY_LIVE_REGION_POLITE Live region mode specifying that accessibility services should announce changes to this view.","int DRAWING_CACHE_QUALITY_AUTO Enables automatic quality mode for the drawing cache.","int DRAWING_CACHE_QUALITY_HIGH Enables high quality mode for the drawing cache.","int DRAWING_CACHE_QUALITY_LOW Enables low quality mode for the drawing cache.","int FIND_VIEWS_WITH_CONTENT_DESCRIPTION Find find views that contain the specified content description.","int FIND_VIEWS_WITH_TEXT Find views that render the specified text.","int FOCUSABLES_ALL View flag indicating whether addFocusables(ArrayList, int, int) should add all focusable Views regardless if they are focusable in touch mode.","int FOCUSABLES_TOUCH_MODE View flag indicating whether addFocusables(ArrayList, int, int) should add only Views focusable in touch mode.","int FOCUS_BACKWARD Use with focusSearch(int).","int FOCUS_DOWN Use with focusSearch(int).","int FOCUS_FORWARD Use with focusSearch(int).","int FOCUS_LEFT Use with focusSearch(int).","int FOCUS_RIGHT Use with focusSearch(int).","int FOCUS_UP Use with focusSearch(int).","int GONE This view is invisible, and it doesn't take any space for layout purposes.","int HAPTIC_FEEDBACK_ENABLED View flag indicating whether this view should have haptic feedback enabled for events such as long presses.","int IMPORTANT_FOR_ACCESSIBILITY_AUTO Automatically determine whether a view is important for accessibility.","int IMPORTANT_FOR_ACCESSIBILITY_NO The view is not important for accessibility.","int IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS The view is not important for accessibility, nor are any of its descendant views.","int IMPORTANT_FOR_ACCESSIBILITY_YES The view is important for accessibility.","int INVISIBLE This view is invisible, but it still takes up space for layout purposes.","int KEEP_SCREEN_ON View flag indicating that the screen should remain on while the window containing this view is visible to the user.","int LAYER_TYPE_HARDWARE Indicates that the view has a hardware layer.","int LAYER_TYPE_NONE Indicates that the view does not have a layer.","int LAYER_TYPE_SOFTWARE Indicates that the view has a software layer.","int LAYOUT_DIRECTION_INHERIT Horizontal layout direction of this view is inherited from its parent.","int LAYOUT_DIRECTION_LOCALE Horizontal layout direction of this view is from deduced from the default language script for the locale.","int LAYOUT_DIRECTION_LTR Horizontal layout direction of this view is from Left to Right.","int LAYOUT_DIRECTION_RTL Horizontal layout direction of this view is from Right to Left.","int MEASURED_HEIGHT_STATE_SHIFT Bit shift of MEASURED_STATE_MASK to get to the height bits for functions that combine both width and height into a single int, such as getMeasuredState() and the childState argument of resolveSizeAndState(int, int, int).","int MEASURED_SIZE_MASK Bits of getMeasuredWidthAndState() and getMeasuredWidthAndState() that provide the actual measured size.","int MEASURED_STATE_MASK Bits of getMeasuredWidthAndState() and getMeasuredWidthAndState() that provide the additional state bits.","int MEASURED_STATE_TOO_SMALL Bit of getMeasuredWidthAndState() and getMeasuredWidthAndState() that indicates the measured size is smaller that the space the view would like to have.","int NO_ID Used to mark a View that has no ID.","int OVER_SCROLL_ALWAYS Always allow a user to over-scroll this view, provided it is a view that can scroll.","int OVER_SCROLL_IF_CONTENT_SCROLLS Allow a user to over-scroll this view only if the content is large enough to meaningfully scroll, provided it is a view that can scroll.","int OVER_SCROLL_NEVER Never allow a user to over-scroll this view.","int SCREEN_STATE_OFF Indicates that the screen has changed state and is now off.","int SCREEN_STATE_ON Indicates that the screen has changed state and is now on.","int SCROLLBARS_INSIDE_INSET The scrollbar style to display the scrollbars inside the padded area, increasing the padding of the view.","int SCROLLBARS_INSIDE_OVERLAY The scrollbar style to display the scrollbars inside the content area, without increasing the padding.","int SCROLLBARS_OUTSIDE_INSET The scrollbar style to display the scrollbars at the edge of the view, increasing the padding of the view.","int SCROLLBARS_OUTSIDE_OVERLAY The scrollbar style to display the scrollbars at the edge of the view, without increasing the padding.","int SCROLLBAR_POSITION_DEFAULT Position the scroll bar at the default position as determined by the system.","int SCROLLBAR_POSITION_LEFT Position the scroll bar along the left edge.","int SCROLLBAR_POSITION_RIGHT Position the scroll bar along the right edge.","int SCROLL_AXIS_HORIZONTAL Indicates scrolling along the horizontal axis.","int SCROLL_AXIS_NONE Indicates no axis of view scrolling.","int SCROLL_AXIS_VERTICAL Indicates scrolling along the vertical axis.","int SOUND_EFFECTS_ENABLED View flag indicating whether this view should have sound effects enabled for events such as clicking and touching.","int STATUS_BAR_HIDDEN This constant was deprecated in API level 14. Use SYSTEM_UI_FLAG_LOW_PROFILE instead.","int STATUS_BAR_VISIBLE This constant was deprecated in API level 14. Use SYSTEM_UI_FLAG_VISIBLE instead.","int SYSTEM_UI_FLAG_FULLSCREEN Flag for setSystemUiVisibility(int): View has requested to go into the normal fullscreen mode so that its content can take over the screen while still allowing the user to interact with the application.","int SYSTEM_UI_FLAG_HIDE_NAVIGATION Flag for setSystemUiVisibility(int): View has requested that the system navigation be temporarily hidden.","int SYSTEM_UI_FLAG_IMMERSIVE Flag for setSystemUiVisibility(int): View would like to remain interactive when hiding the navigation bar with SYSTEM_UI_FLAG_HIDE_NAVIGATION.","int SYSTEM_UI_FLAG_IMMERSIVE_STICKY Flag for setSystemUiVisibility(int): View would like to remain interactive when hiding the status bar with SYSTEM_UI_FLAG_FULLSCREEN and/or hiding the navigation bar with SYSTEM_UI_FLAG_HIDE_NAVIGATION.","int SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN Flag for setSystemUiVisibility(int): View would like its window to be layed out as if it has requested SYSTEM_UI_FLAG_FULLSCREEN, even if it currently hasn't.","int SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION Flag for setSystemUiVisibility(int): View would like its window to be layed out as if it has requested SYSTEM_UI_FLAG_HIDE_NAVIGATION, even if it currently hasn't.","int SYSTEM_UI_FLAG_LAYOUT_STABLE Flag for setSystemUiVisibility(int): When using other layout flags, we would like a stable view of the content insets given to fitSystemWindows(Rect).","int SYSTEM_UI_FLAG_LOW_PROFILE Flag for setSystemUiVisibility(int): View has requested the system UI to enter an unobtrusive \"low profile\" mode.","int SYSTEM_UI_FLAG_VISIBLE Special constant for setSystemUiVisibility(int): View has requested the system UI (status bar) to be visible (the default).","int SYSTEM_UI_LAYOUT_FLAGS Flags that can impact the layout in relation to system UI.","int TEXT_ALIGNMENT_CENTER Center the paragraph, e.g.","int TEXT_ALIGNMENT_GRAVITY Default for the root view.","int TEXT_ALIGNMENT_INHERIT Default text alignment.","int TEXT_ALIGNMENT_TEXT_END Align to the end of the paragraph, e.g.","int TEXT_ALIGNMENT_TEXT_START Align to the start of the paragraph, e.g.","int TEXT_ALIGNMENT_VIEW_END Align to the end of the view, which is ALIGN_RIGHT if the view\u2019s resolved layoutDirection is LTR, and ALIGN_LEFT otherwise.","int TEXT_ALIGNMENT_VIEW_START Align to the start of the view, which is ALIGN_LEFT if the view\u2019s resolved layoutDirection is LTR, and ALIGN_RIGHT otherwise.","int TEXT_DIRECTION_ANY_RTL Text direction is using \"any-RTL\" algorithm.","int TEXT_DIRECTION_FIRST_STRONG Text direction is using \"first strong algorithm\".","int TEXT_DIRECTION_INHERIT Text direction is inherited thru ViewGroup","int TEXT_DIRECTION_LOCALE Text direction is coming from the system Locale.","int TEXT_DIRECTION_LTR Text direction is forced to LTR.","int TEXT_DIRECTION_RTL Text direction is forced to RTL.","String VIEW_LOG_TAG The logging tag used by this class with android.util.Log.","int VISIBLE This view is visible."],"class":"VerticalGridView","constructors":[],"fields":["protected final GridLayoutManager mLayoutManager"]}