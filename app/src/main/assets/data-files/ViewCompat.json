{"methods":["static ViewPropertyAnimatorCompat animate(View view) This method returns a ViewPropertyAnimator object, which can be used to animate specific properties on this View.","static boolean canScrollHorizontally(View v, int direction) Check if this view can be scrolled horizontally in a certain direction.","static boolean canScrollVertically(View v, int direction) Check if this view can be scrolled vertically in a certain direction.","static void dispatchFinishTemporaryDetach(View view) Notify a view that its temporary detach has ended; the view is now reattached.","static void dispatchStartTemporaryDetach(View view) Notify a view that it is being temporarily detached.","static int getAccessibilityLiveRegion(View view) Gets the live region mode for the specified View.","static AccessibilityNodeProviderCompat getAccessibilityNodeProvider(View view) Gets the provider for managing a virtual view hierarchy rooted at this View and reported to AccessibilityServices that explore the window content.","static float getAlpha(View view) The opacity of the view.","static float getElevation(View view) The base elevation of this view relative to its parent, in pixels.","static boolean getFitsSystemWindows(View v) Returns true if this view should adapt to fit system window insets.","static int getImportantForAccessibility(View view) Gets the mode for determining whether this View is important for accessibility which is if it fires accessibility events and if it is reported to accessibility services that query the screen.","static int getLabelFor(View view) Gets the id of a view for which a given view serves as a label for accessibility purposes.","static int getLayerType(View view) Indicates what type of layer is currently associated with this view.","static int getLayoutDirection(View view) Returns the resolved layout direction for this view.","static int getMeasuredHeightAndState(View view) Return the full height measurement information for this view as computed by the most recent call to measure(int, int).","static int getMeasuredState(View view) Return only the state bits of getMeasuredWidthAndState(View) and getMeasuredHeightAndState(View), combined into one integer.","static int getMeasuredWidthAndState(View view) Return the full width measurement information for this view as computed by the most recent call to measure(int, int).","static int getMinimumHeight(View view) Returns the minimum height of the view.","static int getMinimumWidth(View view) Returns the minimum width of the view.","static int getOverScrollMode(View v) Returns the over-scroll mode for this view.","static int getPaddingEnd(View view) Returns the end padding of the specified view depending on its resolved layout direction.","static int getPaddingStart(View view) Returns the start padding of the specified view depending on its resolved layout direction.","static ViewParent getParentForAccessibility(View view) Gets the parent for accessibility purposes.","static float getPivotX(View view) The x location of the point around which the view is rotated and scaled.","static float getPivotY(View view) The y location of the point around which the view is rotated and scaled.","static float getRotation(View view)","static float getRotationX(View view)","static float getRotationY(View view)","static float getScaleX(View view)","static float getScaleY(View view)","static String getTransitionName(View view) Returns the name of the View to be used to identify Views in Transitions.","static float getTranslationX(View view) The horizontal location of this view relative to its left position.","static float getTranslationY(View view) The vertical location of this view relative to its left position.","static float getTranslationZ(View view) The depth location of this view relative to its elevation.","static int getWindowSystemUiVisibility(View view) Returns the current system UI visibility that is currently set for the entire window.","static float getX(View view)","static float getY(View view)","static boolean hasAccessibilityDelegate(View v) Checks whether provided View has an accessibility delegate attached to it.","static boolean hasTransientState(View view) Indicates whether the view is currently tracking transient state that the app should not need to concern itself with saving and restoring, but that the framework should take special note to preserve when possible.","static boolean isOpaque(View view) Indicates whether this View is opaque.","static void jumpDrawablesToCurrentState(View v) On API 11 devices and above, call Drawable.jumpToCurrentState() on all Drawable objects associated with this view.","static void onInitializeAccessibilityEvent(View v, AccessibilityEvent event) Initializes an AccessibilityEvent with information about this View which is the event source.","static void onInitializeAccessibilityNodeInfo(View v, AccessibilityNodeInfoCompat info) Initializes an AccessibilityNodeInfo with information about this view.","static void onPopulateAccessibilityEvent(View v, AccessibilityEvent event) Called from dispatchPopulateAccessibilityEvent(AccessibilityEvent) giving a chance to this View to populate the accessibility event with its text content.","static boolean performAccessibilityAction(View view, int action, Bundle arguments) Performs the specified accessibility action on the view.","static void postInvalidateOnAnimation(View view) Cause an invalidate to happen on the next animation time step, typically the next display frame.","static void postInvalidateOnAnimation(View view, int left, int top, int right, int bottom) Cause an invalidate of the specified area to happen on the next animation time step, typically the next display frame.","static void postOnAnimation(View view, Runnable action) Causes the Runnable to execute on the next animation time step.","static void postOnAnimationDelayed(View view, Runnable action, long delayMillis) Causes the Runnable to execute on the next animation time step, after the specified amount of time elapses.","static void requestApplyInsets(View view) Ask that a new dispatch of View.onApplyWindowInsets(WindowInsets) be performed.","static int resolveSizeAndState(int size, int measureSpec, int childMeasuredState) Utility to reconcile a desired size and state, with constraints imposed by a MeasureSpec.","static void setAccessibilityDelegate(View v, AccessibilityDelegateCompat delegate) Sets a delegate for implementing accessibility support via compositon as opposed to inheritance.","static void setAccessibilityLiveRegion(View view, int mode) Sets the live region mode for the specified view.","static void setAlpha(View view, float value) Sets the opacity of the view.","static void setChildrenDrawingOrderEnabled(ViewGroup viewGroup, boolean enabled) Tells the ViewGroup whether to draw its children in the order defined by the method ViewGroup.getChildDrawingOrder(int, int).","static void setElevation(View view, float elevation) Sets the base elevation of this view, in pixels.","static void setHasTransientState(View view, boolean hasTransientState) Set whether this view is currently tracking transient state that the framework should attempt to preserve when possible.","static void setImportantForAccessibility(View view, int mode) Sets how to determine whether this view is important for accessibility which is if it fires accessibility events and if it is reported to accessibility services that query the screen.","static void setLabelFor(View view, int labeledId) Sets the id of a view for which a given view serves as a label for accessibility purposes.","static void setLayerPaint(View view, Paint paint) Updates the Paint object used with the current layer (used only if the current layer type is not set to LAYER_TYPE_NONE).","static void setLayerType(View view, int layerType, Paint paint) Specifies the type of layer backing this view.","static void setLayoutDirection(View view, int layoutDirection) Set the layout direction for this view.","static void setOnApplyWindowInsetsListener(View v, OnApplyWindowInsetsListener listener) Set an OnApplyWindowInsetsListener to take over the policy for applying window insets to this view.","static void setOverScrollMode(View v, int overScrollMode) Set the over-scroll mode for this view.","static void setPaddingRelative(View view, int start, int top, int end, int bottom) Sets the relative padding.","static void setPivotX(View view, float value) Sets the x location of the point around which the view is rotated and scaled.","static void setPivotY(View view, float value) Sets the y location of the point around which the view is rotated and scaled.","static void setRotation(View view, float value) Sets the degrees that the view is rotated around the pivot point.","static void setRotationX(View view, float value) Sets the degrees that the view is rotated around the horizontal axis through the pivot point.","static void setRotationY(View view, float value) Sets the degrees that the view is rotated around the vertical axis through the pivot point.","static void setScaleX(View view, float value) Sets the amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width.","static void setScaleY(View view, float value) Sets the amount that the view is scaled in Y around the pivot point, as a proportion of the view's unscaled width.","static void setTransitionName(View view, String transitionName) Sets the name of the View to be used to identify Views in Transitions.","static void setTranslationX(View view, float value) Sets the horizontal location of this view relative to its left position.","static void setTranslationY(View view, float value) Sets the vertical location of this view relative to its top position.","static void setTranslationZ(View view, float translationZ) Sets the depth location of this view relative to its elevation.","static void setX(View view, float value) Sets the visual x position of this view, in pixels.","static void setY(View view, float value) Sets the visual y position of this view, in pixels.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.support.v4.view","constants":["int ACCESSIBILITY_LIVE_REGION_ASSERTIVE Live region mode specifying that accessibility services should interrupt ongoing speech to immediately announce changes to this view.","int ACCESSIBILITY_LIVE_REGION_NONE Live region mode specifying that accessibility services should not automatically announce changes to this view.","int ACCESSIBILITY_LIVE_REGION_POLITE Live region mode specifying that accessibility services should announce changes to this view.","int IMPORTANT_FOR_ACCESSIBILITY_AUTO Automatically determine whether a view is important for accessibility.","int IMPORTANT_FOR_ACCESSIBILITY_NO The view is not important for accessibility.","int IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS The view is not important for accessibility, nor are any of its descendant views.","int IMPORTANT_FOR_ACCESSIBILITY_YES The view is important for accessibility.","int LAYER_TYPE_HARDWARE Indicates that the view has a hardware layer.","int LAYER_TYPE_NONE Indicates that the view does not have a layer.","int LAYER_TYPE_SOFTWARE Indicates that the view has a software layer.","int LAYOUT_DIRECTION_INHERIT Horizontal layout direction of this view is inherited from its parent.","int LAYOUT_DIRECTION_LOCALE Horizontal layout direction of this view is from deduced from the default language script for the locale.","int LAYOUT_DIRECTION_LTR Horizontal layout direction of this view is from Left to Right.","int LAYOUT_DIRECTION_RTL Horizontal layout direction of this view is from Right to Left.","int MEASURED_HEIGHT_STATE_SHIFT Bit shift of MEASURED_STATE_MASK to get to the height bits for functions that combine both width and height into a single int, such as getMeasuredState(View) and the childState argument of resolveSizeAndState(int, int, int).","int MEASURED_SIZE_MASK Bits of getMeasuredWidthAndState(View) and getMeasuredWidthAndState(View) that provide the actual measured size.","int MEASURED_STATE_MASK Bits of getMeasuredWidthAndState(View) and getMeasuredWidthAndState(View) that provide the additional state bits.","int MEASURED_STATE_TOO_SMALL Bit of getMeasuredWidthAndState(View) and getMeasuredWidthAndState(View) that indicates the measured size is smaller that the space the view would like to have.","int OVER_SCROLL_ALWAYS Always allow a user to over-scroll this view, provided it is a view that can scroll.","int OVER_SCROLL_IF_CONTENT_SCROLLS Allow a user to over-scroll this view only if the content is large enough to meaningfully scroll, provided it is a view that can scroll.","int OVER_SCROLL_NEVER Never allow a user to over-scroll this view."],"class":"ViewCompat","constructors":[],"fields":[]}