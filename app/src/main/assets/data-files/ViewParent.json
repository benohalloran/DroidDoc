{"methods":["abstract void bringChildToFront(View child) Change the z order of the child so it's on top of all other children.","abstract boolean canResolveLayoutDirection() Tells if this view parent can resolve the layout direction.","abstract boolean canResolveTextAlignment() Tells if this view parent can resolve the text alignment.","abstract boolean canResolveTextDirection() Tells if this view parent can resolve the text direction.","abstract void childDrawableStateChanged(View child) This method is called on the parent when a child's drawable state has changed.","abstract void childHasTransientStateChanged(View child, boolean hasTransientState) Called when a child view now has or no longer is tracking transient state.","abstract void clearChildFocus(View child) Called when a child of this parent is giving up focus","abstract void createContextMenu(ContextMenu menu) Have the parent populate the specified context menu if it has anything to add (and then recurse on its parent).","abstract View focusSearch(View v, int direction) Find the nearest view in the specified direction that wants to take focus","abstract void focusableViewAvailable(View v) Tells the parent that a new focusable view has become available.","abstract boolean getChildVisibleRect(View child, Rect r, Point offset) Compute the visible part of a rectangular region defined in terms of a child view's coordinates.","abstract int getLayoutDirection() Return this view parent layout direction.","abstract ViewParent getParent() Returns the parent if it exists, or null.","abstract ViewParent getParentForAccessibility() Gets the parent of a given View for accessibility.","abstract int getTextAlignment() Return this view parent text alignment.","abstract int getTextDirection() Return this view parent text direction.","abstract void invalidateChild(View child, Rect r) All or part of a child is dirty and needs to be redrawn.","abstract ViewParent invalidateChildInParent(int[] location, Rect r) All or part of a child is dirty and needs to be redrawn.","abstract boolean isLayoutDirectionResolved() Tells if this view parent layout direction is resolved.","abstract boolean isLayoutRequested() Indicates whether layout was requested on this view parent.","abstract boolean isTextAlignmentResolved() Tells if this view parent text alignment is resolved.","abstract boolean isTextDirectionResolved() Tells if this view parent text direction is resolved.","abstract void notifySubtreeAccessibilityStateChanged(View child, View source, int changeType) Notifies a view parent that the accessibility state of one of its descendants has changed and that the structure of the subtree is different.","abstract boolean onNestedFling(View target, float velocityX, float velocityY, boolean consumed) Request a fling from a nested scroll.","abstract boolean onNestedPreFling(View target, float velocityX, float velocityY) React to a nested fling before the target view consumes it.","abstract void onNestedPreScroll(View target, int dx, int dy, int[] consumed) React to a nested scroll in progress before the target view consumes a portion of the scroll.","abstract void onNestedScroll(View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) React to a nested scroll in progress.","abstract void onNestedScrollAccepted(View child, View target, int nestedScrollAxes) React to the successful claiming of a nested scroll operation.","abstract boolean onStartNestedScroll(View child, View target, int nestedScrollAxes) React to a descendant view initiating a nestable scroll operation, claiming the nested scroll operation if appropriate.","abstract void onStopNestedScroll(View target) React to a nested scroll operation ending.","abstract void recomputeViewAttributes(View child) Tell view hierarchy that the global view attributes need to be re-evaluated.","abstract void requestChildFocus(View child, View focused) Called when a child of this parent wants focus","abstract boolean requestChildRectangleOnScreen(View child, Rect rectangle, boolean immediate) Called when a child of this group wants a particular rectangle to be positioned onto the screen.","abstract void requestDisallowInterceptTouchEvent(boolean disallowIntercept) Called when a child does not want this parent and its ancestors to intercept touch events with onInterceptTouchEvent(MotionEvent).","abstract void requestFitSystemWindows() Ask that a new dispatch of View.fitSystemWindows(Rect) be performed.","abstract void requestLayout() Called when something has changed which has invalidated the layout of a child of this view parent.","abstract boolean requestSendAccessibilityEvent(View child, AccessibilityEvent event) Called by a child to request from its parent to send an AccessibilityEvent.","abstract void requestTransparentRegion(View child) Called when a child wants the view hierarchy to gather and report transparent regions to the window compositor.","abstract boolean showContextMenuForChild(View originalView) Bring up a context menu for the specified view or its ancestors.","abstract ActionMode startActionModeForChild(View originalView, ActionMode.Callback callback) Start an action mode for the specified view."],"package":"android.view","constants":[],"class":"ViewParent","constructors":[],"fields":[]}