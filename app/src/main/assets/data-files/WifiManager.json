{"methods":["int addNetwork(WifiConfiguration config) Add a new network description to the set of configured networks.","static int calculateSignalLevel(int rssi, int numLevels) Calculates the level of the signal.","void cancelWps(WifiManager.WpsCallback listener) Cancel any ongoing Wi-fi Protected Setup","static int compareSignalLevel(int rssiA, int rssiB) Compares two signal strengths.","WifiManager.MulticastLock createMulticastLock(String tag) Create a new MulticastLock","WifiManager.WifiLock createWifiLock(String tag) Creates a new WifiLock.","WifiManager.WifiLock createWifiLock(int lockType, String tag) Creates a new WifiLock.","boolean disableNetwork(int netId) Disable a configured network.","boolean disconnect() Disassociate from the currently active access point.","boolean enableNetwork(int netId, boolean disableOthers) Allow a previously configured network to be associated with.","List<WifiConfiguration> getConfiguredNetworks() Return a list of all the networks configured in the supplicant.","WifiInfo getConnectionInfo() Return dynamic information about the current Wi-Fi connection, if any is active.","DhcpInfo getDhcpInfo() Return the DHCP-assigned addresses from the last successful DHCP request, if any.","List<ScanResult> getScanResults() Return the results of the latest access point scan.","int getWifiState() Gets the Wi-Fi enabled state.","boolean is5GHzBandSupported()","boolean isDeviceToApRttSupported()","boolean isEnhancedPowerReportingSupported()","boolean isP2pSupported()","boolean isPreferredNetworkOffloadSupported()","boolean isScanAlwaysAvailable() Check if scanning is always available.","boolean isTdlsSupported()","boolean isWifiEnabled() Return whether Wi-Fi is enabled or disabled.","boolean pingSupplicant() Check that the supplicant daemon is responding to requests.","boolean reassociate() Reconnect to the currently active access point, even if we are already connected.","boolean reconnect() Reconnect to the currently active access point, if we are currently disconnected.","boolean removeNetwork(int netId) Remove the specified network from the list of configured networks.","boolean saveConfiguration() Tell the supplicant to persist the current list of configured networks.","void setTdlsEnabled(InetAddress remoteIPAddress, boolean enable) Enable/Disable TDLS on a specific local route.","void setTdlsEnabledWithMacAddress(String remoteMacAddress, boolean enable) Similar to setTdlsEnabled(InetAddress, boolean), except this version allows you to specify remote endpoint with a MAC address.","boolean setWifiEnabled(boolean enabled) Enable or disable Wi-Fi.","boolean startScan() Request a scan for access points.","void startWps(WpsInfo config, WifiManager.WpsCallback listener) Start Wi-fi Protected Setup","int updateNetwork(WifiConfiguration config) Update the network description of an existing configured network.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.net.wifi","constants":["String ACTION_PICK_WIFI_NETWORK Activity Action: Pick a Wi-Fi network to connect to.","String ACTION_REQUEST_SCAN_ALWAYS_AVAILABLE Activity Action: Show a system activity that allows the user to enable scans to be available even with Wi-Fi turned off.","int ERROR_AUTHENTICATING The error code if there was a problem authenticating.","String EXTRA_BSSID The lookup key for a String giving the BSSID of the access point to which we are connected.","String EXTRA_NETWORK_INFO The lookup key for a NetworkInfo object associated with the Wi-Fi network.","String EXTRA_NEW_RSSI The lookup key for an int giving the new RSSI in dBm.","String EXTRA_NEW_STATE The lookup key for a SupplicantState describing the new state Retrieve with getParcelableExtra(String).","String EXTRA_PREVIOUS_WIFI_STATE The previous Wi-Fi state.","String EXTRA_SUPPLICANT_CONNECTED The lookup key for a boolean that indicates whether a connection to the supplicant daemon has been gained or lost.","String EXTRA_SUPPLICANT_ERROR The lookup key for a SupplicantState describing the supplicant error code if any Retrieve with getIntExtra(String, int).","String EXTRA_WIFI_INFO The lookup key for a WifiInfo object giving the information about the access point to which we are connected.","String EXTRA_WIFI_STATE The lookup key for an int that indicates whether Wi-Fi is enabled, disabled, enabling, disabling, or unknown.","String NETWORK_IDS_CHANGED_ACTION The network IDs of the configured networks could have changed.","String NETWORK_STATE_CHANGED_ACTION Broadcast intent action indicating that the state of Wi-Fi connectivity has changed.","String RSSI_CHANGED_ACTION The RSSI (signal strength) has changed.","String SCAN_RESULTS_AVAILABLE_ACTION An access point scan has completed, and results are available from the supplicant.","String SUPPLICANT_CONNECTION_CHANGE_ACTION Broadcast intent action indicating that a connection to the supplicant has been established (and it is now possible to perform Wi-Fi operations) or the connection to the supplicant has been lost.","String SUPPLICANT_STATE_CHANGED_ACTION Broadcast intent action indicating that the state of establishing a connection to an access point has changed.One extra provides the new SupplicantState.","int WIFI_MODE_FULL In this Wi-Fi lock mode, Wi-Fi will be kept active, and will behave normally, i.e., it will attempt to automatically establish a connection to a remembered access point that is within range, and will do periodic scans if there are remembered access points but none are in range.","int WIFI_MODE_FULL_HIGH_PERF In this Wi-Fi lock mode, Wi-Fi will be kept active as in mode WIFI_MODE_FULL but it operates at high performance with minimum packet loss and low packet latency even when the device screen is off.","int WIFI_MODE_SCAN_ONLY In this Wi-Fi lock mode, Wi-Fi will be kept active, but the only operation that will be supported is initiation of scans, and the subsequent reporting of scan results.","String WIFI_STATE_CHANGED_ACTION Broadcast intent action indicating that Wi-Fi has been enabled, disabled, enabling, disabling, or unknown.","int WIFI_STATE_DISABLED Wi-Fi is disabled.","int WIFI_STATE_DISABLING Wi-Fi is currently being disabled.","int WIFI_STATE_ENABLED Wi-Fi is enabled.","int WIFI_STATE_ENABLING Wi-Fi is currently being enabled.","int WIFI_STATE_UNKNOWN Wi-Fi is in an unknown state.","int WPS_AUTH_FAILURE Authentication failure on WPS","int WPS_OVERLAP_ERROR WPS overlap detected","int WPS_TIMED_OUT WPS timed out","int WPS_TKIP_ONLY_PROHIBITED TKIP only prohibited","int WPS_WEP_PROHIBITED WEP on WPS is prohibited"],"class":"WifiManager","constructors":[],"fields":[]}