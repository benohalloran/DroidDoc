{"methods":["abstract void addContentView(View view, ViewGroup.LayoutParams params) Variation on setContentView(View, android.view.ViewGroup.LayoutParams) to add an additional content view to the screen.","void addFlags(int flags) Convenience function to set the flag bits as specified in flags, as per setFlags(int, int).","void clearFlags(int flags) Convenience function to clear the flag bits as specified in flags, as per setFlags(int, int).","abstract void closeAllPanels()","abstract void closePanel(int featureId)","View findViewById(int id) Finds a view that was identified by the id attribute from the XML that was processed in onCreate(Bundle).","boolean getAllowEnterTransitionOverlap() Returns how the transition set in setEnterTransition(android.transition.Transition) overlaps with the exit transition of the calling Activity.","boolean getAllowReturnTransitionOverlap() Returns how the transition set in setExitTransition(android.transition.Transition) overlaps with the exit transition of the called Activity when reentering after if finishes.","final WindowManager.LayoutParams getAttributes() Retrieve the current window attributes associated with this panel.","final Window.Callback getCallback() Return the current Callback interface for this window.","final Window getContainer() Return the container for this Window.","Scene getContentScene() Retrieve the Scene representing this window's current content.","final Context getContext() Return the Context this window policy is running in, for retrieving resources and other information.","abstract View getCurrentFocus() Return the view in this Window that currently has focus, or null if there are none.","abstract View getDecorView() Retrieve the top-level window decor view (containing the standard window frame/decorations and the client's content inside of that), which can be added as a window to the window manager.","Transition getEnterTransition() Returns the transition used to move Views into the initial scene.","Transition getExitTransition() Returns the Transition that will be used to move Views out of the scene when starting a new Activity.","abstract LayoutInflater getLayoutInflater() Quick access to the LayoutInflater instance that this Window retrieved from its Context.","MediaController getMediaController() Gets the MediaController that was previously set.","abstract int getNavigationBarColor()","Transition getReenterTransition() Returns the Transition that will be used to move Views in to the scene when returning from a previously-started Activity.","Transition getReturnTransition() Returns he Transition that will be used to move Views out of the scene when the Window is preparing to close, for example after a call to finishAfterTransition().","Transition getSharedElementEnterTransition() Returns the Transition that will be used for shared elements transferred into the content Scene.","Transition getSharedElementExitTransition() Returns the Transition to use for shared elements in the launching Window prior to transferring to the launched Activity's Window.","Transition getSharedElementReenterTransition() Returns the Transition that will be used for shared elements reentering from a started Activity after it has returned the shared element to it start location.","Transition getSharedElementReturnTransition() Returns the Transition that will be used for shared elements transferred back to a calling Activity.","boolean getSharedElementsUseOverlay() Returns true when shared elements should use an Overlay during shared element transitions or false when they should animate as part of the normal View hierarchy.","abstract int getStatusBarColor()","long getTransitionBackgroundFadeDuration() Returns the duration, in milliseconds, of the window background fade when transitioning into or away from an Activity when called with an Activity Transition.","TransitionManager getTransitionManager() Retrieve the TransitionManager responsible for for default transitions in this window.","abstract int getVolumeControlStream()","WindowManager getWindowManager() Return the window manager allowing this Window to display its own windows.","final TypedArray getWindowStyle() Return the Window attributes from this window's theme.","final boolean hasChildren()","boolean hasFeature(int feature) Query for the availability of a certain feature.","void injectInputEvent(InputEvent event) Inject an event to window locally.","abstract void invalidatePanelMenu(int featureId)","final boolean isActive()","abstract boolean isFloating() Return whether this window is being displayed with a floating style (based on the windowIsFloating attribute in the style/theme).","abstract boolean isShortcutKey(int keyCode, KeyEvent event) Is a keypress one of the defined shortcut keys for this window.","final void makeActive()","abstract void onConfigurationChanged(Configuration newConfig) Should be called when the configuration is changed.","abstract void openPanel(int featureId, KeyEvent event)","abstract View peekDecorView() Retrieve the current decor view, but only if it has already been created; otherwise returns null.","abstract boolean performContextMenuIdentifierAction(int id, int flags)","abstract boolean performPanelIdentifierAction(int featureId, int id, int flags)","abstract boolean performPanelShortcut(int featureId, int keyCode, KeyEvent event, int flags)","boolean requestFeature(int featureId) Enable extended screen features.","abstract void restoreHierarchyState(Bundle savedInstanceState)","abstract Bundle saveHierarchyState()","void setAllowEnterTransitionOverlap(boolean allow) Controls how the transition set in setEnterTransition(android.transition.Transition) overlaps with the exit transition of the calling Activity.","void setAllowReturnTransitionOverlap(boolean allow) Controls how the transition set in setExitTransition(android.transition.Transition) overlaps with the exit transition of the called Activity when reentering after if finishes.","void setAttributes(WindowManager.LayoutParams a) Specify custom window attributes.","abstract void setBackgroundDrawable(Drawable drawable) Change the background of this window to a custom Drawable.","void setBackgroundDrawableResource(int resid) Change the background of this window to a Drawable resource.","void setCallback(Window.Callback callback) Set the Callback interface for this window, used to intercept key events and other dynamic operations in the window.","abstract void setChildDrawable(int featureId, Drawable drawable)","abstract void setChildInt(int featureId, int value)","void setContainer(Window container) Set the container for this window.","abstract void setContentView(int layoutResID) Convenience for setContentView(View, android.view.ViewGroup.LayoutParams) to set the screen content from a layout resource.","abstract void setContentView(View view) Convenience for setContentView(View, android.view.ViewGroup.LayoutParams) set the screen content to an explicit view.","abstract void setContentView(View view, ViewGroup.LayoutParams params) Set the screen content to an explicit view.","void setDimAmount(float amount) Set the amount of dim behind the window when using FLAG_DIM_BEHIND.","void setEnterTransition(Transition transition) Sets the Transition that will be used to move Views into the initial scene.","void setExitTransition(Transition transition) Sets the Transition that will be used to move Views out of the scene when starting a new Activity.","abstract void setFeatureDrawable(int featureId, Drawable drawable) Set an explicit Drawable value for feature of this window.","abstract void setFeatureDrawableAlpha(int featureId, int alpha) Set a custom alpha value for the given drawale feature, controlling how much the background is visible through it.","abstract void setFeatureDrawableResource(int featureId, int resId) Set the value for a drawable feature of this window, from a resource identifier.","abstract void setFeatureDrawableUri(int featureId, Uri uri) Set the value for a drawable feature of this window, from a URI.","abstract void setFeatureInt(int featureId, int value) Set the integer value for a feature.","void setFlags(int flags, int mask) Set the flags of the window, as per the WindowManager.LayoutParams flags.","void setFormat(int format) Set the format of window, as per the PixelFormat types.","void setGravity(int gravity) Set the gravity of the window, as per the Gravity constants.","void setIcon(int resId) Set the primary icon for this window.","void setLayout(int width, int height) Set the width and height layout parameters of the window.","void setLocalFocus(boolean hasFocus, boolean inTouchMode) Set focus locally.","void setLogo(int resId) Set the logo for this window.","void setMediaController(MediaController controller) Sets a MediaController to send media keys and volume changes to.","abstract void setNavigationBarColor(int color) Sets the color of the navigation bar to .","void setReenterTransition(Transition transition) Sets the Transition that will be used to move Views in to the scene when returning from a previously-started Activity.","void setReturnTransition(Transition transition) Sets the Transition that will be used to move Views out of the scene when the Window is preparing to close, for example after a call to finishAfterTransition().","void setSharedElementEnterTransition(Transition transition) Sets the Transition that will be used for shared elements transferred into the content Scene.","void setSharedElementExitTransition(Transition transition) Sets the Transition that will be used for shared elements after starting a new Activity before the shared elements are transferred to the called Activity.","void setSharedElementReenterTransition(Transition transition) Sets the Transition that will be used for shared elements reentering from a started Activity after it has returned the shared element to it start location.","void setSharedElementReturnTransition(Transition transition) Sets the Transition that will be used for shared elements transferred back to a calling Activity.","void setSharedElementsUseOverlay(boolean sharedElementsUseOverlay) Sets whether or not shared elements should use an Overlay during shared element transitions.","void setSoftInputMode(int mode) Specify an explicit soft input mode to use for the window, as per WindowManager.LayoutParams.softInputMode.","abstract void setStatusBarColor(int color) Sets the color of the status bar to .","abstract void setTitle(CharSequence title)","abstract void setTitleColor(int textColor)","void setTransitionBackgroundFadeDuration(long fadeDurationMillis) Sets the duration, in milliseconds, of the window background fade when transitioning into or away from an Activity when called with an Activity Transition.","void setTransitionManager(TransitionManager tm) Set the TransitionManager to use for default transitions in this window.","void setType(int type) Set the type of the window, as per the WindowManager.LayoutParams types.","void setUiOptions(int uiOptions) Set extra options that will influence the UI for this window.","void setUiOptions(int uiOptions, int mask) Set extra options that will influence the UI for this window.","abstract void setVolumeControlStream(int streamType)","void setWindowAnimations(int resId) Specify custom animations to use for the window, as per WindowManager.LayoutParams.windowAnimations.","void setWindowManager(WindowManager wm, IBinder appToken, String appName) Set the window manager for use by this Window to, for example, display panels.","void setWindowManager(WindowManager wm, IBinder appToken, String appName, boolean hardwareAccelerated) Set the window manager for use by this Window to, for example, display panels.","abstract boolean superDispatchGenericMotionEvent(MotionEvent event) Used by custom windows, such as Dialog, to pass the generic motion event further down the view hierarchy.","abstract boolean superDispatchKeyEvent(KeyEvent event) Used by custom windows, such as Dialog, to pass the key press event further down the view hierarchy.","abstract boolean superDispatchKeyShortcutEvent(KeyEvent event) Used by custom windows, such as Dialog, to pass the key shortcut press event further down the view hierarchy.","abstract boolean superDispatchTouchEvent(MotionEvent event) Used by custom windows, such as Dialog, to pass the touch screen event further down the view hierarchy.","abstract boolean superDispatchTrackballEvent(MotionEvent event) Used by custom windows, such as Dialog, to pass the trackball event further down the view hierarchy.","abstract void takeInputQueue(InputQueue.Callback callback) Take ownership of this window's InputQueue.","abstract void takeKeyEvents(boolean get) Request that key events come to this activity.","abstract void takeSurface(SurfaceHolder.Callback2 callback) Take ownership of this window's surface.","abstract void togglePanel(int featureId, KeyEvent event)","final int getFeatures() Return the feature bits that are enabled.","final int getForcedWindowFlags() Return the window flags that have been explicitly set by the client, so will not be modified by getDecorView().","final int getLocalFeatures() Return the feature bits that are being implemented by this Window.","final boolean hasSoftInputMode() Has the app specified their own soft input mode?","abstract void onActive()","void setDefaultWindowFormat(int format) Set the default format of window, as per the PixelFormat types.","[Expand] Inherited Methods","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires."],"package":"android.view","constants":["int DEFAULT_FEATURES The default features enabled","int FEATURE_ACTION_BAR Flag for enabling the Action Bar.","int FEATURE_ACTION_BAR_OVERLAY Flag for requesting an Action Bar that overlays window content.","int FEATURE_ACTION_MODE_OVERLAY Flag for specifying the behavior of action modes when an Action Bar is not present.","int FEATURE_ACTIVITY_TRANSITIONS Enables Activities to run Activity Transitions either through sending or receiving ActivityOptions bundle created with makeSceneTransitionAnimation(android.app.Activity, android.util.Pair[]) or makeSceneTransitionAnimation(android.app.Activity, View, String).","int FEATURE_CONTENT_TRANSITIONS Flag for requesting that window content changes should be represented with scenes and transitions.","int FEATURE_CONTEXT_MENU Flag for the context menu.","int FEATURE_CUSTOM_TITLE Flag for custom title.","int FEATURE_INDETERMINATE_PROGRESS Flag for indeterminate progress","int FEATURE_LEFT_ICON Flag for having an icon on the left side of the title bar","int FEATURE_NO_TITLE Flag for the \"no title\" feature, turning off the title at the top of the screen.","int FEATURE_OPTIONS_PANEL Flag for the \"options panel\" feature.","int FEATURE_PROGRESS Flag for the progress indicator feature","int FEATURE_RIGHT_ICON Flag for having an icon on the right side of the title bar","int FEATURE_SWIPE_TO_DISMISS Flag for requesting a decoration-free window that is dismissed by swiping from the left.","int ID_ANDROID_CONTENT The ID that the main layout in the XML layout file should have.","String NAVIGATION_BAR_BACKGROUND_TRANSITION_NAME The transitionName for the navigation bar background View when a custom background is used.","int PROGRESS_END Ending value for the (primary) progress","int PROGRESS_INDETERMINATE_OFF Flag for setting the progress bar's indeterminate mode off","int PROGRESS_INDETERMINATE_ON Flag for setting the progress bar's indeterminate mode on","int PROGRESS_SECONDARY_END Highest possible value for the secondary progress","int PROGRESS_SECONDARY_START Lowest possible value for the secondary progress","int PROGRESS_START Starting value for the (primary) progress","int PROGRESS_VISIBILITY_OFF Flag for setting the progress bar's visibility to GONE","int PROGRESS_VISIBILITY_ON Flag for setting the progress bar's visibility to VISIBLE","String STATUS_BAR_BACKGROUND_TRANSITION_NAME The transitionName for the status bar background View when a custom background is used."],"class":"Window","constructors":[],"fields":[]}