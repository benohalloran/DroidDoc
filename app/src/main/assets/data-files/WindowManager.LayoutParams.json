{"methods":["final int copyFrom(WindowManager.LayoutParams o)","String debug(String output) Returns a String representation of this set of layout parameters.","int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation.","final CharSequence getTitle()","static boolean mayUseInputMethod(int flags) Given a particular set of window manager flags, determine whether such a window may be a target for an input method when it has focus.","final void setTitle(CharSequence title)","String toString() Returns a string containing a concise, human-readable description of this object.","void writeToParcel(Parcel out, int parcelableFlags) Flatten this object in to a Parcel.","[Expand] Inherited Methods","From class android.view.ViewGroup.LayoutParams void resolveLayoutDirection(int layoutDirection) Resolve layout parameters depending on the layout direction. void setBaseAttributes(TypedArray a, int widthAttr, int heightAttr) Extracts the layout parameters from the supplied attributes.","void resolveLayoutDirection(int layoutDirection) Resolve layout parameters depending on the layout direction.","void setBaseAttributes(TypedArray a, int widthAttr, int heightAttr) Extracts the layout parameters from the supplied attributes.","From class java.lang.Object Object clone() Creates and returns a copy of this Object. boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal. void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable. final Class<?> getClass() Returns the unique instance of Class that represents this object's class. int hashCode() Returns an integer hash code for this object. final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up. String toString() Returns a string containing a concise, human-readable description of this object. final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object. final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires. final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","Object clone() Creates and returns a copy of this Object.","boolean equals(Object o) Compares this instance with the specified object and indicates if they are equal.","void finalize() Invoked when the garbage collector has detected that this instance is no longer reachable.","final Class<?> getClass() Returns the unique instance of Class that represents this object's class.","int hashCode() Returns an integer hash code for this object.","final void notify() Causes a thread which is waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","final void notifyAll() Causes all threads which are waiting on this object's monitor (by means of calling one of the wait() methods) to be woken up.","String toString() Returns a string containing a concise, human-readable description of this object.","final void wait() Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object.","final void wait(long millis, int nanos) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","final void wait(long millis) Causes the calling thread to wait until another thread calls the notify() or notifyAll() method of this object or until the specified timeout expires.","From interface android.os.Parcelable abstract int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation. abstract void writeToParcel(Parcel dest, int flags) Flatten this object in to a Parcel.","abstract int describeContents() Describe the kinds of special objects contained in this Parcelable's marshalled representation.","abstract void writeToParcel(Parcel dest, int flags) Flatten this object in to a Parcel."],"package":"android.view","constants":["int ALPHA_CHANGED","int ANIMATION_CHANGED","float BRIGHTNESS_OVERRIDE_FULL Value for screenBrightness and buttonBrightness indicating that the screen or button backlight brightness should be set to the hightest value when this window is in front.","float BRIGHTNESS_OVERRIDE_NONE Default value for screenBrightness and buttonBrightness indicating that the brightness value is not overridden for this window and normal brightness policy should be used.","float BRIGHTNESS_OVERRIDE_OFF Value for screenBrightness and buttonBrightness indicating that the screen or button backlight brightness should be set to the lowest value when this window is in front.","int DIM_AMOUNT_CHANGED","int FIRST_APPLICATION_WINDOW Start of window types that represent normal application windows.","int FIRST_SUB_WINDOW Start of types of sub-windows.","int FIRST_SYSTEM_WINDOW Start of system-specific window types.","int FLAGS_CHANGED","int FLAG_ALLOW_LOCK_WHILE_SCREEN_ON Window flag: as long as this window is visible to the user, allow the lock screen to activate while the screen is on.","int FLAG_ALT_FOCUSABLE_IM Window flag: invert the state of FLAG_NOT_FOCUSABLE with respect to how this window interacts with the current method.","int FLAG_BLUR_BEHIND This constant was deprecated in API level 14. Blurring is no longer supported.","int FLAG_DIM_BEHIND Window flag: everything behind this window will be dimmed.","int FLAG_DISMISS_KEYGUARD Window flag: when set the window will cause the keyguard to be dismissed, only if it is not a secure lock keyguard.","int FLAG_DITHER This constant was deprecated in API level 17. This flag is no longer used.","int FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS Flag indicating that this Window is responsible for drawing the background for the system bars.","int FLAG_FORCE_NOT_FULLSCREEN Window flag: override FLAG_FULLSCREEN and force the screen decorations (such as the status bar) to be shown.","int FLAG_FULLSCREEN Window flag: hide all screen decorations (such as the status bar) while this window is displayed.","int FLAG_HARDWARE_ACCELERATED Indicates whether this window should be hardware accelerated.","int FLAG_IGNORE_CHEEK_PRESSES Window flag: intended for windows that will often be used when the user is holding the screen against their face, it will aggressively filter the event stream to prevent unintended presses in this situation that may not be desired for a particular window, when such an event stream is detected, the application will receive a CANCEL motion event to indicate this so applications can handle this accordingly by taking no action on the event until the finger is released.","int FLAG_KEEP_SCREEN_ON Window flag: as long as this window is visible to the user, keep the device's screen turned on and bright.","int FLAG_LAYOUT_INSET_DECOR Window flag: a special option only for use in combination with FLAG_LAYOUT_IN_SCREEN.","int FLAG_LAYOUT_IN_OVERSCAN Window flag: allow window contents to extend in to the screen's overscan area, if there is one.","int FLAG_LAYOUT_IN_SCREEN Window flag: place the window within the entire screen, ignoring decorations around the border (such as the status bar).","int FLAG_LAYOUT_NO_LIMITS Window flag: allow window to extend outside of the screen.","int FLAG_LOCAL_FOCUS_MODE Flag for a window in local focus mode.","int FLAG_NOT_FOCUSABLE Window flag: this window won't ever get key input focus, so the user can not send key or other button events to it.","int FLAG_NOT_TOUCHABLE Window flag: this window can never receive touch events.","int FLAG_NOT_TOUCH_MODAL Window flag: even when this window is focusable (its FLAG_NOT_FOCUSABLE is not set), allow any pointer events outside of the window to be sent to the windows behind it.","int FLAG_SCALED Window flag: a special mode where the layout parameters are used to perform scaling of the surface when it is composited to the screen.","int FLAG_SECURE Window flag: treat the content of the window as secure, preventing it from appearing in screenshots or from being viewed on non-secure displays.","int FLAG_SHOW_WALLPAPER Window flag: ask that the system wallpaper be shown behind your window.","int FLAG_SHOW_WHEN_LOCKED Window flag: special flag to let windows be shown when the screen is locked.","int FLAG_SPLIT_TOUCH Window flag: when set the window will accept for touch events outside of its bounds to be sent to other windows that also support split touch.","int FLAG_TOUCHABLE_WHEN_WAKING This constant was deprecated in API level 20. This flag has no effect.","int FLAG_TRANSLUCENT_NAVIGATION Window flag: request a translucent navigation bar with minimal system-provided background protection.","int FLAG_TRANSLUCENT_STATUS Window flag: request a translucent status bar with minimal system-provided background protection.","int FLAG_TURN_SCREEN_ON Window flag: when set as a window is being added or made visible, once the window has been shown then the system will poke the power manager's user activity (as if the user had woken up the device) to turn the screen on.","int FLAG_WATCH_OUTSIDE_TOUCH Window flag: if you have set FLAG_NOT_TOUCH_MODAL, you can set this flag to receive a single special MotionEvent with the action MotionEvent.ACTION_OUTSIDE for touches that occur outside of your window.","int FORMAT_CHANGED","int LAST_APPLICATION_WINDOW End of types of application windows.","int LAST_SUB_WINDOW End of types of sub-windows.","int LAST_SYSTEM_WINDOW End of types of system windows.","int LAYOUT_CHANGED","int MEMORY_TYPE_CHANGED","int MEMORY_TYPE_GPU This constant was deprecated in API level 5. this is ignored, this value is set automatically when needed.","int MEMORY_TYPE_HARDWARE This constant was deprecated in API level 5. this is ignored, this value is set automatically when needed.","int MEMORY_TYPE_NORMAL This constant was deprecated in API level 11. this is ignored, this value is set automatically when needed.","int MEMORY_TYPE_PUSH_BUFFERS This constant was deprecated in API level 11. this is ignored, this value is set automatically when needed.","int ROTATION_ANIMATION_CHANGED","int ROTATION_ANIMATION_CROSSFADE Value for rotationAnimation to define the animation used to specify that this window will fade in or out following a rotation.","int ROTATION_ANIMATION_JUMPCUT Value for rotationAnimation to define the animation used to specify that this window will immediately disappear or appear following a rotation.","int ROTATION_ANIMATION_ROTATE Value for rotationAnimation to define the animation used to specify that this window will rotate in or out following a rotation.","int SCREEN_BRIGHTNESS_CHANGED","int SCREEN_ORIENTATION_CHANGED","int SOFT_INPUT_ADJUST_NOTHING Adjustment option for softInputMode: set to have a window not adjust for a shown input method.","int SOFT_INPUT_ADJUST_PAN Adjustment option for softInputMode: set to have a window pan when an input method is shown, so it doesn't need to deal with resizing but just panned by the framework to ensure the current input focus is visible.","int SOFT_INPUT_ADJUST_RESIZE Adjustment option for softInputMode: set to allow the window to be resized when an input method is shown, so that its contents are not covered by the input method.","int SOFT_INPUT_ADJUST_UNSPECIFIED Adjustment option for softInputMode: nothing specified.","int SOFT_INPUT_IS_FORWARD_NAVIGATION Bit for softInputMode: set when the user has navigated forward to the window.","int SOFT_INPUT_MASK_ADJUST Mask for softInputMode of the bits that determine the way that the window should be adjusted to accommodate the soft input window.","int SOFT_INPUT_MASK_STATE Mask for softInputMode of the bits that determine the desired visibility state of the soft input area for this window.","int SOFT_INPUT_MODE_CHANGED","int SOFT_INPUT_STATE_ALWAYS_HIDDEN Visibility state for softInputMode: please always hide any soft input area when this window receives focus.","int SOFT_INPUT_STATE_ALWAYS_VISIBLE Visibility state for softInputMode: please always make the soft input area visible when this window receives input focus.","int SOFT_INPUT_STATE_HIDDEN Visibility state for softInputMode: please hide any soft input area when normally appropriate (when the user is navigating forward to your window).","int SOFT_INPUT_STATE_UNCHANGED Visibility state for softInputMode: please don't change the state of the soft input area.","int SOFT_INPUT_STATE_UNSPECIFIED Visibility state for softInputMode: no state has been specified.","int SOFT_INPUT_STATE_VISIBLE Visibility state for softInputMode: please show the soft input area when normally appropriate (when the user is navigating forward to your window).","int TITLE_CHANGED","int TYPE_APPLICATION Window type: a normal application window.","int TYPE_APPLICATION_ATTACHED_DIALOG Window type: like TYPE_APPLICATION_PANEL, but layout of the window happens as that of a top-level window, not as a child of its container.","int TYPE_APPLICATION_MEDIA Window type: window for showing media (such as video).","int TYPE_APPLICATION_PANEL Window type: a panel on top of an application window.","int TYPE_APPLICATION_STARTING Window type: special application window that is displayed while the application is starting.","int TYPE_APPLICATION_SUB_PANEL Window type: a sub-panel on top of an application window.","int TYPE_BASE_APPLICATION Window type: an application window that serves as the \"base\" window of the overall application; all other application windows will appear on top of it.","int TYPE_CHANGED","int TYPE_INPUT_METHOD Window type: internal input methods windows, which appear above the normal UI.","int TYPE_INPUT_METHOD_DIALOG Window type: internal input methods dialog windows, which appear above the current input method window.","int TYPE_KEYGUARD_DIALOG Window type: dialogs that the keyguard shows In multiuser systems shows on all users' windows.","int TYPE_PHONE Window type: phone.","int TYPE_PRIORITY_PHONE Window type: priority phone UI, which needs to be displayed even if the keyguard is active.","int TYPE_PRIVATE_PRESENTATION Window type: Window for Presentation on top of private virtual display.","int TYPE_SEARCH_BAR Window type: the search bar.","int TYPE_STATUS_BAR Window type: the status bar.","int TYPE_STATUS_BAR_PANEL Window type: panel that slides out from over the status bar In multiuser systems shows on all users' windows.","int TYPE_SYSTEM_ALERT Window type: system window, such as low power alert.","int TYPE_SYSTEM_DIALOG Window type: panel that slides out from the status bar In multiuser systems shows on all users' windows.","int TYPE_SYSTEM_ERROR Window type: internal system error windows, appear on top of everything they can.","int TYPE_SYSTEM_OVERLAY Window type: system overlay windows, which need to be displayed on top of everything else.","int TYPE_TOAST Window type: transient notifications.","int TYPE_WALLPAPER Window type: wallpaper window, placed behind any window that wants to sit on top of the wallpaper.","[Expand] Inherited Constants","From class android.view.ViewGroup.LayoutParams int FILL_PARENT Special value for the height or width requested by a View. int MATCH_PARENT Special value for the height or width requested by a View. int WRAP_CONTENT Special value for the height or width requested by a View.","int FILL_PARENT Special value for the height or width requested by a View.","int MATCH_PARENT Special value for the height or width requested by a View.","int WRAP_CONTENT Special value for the height or width requested by a View.","From interface android.os.Parcelable int CONTENTS_FILE_DESCRIPTOR Bit masks for use with describeContents(): each bit represents a kind of object considered to have potential special significance when marshalled. int PARCELABLE_WRITE_RETURN_VALUE Flag for use with writeToParcel(Parcel, int): the object being written is a return value, that is the result of a function such as \"Parcelable someFunction()\", \"void someFunction(out Parcelable)\", or \"void someFunction(inout Parcelable)\".","int CONTENTS_FILE_DESCRIPTOR Bit masks for use with describeContents(): each bit represents a kind of object considered to have potential special significance when marshalled.","int PARCELABLE_WRITE_RETURN_VALUE Flag for use with writeToParcel(Parcel, int): the object being written is a return value, that is the result of a function such as \"Parcelable someFunction()\", \"void someFunction(out Parcelable)\", or \"void someFunction(inout Parcelable)\"."],"class":"WindowManager.LayoutParams","constructors":[],"fields":["public static final Creator<WindowManager.LayoutParams> CREATOR","public float alpha An alpha value to apply to this entire window.","public float buttonBrightness This can be used to override the standard behavior of the button and keyboard backlights.","public float dimAmount When FLAG_DIM_BEHIND is set, this is the amount of dimming to apply.","public int flags Various behavioral options/flags.","public int format The desired bitmap format.","public int gravity Placement of window within the screen as per Gravity.","public float horizontalMargin The horizontal margin, as a percentage of the container's width, between the container and the widget.","public float horizontalWeight Indicates how much of the extra space will be allocated horizontally to the view associated with these LayoutParams.","public int memoryType This field was deprecated in API level 11. this is ignored","public String packageName Name of the package owning this window.","public float preferredRefreshRate The preferred refresh rate for the window.","public int rotationAnimation Define the exit and entry animations used on this window when the device is rotated.","public float screenBrightness This can be used to override the user's preferred brightness of the screen.","public int screenOrientation Specific orientation value for a window.","public int softInputMode Desired operating mode for any soft input area.","public int systemUiVisibility Control the visibility of the status bar.","public IBinder token Identifier for this window.","public int type The general type of window.","public float verticalMargin The vertical margin, as a percentage of the container's height, between the container and the widget.","public float verticalWeight Indicates how much of the extra space will be allocated vertically to the view associated with these LayoutParams.","public int windowAnimations A style resource defining the animations to use for this window.","public int x X position for this window.","public int y Y position for this window."]}