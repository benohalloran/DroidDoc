{"methods":["abstract XmlSerializer attribute(String namespace, String name, String value) Write an attribute.","abstract void cdsect(String text)","abstract void comment(String text)","abstract void docdecl(String text)","abstract void endDocument() Finish writing.","abstract XmlSerializer endTag(String namespace, String name) Write end tag.","abstract void entityRef(String text)","abstract void flush() Write all pending output to the stream.","abstract int getDepth() Returns the current depth of the element.","abstract boolean getFeature(String name) Return the current value of the feature with given name.","abstract String getName() Returns the name of the current element as set by startTag().","abstract String getNamespace() Returns the namespace URI of the current element as set by startTag().","abstract String getPrefix(String namespace, boolean generatePrefix) Return namespace that corresponds to given prefix If there is no prefix bound to this namespace return null but if generatePrefix is false then return generated prefix.","abstract Object getProperty(String name) Look up the value of a property.","abstract void ignorableWhitespace(String text)","abstract void processingInstruction(String text)","abstract void setFeature(String name, boolean state) Set feature identified by name (recommended to be URI for uniqueness).","abstract void setOutput(Writer writer) Set the output to the given writer.","abstract void setOutput(OutputStream os, String encoding) Set to use binary output stream with given encoding.","abstract void setPrefix(String prefix, String namespace) Binds the given prefix to the given namespace.","abstract void setProperty(String name, Object value) Set the value of a property.","abstract void startDocument(String encoding, Boolean standalone) Write <?xml declaration with encoding (if encoding not null) and standalone flag (if standalone not null) This method can only be called just after setOutput.","abstract XmlSerializer startTag(String namespace, String name) Writes a start tag with the given namespace and name.","abstract XmlSerializer text(String text) Writes text, where special XML chars are escaped automatically","abstract XmlSerializer text(char[] buf, int start, int len) Writes text, where special XML chars are escaped automatically"],"package":"org.xmlpull.v1","constants":[],"class":"XmlSerializer","constructors":[],"fields":[]}